#ifndef MECHANISM_CPP
#define MECHANISM_CPP

#include "mechanism.H"

const int rmap[665] =
     {8,15,40,41,62,69,85,86,97,113,134,152,153,164,226,241,242,
      258,265,275,276,277,278,306,348,408,21,212,0,1,2,3,4,5,6,7,9,
      10,11,12,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,
      32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,
      54,55,56,57,58,59,60,61,63,64,65,66,67,68,70,71,72,73,74,75,
      76,77,78,79,80,81,82,83,84,87,88,89,90,91,92,93,94,95,96,98,
      99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,
      115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,
      130,131,132,133,135,136,137,138,139,140,141,142,143,144,145,
      146,147,148,149,150,151,154,155,156,157,158,159,160,161,162,
      163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,
      179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
      194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,
      209,210,211,213,214,215,216,217,218,219,220,221,222,223,224,
      225,227,228,229,230,231,232,233,234,235,236,237,238,239,240,
      243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,
      259,260,261,262,263,264,266,267,268,269,270,271,272,273,274,
      279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,
      294,295,296,297,298,299,300,301,302,303,304,305,307,308,309,
      310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,
      325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,
      340,341,342,343,344,345,346,347,349,350,351,352,353,354,355,
      356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,
      371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,
      386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,
      401,402,403,404,405,406,407,409,410,411,412,413,414,415,416,
      417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,
      432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,
      447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,
      462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,
      477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,
      492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,
      507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,
      522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,
      537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,
      552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,
      567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,
      582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,
      597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,
      612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,
      627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,
      642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,
      657,658,659,660,661,662,663,664};

/*Returns 0-based map of reaction order */
void GET_RMAP(int * _rmap)
{
    for (int j=0; j<665; ++j) {
        _rmap[j] = rmap[j];
    }
}

/*Returns a count of species in a reaction, and their indices */
/*and stoichiometric coefficients. (Eq 50) */
void CKINU(int * i, int * nspec, int * ki, int * nu)
{
    const int ns[665] =
     {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,
      4,4,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,5,3,
      4,3,3,4,5,4,4,4,4,4,3,3,3,3,3,4,5,5,5,5,5,4,5,5,4,4,4,4,4,4,
      4,4,4,4,4,4,4,4,4,4,4,4,3,2,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
      4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,4,4,4,3,2,4,5,4,4,4,5,4,
      4,4,4,5,4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
      4,4,4,4,4,4,4,4,4,3,3,3,4,4,4,4,4,3,2,3,3,3,3,3,2,4,4,4,4,4,
      4,4,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,3,3,3,5,4,4,
      4,4,4,4,4,4,4,5,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
      4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
      4,4,4,4,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,4,4,4,3,3,3,4,4,4,4,4,
      4,4,4,4,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,
      4,3,4,4,4,3,4,4,5,3,3,4,3,2,4,3,3,3,3,2,3,3,3,3,3,3,3,4,4,4,
      4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,
      4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,
      3,3,4,4,4,4,3,3,3,3,4,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
      4,4,4,4,4,4,4,4,4,3,3,4,3,3,4,4,4,4,4,4,4,4,4,4,4,5,3,3,4,4,
      4,3,3,3,4,4,4,4,4,3,2,4,5,4,4,4,4,4,4,4,4,3,3,5,4,5,4,4,4,4,
      4,4,5,4,4,4,4,4,4,4,4,4,4,4,5,4,4,4,4,4,5,4,4,4,4,4,4,4,4,3,
      3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,4,4,4,4,4,4,5,5,5,5,5,5,5,
      4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,4,2,2,2,2,3,3,3,3,3,4,3,4,3,
      3,3,3,3,3,3,2,2,3,2,3,4,4,4,3,3,3,4,3,3,5,5,5,5,5,5,3,5,5,5,
      5,5,5,3,3};
    const int kiv[3325] =
     {0,9,24,0,0,28,13,13,0,0,47,0,43,0,0,35,1,43,0,0,90,43,0,0,0,
      43,0,86,0,0,82,106,13,0,0,82,86,0,0,0,106,0,102,0,0,106,9,98,
      0,0,109,0,106,0,0,10,106,106,0,0,14,0,10,0,0,18,0,14,0,0,109,
      35,44,0,0,21,0,18,0,0,18,25,1,0,0,25,0,21,0,0,29,0,25,0,0,68,
      86,106,0,0,68,14,13,0,0,68,18,17,0,0,68,32,1,0,0,107,36,106,
      0,0,26,106,90,0,0,106,14,80,0,0,35,5,39,0,0,36,106,35,0,0,0,
      9,5,13,0,5,1,0,13,0,13,1,0,17,0,5,17,13,13,0,1,0,0,0,0,9,5,5,
      0,0,13,5,0,0,0,17,0,13,0,0,24,0,1,9,0,24,0,13,13,0,24,5,13,9,
      0,24,13,17,9,0,28,9,24,24,0,28,9,24,24,0,28,0,17,13,0,28,0,1,
      24,0,28,5,13,24,0,28,13,17,24,0,28,13,17,24,0,35,9,39,5,0,35,
      13,39,0,0,35,24,39,13,0,47,0,35,0,0,47,9,35,24,0,47,0,35,1,0,
      47,5,35,13,0,47,5,39,0,0,47,13,35,17,0,47,106,102,35,0,47,24,
      43,9,0,47,24,39,0,13,55,47,9,0,0,43,55,47,51,0,51,63,13,0,0,
      63,0,39,0,0,43,35,47,47,0,47,47,1,35,35,43,13,47,17,0,43,0,
      47,1,0,43,5,47,13,0,43,106,47,102,0,43,24,47,28,0,78,43,13,0,
      0,78,59,0,0,0,59,35,17,0,0,59,39,1,0,0,59,47,13,0,0,59,9,63,
      24,0,59,13,17,39,0,59,13,17,35,13,59,0,1,39,0,59,0,1,35,13,
      59,106,102,35,13,59,24,63,28,0,59,24,28,35,13,59,5,35,13,13,
      59,47,43,63,0,90,9,43,24,0,43,90,82,47,0,102,90,106,82,0,90,
      106,43,102,0,90,0,43,1,0,90,24,43,28,0,86,9,43,24,0,86,9,43,
      24,0,86,0,43,1,0,86,24,43,28,0,86,47,43,43,0,86,90,43,82,0,
      86,43,82,47,0,13,86,17,43,0,5,86,13,43,0,43,82,86,86,0,86,24,
      78,13,0,75,43,24,0,0,75,71,0,0,0,71,24,67,9,0,67,78,13,0,0,
      82,0,90,1,0,82,0,86,1,0,82,5,86,13,0,82,13,90,17,0,82,13,86,
      17,0,82,9,86,24,0,82,24,86,28,0,82,106,86,102,0,90,82,86,82,
      0,82,43,90,90,0,102,0,106,1,0,102,13,106,17,0,102,5,106,13,0,
      102,24,106,28,0,102,109,106,106,0,106,13,43,1,0,106,13,112,
      17,0,106,13,90,0,0,106,13,86,0,0,106,13,109,17,0,106,24,90,
      13,0,106,24,102,9,0,106,5,43,0,0,106,9,90,5,0,106,9,43,13,0,
      98,43,94,47,0,102,98,106,94,0,82,98,86,94,0,98,106,90,90,0,
      98,24,94,9,0,98,98,43,82,9,98,98,9,90,90,98,0,90,13,0,98,5,
      90,9,0,98,13,82,9,0,94,90,13,0,0,112,109,0,0,0,112,102,106,
      106,0,112,9,35,13,0,112,1,106,0,0,112,0,109,0,0,112,0,6,1,0,
      112,5,35,0,0,112,13,43,0,0,112,39,43,35,0,109,9,35,17,0,109,
      9,47,13,0,109,9,39,0,0,109,9,43,5,0,109,9,39,1,0,109,5,35,0,
      0,109,0,6,1,0,109,13,6,17,0,6,9,47,5,0,2,13,35,0,0,2,9,35,5,
      0,6,0,2,1,0,6,5,35,0,0,6,13,47,0,0,109,0,6,1,0,6,17,0,43,0,6,
      39,47,35,0,10,0,14,1,0,10,5,14,13,0,10,13,14,17,0,10,9,14,24,
      0,10,106,14,102,0,10,24,14,28,0,10,98,14,94,0,10,90,14,82,0,
      10,6,14,109,0,112,10,106,14,0,1,98,0,94,0,1,91,0,87,0,14,9,
      72,5,0,14,21,18,18,0,106,14,102,18,0,14,0,106,106,0,14,0,18,
      1,0,14,5,32,0,0,14,24,72,13,0,98,14,90,72,0,72,9,32,24,0,72,
      106,43,0,0,72,32,0,0,0,91,14,9,0,0,91,43,87,47,0,102,91,106,
      87,0,82,91,86,87,0,91,24,87,9,0,10,91,14,87,0,87,72,13,0,0,
      91,95,0,0,0,91,18,24,0,0,95,99,13,0,0,95,18,24,0,0,91,72,5,0,
      0,99,106,47,0,0,99,32,0,0,0,99,13,103,17,0,99,0,103,1,0,99,
      24,103,28,0,99,98,103,94,0,99,91,103,87,0,99,106,103,102,0,
      99,90,103,82,0,103,36,0,0,0,103,40,0,0,0,32,106,47,0,0,32,0,
      36,1,0,32,5,36,13,0,32,13,36,17,0,32,9,36,24,0,32,106,36,102,
      0,32,24,36,28,0,98,32,94,36,0,32,60,36,56,0,32,13,106,59,0,
      32,13,40,17,0,36,0,44,1,0,36,5,44,13,0,36,106,44,102,0,60,36,
      9,0,0,60,24,56,9,0,28,60,24,56,0,102,60,106,56,0,43,60,47,56,
      0,10,60,14,56,0,56,64,13,0,0,64,106,39,0,0,40,44,0,0,0,40,9,
      43,35,13,44,0,106,35,0,44,0,48,1,0,44,5,109,39,0,44,5,48,13,
      0,44,13,48,17,0,44,13,86,35,0,112,44,18,35,0,48,13,47,47,0,0,
      48,112,35,0,48,5,0,35,35,48,9,39,47,0,48,6,35,0,0,6,43,0,44,
      0,6,48,35,25,0,18,0,21,1,0,18,5,106,47,0,18,5,40,0,0,18,13,
      21,17,0,18,106,21,102,0,18,9,21,24,0,18,90,21,82,0,18,98,21,
      94,0,18,91,21,87,0,18,60,21,56,0,18,98,99,90,0,18,91,99,72,0,
      18,24,99,13,0,6,102,18,0,0,112,106,18,0,0,21,9,25,24,0,21,9,
      43,47,0,21,9,40,5,0,106,21,102,25,0,21,0,25,1,0,21,13,25,17,
      0,25,9,48,13,0,5,25,29,13,0,25,5,109,35,0,25,5,48,0,0,25,13,
      29,17,0,25,13,44,0,0,25,13,106,35,0,13,25,0,52,0,0,52,0,44,0,
      68,9,76,24,0,68,9,79,24,0,68,13,76,17,0,68,13,79,17,0,68,13,
      72,17,0,68,0,76,1,0,68,0,79,1,0,68,0,72,1,0,68,24,76,28,0,68,
      24,79,28,0,68,24,72,28,0,68,98,76,94,0,68,98,79,94,0,68,98,
      72,94,0,68,5,76,13,0,68,5,79,13,0,68,5,72,13,0,68,106,76,102,
      0,68,106,79,102,0,68,106,72,102,0,68,14,76,10,0,68,14,79,10,
      0,76,18,13,0,0,79,32,0,0,0,83,76,9,0,0,83,13,43,43,0,79,9,32,
      24,0,107,13,110,17,0,107,0,110,1,0,107,5,110,13,0,107,106,
      110,102,0,107,90,110,82,0,107,9,110,24,0,107,24,110,28,0,107,
      98,110,94,0,110,44,106,0,0,113,110,9,0,0,107,113,110,3,0,43,
      113,47,3,0,24,113,3,9,0,3,7,13,0,0,7,36,43,0,0,11,21,47,0,0,
      11,0,15,1,0,11,5,15,13,0,11,13,15,17,0,11,9,15,24,0,11,24,15,
      28,0,11,106,15,102,0,11,21,15,18,0,11,90,15,82,0,11,98,15,94,
      0,15,21,35,0,0,19,14,47,0,0,19,0,22,1,0,19,5,22,13,0,19,13,
      22,17,0,19,106,22,102,0,19,24,22,28,0,19,90,22,82,0,19,98,22,
      94,0,19,14,22,10,0,19,72,22,68,0,19,91,22,87,0,19,9,22,24,0,
      19,60,22,56,0,19,21,22,18,0,22,14,35,0,0,26,13,30,17,0,26,0,
      30,1,0,26,5,30,13,0,26,24,30,28,0,26,98,30,94,0,26,106,30,
      102,0,26,9,30,24,0,26,90,30,82,0,26,33,30,41,0,26,55,30,51,0,
      26,63,30,59,0,30,43,106,0,0,30,90,26,43,0,30,43,26,47,0,30,
      32,26,36,0,33,30,9,0,0,33,43,41,47,0,33,32,41,36,0,33,33,9,
      45,45,41,45,13,0,0,45,90,43,0,0,45,9,65,24,0,45,65,0,0,0,33,
      37,0,0,0,37,13,43,43,0,49,37,9,0,0,49,53,13,0,0,53,57,13,0,0,
      57,43,63,0,0,57,61,0,0,0,61,78,35,0,0,61,86,39,0,0,65,73,0,0,
      0,65,69,0,0,0,65,82,35,0,0,65,90,47,0,0,65,106,63,0,0,65,9,
      69,24,0,65,9,73,24,0,65,13,69,17,0,65,13,73,17,0,65,24,69,28,
      0,65,24,73,28,0,65,5,69,13,0,65,5,73,13,0,65,0,69,1,0,65,0,
      73,1,0,65,106,69,102,0,65,106,73,102,0,65,90,69,82,0,65,90,
      73,82,0,65,98,69,94,0,65,98,73,94,0,65,47,69,43,0,65,47,73,
      43,0,73,69,0,0,0,69,106,39,0,0,69,90,35,0,0,73,43,47,0,0,80,
      88,0,0,0,80,84,0,0,0,80,9,84,24,0,80,9,88,24,0,0,80,1,84,0,0,
      80,1,88,0,80,5,84,13,0,80,5,88,13,0,80,13,88,17,0,80,13,84,
      17,0,80,24,84,28,0,80,24,88,28,0,106,80,102,84,0,106,80,102,
      88,0,84,80,88,80,0,21,80,18,84,0,21,80,18,88,0,14,80,10,84,0,
      14,80,10,88,0,80,96,88,92,0,80,96,84,92,0,80,90,88,82,0,80,
      90,84,82,0,98,80,94,88,0,98,80,94,84,0,91,80,87,88,0,91,80,
      87,84,0,46,80,38,88,0,46,80,38,84,0,50,80,42,88,0,50,80,42,
      84,0,80,60,84,56,0,80,60,88,56,0,80,55,88,51,0,80,55,84,51,0,
      84,0,92,0,0,84,0,14,106,0,84,9,92,24,0,84,13,92,17,0,84,5,
      107,0,0,84,5,32,106,0,88,106,18,0,0,88,0,92,0,0,88,9,92,24,0,
      19,88,22,80,0,19,84,22,80,0,19,96,22,92,0,92,21,106,0,0,92,
      96,0,0,0,92,100,0,0,0,92,104,0,0,0,92,5,14,47,0,92,5,44,106,
      0,92,5,97,0,0,92,5,96,13,0,92,5,100,13,0,92,5,104,13,0,92,13,
      96,17,0,92,13,100,17,0,92,13,104,17,0,92,24,96,28,0,92,24,
      100,28,0,92,24,104,28,0,92,0,96,1,0,92,0,100,1,0,92,0,104,1,
      0,92,0,18,106,0,92,9,96,24,0,92,9,100,24,0,92,9,104,24,0,92,
      106,96,102,0,92,106,100,102,0,92,106,104,102,0,92,14,96,10,0,
      92,60,96,56,0,92,98,96,94,0,92,24,62,13,0,92,91,96,87,0,92,
      46,96,38,0,92,50,96,42,0,89,92,13,0,0,93,89,9,0,0,93,32,43,
      13,0,96,25,106,0,0,96,111,0,0,0,96,24,8,13,0,96,98,8,90,0,96,
      0,111,1,0,96,106,111,102,0,96,14,10,111,0,96,14,18,92,0,96,
      21,18,111,0,111,92,96,96,0,96,9,111,24,0,96,9,40,43,0,96,9,
      11,13,0,96,9,25,43,13,100,25,106,0,0,100,108,0,0,0,100,9,32,
      47,0,100,0,111,1,0,100,106,111,102,0,104,25,106,0,0,104,111,
      0,0,0,104,108,0,0,0,104,9,111,24,0,104,9,110,5,0,104,9,43,36,
      0,104,0,108,1,0,104,106,108,102,0,111,114,0,0,0,111,108,0,0,
      0,111,9,114,24,0,111,24,44,109,13,111,13,44,106,0,111,13,114,
      17,0,111,5,18,35,0,111,5,25,43,0,111,0,114,1,0,111,106,114,
      102,0,111,96,114,92,0,111,29,114,25,0,108,114,0,0,0,108,29,
      106,0,0,108,9,48,13,109,108,9,114,24,0,108,24,18,35,13,108,
      13,114,17,0,108,13,44,106,0,108,5,44,109,0,108,5,21,47,0,108,
      5,18,35,0,108,5,48,106,0,108,5,48,109,0,108,5,114,13,0,108,0,
      114,1,0,108,106,114,102,0,108,29,114,25,0,108,21,114,18,0,
      108,96,114,92,0,114,5,43,29,0,114,13,4,17,0,114,9,44,47,0,
      114,106,14,29,0,4,9,47,48,0,111,24,18,35,13,111,24,114,28,0,
      25,106,108,0,0,25,106,111,0,0,114,0,4,1,0,4,13,25,47,0,4,9,
      48,35,0,97,13,14,39,0,97,13,79,35,0,97,0,14,35,0,97,5,32,35,
      0,88,24,54,13,0,84,24,58,13,0,98,88,90,54,0,98,84,90,58,0,46,
      88,9,0,0,50,84,9,0,0,46,43,38,47,0,46,32,38,36,0,50,43,42,47,
      0,50,32,42,36,0,46,24,38,9,0,50,24,42,9,0,18,46,21,38,0,18,
      50,21,42,0,82,46,86,38,0,82,50,86,42,0,11,46,15,38,0,11,50,
      15,42,0,102,46,106,38,0,102,50,106,42,0,46,98,54,90,9,50,98,
      58,90,9,1,46,0,38,0,1,50,0,42,0,50,10,42,14,0,46,10,38,14,0,
      50,19,42,22,0,46,19,38,22,0,50,60,58,64,9,46,60,54,64,9,50,
      91,58,72,9,46,91,54,72,9,50,50,9,58,58,46,46,9,54,54,50,46,
      58,54,9,50,106,58,90,0,50,14,58,72,0,50,84,58,58,0,50,88,58,
      54,0,50,96,58,8,0,46,106,54,90,0,46,14,54,72,0,46,84,54,58,0,
      46,88,54,54,0,46,96,54,8,0,38,54,13,0,0,42,58,13,0,0,54,14,
      43,0,0,54,19,0,0,0,58,106,32,0,0,58,107,0,0,0,58,9,107,24,0,
      46,12,0,0,0,46,16,0,0,0,50,20,0,0,0,50,34,0,0,0,12,62,13,0,0,
      16,66,13,0,0,20,62,13,0,0,12,92,24,0,0,20,92,24,0,0,16,13,43,
      18,0,20,105,106,0,0,12,18,43,13,0,34,107,13,0,0,23,12,9,0,0,
      27,16,9,0,0,31,20,9,0,0,23,70,13,0,0,27,74,13,0,0,31,77,13,0,
      0,31,81,0,0,0,23,81,0,0,0,81,101,24,0,0,85,27,0,0,0,85,101,
      24,0,0,70,32,47,13,0,74,43,40,13,0,77,43,36,13,0,101,8,13,0,
      0,8,11,0,0,0,8,21,43,0,0,8,9,11,24,0,105,40,13,0,0,62,18,43,
      0,0,62,13,43,21,17,62,0,43,21,1,62,5,43,21,13,62,24,43,21,28,
      62,98,43,21,94,62,106,43,21,102,66,18,43,0,0,66,13,43,21,17,
      66,5,43,21,13,66,0,43,21,1,66,98,43,21,94,66,24,43,21,28,66,
      106,43,21,102,50,92,24,0,0,46,92,24,0,0};
    const int nuv[3325] =
     {-1,-1,1,0,0,-1,1,1,0,0,-1,-1,1,0,0,-1,-1,1,0,0,-1,1,1,0,0,-1,
      -1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,0,0,-1,-1,1,0,0,-1,-1,
      1,0,0,-1,1,1,0,0,-1,-1,1,0,0,-1,-1,1,0,0,-1,-1,1,0,0,-1,-1,1,
      0,0,-1,1,1,0,0,-1,-1,1,0,0,-1,-1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,
      -1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,0,0,-1,
      -1,1,0,0,-1,1,1,0,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,
      -1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,1,-1,1,1,0,0,-1,-1,1,1,0,-1,1,1,0,0,
      -1,1,1,0,0,-1,-1,1,1,0,-1,-1,1,1,1,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,
      1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,1,0,-1,-1,1,1,1,-1,-1,
      1,1,1,-1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,1,0,-1,-1,
      1,1,1,-1,-1,1,1,1,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,
      0,0,-1,1,0,0,0,-1,-1,1,1,0,-1,1,1,0,0,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,1,-1,-1,1,1,
      1,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,1,0,0,0,
      -1,-1,1,1,0,-1,-1,1,1,1,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,1,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,1,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,1,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,1,0,-1,
      -1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,1,
      0,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,
      -1,1,0,0,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,0,0,0,-1,1,0,0,0,-1,
      1,1,0,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,
      -1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,
      -1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,
      -1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,
      1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,1,1,-1,-1,1,1,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,1,-1,-1,1,1,0,-1,1,1,
      0,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,
      0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,1,0,-1,
      -1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,1,1,
      0,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,1,1,0,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,1,-1,1,1,0,0,-1,1,1,0,0,-1,
      -1,1,1,0,-1,1,1,0,0,-1,1,0,0,0,-1,1,1,1,0,-1,1,1,0,0,-1,1,1,
      0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,0,0,0,-1,1,1,0,0,-1,1,1,0,0,
      -1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,0,0,0,-1,1,1,0,0,-1,1,1,0,
      0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,1,1,0,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,1,0,-1,
      -1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,
      1,0,0,-1,1,1,0,0,-1,-1,1,1,0,-1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,
      1,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,1,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,1,0,-1,
      -1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,
      1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,
      0,0,-1,1,0,0,0,-1,-1,1,1,0,-1,-1,1,1,1,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,
      0,-1,-1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,1,1,-1,-1,1,1,0,
      -1,-1,1,1,1,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,1,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,1,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,1,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,1,1,0,0,
      -1,1,1,0,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,1,-1,-1,1,1,1,
      -1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,1,1,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,-1,-1,1,1,0,
      -1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,
      1,0,0,-1,-1,1,1,0,-1,1,0,0,0,-1,1,0,0,0,-1,1,0,0,0,-1,1,0,0,
      0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,
      1,1,1,0,-1,1,1,0,0,-1,1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,
      0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,0,0,0,-1,
      1,0,0,0,-1,1,1,0,0,-1,1,0,0,0,-1,1,1,0,0,-1,1,1,1,0,-1,1,1,1,
      0,-1,1,1,1,0,-1,1,1,0,0,-1,1,1,0,0,-1,1,1,0,0,-1,-1,1,1,0,-1,
      1,1,0,0,-1,1,1,0,0,-1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,1,1,-1,-1,
      1,1,1,-1,-1,1,1,1,-1,-1,1,1,1,-1,1,1,0,0,-1,-1,1,1,1,-1,-1,1,
      1,1,-1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,1,1,-1,1,1,0,
      0,-1,1,1,0,0};
    if (*i < 1) {
        /*Return max num species per reaction */
        *nspec = 5;
    } else {
        if (*i > 665) {
            *nspec = -1;
        } else {
            *nspec = ns[*i-1];
            for (int j=0; j<*nspec; ++j) {
                ki[j] = kiv[(*i-1)*5 + j] + 1;
                nu[j] = nuv[(*i-1)*5 + j];
            }
        }
    }
}


/*save atomic weights into array */
void atomicWeight(amrex::Real *  awt)
{
    awt[0] = 12.011150; /*C */
    awt[1] = 1.007970; /*H */
    awt[2] = 14.006700; /*N */
    awt[3] = 15.999400; /*O */
    awt[4] = 39.948000; /*AR */
    awt[5] = 4.002600; /*HE */
}



/*get atomic weight for all elements */
void CKAWT( amrex::Real *  awt)
{
    atomicWeight(awt);
}



/*Returns the elemental composition  */
/*of the speciesi (mdim is num of elements) */
void CKNCF(int * ncf)
{
    int id; /*loop counter */
    int kd = 6; 
    /*Zero ncf */
    for (id = 0; id < kd * 118; ++ id) {
         ncf[id] = 0; 
    }

    /*H */
    ncf[ 0 * kd + 1 ] = 1; /*H */

    /*H2 */
    ncf[ 1 * kd + 1 ] = 2; /*H */

    /*C */
    ncf[ 2 * kd + 0 ] = 1; /*C */

    /*CH3COCH2O2H */
    ncf[ 3 * kd + 0 ] = 3; /*C */
    ncf[ 3 * kd + 1 ] = 6; /*H */
    ncf[ 3 * kd + 3 ] = 3; /*O */

    /*C3H2 */
    ncf[ 4 * kd + 1 ] = 2; /*H */
    ncf[ 4 * kd + 0 ] = 3; /*C */

    /*O */
    ncf[ 5 * kd + 3 ] = 1; /*O */

    /*CH */
    ncf[ 6 * kd + 0 ] = 1; /*C */
    ncf[ 6 * kd + 1 ] = 1; /*H */

    /*CH3COCH2O */
    ncf[ 7 * kd + 0 ] = 3; /*C */
    ncf[ 7 * kd + 1 ] = 5; /*H */
    ncf[ 7 * kd + 3 ] = 2; /*O */

    /*C3H5O */
    ncf[ 8 * kd + 0 ] = 3; /*C */
    ncf[ 8 * kd + 1 ] = 5; /*H */
    ncf[ 8 * kd + 3 ] = 1; /*O */

    /*O2 */
    ncf[ 9 * kd + 3 ] = 2; /*O */

    /*C2H6 */
    ncf[ 10 * kd + 0 ] = 2; /*C */
    ncf[ 10 * kd + 1 ] = 6; /*H */

    /*C2H3CHO */
    ncf[ 11 * kd + 0 ] = 3; /*C */
    ncf[ 11 * kd + 1 ] = 4; /*H */
    ncf[ 11 * kd + 3 ] = 1; /*O */

    /*C3H6OOH1-2 */
    ncf[ 12 * kd + 0 ] = 3; /*C */
    ncf[ 12 * kd + 1 ] = 7; /*H */
    ncf[ 12 * kd + 3 ] = 2; /*O */

    /*OH */
    ncf[ 13 * kd + 1 ] = 1; /*H */
    ncf[ 13 * kd + 3 ] = 1; /*O */

    /*C2H5 */
    ncf[ 14 * kd + 0 ] = 2; /*C */
    ncf[ 14 * kd + 1 ] = 5; /*H */

    /*C2H3CO */
    ncf[ 15 * kd + 0 ] = 3; /*C */
    ncf[ 15 * kd + 1 ] = 3; /*H */
    ncf[ 15 * kd + 3 ] = 1; /*O */

    /*C3H6OOH1-3 */
    ncf[ 16 * kd + 0 ] = 3; /*C */
    ncf[ 16 * kd + 1 ] = 7; /*H */
    ncf[ 16 * kd + 3 ] = 2; /*O */

    /*H2O */
    ncf[ 17 * kd + 1 ] = 2; /*H */
    ncf[ 17 * kd + 3 ] = 1; /*O */

    /*C2H4 */
    ncf[ 18 * kd + 0 ] = 2; /*C */
    ncf[ 18 * kd + 1 ] = 4; /*H */

    /*C2H5CHO */
    ncf[ 19 * kd + 0 ] = 3; /*C */
    ncf[ 19 * kd + 1 ] = 6; /*H */
    ncf[ 19 * kd + 3 ] = 1; /*O */

    /*C3H6OOH2-1 */
    ncf[ 20 * kd + 0 ] = 3; /*C */
    ncf[ 20 * kd + 1 ] = 7; /*H */
    ncf[ 20 * kd + 3 ] = 2; /*O */

    /*C2H3 */
    ncf[ 21 * kd + 0 ] = 2; /*C */
    ncf[ 21 * kd + 1 ] = 3; /*H */

    /*C2H5CO */
    ncf[ 22 * kd + 0 ] = 3; /*C */
    ncf[ 22 * kd + 1 ] = 5; /*H */
    ncf[ 22 * kd + 3 ] = 1; /*O */

    /*C3H6OOH1-2O2 */
    ncf[ 23 * kd + 0 ] = 3; /*C */
    ncf[ 23 * kd + 1 ] = 7; /*H */
    ncf[ 23 * kd + 3 ] = 4; /*O */

    /*HO2 */
    ncf[ 24 * kd + 1 ] = 1; /*H */
    ncf[ 24 * kd + 3 ] = 2; /*O */

    /*C2H2 */
    ncf[ 25 * kd + 0 ] = 2; /*C */
    ncf[ 25 * kd + 1 ] = 2; /*H */

    /*CH3OCH3 */
    ncf[ 26 * kd + 0 ] = 2; /*C */
    ncf[ 26 * kd + 1 ] = 6; /*H */
    ncf[ 26 * kd + 3 ] = 1; /*O */

    /*C3H6OOH1-3O2 */
    ncf[ 27 * kd + 0 ] = 3; /*C */
    ncf[ 27 * kd + 1 ] = 7; /*H */
    ncf[ 27 * kd + 3 ] = 4; /*O */

    /*H2O2 */
    ncf[ 28 * kd + 1 ] = 2; /*H */
    ncf[ 28 * kd + 3 ] = 2; /*O */

    /*C2H */
    ncf[ 29 * kd + 0 ] = 2; /*C */
    ncf[ 29 * kd + 1 ] = 1; /*H */

    /*CH3OCH2 */
    ncf[ 30 * kd + 0 ] = 2; /*C */
    ncf[ 30 * kd + 1 ] = 5; /*H */
    ncf[ 30 * kd + 3 ] = 1; /*O */

    /*C3H6OOH2-1O2 */
    ncf[ 31 * kd + 0 ] = 3; /*C */
    ncf[ 31 * kd + 1 ] = 7; /*H */
    ncf[ 31 * kd + 3 ] = 4; /*O */

    /*CH3CHO */
    ncf[ 32 * kd + 0 ] = 2; /*C */
    ncf[ 32 * kd + 3 ] = 1; /*O */
    ncf[ 32 * kd + 1 ] = 4; /*H */

    /*CH3OCH2O2 */
    ncf[ 33 * kd + 0 ] = 2; /*C */
    ncf[ 33 * kd + 1 ] = 5; /*H */
    ncf[ 33 * kd + 3 ] = 3; /*O */

    /*C3H6OOH2-2 */
    ncf[ 34 * kd + 0 ] = 3; /*C */
    ncf[ 34 * kd + 1 ] = 7; /*H */
    ncf[ 34 * kd + 3 ] = 2; /*O */

    /*CO */
    ncf[ 35 * kd + 0 ] = 1; /*C */
    ncf[ 35 * kd + 3 ] = 1; /*O */

    /*CH3CO */
    ncf[ 36 * kd + 0 ] = 2; /*C */
    ncf[ 36 * kd + 1 ] = 3; /*H */
    ncf[ 36 * kd + 3 ] = 1; /*O */

    /*CH2OCH2O2H */
    ncf[ 37 * kd + 0 ] = 2; /*C */
    ncf[ 37 * kd + 1 ] = 5; /*H */
    ncf[ 37 * kd + 3 ] = 3; /*O */

    /*NC3H7O2H */
    ncf[ 38 * kd + 0 ] = 3; /*C */
    ncf[ 38 * kd + 1 ] = 8; /*H */
    ncf[ 38 * kd + 3 ] = 2; /*O */

    /*CO2 */
    ncf[ 39 * kd + 0 ] = 1; /*C */
    ncf[ 39 * kd + 3 ] = 2; /*O */

    /*CH2CHO */
    ncf[ 40 * kd + 3 ] = 1; /*O */
    ncf[ 40 * kd + 1 ] = 3; /*H */
    ncf[ 40 * kd + 0 ] = 2; /*C */

    /*CH3OCH2O2H */
    ncf[ 41 * kd + 0 ] = 2; /*C */
    ncf[ 41 * kd + 1 ] = 6; /*H */
    ncf[ 41 * kd + 3 ] = 3; /*O */

    /*IC3H7O2H */
    ncf[ 42 * kd + 0 ] = 3; /*C */
    ncf[ 42 * kd + 1 ] = 8; /*H */
    ncf[ 42 * kd + 3 ] = 2; /*O */

    /*CH2O */
    ncf[ 43 * kd + 0 ] = 1; /*C */
    ncf[ 43 * kd + 1 ] = 2; /*H */
    ncf[ 43 * kd + 3 ] = 1; /*O */

    /*CH2CO */
    ncf[ 44 * kd + 0 ] = 2; /*C */
    ncf[ 44 * kd + 1 ] = 2; /*H */
    ncf[ 44 * kd + 3 ] = 1; /*O */

    /*CH3OCH2O */
    ncf[ 45 * kd + 0 ] = 2; /*C */
    ncf[ 45 * kd + 1 ] = 5; /*H */
    ncf[ 45 * kd + 3 ] = 2; /*O */

    /*NC3H7O2 */
    ncf[ 46 * kd + 0 ] = 3; /*C */
    ncf[ 46 * kd + 1 ] = 7; /*H */
    ncf[ 46 * kd + 3 ] = 2; /*O */

    /*HCO */
    ncf[ 47 * kd + 1 ] = 1; /*H */
    ncf[ 47 * kd + 0 ] = 1; /*C */
    ncf[ 47 * kd + 3 ] = 1; /*O */

    /*HCCO */
    ncf[ 48 * kd + 1 ] = 1; /*H */
    ncf[ 48 * kd + 0 ] = 2; /*C */
    ncf[ 48 * kd + 3 ] = 1; /*O */

    /*O2CH2OCH2O2H */
    ncf[ 49 * kd + 0 ] = 2; /*C */
    ncf[ 49 * kd + 1 ] = 5; /*H */
    ncf[ 49 * kd + 3 ] = 5; /*O */

    /*IC3H7O2 */
    ncf[ 50 * kd + 0 ] = 3; /*C */
    ncf[ 50 * kd + 1 ] = 7; /*H */
    ncf[ 50 * kd + 3 ] = 2; /*O */

    /*HO2CHO */
    ncf[ 51 * kd + 0 ] = 1; /*C */
    ncf[ 51 * kd + 1 ] = 2; /*H */
    ncf[ 51 * kd + 3 ] = 3; /*O */

    /*HCCOH */
    ncf[ 52 * kd + 1 ] = 2; /*H */
    ncf[ 52 * kd + 0 ] = 2; /*C */
    ncf[ 52 * kd + 3 ] = 1; /*O */

    /*HO2CH2OCHO */
    ncf[ 53 * kd + 0 ] = 2; /*C */
    ncf[ 53 * kd + 1 ] = 4; /*H */
    ncf[ 53 * kd + 3 ] = 4; /*O */

    /*NC3H7O */
    ncf[ 54 * kd + 0 ] = 3; /*C */
    ncf[ 54 * kd + 1 ] = 7; /*H */
    ncf[ 54 * kd + 3 ] = 1; /*O */

    /*O2CHO */
    ncf[ 55 * kd + 0 ] = 1; /*C */
    ncf[ 55 * kd + 1 ] = 1; /*H */
    ncf[ 55 * kd + 3 ] = 3; /*O */

    /*CH3CO3H */
    ncf[ 56 * kd + 0 ] = 2; /*C */
    ncf[ 56 * kd + 1 ] = 4; /*H */
    ncf[ 56 * kd + 3 ] = 3; /*O */

    /*OCH2OCHO */
    ncf[ 57 * kd + 0 ] = 2; /*C */
    ncf[ 57 * kd + 1 ] = 3; /*H */
    ncf[ 57 * kd + 3 ] = 3; /*O */

    /*IC3H7O */
    ncf[ 58 * kd + 0 ] = 3; /*C */
    ncf[ 58 * kd + 1 ] = 7; /*H */
    ncf[ 58 * kd + 3 ] = 1; /*O */

    /*HOCHO */
    ncf[ 59 * kd + 0 ] = 1; /*C */
    ncf[ 59 * kd + 1 ] = 2; /*H */
    ncf[ 59 * kd + 3 ] = 2; /*O */

    /*CH3CO3 */
    ncf[ 60 * kd + 0 ] = 2; /*C */
    ncf[ 60 * kd + 1 ] = 3; /*H */
    ncf[ 60 * kd + 3 ] = 3; /*O */

    /*HOCH2OCO */
    ncf[ 61 * kd + 0 ] = 2; /*C */
    ncf[ 61 * kd + 1 ] = 3; /*H */
    ncf[ 61 * kd + 3 ] = 3; /*O */

    /*C3H6O1-2 */
    ncf[ 62 * kd + 0 ] = 3; /*C */
    ncf[ 62 * kd + 1 ] = 6; /*H */
    ncf[ 62 * kd + 3 ] = 1; /*O */

    /*OCHO */
    ncf[ 63 * kd + 0 ] = 1; /*C */
    ncf[ 63 * kd + 1 ] = 1; /*H */
    ncf[ 63 * kd + 3 ] = 2; /*O */

    /*CH3CO2 */
    ncf[ 64 * kd + 0 ] = 2; /*C */
    ncf[ 64 * kd + 1 ] = 3; /*H */
    ncf[ 64 * kd + 3 ] = 2; /*O */

    /*CH3OCHO */
    ncf[ 65 * kd + 0 ] = 2; /*C */
    ncf[ 65 * kd + 1 ] = 4; /*H */
    ncf[ 65 * kd + 3 ] = 2; /*O */

    /*C3H6O1-3 */
    ncf[ 66 * kd + 0 ] = 3; /*C */
    ncf[ 66 * kd + 1 ] = 6; /*H */
    ncf[ 66 * kd + 3 ] = 1; /*O */

    /*HOCH2O2H */
    ncf[ 67 * kd + 0 ] = 1; /*C */
    ncf[ 67 * kd + 1 ] = 4; /*H */
    ncf[ 67 * kd + 3 ] = 3; /*O */

    /*C2H5OH */
    ncf[ 68 * kd + 0 ] = 2; /*C */
    ncf[ 68 * kd + 1 ] = 6; /*H */
    ncf[ 68 * kd + 3 ] = 1; /*O */

    /*CH3OCO */
    ncf[ 69 * kd + 0 ] = 2; /*C */
    ncf[ 69 * kd + 1 ] = 3; /*H */
    ncf[ 69 * kd + 3 ] = 2; /*O */

    /*C3KET12 */
    ncf[ 70 * kd + 0 ] = 3; /*C */
    ncf[ 70 * kd + 1 ] = 6; /*H */
    ncf[ 70 * kd + 3 ] = 3; /*O */

    /*HOCH2O2 */
    ncf[ 71 * kd + 0 ] = 1; /*C */
    ncf[ 71 * kd + 1 ] = 3; /*H */
    ncf[ 71 * kd + 3 ] = 3; /*O */

    /*C2H5O */
    ncf[ 72 * kd + 0 ] = 2; /*C */
    ncf[ 72 * kd + 1 ] = 5; /*H */
    ncf[ 72 * kd + 3 ] = 1; /*O */

    /*CH2OCHO */
    ncf[ 73 * kd + 0 ] = 2; /*C */
    ncf[ 73 * kd + 1 ] = 3; /*H */
    ncf[ 73 * kd + 3 ] = 2; /*O */

    /*C3KET13 */
    ncf[ 74 * kd + 0 ] = 3; /*C */
    ncf[ 74 * kd + 1 ] = 6; /*H */
    ncf[ 74 * kd + 3 ] = 3; /*O */

    /*OCH2O2H */
    ncf[ 75 * kd + 0 ] = 1; /*C */
    ncf[ 75 * kd + 1 ] = 3; /*H */
    ncf[ 75 * kd + 3 ] = 3; /*O */

    /*PC2H4OH */
    ncf[ 76 * kd + 0 ] = 2; /*C */
    ncf[ 76 * kd + 1 ] = 5; /*H */
    ncf[ 76 * kd + 3 ] = 1; /*O */

    /*C3KET21 */
    ncf[ 77 * kd + 0 ] = 3; /*C */
    ncf[ 77 * kd + 1 ] = 6; /*H */
    ncf[ 77 * kd + 3 ] = 3; /*O */

    /*HOCH2O */
    ncf[ 78 * kd + 0 ] = 1; /*C */
    ncf[ 78 * kd + 1 ] = 3; /*H */
    ncf[ 78 * kd + 3 ] = 2; /*O */

    /*SC2H4OH */
    ncf[ 79 * kd + 0 ] = 2; /*C */
    ncf[ 79 * kd + 1 ] = 5; /*H */
    ncf[ 79 * kd + 3 ] = 1; /*O */

    /*C3H8 */
    ncf[ 80 * kd + 0 ] = 3; /*C */
    ncf[ 80 * kd + 1 ] = 8; /*H */

    /*C3H51-23OOH */
    ncf[ 81 * kd + 0 ] = 3; /*C */
    ncf[ 81 * kd + 1 ] = 7; /*H */
    ncf[ 81 * kd + 3 ] = 4; /*O */

    /*CH3OH */
    ncf[ 82 * kd + 0 ] = 1; /*C */
    ncf[ 82 * kd + 1 ] = 4; /*H */
    ncf[ 82 * kd + 3 ] = 1; /*O */

    /*O2C2H4OH */
    ncf[ 83 * kd + 0 ] = 2; /*C */
    ncf[ 83 * kd + 1 ] = 5; /*H */
    ncf[ 83 * kd + 3 ] = 3; /*O */

    /*IC3H7 */
    ncf[ 84 * kd + 0 ] = 3; /*C */
    ncf[ 84 * kd + 1 ] = 7; /*H */

    /*C3H52-13OOH */
    ncf[ 85 * kd + 0 ] = 3; /*C */
    ncf[ 85 * kd + 1 ] = 7; /*H */
    ncf[ 85 * kd + 3 ] = 4; /*O */

    /*CH2OH */
    ncf[ 86 * kd + 1 ] = 3; /*H */
    ncf[ 86 * kd + 0 ] = 1; /*C */
    ncf[ 86 * kd + 3 ] = 1; /*O */

    /*C2H5O2H */
    ncf[ 87 * kd + 0 ] = 2; /*C */
    ncf[ 87 * kd + 1 ] = 6; /*H */
    ncf[ 87 * kd + 3 ] = 2; /*O */

    /*NC3H7 */
    ncf[ 88 * kd + 0 ] = 3; /*C */
    ncf[ 88 * kd + 1 ] = 7; /*H */

    /*C3H6OH */
    ncf[ 89 * kd + 0 ] = 3; /*C */
    ncf[ 89 * kd + 1 ] = 7; /*H */
    ncf[ 89 * kd + 3 ] = 1; /*O */

    /*CH3O */
    ncf[ 90 * kd + 0 ] = 1; /*C */
    ncf[ 90 * kd + 1 ] = 3; /*H */
    ncf[ 90 * kd + 3 ] = 1; /*O */

    /*C2H5O2 */
    ncf[ 91 * kd + 0 ] = 2; /*C */
    ncf[ 91 * kd + 1 ] = 5; /*H */
    ncf[ 91 * kd + 3 ] = 2; /*O */

    /*C3H6 */
    ncf[ 92 * kd + 0 ] = 3; /*C */
    ncf[ 92 * kd + 1 ] = 6; /*H */

    /*HOC3H6O2 */
    ncf[ 93 * kd + 0 ] = 3; /*C */
    ncf[ 93 * kd + 1 ] = 7; /*H */
    ncf[ 93 * kd + 3 ] = 3; /*O */

    /*CH3O2H */
    ncf[ 94 * kd + 0 ] = 1; /*C */
    ncf[ 94 * kd + 1 ] = 4; /*H */
    ncf[ 94 * kd + 3 ] = 2; /*O */

    /*C2H4O2H */
    ncf[ 95 * kd + 0 ] = 2; /*C */
    ncf[ 95 * kd + 1 ] = 5; /*H */
    ncf[ 95 * kd + 3 ] = 2; /*O */

    /*C3H5-A */
    ncf[ 96 * kd + 0 ] = 3; /*C */
    ncf[ 96 * kd + 1 ] = 5; /*H */

    /*CH3CHCO */
    ncf[ 97 * kd + 0 ] = 3; /*C */
    ncf[ 97 * kd + 1 ] = 4; /*H */
    ncf[ 97 * kd + 3 ] = 1; /*O */

    /*CH3O2 */
    ncf[ 98 * kd + 0 ] = 1; /*C */
    ncf[ 98 * kd + 1 ] = 3; /*H */
    ncf[ 98 * kd + 3 ] = 2; /*O */

    /*C2H4O1-2 */
    ncf[ 99 * kd + 0 ] = 2; /*C */
    ncf[ 99 * kd + 1 ] = 4; /*H */
    ncf[ 99 * kd + 3 ] = 1; /*O */

    /*C3H5-S */
    ncf[ 100 * kd + 0 ] = 3; /*C */
    ncf[ 100 * kd + 1 ] = 5; /*H */

    /*AC3H5OOH */
    ncf[ 101 * kd + 0 ] = 3; /*C */
    ncf[ 101 * kd + 1 ] = 6; /*H */
    ncf[ 101 * kd + 3 ] = 2; /*O */

    /*CH4 */
    ncf[ 102 * kd + 0 ] = 1; /*C */
    ncf[ 102 * kd + 1 ] = 4; /*H */

    /*C2H3O1-2 */
    ncf[ 103 * kd + 0 ] = 2; /*C */
    ncf[ 103 * kd + 1 ] = 3; /*H */
    ncf[ 103 * kd + 3 ] = 1; /*O */

    /*C3H5-T */
    ncf[ 104 * kd + 0 ] = 3; /*C */
    ncf[ 104 * kd + 1 ] = 5; /*H */

    /*C2H3OOH */
    ncf[ 105 * kd + 0 ] = 2; /*C */
    ncf[ 105 * kd + 1 ] = 4; /*H */
    ncf[ 105 * kd + 3 ] = 2; /*O */

    /*CH3 */
    ncf[ 106 * kd + 0 ] = 1; /*C */
    ncf[ 106 * kd + 1 ] = 3; /*H */

    /*CH3COCH3 */
    ncf[ 107 * kd + 0 ] = 3; /*C */
    ncf[ 107 * kd + 1 ] = 6; /*H */
    ncf[ 107 * kd + 3 ] = 1; /*O */

    /*C3H4-P */
    ncf[ 108 * kd + 1 ] = 4; /*H */
    ncf[ 108 * kd + 0 ] = 3; /*C */

    /*CH2 */
    ncf[ 109 * kd + 0 ] = 1; /*C */
    ncf[ 109 * kd + 1 ] = 2; /*H */

    /*CH3COCH2 */
    ncf[ 110 * kd + 0 ] = 3; /*C */
    ncf[ 110 * kd + 1 ] = 5; /*H */
    ncf[ 110 * kd + 3 ] = 1; /*O */

    /*C3H4-A */
    ncf[ 111 * kd + 1 ] = 4; /*H */
    ncf[ 111 * kd + 0 ] = 3; /*C */

    /*CH2(S) */
    ncf[ 112 * kd + 0 ] = 1; /*C */
    ncf[ 112 * kd + 1 ] = 2; /*H */

    /*CH3COCH2O2 */
    ncf[ 113 * kd + 0 ] = 3; /*C */
    ncf[ 113 * kd + 1 ] = 5; /*H */
    ncf[ 113 * kd + 3 ] = 3; /*O */

    /*C3H3 */
    ncf[ 114 * kd + 0 ] = 3; /*C */
    ncf[ 114 * kd + 1 ] = 3; /*H */

    /*HE */
    ncf[ 115 * kd + 5 ] = 1; /*HE */

    /*AR */
    ncf[ 116 * kd + 4 ] = 1; /*AR */

    /*N2 */
    ncf[ 117 * kd + 2 ] = 2; /*N */

}


/* Returns the vector of strings of element names */
void CKSYME_STR(amrex::Vector<std::string>& ename)
{
    ename.resize(6);
    ename[0] = "C";
    ename[1] = "H";
    ename[2] = "N";
    ename[3] = "O";
    ename[4] = "AR";
    ename[5] = "HE";
}


/* Returns the vector of strings of species names */
void CKSYMS_STR(amrex::Vector<std::string>& kname)
{
    kname.resize(118);
    kname[0] = "H";
    kname[1] = "H2";
    kname[2] = "C";
    kname[3] = "CH3COCH2O2H";
    kname[4] = "C3H2";
    kname[5] = "O";
    kname[6] = "CH";
    kname[7] = "CH3COCH2O";
    kname[8] = "C3H5O";
    kname[9] = "O2";
    kname[10] = "C2H6";
    kname[11] = "C2H3CHO";
    kname[12] = "C3H6OOH1-2";
    kname[13] = "OH";
    kname[14] = "C2H5";
    kname[15] = "C2H3CO";
    kname[16] = "C3H6OOH1-3";
    kname[17] = "H2O";
    kname[18] = "C2H4";
    kname[19] = "C2H5CHO";
    kname[20] = "C3H6OOH2-1";
    kname[21] = "C2H3";
    kname[22] = "C2H5CO";
    kname[23] = "C3H6OOH1-2O2";
    kname[24] = "HO2";
    kname[25] = "C2H2";
    kname[26] = "CH3OCH3";
    kname[27] = "C3H6OOH1-3O2";
    kname[28] = "H2O2";
    kname[29] = "C2H";
    kname[30] = "CH3OCH2";
    kname[31] = "C3H6OOH2-1O2";
    kname[32] = "CH3CHO";
    kname[33] = "CH3OCH2O2";
    kname[34] = "C3H6OOH2-2";
    kname[35] = "CO";
    kname[36] = "CH3CO";
    kname[37] = "CH2OCH2O2H";
    kname[38] = "NC3H7O2H";
    kname[39] = "CO2";
    kname[40] = "CH2CHO";
    kname[41] = "CH3OCH2O2H";
    kname[42] = "IC3H7O2H";
    kname[43] = "CH2O";
    kname[44] = "CH2CO";
    kname[45] = "CH3OCH2O";
    kname[46] = "NC3H7O2";
    kname[47] = "HCO";
    kname[48] = "HCCO";
    kname[49] = "O2CH2OCH2O2H";
    kname[50] = "IC3H7O2";
    kname[51] = "HO2CHO";
    kname[52] = "HCCOH";
    kname[53] = "HO2CH2OCHO";
    kname[54] = "NC3H7O";
    kname[55] = "O2CHO";
    kname[56] = "CH3CO3H";
    kname[57] = "OCH2OCHO";
    kname[58] = "IC3H7O";
    kname[59] = "HOCHO";
    kname[60] = "CH3CO3";
    kname[61] = "HOCH2OCO";
    kname[62] = "C3H6O1-2";
    kname[63] = "OCHO";
    kname[64] = "CH3CO2";
    kname[65] = "CH3OCHO";
    kname[66] = "C3H6O1-3";
    kname[67] = "HOCH2O2H";
    kname[68] = "C2H5OH";
    kname[69] = "CH3OCO";
    kname[70] = "C3KET12";
    kname[71] = "HOCH2O2";
    kname[72] = "C2H5O";
    kname[73] = "CH2OCHO";
    kname[74] = "C3KET13";
    kname[75] = "OCH2O2H";
    kname[76] = "PC2H4OH";
    kname[77] = "C3KET21";
    kname[78] = "HOCH2O";
    kname[79] = "SC2H4OH";
    kname[80] = "C3H8";
    kname[81] = "C3H51-23OOH";
    kname[82] = "CH3OH";
    kname[83] = "O2C2H4OH";
    kname[84] = "IC3H7";
    kname[85] = "C3H52-13OOH";
    kname[86] = "CH2OH";
    kname[87] = "C2H5O2H";
    kname[88] = "NC3H7";
    kname[89] = "C3H6OH";
    kname[90] = "CH3O";
    kname[91] = "C2H5O2";
    kname[92] = "C3H6";
    kname[93] = "HOC3H6O2";
    kname[94] = "CH3O2H";
    kname[95] = "C2H4O2H";
    kname[96] = "C3H5-A";
    kname[97] = "CH3CHCO";
    kname[98] = "CH3O2";
    kname[99] = "C2H4O1-2";
    kname[100] = "C3H5-S";
    kname[101] = "AC3H5OOH";
    kname[102] = "CH4";
    kname[103] = "C2H3O1-2";
    kname[104] = "C3H5-T";
    kname[105] = "C2H3OOH";
    kname[106] = "CH3";
    kname[107] = "CH3COCH3";
    kname[108] = "C3H4-P";
    kname[109] = "CH2";
    kname[110] = "CH3COCH2";
    kname[111] = "C3H4-A";
    kname[112] = "CH2(S)";
    kname[113] = "CH3COCH2O2";
    kname[114] = "C3H3";
    kname[115] = "HE";
    kname[116] = "AR";
    kname[117] = "N2";
}

/*compute the sparsity pattern of the chemistry Jacobian */
void SPARSITY_INFO( int * nJdata, const int * consP, int NCELLS)
{
    amrex::GpuArray<amrex::Real,14161> Jac = {0.0};
    amrex::GpuArray<amrex::Real,118> conc = {0.0};
    for (int n=0; n<118; n++) {
        conc[n] = 1.0/ 118.000000 ;
    }
    aJacobian(&Jac[0], &conc[0], 1500.0, *consP);

    int nJdata_tmp = 0;
    for (int k=0; k<119; k++) {
        for (int l=0; l<119; l++) {
            if(Jac[ 119 * k + l] != 0.0){
                nJdata_tmp = nJdata_tmp + 1;
            }
        }
    }

    *nJdata = NCELLS * nJdata_tmp;
}



/*compute the sparsity pattern of the system Jacobian */
void SPARSITY_INFO_SYST( int * nJdata, const int * consP, int NCELLS)
{
    amrex::GpuArray<amrex::Real,14161> Jac = {0.0};
    amrex::GpuArray<amrex::Real,118> conc = {0.0};
    for (int n=0; n<118; n++) {
        conc[n] = 1.0/ 118.000000 ;
    }
    aJacobian(&Jac[0], &conc[0], 1500.0, *consP);

    int nJdata_tmp = 0;
    for (int k=0; k<119; k++) {
        for (int l=0; l<119; l++) {
            if(k == l){
                nJdata_tmp = nJdata_tmp + 1;
            } else {
                if(Jac[ 119 * k + l] != 0.0){
                    nJdata_tmp = nJdata_tmp + 1;
                }
            }
        }
    }

    *nJdata = NCELLS * nJdata_tmp;
}



/*compute the sparsity pattern of the simplified (for preconditioning) system Jacobian */
void SPARSITY_INFO_SYST_SIMPLIFIED( int * nJdata, const int * consP)
{
    amrex::GpuArray<amrex::Real,14161> Jac = {0.0};
    amrex::GpuArray<amrex::Real,118> conc = {0.0};
    for (int n=0; n<118; n++) {
        conc[n] = 1.0/ 118.000000 ;
    }
    aJacobian_precond(&Jac[0], &conc[0], 1500.0, *consP);

    int nJdata_tmp = 0;
    for (int k=0; k<119; k++) {
        for (int l=0; l<119; l++) {
            if(k == l){
                nJdata_tmp = nJdata_tmp + 1;
            } else {
                if(Jac[ 119 * k + l] != 0.0){
                    nJdata_tmp = nJdata_tmp + 1;
                }
            }
        }
    }

    nJdata[0] = nJdata_tmp;
}


/*compute the sparsity pattern of the chemistry Jacobian in CSC format -- base 0 */
void SPARSITY_PREPROC_CSC(int *  rowVals, int *  colPtrs, const int * consP, int NCELLS)
{
    amrex::GpuArray<amrex::Real,14161> Jac = {0.0};
    amrex::GpuArray<amrex::Real,118> conc = {0.0};
    for (int n=0; n<118; n++) {
        conc[n] = 1.0/ 118.000000 ;
    }
    aJacobian(&Jac[0], &conc[0], 1500.0, *consP);

    colPtrs[0] = 0;
    int nJdata_tmp = 0;
    for (int nc=0; nc<NCELLS; nc++) {
        int offset_row = nc * 119;
        int offset_col = nc * 119;
        for (int k=0; k<119; k++) {
            for (int l=0; l<119; l++) {
                if(Jac[119*k + l] != 0.0) {
                    rowVals[nJdata_tmp] = l + offset_row; 
                    nJdata_tmp = nJdata_tmp + 1; 
                }
            }
            colPtrs[offset_col + (k + 1)] = nJdata_tmp;
        }
    }
}

/*compute the sparsity pattern of the chemistry Jacobian in CSR format -- base 0 */
void SPARSITY_PREPROC_CSR(int * colVals, int * rowPtrs, const int * consP, int NCELLS, int base)
{
    amrex::GpuArray<amrex::Real,14161> Jac = {0.0};
    amrex::GpuArray<amrex::Real,118> conc = {0.0};
    for (int n=0; n<118; n++) {
        conc[n] = 1.0/ 118.000000 ;
    }
    aJacobian(&Jac[0], &conc[0], 1500.0, *consP);

    if (base == 1) {
        rowPtrs[0] = 1;
        int nJdata_tmp = 1;
        for (int nc=0; nc<NCELLS; nc++) {
            int offset = nc * 119;
            for (int l=0; l<119; l++) {
                for (int k=0; k<119; k++) {
                    if(Jac[119*k + l] != 0.0) {
                        colVals[nJdata_tmp-1] = k+1 + offset; 
                        nJdata_tmp = nJdata_tmp + 1; 
                    }
                }
                rowPtrs[offset + (l + 1)] = nJdata_tmp;
            }
        }
    } else {
        rowPtrs[0] = 0;
        int nJdata_tmp = 0;
        for (int nc=0; nc<NCELLS; nc++) {
            int offset = nc * 119;
            for (int l=0; l<119; l++) {
                for (int k=0; k<119; k++) {
                    if(Jac[119*k + l] != 0.0) {
                        colVals[nJdata_tmp] = k + offset; 
                        nJdata_tmp = nJdata_tmp + 1; 
                    }
                }
                rowPtrs[offset + (l + 1)] = nJdata_tmp;
            }
        }
    }
}

/*compute the sparsity pattern of the system Jacobian */
/*CSR format BASE is user choice */
void SPARSITY_PREPROC_SYST_CSR(int * colVals, int * rowPtr, const int * consP, int NCELLS, int base)
{
    amrex::GpuArray<amrex::Real,14161> Jac = {0.0};
    amrex::GpuArray<amrex::Real,118> conc = {0.0};
    for (int n=0; n<118; n++) {
        conc[n] = 1.0/ 118.000000 ;
    }
    aJacobian(&Jac[0], &conc[0], 1500.0, *consP);

    if (base == 1) {
        rowPtr[0] = 1;
        int nJdata_tmp = 1;
        for (int nc=0; nc<NCELLS; nc++) {
            int offset = nc * 119;
            for (int l=0; l<119; l++) {
                for (int k=0; k<119; k++) {
                    if (k == l) {
                        colVals[nJdata_tmp-1] = l+1 + offset; 
                        nJdata_tmp = nJdata_tmp + 1; 
                    } else {
                        if(Jac[119*k + l] != 0.0) {
                            colVals[nJdata_tmp-1] = k+1 + offset; 
                            nJdata_tmp = nJdata_tmp + 1; 
                        }
                    }
                }
                rowPtr[offset + (l + 1)] = nJdata_tmp;
            }
        }
    } else {
        rowPtr[0] = 0;
        int nJdata_tmp = 0;
        for (int nc=0; nc<NCELLS; nc++) {
            int offset = nc * 119;
            for (int l=0; l<119; l++) {
                for (int k=0; k<119; k++) {
                    if (k == l) {
                        colVals[nJdata_tmp] = l + offset; 
                        nJdata_tmp = nJdata_tmp + 1; 
                    } else {
                        if(Jac[119*k + l] != 0.0) {
                            colVals[nJdata_tmp] = k + offset; 
                            nJdata_tmp = nJdata_tmp + 1; 
                        }
                    }
                }
                rowPtr[offset + (l + 1)] = nJdata_tmp;
            }
        }
    }
}

/*compute the sparsity pattern of the simplified (for precond) system Jacobian on CPU */
/*BASE 0 */
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(int * rowVals, int * colPtrs, int * indx, const int * consP)
{
    amrex::GpuArray<amrex::Real,14161> Jac = {0.0};
    amrex::GpuArray<amrex::Real,118> conc = {0.0};
    for (int n=0; n<118; n++) {
        conc[n] = 1.0/ 118.000000 ;
    }
    aJacobian_precond(&Jac[0], &conc[0], 1500.0, *consP);

    colPtrs[0] = 0;
    int nJdata_tmp = 0;
    for (int k=0; k<119; k++) {
        for (int l=0; l<119; l++) {
            if (k == l) {
                rowVals[nJdata_tmp] = l; 
                indx[nJdata_tmp] = 119*k + l;
                nJdata_tmp = nJdata_tmp + 1; 
            } else {
                if(Jac[119*k + l] != 0.0) {
                    rowVals[nJdata_tmp] = l; 
                    indx[nJdata_tmp] = 119*k + l;
                    nJdata_tmp = nJdata_tmp + 1; 
                }
            }
        }
        colPtrs[k+1] = nJdata_tmp;
    }
}

/*compute the sparsity pattern of the simplified (for precond) system Jacobian */
/*CSR format BASE is under choice */
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(int * colVals, int * rowPtr, const int * consP, int base)
{
    amrex::GpuArray<amrex::Real,14161> Jac = {0.0};
    amrex::GpuArray<amrex::Real,118> conc = {0.0};
    for (int n=0; n<118; n++) {
        conc[n] = 1.0/ 118.000000 ;
    }
    aJacobian_precond(&Jac[0], &conc[0], 1500.0, *consP);

    if (base == 1) {
        rowPtr[0] = 1;
        int nJdata_tmp = 1;
        for (int l=0; l<119; l++) {
            for (int k=0; k<119; k++) {
                if (k == l) {
                    colVals[nJdata_tmp-1] = l+1; 
                    nJdata_tmp = nJdata_tmp + 1; 
                } else {
                    if(Jac[119*k + l] != 0.0) {
                        colVals[nJdata_tmp-1] = k+1; 
                        nJdata_tmp = nJdata_tmp + 1; 
                    }
                }
            }
            rowPtr[l+1] = nJdata_tmp;
        }
    } else {
        rowPtr[0] = 0;
        int nJdata_tmp = 0;
        for (int l=0; l<119; l++) {
            for (int k=0; k<119; k++) {
                if (k == l) {
                    colVals[nJdata_tmp] = l; 
                    nJdata_tmp = nJdata_tmp + 1; 
                } else {
                    if(Jac[119*k + l] != 0.0) {
                        colVals[nJdata_tmp] = k; 
                        nJdata_tmp = nJdata_tmp + 1; 
                    }
                }
            }
            rowPtr[l+1] = nJdata_tmp;
        }
    }
}

#endif

#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  O
1  H
2  C
3  N
4  Ar
*/

// Species
#define POSF10325_ID 0
#define C2H4_ID 1
#define CH4_ID 2
#define H2_ID 3
#define C3H6_ID 4
#define C4H81_ID 5
#define iC4H8_ID 6
#define C6H6_ID 7
#define C6H5CH3_ID 8
#define H_ID 9
#define O_ID 10
#define OH_ID 11
#define HO2_ID 12
#define H2O_ID 13
#define H2O2_ID 14
#define O2_ID 15
#define CH2_ID 16
#define CH2D_ID 17
#define CH3_ID 18
#define HCO_ID 19
#define CH2O_ID 20
#define CH3O_ID 21
#define CO_ID 22
#define CO2_ID 23
#define C2H2_ID 24
#define C2H3_ID 25
#define C2H5_ID 26
#define C2H6_ID 27
#define HCCO_ID 28
#define CH2CO_ID 29
#define CH2CHO_ID 30
#define aC3H5_ID 31
#define C6H5_ID 32
#define C6H5CH2_ID 33
#define C6H4O2_ID 34
#define C6H5CO_ID 35
#define C6H5CHO_ID 36
#define N2_ID 37

#define NUM_ELEMENTS 5
#define NUM_SPECIES 38
#define NUM_REACTIONS 185

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or
//  GPU based. Defined in mechanism.cpp
void atomicWeight(amrex::Real* awt);
//  MISC
void CKAWT(amrex::Real* awt);
void CKNCF(int* ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int* _rmap);
void CKINU(int* i, int* nspec, int* ki, int* nu);
void CKKFKR(
  amrex::Real* P,
  amrex::Real* T,
  amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r);
void progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T);
//  SPARSE INFORMATION
void SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP);
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS);
void SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base);

// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKINDX(int* mm, int* kk, int* ii, int* nfit)
{
  *mm = 5;
  *kk = 38;
  *ii = 185;
  *nfit = -1; // Why do you need this anyway ?
}

//  inverse molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_imw(amrex::Real* imw_new)
{
  imw_new[0] = 1.0 / 154.297000;  // POSF10325
  imw_new[1] = 1.0 / 28.054000;   // C2H4
  imw_new[2] = 1.0 / 16.043000;   // CH4
  imw_new[3] = 1.0 / 2.016000;    // H2
  imw_new[4] = 1.0 / 42.081000;   // C3H6
  imw_new[5] = 1.0 / 56.108000;   // C4H81
  imw_new[6] = 1.0 / 56.108000;   // iC4H8
  imw_new[7] = 1.0 / 78.114000;   // C6H6
  imw_new[8] = 1.0 / 92.141000;   // C6H5CH3
  imw_new[9] = 1.0 / 1.008000;    // H
  imw_new[10] = 1.0 / 15.999000;  // O
  imw_new[11] = 1.0 / 17.007000;  // OH
  imw_new[12] = 1.0 / 33.006000;  // HO2
  imw_new[13] = 1.0 / 18.015000;  // H2O
  imw_new[14] = 1.0 / 34.014000;  // H2O2
  imw_new[15] = 1.0 / 31.998000;  // O2
  imw_new[16] = 1.0 / 14.027000;  // CH2
  imw_new[17] = 1.0 / 14.027000;  // CH2*
  imw_new[18] = 1.0 / 15.035000;  // CH3
  imw_new[19] = 1.0 / 29.018000;  // HCO
  imw_new[20] = 1.0 / 30.026000;  // CH2O
  imw_new[21] = 1.0 / 31.034000;  // CH3O
  imw_new[22] = 1.0 / 28.010000;  // CO
  imw_new[23] = 1.0 / 44.009000;  // CO2
  imw_new[24] = 1.0 / 26.038000;  // C2H2
  imw_new[25] = 1.0 / 27.046000;  // C2H3
  imw_new[26] = 1.0 / 29.062000;  // C2H5
  imw_new[27] = 1.0 / 30.070000;  // C2H6
  imw_new[28] = 1.0 / 41.029000;  // HCCO
  imw_new[29] = 1.0 / 42.037000;  // CH2CO
  imw_new[30] = 1.0 / 43.045000;  // CH2CHO
  imw_new[31] = 1.0 / 41.073000;  // aC3H5
  imw_new[32] = 1.0 / 77.106000;  // C6H5
  imw_new[33] = 1.0 / 91.133000;  // C6H5CH2
  imw_new[34] = 1.0 / 108.096000; // C6H4O2
  imw_new[35] = 1.0 / 105.116000; // C6H5CO
  imw_new[36] = 1.0 / 106.124000; // C6H5CHO
  imw_new[37] = 1.0 / 28.014000;  // N2
}

//  molecular weights
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
get_mw(amrex::Real* mw_new)
{
  mw_new[0] = 154.297000;  // POSF10325
  mw_new[1] = 28.054000;   // C2H4
  mw_new[2] = 16.043000;   // CH4
  mw_new[3] = 2.016000;    // H2
  mw_new[4] = 42.081000;   // C3H6
  mw_new[5] = 56.108000;   // C4H81
  mw_new[6] = 56.108000;   // iC4H8
  mw_new[7] = 78.114000;   // C6H6
  mw_new[8] = 92.141000;   // C6H5CH3
  mw_new[9] = 1.008000;    // H
  mw_new[10] = 15.999000;  // O
  mw_new[11] = 17.007000;  // OH
  mw_new[12] = 33.006000;  // HO2
  mw_new[13] = 18.015000;  // H2O
  mw_new[14] = 34.014000;  // H2O2
  mw_new[15] = 31.998000;  // O2
  mw_new[16] = 14.027000;  // CH2
  mw_new[17] = 14.027000;  // CH2*
  mw_new[18] = 15.035000;  // CH3
  mw_new[19] = 29.018000;  // HCO
  mw_new[20] = 30.026000;  // CH2O
  mw_new[21] = 31.034000;  // CH3O
  mw_new[22] = 28.010000;  // CO
  mw_new[23] = 44.009000;  // CO2
  mw_new[24] = 26.038000;  // C2H2
  mw_new[25] = 27.046000;  // C2H3
  mw_new[26] = 29.062000;  // C2H5
  mw_new[27] = 30.070000;  // C2H6
  mw_new[28] = 41.029000;  // HCCO
  mw_new[29] = 42.037000;  // CH2CO
  mw_new[30] = 43.045000;  // CH2CHO
  mw_new[31] = 41.073000;  // aC3H5
  mw_new[32] = 77.106000;  // C6H5
  mw_new[33] = 91.133000;  // C6H5CH2
  mw_new[34] = 108.096000; // C6H4O2
  mw_new[35] = 105.116000; // C6H5CO
  mw_new[36] = 106.124000; // C6H5CHO
  mw_new[37] = 28.014000;  // N2
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRP(amrex::Real* ru, amrex::Real* ruc, amrex::Real* pa)
{
  *ru = 8.31446261815324e+07;
  *ruc = 1.98721558317399615845;
  *pa = 1.01325e+06;
}

// compute Cv/R at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cv_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +2.16857770e+00 + 7.12034480e-02 * tc[1] +
                 8.69959550e-05 * tc[2] - 1.68612060e-07 * tc[3] +
                 7.59863700e-11 * tc[4];
    // species 1: C2H4
    species[1] = +2.95920148e+00 - 7.57052247e-03 * tc[1] +
                 5.70990292e-05 * tc[2] - 6.91588753e-08 * tc[3] +
                 2.69884373e-11 * tc[4];
    // species 2: CH4
    species[2] = +4.14987613e+00 - 1.36709788e-02 * tc[1] +
                 4.91800599e-05 * tc[2] - 4.84743026e-08 * tc[3] +
                 1.66693956e-11 * tc[4];
    // species 3: H2
    species[3] = +1.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 4: C3H6
    species[4] = +4.93307000e-01 + 2.09251800e-02 * tc[1] +
                 4.48679400e-06 * tc[2] - 1.66891200e-08 * tc[3] +
                 7.15814600e-12 * tc[4];
    // species 5: C4H81
    species[5] = +1.81138000e-01 + 3.08533800e-02 * tc[1] +
                 5.08652470e-06 * tc[2] - 2.46548880e-08 * tc[3] +
                 1.11101930e-11 * tc[4];
    // species 6: iC4H8
    species[6] = +1.64714050e+00 + 2.59029570e-02 * tc[1] +
                 8.19853540e-06 * tc[2] - 2.21932590e-08 * tc[3] +
                 8.89585800e-12 * tc[4];
    // species 7: C6H6
    species[7] = -5.84377340e+00 + 5.84276130e-02 * tc[1] -
                 2.94858550e-05 * tc[2] - 6.93904400e-09 * tc[3] +
                 8.21252530e-12 * tc[4];
    // species 8: C6H5CH3
    species[8] = +6.15266300e-01 + 2.10994380e-02 * tc[1] +
                 8.53660180e-05 * tc[2] - 1.32610660e-07 * tc[3] +
                 5.59566040e-11 * tc[4];
    // species 9: H
    species[9] = +1.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 10: O
    species[10] = +2.16826710e+00 - 3.27931884e-03 * tc[1] +
                  6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                  2.11265971e-12 * tc[4];
    // species 11: OH
    species[11] = +3.12530561e+00 - 3.22544939e-03 * tc[1] +
                  6.52764691e-06 * tc[2] - 5.79853643e-09 * tc[3] +
                  2.06237379e-12 * tc[4];
    // species 12: HO2
    species[12] = +3.30179801e+00 - 4.74912051e-03 * tc[1] +
                  2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                  9.29225124e-12 * tc[4];
    // species 13: H2O
    species[13] = +3.19864056e+00 - 2.03643410e-03 * tc[1] +
                  6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                  1.77197817e-12 * tc[4];
    // species 14: H2O2
    species[14] = +3.27611269e+00 - 5.42822417e-04 * tc[1] +
                  1.67335701e-05 * tc[2] - 2.15770813e-08 * tc[3] +
                  8.62454363e-12 * tc[4];
    // species 15: O2
    species[15] = +2.78245636e+00 - 2.99673416e-03 * tc[1] +
                  9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                  3.24372837e-12 * tc[4];
    // species 16: CH2
    species[16] = +2.76267867e+00 + 9.68872143e-04 * tc[1] +
                  2.79489841e-06 * tc[2] - 3.85091153e-09 * tc[3] +
                  1.68741719e-12 * tc[4];
    // species 17: CH2*
    species[17] = +3.19860411e+00 - 2.36661419e-03 * tc[1] +
                  8.23296220e-06 * tc[2] - 6.68815981e-09 * tc[3] +
                  1.94314737e-12 * tc[4];
    // species 18: CH3
    species[18] = +2.67359040e+00 + 2.01095175e-03 * tc[1] +
                  5.73021856e-06 * tc[2] - 6.87117425e-09 * tc[3] +
                  2.54385734e-12 * tc[4];
    // species 19: HCO
    species[19] = +3.22118584e+00 - 3.24392532e-03 * tc[1] +
                  1.37799446e-05 * tc[2] - 1.33144093e-08 * tc[3] +
                  4.33768865e-12 * tc[4];
    // species 20: CH2O
    species[20] = +3.79372315e+00 - 9.90833369e-03 * tc[1] +
                  3.73220008e-05 * tc[2] - 3.79285261e-08 * tc[3] +
                  1.31772652e-11 * tc[4];
    // species 21: CH3O
    species[21] = +2.71180502e+00 - 2.80463306e-03 * tc[1] +
                  3.76550971e-05 * tc[2] - 4.73072089e-08 * tc[3] +
                  1.86588420e-11 * tc[4];
    // species 22: CO
    species[22] = +2.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
    // species 23: CO2
    species[23] = +1.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 24: C2H2
    species[24] = -1.91318906e-01 + 2.33615629e-02 * tc[1] -
                  3.55171815e-05 * tc[2] + 2.80152437e-08 * tc[3] -
                  8.50072974e-12 * tc[4];
    // species 25: C2H3
    species[25] = +2.21246645e+00 + 1.51479162e-03 * tc[1] +
                  2.59209412e-05 * tc[2] - 3.57657847e-08 * tc[3] +
                  1.47150873e-11 * tc[4];
    // species 26: C2H5
    species[26] = +3.30646568e+00 - 4.18658892e-03 * tc[1] +
                  4.97142807e-05 * tc[2] - 5.99126606e-08 * tc[3] +
                  2.30509004e-11 * tc[4];
    // species 27: C2H6
    species[27] = +3.29142492e+00 - 5.50154270e-03 * tc[1] +
                  5.99438288e-05 * tc[2] - 7.08466285e-08 * tc[3] +
                  2.68685771e-11 * tc[4];
    // species 28: HCCO
    species[28] = +1.25172140e+00 + 1.76550210e-02 * tc[1] -
                  2.37291010e-05 * tc[2] + 1.72757590e-08 * tc[3] -
                  5.06648110e-12 * tc[4];
    // species 29: CH2CO
    species[29] = +1.13583630e+00 + 1.81188721e-02 * tc[1] -
                  1.73947474e-05 * tc[2] + 9.34397568e-09 * tc[3] -
                  2.01457615e-12 * tc[4];
    // species 30: CH2CHO
    species[30] = +2.40906240e+00 + 1.07385740e-02 * tc[1] +
                  1.89149250e-06 * tc[2] - 7.15858310e-09 * tc[3] +
                  2.86738510e-12 * tc[4];
    // species 31: aC3H5
    species[31] = +3.63183500e-01 + 1.98138210e-02 * tc[1] +
                  1.24970600e-05 * tc[2] - 3.33555550e-08 * tc[3] +
                  1.58465710e-11 * tc[4];
    // species 32: C6H5
    species[32] = -4.69314530e+00 + 5.21789680e-02 * tc[1] -
                  2.55584270e-05 * tc[2] - 7.06611210e-09 * tc[3] +
                  7.58339750e-12 * tc[4];
    // species 33: C6H5CH2
    species[33] = -5.18884600e-01 + 3.85128320e-02 * tc[1] +
                  3.28614920e-05 * tc[2] - 7.69727210e-08 * tc[3] +
                  3.54230680e-11 * tc[4];
    // species 34: C6H4O2
    species[34] = -1.95193005e+00 + 5.78424450e-02 * tc[1] -
                  3.82144390e-05 * tc[2] + 4.63126560e-09 * tc[3] +
                  3.62966510e-12 * tc[4];
    // species 35: C6H5CO
    species[35] = -3.02511550e+00 + 6.15125410e-02 * tc[1] -
                  3.16036530e-05 * tc[2] - 6.97245990e-09 * tc[3] +
                  7.98351490e-12 * tc[4];
    // species 36: C6H5CHO
    species[36] = -4.16273340e+00 + 6.63692450e-02 * tc[1] -
                  3.48163530e-05 * tc[2] - 6.29993770e-09 * tc[3] +
                  8.58071010e-12 * tc[4];
    // species 37: N2
    species[37] = +2.29867700e+00 + 1.40824040e-03 * tc[1] -
                  3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                  2.44485400e-12 * tc[4];
  } else {
    // species 0: POSF10325
    species[0] = +2.22281630e+01 + 6.61883880e-02 * tc[1] -
                 2.41585000e-05 * tc[2] + 3.58654970e-09 * tc[3] -
                 1.02268980e-13 * tc[4];
    // species 1: C2H4
    species[1] = +1.03611116e+00 + 1.46454151e-02 * tc[1] -
                 6.71077915e-06 * tc[2] + 1.47222923e-09 * tc[3] -
                 1.25706061e-13 * tc[4];
    // species 2: CH4
    species[2] = -9.25148505e-01 + 1.33909467e-02 * tc[1] -
                 5.73285809e-06 * tc[2] + 1.22292535e-09 * tc[3] -
                 1.01815230e-13 * tc[4];
    // species 3: H2
    species[3] = +2.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 4: C3H6
    species[4] = +5.73225700e+00 + 1.49083400e-02 * tc[1] -
                 4.94989900e-06 * tc[2] + 7.21202200e-10 * tc[3] -
                 3.76620400e-14 * tc[4];
    // species 5: C4H81
    species[5] = +1.05358410e+00 + 3.43505070e-02 * tc[1] -
                 1.58831970e-05 * tc[2] + 3.30896620e-09 * tc[3] -
                 2.53610450e-13 * tc[4];
    // species 6: iC4H8
    species[6] = +3.46094700e+00 + 2.96114870e-02 * tc[1] -
                 1.30771290e-05 * tc[2] + 2.65719340e-09 * tc[3] -
                 2.01347130e-13 * tc[4];
    // species 7: C6H6
    species[7] = +8.13812450e+00 + 2.38544330e-02 * tc[1] -
                 8.81277260e-06 * tc[2] + 1.20990210e-09 * tc[3] -
                 1.82215030e-14 * tc[4];
    // species 8: C6H5CH3
    species[8] = +1.19400340e+01 + 2.66912870e-02 * tc[1] -
                 9.68385050e-06 * tc[2] + 1.57386290e-09 * tc[3] -
                 9.46636010e-14 * tc[4];
    // species 9: H
    species[9] = +1.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 10: O
    species[10] = +1.56942078e+00 - 8.59741137e-05 * tc[1] +
                  4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                  1.22833691e-15 * tc[4];
    // species 11: OH
    species[11] = +1.86472886e+00 + 1.05650448e-03 * tc[1] -
                  2.59082758e-07 * tc[2] + 3.05218674e-11 * tc[3] -
                  1.33195876e-15 * tc[4];
    // species 12: HO2
    species[12] = +3.01721090e+00 + 2.23982013e-03 * tc[1] -
                  6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                  1.07908535e-14 * tc[4];
    // species 13: H2O
    species[13] = +2.03399249e+00 + 2.17691804e-03 * tc[1] -
                  1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                  1.68200992e-14 * tc[4];
    // species 14: H2O2
    species[14] = +3.16500285e+00 + 4.90831694e-03 * tc[1] -
                  1.90139225e-06 * tc[2] + 3.71185986e-10 * tc[3] -
                  2.87908305e-14 * tc[4];
    // species 15: O2
    species[15] = +2.28253784e+00 + 1.48308754e-03 * tc[1] -
                  7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                  2.16717794e-14 * tc[4];
    // species 16: CH2
    species[16] = +1.87410113e+00 + 3.65639292e-03 * tc[1] -
                  1.40894597e-06 * tc[2] + 2.60179549e-10 * tc[3] -
                  1.87727567e-14 * tc[4];
    // species 17: CH2*
    species[17] = +1.29203842e+00 + 4.65588637e-03 * tc[1] -
                  2.01191947e-06 * tc[2] + 4.17906000e-10 * tc[3] -
                  3.39716365e-14 * tc[4];
    // species 18: CH3
    species[18] = +1.28571772e+00 + 7.23990037e-03 * tc[1] -
                  2.98714348e-06 * tc[2] + 5.95684644e-10 * tc[3] -
                  4.67154394e-14 * tc[4];
    // species 19: HCO
    species[19] = +1.77217438e+00 + 4.95695526e-03 * tc[1] -
                  2.48445613e-06 * tc[2] + 5.89161778e-10 * tc[3] -
                  5.33508711e-14 * tc[4];
    // species 20: CH2O
    species[20] = +7.60690080e-01 + 9.20000082e-03 * tc[1] -
                  4.42258813e-06 * tc[2] + 1.00641212e-09 * tc[3] -
                  8.83855640e-14 * tc[4];
    // species 21: CH3O
    species[21] = +3.75779238e+00 + 7.44142474e-03 * tc[1] -
                  2.69705176e-06 * tc[2] + 4.38090504e-10 * tc[3] -
                  2.63537098e-14 * tc[4];
    // species 22: CO
    species[22] = +1.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
    // species 23: CO2
    species[23] = +2.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 24: C2H2
    species[24] = +3.14756964e+00 + 5.96166664e-03 * tc[1] -
                  2.37294852e-06 * tc[2] + 4.67412171e-10 * tc[3] -
                  3.61235213e-14 * tc[4];
    // species 25: C2H3
    species[25] = +2.01672400e+00 + 1.03302292e-02 * tc[1] -
                  4.68082349e-06 * tc[2] + 1.01763288e-09 * tc[3] -
                  8.62607041e-14 * tc[4];
    // species 26: C2H5
    species[26] = +9.54656420e-01 + 1.73972722e-02 * tc[1] -
                  7.98206668e-06 * tc[2] + 1.75217689e-09 * tc[3] -
                  1.49641576e-13 * tc[4];
    // species 27: C2H6
    species[27] = +7.18815000e-02 + 2.16852677e-02 * tc[1] -
                  1.00256067e-05 * tc[2] + 2.21412001e-09 * tc[3] -
                  1.90002890e-13 * tc[4];
    // species 28: HCCO
    species[28] = +4.62820580e+00 + 4.08534010e-03 * tc[1] -
                  1.59345470e-06 * tc[2] + 2.86260520e-10 * tc[3] -
                  1.94078320e-14 * tc[4];
    // species 29: CH2CO
    species[29] = +3.51129732e+00 + 9.00359745e-03 * tc[1] -
                  4.16939635e-06 * tc[2] + 9.23345882e-10 * tc[3] -
                  7.94838201e-14 * tc[4];
    // species 30: CH2CHO
    species[30] = +4.97566990e+00 + 8.13059140e-03 * tc[1] -
                  2.74362450e-06 * tc[2] + 4.07030410e-10 * tc[3] -
                  2.17601710e-14 * tc[4];
    // species 31: aC3H5
    species[31] = +5.50078770e+00 + 1.43247310e-02 * tc[1] -
                  5.67816320e-06 * tc[2] + 1.10808010e-09 * tc[3] -
                  9.03638870e-14 * tc[4];
    // species 32: C6H5
    species[32] = +7.59731100e+00 + 2.22416300e-02 * tc[1] -
                  8.71999780e-06 * tc[2] + 1.37887850e-09 * tc[3] -
                  5.31460560e-14 * tc[4];
    // species 33: C6H5CH2
    species[33] = +1.30439800e+01 + 2.34938730e-02 * tc[1] -
                  8.53753670e-06 * tc[2] + 1.38908410e-09 * tc[3] -
                  8.36144200e-14 * tc[4];
    // species 34: C6H4O2
    species[34] = +1.07308400e+01 + 2.36149950e-02 * tc[1] -
                  1.02345760e-05 * tc[2] + 1.95321740e-09 * tc[3] -
                  1.27460220e-13 * tc[4];
    // species 35: C6H5CO
    species[35] = +1.23744090e+01 + 2.39992890e-02 * tc[1] -
                  1.04657240e-05 * tc[2] + 2.16691310e-09 * tc[3] -
                  1.80070450e-13 * tc[4];
    // species 36: C6H5CHO
    species[36] = +1.26507370e+01 + 2.56804190e-02 * tc[1] -
                  1.04667290e-05 * tc[2] + 1.94134300e-09 * tc[3] -
                  1.34837920e-13 * tc[4];
    // species 37: N2
    species[37] = +1.92664000e+00 + 1.48797680e-03 * tc[1] -
                  5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                  6.75335100e-15 * tc[4];
  }
  return;
}

// compute Cp/R at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
cp_R(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +3.16857770e+00 + 7.12034480e-02 * tc[1] +
                 8.69959550e-05 * tc[2] - 1.68612060e-07 * tc[3] +
                 7.59863700e-11 * tc[4];
    // species 1: C2H4
    species[1] = +3.95920148e+00 - 7.57052247e-03 * tc[1] +
                 5.70990292e-05 * tc[2] - 6.91588753e-08 * tc[3] +
                 2.69884373e-11 * tc[4];
    // species 2: CH4
    species[2] = +5.14987613e+00 - 1.36709788e-02 * tc[1] +
                 4.91800599e-05 * tc[2] - 4.84743026e-08 * tc[3] +
                 1.66693956e-11 * tc[4];
    // species 3: H2
    species[3] = +2.34433112e+00 + 7.98052075e-03 * tc[1] -
                 1.94781510e-05 * tc[2] + 2.01572094e-08 * tc[3] -
                 7.37611761e-12 * tc[4];
    // species 4: C3H6
    species[4] = +1.49330700e+00 + 2.09251800e-02 * tc[1] +
                 4.48679400e-06 * tc[2] - 1.66891200e-08 * tc[3] +
                 7.15814600e-12 * tc[4];
    // species 5: C4H81
    species[5] = +1.18113800e+00 + 3.08533800e-02 * tc[1] +
                 5.08652470e-06 * tc[2] - 2.46548880e-08 * tc[3] +
                 1.11101930e-11 * tc[4];
    // species 6: iC4H8
    species[6] = +2.64714050e+00 + 2.59029570e-02 * tc[1] +
                 8.19853540e-06 * tc[2] - 2.21932590e-08 * tc[3] +
                 8.89585800e-12 * tc[4];
    // species 7: C6H6
    species[7] = -4.84377340e+00 + 5.84276130e-02 * tc[1] -
                 2.94858550e-05 * tc[2] - 6.93904400e-09 * tc[3] +
                 8.21252530e-12 * tc[4];
    // species 8: C6H5CH3
    species[8] = +1.61526630e+00 + 2.10994380e-02 * tc[1] +
                 8.53660180e-05 * tc[2] - 1.32610660e-07 * tc[3] +
                 5.59566040e-11 * tc[4];
    // species 9: H
    species[9] = +2.50000000e+00 + 7.05332819e-13 * tc[1] -
                 1.99591964e-15 * tc[2] + 2.30081632e-18 * tc[3] -
                 9.27732332e-22 * tc[4];
    // species 10: O
    species[10] = +3.16826710e+00 - 3.27931884e-03 * tc[1] +
                  6.64306396e-06 * tc[2] - 6.12806624e-09 * tc[3] +
                  2.11265971e-12 * tc[4];
    // species 11: OH
    species[11] = +4.12530561e+00 - 3.22544939e-03 * tc[1] +
                  6.52764691e-06 * tc[2] - 5.79853643e-09 * tc[3] +
                  2.06237379e-12 * tc[4];
    // species 12: HO2
    species[12] = +4.30179801e+00 - 4.74912051e-03 * tc[1] +
                  2.11582891e-05 * tc[2] - 2.42763894e-08 * tc[3] +
                  9.29225124e-12 * tc[4];
    // species 13: H2O
    species[13] = +4.19864056e+00 - 2.03643410e-03 * tc[1] +
                  6.52040211e-06 * tc[2] - 5.48797062e-09 * tc[3] +
                  1.77197817e-12 * tc[4];
    // species 14: H2O2
    species[14] = +4.27611269e+00 - 5.42822417e-04 * tc[1] +
                  1.67335701e-05 * tc[2] - 2.15770813e-08 * tc[3] +
                  8.62454363e-12 * tc[4];
    // species 15: O2
    species[15] = +3.78245636e+00 - 2.99673416e-03 * tc[1] +
                  9.84730201e-06 * tc[2] - 9.68129509e-09 * tc[3] +
                  3.24372837e-12 * tc[4];
    // species 16: CH2
    species[16] = +3.76267867e+00 + 9.68872143e-04 * tc[1] +
                  2.79489841e-06 * tc[2] - 3.85091153e-09 * tc[3] +
                  1.68741719e-12 * tc[4];
    // species 17: CH2*
    species[17] = +4.19860411e+00 - 2.36661419e-03 * tc[1] +
                  8.23296220e-06 * tc[2] - 6.68815981e-09 * tc[3] +
                  1.94314737e-12 * tc[4];
    // species 18: CH3
    species[18] = +3.67359040e+00 + 2.01095175e-03 * tc[1] +
                  5.73021856e-06 * tc[2] - 6.87117425e-09 * tc[3] +
                  2.54385734e-12 * tc[4];
    // species 19: HCO
    species[19] = +4.22118584e+00 - 3.24392532e-03 * tc[1] +
                  1.37799446e-05 * tc[2] - 1.33144093e-08 * tc[3] +
                  4.33768865e-12 * tc[4];
    // species 20: CH2O
    species[20] = +4.79372315e+00 - 9.90833369e-03 * tc[1] +
                  3.73220008e-05 * tc[2] - 3.79285261e-08 * tc[3] +
                  1.31772652e-11 * tc[4];
    // species 21: CH3O
    species[21] = +3.71180502e+00 - 2.80463306e-03 * tc[1] +
                  3.76550971e-05 * tc[2] - 4.73072089e-08 * tc[3] +
                  1.86588420e-11 * tc[4];
    // species 22: CO
    species[22] = +3.57953347e+00 - 6.10353680e-04 * tc[1] +
                  1.01681433e-06 * tc[2] + 9.07005884e-10 * tc[3] -
                  9.04424499e-13 * tc[4];
    // species 23: CO2
    species[23] = +2.35677352e+00 + 8.98459677e-03 * tc[1] -
                  7.12356269e-06 * tc[2] + 2.45919022e-09 * tc[3] -
                  1.43699548e-13 * tc[4];
    // species 24: C2H2
    species[24] = +8.08681094e-01 + 2.33615629e-02 * tc[1] -
                  3.55171815e-05 * tc[2] + 2.80152437e-08 * tc[3] -
                  8.50072974e-12 * tc[4];
    // species 25: C2H3
    species[25] = +3.21246645e+00 + 1.51479162e-03 * tc[1] +
                  2.59209412e-05 * tc[2] - 3.57657847e-08 * tc[3] +
                  1.47150873e-11 * tc[4];
    // species 26: C2H5
    species[26] = +4.30646568e+00 - 4.18658892e-03 * tc[1] +
                  4.97142807e-05 * tc[2] - 5.99126606e-08 * tc[3] +
                  2.30509004e-11 * tc[4];
    // species 27: C2H6
    species[27] = +4.29142492e+00 - 5.50154270e-03 * tc[1] +
                  5.99438288e-05 * tc[2] - 7.08466285e-08 * tc[3] +
                  2.68685771e-11 * tc[4];
    // species 28: HCCO
    species[28] = +2.25172140e+00 + 1.76550210e-02 * tc[1] -
                  2.37291010e-05 * tc[2] + 1.72757590e-08 * tc[3] -
                  5.06648110e-12 * tc[4];
    // species 29: CH2CO
    species[29] = +2.13583630e+00 + 1.81188721e-02 * tc[1] -
                  1.73947474e-05 * tc[2] + 9.34397568e-09 * tc[3] -
                  2.01457615e-12 * tc[4];
    // species 30: CH2CHO
    species[30] = +3.40906240e+00 + 1.07385740e-02 * tc[1] +
                  1.89149250e-06 * tc[2] - 7.15858310e-09 * tc[3] +
                  2.86738510e-12 * tc[4];
    // species 31: aC3H5
    species[31] = +1.36318350e+00 + 1.98138210e-02 * tc[1] +
                  1.24970600e-05 * tc[2] - 3.33555550e-08 * tc[3] +
                  1.58465710e-11 * tc[4];
    // species 32: C6H5
    species[32] = -3.69314530e+00 + 5.21789680e-02 * tc[1] -
                  2.55584270e-05 * tc[2] - 7.06611210e-09 * tc[3] +
                  7.58339750e-12 * tc[4];
    // species 33: C6H5CH2
    species[33] = +4.81115400e-01 + 3.85128320e-02 * tc[1] +
                  3.28614920e-05 * tc[2] - 7.69727210e-08 * tc[3] +
                  3.54230680e-11 * tc[4];
    // species 34: C6H4O2
    species[34] = -9.51930050e-01 + 5.78424450e-02 * tc[1] -
                  3.82144390e-05 * tc[2] + 4.63126560e-09 * tc[3] +
                  3.62966510e-12 * tc[4];
    // species 35: C6H5CO
    species[35] = -2.02511550e+00 + 6.15125410e-02 * tc[1] -
                  3.16036530e-05 * tc[2] - 6.97245990e-09 * tc[3] +
                  7.98351490e-12 * tc[4];
    // species 36: C6H5CHO
    species[36] = -3.16273340e+00 + 6.63692450e-02 * tc[1] -
                  3.48163530e-05 * tc[2] - 6.29993770e-09 * tc[3] +
                  8.58071010e-12 * tc[4];
    // species 37: N2
    species[37] = +3.29867700e+00 + 1.40824040e-03 * tc[1] -
                  3.96322200e-06 * tc[2] + 5.64151500e-09 * tc[3] -
                  2.44485400e-12 * tc[4];
  } else {
    // species 0: POSF10325
    species[0] = +2.32281630e+01 + 6.61883880e-02 * tc[1] -
                 2.41585000e-05 * tc[2] + 3.58654970e-09 * tc[3] -
                 1.02268980e-13 * tc[4];
    // species 1: C2H4
    species[1] = +2.03611116e+00 + 1.46454151e-02 * tc[1] -
                 6.71077915e-06 * tc[2] + 1.47222923e-09 * tc[3] -
                 1.25706061e-13 * tc[4];
    // species 2: CH4
    species[2] = +7.48514950e-02 + 1.33909467e-02 * tc[1] -
                 5.73285809e-06 * tc[2] + 1.22292535e-09 * tc[3] -
                 1.01815230e-13 * tc[4];
    // species 3: H2
    species[3] = +3.33727920e+00 - 4.94024731e-05 * tc[1] +
                 4.99456778e-07 * tc[2] - 1.79566394e-10 * tc[3] +
                 2.00255376e-14 * tc[4];
    // species 4: C3H6
    species[4] = +6.73225700e+00 + 1.49083400e-02 * tc[1] -
                 4.94989900e-06 * tc[2] + 7.21202200e-10 * tc[3] -
                 3.76620400e-14 * tc[4];
    // species 5: C4H81
    species[5] = +2.05358410e+00 + 3.43505070e-02 * tc[1] -
                 1.58831970e-05 * tc[2] + 3.30896620e-09 * tc[3] -
                 2.53610450e-13 * tc[4];
    // species 6: iC4H8
    species[6] = +4.46094700e+00 + 2.96114870e-02 * tc[1] -
                 1.30771290e-05 * tc[2] + 2.65719340e-09 * tc[3] -
                 2.01347130e-13 * tc[4];
    // species 7: C6H6
    species[7] = +9.13812450e+00 + 2.38544330e-02 * tc[1] -
                 8.81277260e-06 * tc[2] + 1.20990210e-09 * tc[3] -
                 1.82215030e-14 * tc[4];
    // species 8: C6H5CH3
    species[8] = +1.29400340e+01 + 2.66912870e-02 * tc[1] -
                 9.68385050e-06 * tc[2] + 1.57386290e-09 * tc[3] -
                 9.46636010e-14 * tc[4];
    // species 9: H
    species[9] = +2.50000001e+00 - 2.30842973e-11 * tc[1] +
                 1.61561948e-14 * tc[2] - 4.73515235e-18 * tc[3] +
                 4.98197357e-22 * tc[4];
    // species 10: O
    species[10] = +2.56942078e+00 - 8.59741137e-05 * tc[1] +
                  4.19484589e-08 * tc[2] - 1.00177799e-11 * tc[3] +
                  1.22833691e-15 * tc[4];
    // species 11: OH
    species[11] = +2.86472886e+00 + 1.05650448e-03 * tc[1] -
                  2.59082758e-07 * tc[2] + 3.05218674e-11 * tc[3] -
                  1.33195876e-15 * tc[4];
    // species 12: HO2
    species[12] = +4.01721090e+00 + 2.23982013e-03 * tc[1] -
                  6.33658150e-07 * tc[2] + 1.14246370e-10 * tc[3] -
                  1.07908535e-14 * tc[4];
    // species 13: H2O
    species[13] = +3.03399249e+00 + 2.17691804e-03 * tc[1] -
                  1.64072518e-07 * tc[2] - 9.70419870e-11 * tc[3] +
                  1.68200992e-14 * tc[4];
    // species 14: H2O2
    species[14] = +4.16500285e+00 + 4.90831694e-03 * tc[1] -
                  1.90139225e-06 * tc[2] + 3.71185986e-10 * tc[3] -
                  2.87908305e-14 * tc[4];
    // species 15: O2
    species[15] = +3.28253784e+00 + 1.48308754e-03 * tc[1] -
                  7.57966669e-07 * tc[2] + 2.09470555e-10 * tc[3] -
                  2.16717794e-14 * tc[4];
    // species 16: CH2
    species[16] = +2.87410113e+00 + 3.65639292e-03 * tc[1] -
                  1.40894597e-06 * tc[2] + 2.60179549e-10 * tc[3] -
                  1.87727567e-14 * tc[4];
    // species 17: CH2*
    species[17] = +2.29203842e+00 + 4.65588637e-03 * tc[1] -
                  2.01191947e-06 * tc[2] + 4.17906000e-10 * tc[3] -
                  3.39716365e-14 * tc[4];
    // species 18: CH3
    species[18] = +2.28571772e+00 + 7.23990037e-03 * tc[1] -
                  2.98714348e-06 * tc[2] + 5.95684644e-10 * tc[3] -
                  4.67154394e-14 * tc[4];
    // species 19: HCO
    species[19] = +2.77217438e+00 + 4.95695526e-03 * tc[1] -
                  2.48445613e-06 * tc[2] + 5.89161778e-10 * tc[3] -
                  5.33508711e-14 * tc[4];
    // species 20: CH2O
    species[20] = +1.76069008e+00 + 9.20000082e-03 * tc[1] -
                  4.42258813e-06 * tc[2] + 1.00641212e-09 * tc[3] -
                  8.83855640e-14 * tc[4];
    // species 21: CH3O
    species[21] = +4.75779238e+00 + 7.44142474e-03 * tc[1] -
                  2.69705176e-06 * tc[2] + 4.38090504e-10 * tc[3] -
                  2.63537098e-14 * tc[4];
    // species 22: CO
    species[22] = +2.71518561e+00 + 2.06252743e-03 * tc[1] -
                  9.98825771e-07 * tc[2] + 2.30053008e-10 * tc[3] -
                  2.03647716e-14 * tc[4];
    // species 23: CO2
    species[23] = +3.85746029e+00 + 4.41437026e-03 * tc[1] -
                  2.21481404e-06 * tc[2] + 5.23490188e-10 * tc[3] -
                  4.72084164e-14 * tc[4];
    // species 24: C2H2
    species[24] = +4.14756964e+00 + 5.96166664e-03 * tc[1] -
                  2.37294852e-06 * tc[2] + 4.67412171e-10 * tc[3] -
                  3.61235213e-14 * tc[4];
    // species 25: C2H3
    species[25] = +3.01672400e+00 + 1.03302292e-02 * tc[1] -
                  4.68082349e-06 * tc[2] + 1.01763288e-09 * tc[3] -
                  8.62607041e-14 * tc[4];
    // species 26: C2H5
    species[26] = +1.95465642e+00 + 1.73972722e-02 * tc[1] -
                  7.98206668e-06 * tc[2] + 1.75217689e-09 * tc[3] -
                  1.49641576e-13 * tc[4];
    // species 27: C2H6
    species[27] = +1.07188150e+00 + 2.16852677e-02 * tc[1] -
                  1.00256067e-05 * tc[2] + 2.21412001e-09 * tc[3] -
                  1.90002890e-13 * tc[4];
    // species 28: HCCO
    species[28] = +5.62820580e+00 + 4.08534010e-03 * tc[1] -
                  1.59345470e-06 * tc[2] + 2.86260520e-10 * tc[3] -
                  1.94078320e-14 * tc[4];
    // species 29: CH2CO
    species[29] = +4.51129732e+00 + 9.00359745e-03 * tc[1] -
                  4.16939635e-06 * tc[2] + 9.23345882e-10 * tc[3] -
                  7.94838201e-14 * tc[4];
    // species 30: CH2CHO
    species[30] = +5.97566990e+00 + 8.13059140e-03 * tc[1] -
                  2.74362450e-06 * tc[2] + 4.07030410e-10 * tc[3] -
                  2.17601710e-14 * tc[4];
    // species 31: aC3H5
    species[31] = +6.50078770e+00 + 1.43247310e-02 * tc[1] -
                  5.67816320e-06 * tc[2] + 1.10808010e-09 * tc[3] -
                  9.03638870e-14 * tc[4];
    // species 32: C6H5
    species[32] = +8.59731100e+00 + 2.22416300e-02 * tc[1] -
                  8.71999780e-06 * tc[2] + 1.37887850e-09 * tc[3] -
                  5.31460560e-14 * tc[4];
    // species 33: C6H5CH2
    species[33] = +1.40439800e+01 + 2.34938730e-02 * tc[1] -
                  8.53753670e-06 * tc[2] + 1.38908410e-09 * tc[3] -
                  8.36144200e-14 * tc[4];
    // species 34: C6H4O2
    species[34] = +1.17308400e+01 + 2.36149950e-02 * tc[1] -
                  1.02345760e-05 * tc[2] + 1.95321740e-09 * tc[3] -
                  1.27460220e-13 * tc[4];
    // species 35: C6H5CO
    species[35] = +1.33744090e+01 + 2.39992890e-02 * tc[1] -
                  1.04657240e-05 * tc[2] + 2.16691310e-09 * tc[3] -
                  1.80070450e-13 * tc[4];
    // species 36: C6H5CHO
    species[36] = +1.36507370e+01 + 2.56804190e-02 * tc[1] -
                  1.04667290e-05 * tc[2] + 1.94134300e-09 * tc[3] -
                  1.34837920e-13 * tc[4];
    // species 37: N2
    species[37] = +2.92664000e+00 + 1.48797680e-03 * tc[1] -
                  5.68476000e-07 * tc[2] + 1.00970380e-10 * tc[3] -
                  6.75335100e-15 * tc[4];
  }
  return;
}

// compute the g/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
gibbs(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = -4.044634400000000e+04 * invT - 1.736510830000000e+01 -
                 3.168577700000000e+00 * tc[0] - 3.560172400000000e-02 * tc[1] -
                 1.449932583333333e-05 * tc[2] + 1.405100500000000e-08 * tc[3] -
                 3.799318500000000e-12 * tc[4];
    // species 1: C2H4
    species[1] = +5.089775930000000e+03 * invT - 1.381294799999999e-01 -
                 3.959201480000000e+00 * tc[0] + 3.785261235000000e-03 * tc[1] -
                 9.516504866666667e-06 * tc[2] + 5.763239608333333e-09 * tc[3] -
                 1.349421865000000e-12 * tc[4];
    // species 2: CH4
    species[2] = -1.024664760000000e+04 * invT + 9.791179889999999e+00 -
                 5.149876130000000e+00 * tc[0] + 6.835489400000000e-03 * tc[1] -
                 8.196676650000000e-06 * tc[2] + 4.039525216666667e-09 * tc[3] -
                 8.334697800000000e-13 * tc[4];
    // species 3: H2
    species[3] = -9.179351730000000e+02 * invT + 1.661320882000000e+00 -
                 2.344331120000000e+00 * tc[0] - 3.990260375000000e-03 * tc[1] +
                 3.246358500000000e-06 * tc[2] - 1.679767450000000e-09 * tc[3] +
                 3.688058805000000e-13 * tc[4];
    // species 4: C3H6
    species[4] = +1.074826000000000e+03 * invT - 1.465203300000000e+01 -
                 1.493307000000000e+00 * tc[0] - 1.046259000000000e-02 * tc[1] -
                 7.477990000000000e-07 * tc[2] + 1.390760000000000e-09 * tc[3] -
                 3.579073000000000e-13 * tc[4];
    // species 5: C4H81
    species[5] = -1.790400400000000e+03 * invT - 1.988133100000000e+01 -
                 1.181138000000000e+00 * tc[0] - 1.542669000000000e-02 * tc[1] -
                 8.477541166666667e-07 * tc[2] + 2.054574000000000e-09 * tc[3] -
                 5.555096499999999e-13 * tc[4];
    // species 6: iC4H8
    species[6] = -4.037306900000000e+03 * invT - 1.002924750000000e+01 -
                 2.647140500000000e+00 * tc[0] - 1.295147850000000e-02 * tc[1] -
                 1.366422566666667e-06 * tc[2] + 1.849438250000000e-09 * tc[3] -
                 4.447929000000000e-13 * tc[4];
    // species 7: C6H6
    species[7] = +9.181777300000000e+03 * invT - 4.873360540000000e+01 +
                 4.843773400000000e+00 * tc[0] - 2.921380650000000e-02 * tc[1] +
                 4.914309166666667e-06 * tc[2] + 5.782536666666667e-10 * tc[3] -
                 4.106262650000000e-13 * tc[4];
    // species 8: C6H5CH3
    species[8] = +4.075630000000000e+03 * invT - 1.866694370000000e+01 -
                 1.615266300000000e+00 * tc[0] - 1.054971900000000e-02 * tc[1] -
                 1.422766966666667e-05 * tc[2] + 1.105088833333333e-08 * tc[3] -
                 2.797830200000000e-12 * tc[4];
    // species 9: H
    species[9] = +2.547365990000000e+04 * invT + 2.946682853000000e+00 -
                 2.500000000000000e+00 * tc[0] - 3.526664095000000e-13 * tc[1] +
                 3.326532733333333e-16 * tc[2] - 1.917346933333333e-19 * tc[3] +
                 4.638661660000000e-23 * tc[4];
    // species 10: O
    species[10] = +2.912225920000000e+04 * invT + 1.116333640000000e+00 -
                  3.168267100000000e+00 * tc[0] +
                  1.639659420000000e-03 * tc[1] -
                  1.107177326666667e-06 * tc[2] +
                  5.106721866666666e-10 * tc[3] - 1.056329855000000e-13 * tc[4];
    // species 11: OH
    species[11] = +3.381538120000000e+03 * invT + 4.815738570000000e+00 -
                  4.125305610000000e+00 * tc[0] +
                  1.612724695000000e-03 * tc[1] -
                  1.087941151666667e-06 * tc[2] +
                  4.832113691666666e-10 * tc[3] - 1.031186895000000e-13 * tc[4];
    // species 12: HO2
    species[12] = +2.948080400000000e+02 * invT + 5.851355599999999e-01 -
                  4.301798010000000e+00 * tc[0] +
                  2.374560255000000e-03 * tc[1] -
                  3.526381516666666e-06 * tc[2] +
                  2.023032450000000e-09 * tc[3] - 4.646125620000001e-13 * tc[4];
    // species 13: H2O
    species[13] = -3.029372670000000e+04 * invT + 5.047672768000000e+00 -
                  4.198640560000000e+00 * tc[0] +
                  1.018217050000000e-03 * tc[1] -
                  1.086733685000000e-06 * tc[2] +
                  4.573308850000000e-10 * tc[3] - 8.859890850000000e-14 * tc[4];
    // species 14: H2O2
    species[14] = -1.770258210000000e+04 * invT + 8.410619499999998e-01 -
                  4.276112690000000e+00 * tc[0] +
                  2.714112085000000e-04 * tc[1] -
                  2.788928350000000e-06 * tc[2] +
                  1.798090108333333e-09 * tc[3] - 4.312271815000000e-13 * tc[4];
    // species 15: O2
    species[15] = -1.063943560000000e+03 * invT + 1.247806300000001e-01 -
                  3.782456360000000e+00 * tc[0] +
                  1.498367080000000e-03 * tc[1] -
                  1.641217001666667e-06 * tc[2] +
                  8.067745908333334e-10 * tc[3] - 1.621864185000000e-13 * tc[4];
    // species 16: CH2
    species[16] = +4.600404010000000e+04 * invT + 2.200146820000000e+00 -
                  3.762678670000000e+00 * tc[0] -
                  4.844360715000000e-04 * tc[1] -
                  4.658164016666667e-07 * tc[2] +
                  3.209092941666667e-10 * tc[3] - 8.437085950000000e-14 * tc[4];
    // species 17: CH2*
    species[17] = +5.049681630000000e+04 * invT + 4.967723077000000e+00 -
                  4.198604110000000e+00 * tc[0] +
                  1.183307095000000e-03 * tc[1] -
                  1.372160366666667e-06 * tc[2] +
                  5.573466508333334e-10 * tc[3] - 9.715736850000000e-14 * tc[4];
    // species 18: CH3
    species[18] = +1.644499880000000e+04 * invT + 2.069026070000000e+00 -
                  3.673590400000000e+00 * tc[0] -
                  1.005475875000000e-03 * tc[1] -
                  9.550364266666668e-07 * tc[2] +
                  5.725978541666666e-10 * tc[3] - 1.271928670000000e-13 * tc[4];
    // species 19: HCO
    species[19] = +3.839564960000000e+03 * invT + 8.268134100000002e-01 -
                  4.221185840000000e+00 * tc[0] +
                  1.621962660000000e-03 * tc[1] -
                  2.296657433333333e-06 * tc[2] +
                  1.109534108333333e-09 * tc[3] - 2.168844325000000e-13 * tc[4];
    // species 20: CH2O
    species[20] = -1.430895670000000e+04 * invT + 4.190910250000000e+00 -
                  4.793723150000000e+00 * tc[0] +
                  4.954166845000000e-03 * tc[1] -
                  6.220333466666666e-06 * tc[2] +
                  3.160710508333333e-09 * tc[3] - 6.588632600000000e-13 * tc[4];
    // species 21: CH3O
    species[21] = +1.295697600000000e+03 * invT - 2.860603620000000e+00 -
                  3.711805020000000e+00 * tc[0] +
                  1.402316530000000e-03 * tc[1] -
                  6.275849516666667e-06 * tc[2] +
                  3.942267408333333e-09 * tc[3] - 9.329421000000001e-13 * tc[4];
    // species 22: CO
    species[22] = -1.434408600000000e+04 * invT + 7.112418999999992e-02 -
                  3.579533470000000e+00 * tc[0] +
                  3.051768400000000e-04 * tc[1] -
                  1.694690550000000e-07 * tc[2] -
                  7.558382366666667e-11 * tc[3] + 4.522122495000000e-14 * tc[4];
    // species 23: CO2
    species[23] = -4.837196970000000e+04 * invT - 7.544278700000000e+00 -
                  2.356773520000000e+00 * tc[0] -
                  4.492298385000000e-03 * tc[1] +
                  1.187260448333333e-06 * tc[2] -
                  2.049325183333333e-10 * tc[3] + 7.184977399999999e-15 * tc[4];
    // species 24: C2H2
    species[24] = +2.642898070000000e+04 * invT - 1.313102400600000e+01 -
                  8.086810940000000e-01 * tc[0] -
                  1.168078145000000e-02 * tc[1] +
                  5.919530250000000e-06 * tc[2] -
                  2.334603641666667e-09 * tc[3] + 4.250364870000000e-13 * tc[4];
    // species 25: C2H3
    species[25] = +3.485984680000000e+04 * invT - 5.298073800000000e+00 -
                  3.212466450000000e+00 * tc[0] -
                  7.573958100000000e-04 * tc[1] -
                  4.320156866666666e-06 * tc[2] +
                  2.980482058333333e-09 * tc[3] - 7.357543650000000e-13 * tc[4];
    // species 26: C2H5
    species[26] = +1.284162650000000e+04 * invT - 4.007435600000004e-01 -
                  4.306465680000000e+00 * tc[0] +
                  2.093294460000000e-03 * tc[1] -
                  8.285713450000000e-06 * tc[2] +
                  4.992721716666666e-09 * tc[3] - 1.152545020000000e-12 * tc[4];
    // species 27: C2H6
    species[27] = -1.152220550000000e+04 * invT + 1.624601760000000e+00 -
                  4.291424920000000e+00 * tc[0] +
                  2.750771350000000e-03 * tc[1] -
                  9.990638133333334e-06 * tc[2] +
                  5.903885708333334e-09 * tc[3] - 1.343428855000000e-12 * tc[4];
    // species 28: HCCO
    species[28] = +2.005944900000000e+04 * invT - 1.023869560000000e+01 -
                  2.251721400000000e+00 * tc[0] -
                  8.827510500000000e-03 * tc[1] +
                  3.954850166666666e-06 * tc[2] -
                  1.439646583333334e-09 * tc[3] + 2.533240550000000e-13 * tc[4];
    // species 29: CH2CO
    species[29] = -7.270000000000000e+03 * invT - 1.007981170000000e+01 -
                  2.135836300000000e+00 * tc[0] -
                  9.059436050000000e-03 * tc[1] +
                  2.899124566666666e-06 * tc[2] -
                  7.786646400000000e-10 * tc[3] + 1.007288075000000e-13 * tc[4];
    // species 30: CH2CHO
    species[30] = +6.200000000000000e+01 * invT - 6.162391100000001e+00 -
                  3.409062400000000e+00 * tc[0] -
                  5.369287000000000e-03 * tc[1] -
                  3.152487500000000e-07 * tc[2] +
                  5.965485916666667e-10 * tc[3] - 1.433692550000000e-13 * tc[4];
    // species 31: aC3H5
    species[31] = +1.924562900000000e+04 * invT - 1.581003050000000e+01 -
                  1.363183500000000e+00 * tc[0] -
                  9.906910499999999e-03 * tc[1] -
                  2.082843333333333e-06 * tc[2] +
                  2.779629583333333e-09 * tc[3] - 7.923285500000000e-13 * tc[4];
    // species 32: C6H5
    species[32] = +3.977959000000000e+04 * invT - 4.502568030000000e+01 +
                  3.693145300000000e+00 * tc[0] -
                  2.608948400000000e-02 * tc[1] +
                  4.259737833333333e-06 * tc[2] +
                  5.888426750000000e-10 * tc[3] - 3.791698750000000e-13 * tc[4];
    // species 33: C6H5CH2
    species[33] = +2.330702700000000e+04 * invT - 2.306770460000000e+01 -
                  4.811154000000000e-01 * tc[0] -
                  1.925641600000000e-02 * tc[1] -
                  5.476915333333333e-06 * tc[2] +
                  6.414393416666667e-09 * tc[3] - 1.771153400000000e-12 * tc[4];
    // species 34: C6H4O2
    species[34] = -1.761104700000000e+04 * invT - 3.019144305000000e+01 +
                  9.519300500000000e-01 * tc[0] -
                  2.892122250000000e-02 * tc[1] +
                  6.369073166666667e-06 * tc[2] -
                  3.859388000000000e-10 * tc[3] - 1.814832550000000e-13 * tc[4];
    // species 35: C6H5CO
    species[35] = +1.125580300000000e+04 * invT - 3.780329050000000e+01 +
                  2.025115500000000e+00 * tc[0] -
                  3.075627050000000e-02 * tc[1] +
                  5.267275500000000e-06 * tc[2] +
                  5.810383250000000e-10 * tc[3] - 3.991757449999999e-13 * tc[4];
    // species 36: C6H5CHO
    species[36] = -6.116934900000000e+03 * invT - 4.339446840000000e+01 +
                  3.162733400000000e+00 * tc[0] -
                  3.318462250000000e-02 * tc[1] +
                  5.802725500000000e-06 * tc[2] +
                  5.249948083333333e-10 * tc[3] - 4.290355050000000e-13 * tc[4];
    // species 37: N2
    species[37] = -1.020899900000000e+03 * invT - 6.516950000000001e-01 -
                  3.298677000000000e+00 * tc[0] -
                  7.041202000000000e-04 * tc[1] +
                  6.605369999999999e-07 * tc[2] -
                  4.701262500000001e-10 * tc[3] + 1.222427000000000e-13 * tc[4];
  } else {
    // species 0: POSF10325
    species[0] = -4.877881600000000e+04 * invT + 1.190462710000000e+02 -
                 2.322816300000000e+01 * tc[0] - 3.309419400000000e-02 * tc[1] +
                 4.026416666666667e-06 * tc[2] - 2.988791416666667e-10 * tc[3] +
                 5.113449000000000e-15 * tc[4];
    // species 1: C2H4
    species[1] = +4.939886140000000e+03 * invT - 8.269258140000002e+00 -
                 2.036111160000000e+00 * tc[0] - 7.322707550000000e-03 * tc[1] +
                 1.118463191666667e-06 * tc[2] - 1.226857691666667e-10 * tc[3] +
                 6.285303050000000e-15 * tc[4];
    // species 2: CH4
    species[2] = -9.468344590000001e+03 * invT - 1.836246650500000e+01 -
                 7.485149500000000e-02 * tc[0] - 6.695473350000000e-03 * tc[1] +
                 9.554763483333333e-07 * tc[2] - 1.019104458333333e-10 * tc[3] +
                 5.090761500000000e-15 * tc[4];
    // species 3: H2
    species[3] = -9.501589220000000e+02 * invT + 6.542302510000000e+00 -
                 3.337279200000000e+00 * tc[0] + 2.470123655000000e-05 * tc[1] -
                 8.324279633333333e-08 * tc[2] + 1.496386616666667e-11 * tc[3] -
                 1.001276880000000e-15 * tc[4];
    // species 4: C3H6
    species[4] = -9.235703000000000e+02 * invT + 2.004560700000000e+01 -
                 6.732257000000000e+00 * tc[0] - 7.454170000000000e-03 * tc[1] +
                 8.249831666666666e-07 * tc[2] - 6.010018333333334e-11 * tc[3] +
                 1.883102000000000e-15 * tc[4];
    // species 5: C4H81
    species[5] = -2.139723100000000e+03 * invT - 1.348961690000000e+01 -
                 2.053584100000000e+00 * tc[0] - 1.717525350000000e-02 * tc[1] +
                 2.647199500000000e-06 * tc[2] - 2.757471833333334e-10 * tc[3] +
                 1.268052250000000e-14 * tc[4];
    // species 6: iC4H8
    species[6] = -5.006675800000000e+03 * invT + 3.393792100000000e+00 -
                 4.460947000000000e+00 * tc[0] - 1.480574350000000e-02 * tc[1] +
                 2.179521500000000e-06 * tc[2] - 2.214327833333333e-10 * tc[3] +
                 1.006735650000000e-14 * tc[4];
    // species 7: C6H6
    species[7] = +5.204346200000000e+03 * invT + 3.825378950000000e+01 -
                 9.138124500000000e+00 * tc[0] - 1.192721650000000e-02 * tc[1] +
                 1.468795433333333e-06 * tc[2] - 1.008251750000000e-10 * tc[3] +
                 9.110751500000001e-16 * tc[4];
    // species 8: C6H5CH3
    species[8] = -6.976490800000000e+02 * invT + 5.966881900000000e+01 -
                 1.294003400000000e+01 * tc[0] - 1.334564350000000e-02 * tc[1] +
                 1.613975083333333e-06 * tc[2] - 1.311552416666667e-10 * tc[3] +
                 4.733180050000000e-15 * tc[4];
    // species 9: H
    species[9] = +2.547365990000000e+04 * invT + 2.946682924000000e+00 -
                 2.500000010000000e+00 * tc[0] + 1.154214865000000e-11 * tc[1] -
                 2.692699133333334e-15 * tc[2] + 3.945960291666667e-19 * tc[3] -
                 2.490986785000000e-23 * tc[4];
    // species 10: O
    species[10] = +2.921757910000000e+04 * invT - 2.214917859999999e+00 -
                  2.569420780000000e+00 * tc[0] +
                  4.298705685000000e-05 * tc[1] -
                  6.991409816666667e-09 * tc[2] +
                  8.348149916666666e-13 * tc[3] - 6.141684549999999e-17 * tc[4];
    // species 11: OH
    species[11] = +3.718857740000000e+03 * invT - 2.836911870000000e+00 -
                  2.864728860000000e+00 * tc[0] -
                  5.282522400000000e-04 * tc[1] +
                  4.318045966666667e-08 * tc[2] -
                  2.543488950000000e-12 * tc[3] + 6.659793800000000e-17 * tc[4];
    // species 12: HO2
    species[12] = +1.118567130000000e+02 * invT + 2.321087500000001e-01 -
                  4.017210900000000e+00 * tc[0] -
                  1.119910065000000e-03 * tc[1] +
                  1.056096916666667e-07 * tc[2] -
                  9.520530833333334e-12 * tc[3] + 5.395426750000000e-16 * tc[4];
    // species 13: H2O
    species[13] = -3.000429710000000e+04 * invT - 1.932777610000000e+00 -
                  3.033992490000000e+00 * tc[0] -
                  1.088459020000000e-03 * tc[1] +
                  2.734541966666666e-08 * tc[2] +
                  8.086832250000000e-12 * tc[3] - 8.410049600000000e-16 * tc[4];
    // species 14: H2O2
    species[14] = -1.786178770000000e+04 * invT + 1.248846229999999e+00 -
                  4.165002850000000e+00 * tc[0] -
                  2.454158470000000e-03 * tc[1] +
                  3.168987083333333e-07 * tc[2] -
                  3.093216550000000e-11 * tc[3] + 1.439541525000000e-15 * tc[4];
    // species 15: O2
    species[15] = -1.088457720000000e+03 * invT - 2.170693450000000e+00 -
                  3.282537840000000e+00 * tc[0] -
                  7.415437700000000e-04 * tc[1] +
                  1.263277781666667e-07 * tc[2] -
                  1.745587958333333e-11 * tc[3] + 1.083588970000000e-15 * tc[4];
    // species 16: CH2
    species[16] = +4.626360400000000e+04 * invT - 3.297092110000000e+00 -
                  2.874101130000000e+00 * tc[0] -
                  1.828196460000000e-03 * tc[1] +
                  2.348243283333333e-07 * tc[2] -
                  2.168162908333333e-11 * tc[3] + 9.386378350000000e-16 * tc[4];
    // species 17: CH2*
    species[17] = +5.092599970000000e+04 * invT - 6.334463270000000e+00 -
                  2.292038420000000e+00 * tc[0] -
                  2.327943185000000e-03 * tc[1] +
                  3.353199116666667e-07 * tc[2] -
                  3.482550000000000e-11 * tc[3] + 1.698581825000000e-15 * tc[4];
    // species 18: CH3
    species[18] = +1.677558430000000e+04 * invT - 6.194354070000000e+00 -
                  2.285717720000000e+00 * tc[0] -
                  3.619950185000000e-03 * tc[1] +
                  4.978572466666667e-07 * tc[2] -
                  4.964038700000000e-11 * tc[3] + 2.335771970000000e-15 * tc[4];
    // species 19: HCO
    species[19] = +4.011918150000000e+03 * invT - 7.026170540000000e+00 -
                  2.772174380000000e+00 * tc[0] -
                  2.478477630000000e-03 * tc[1] +
                  4.140760216666667e-07 * tc[2] -
                  4.909681483333334e-11 * tc[3] + 2.667543555000000e-15 * tc[4];
    // species 20: CH2O
    species[20] = -1.399583230000000e+04 * invT - 1.189563292000000e+01 -
                  1.760690080000000e+00 * tc[0] -
                  4.600000410000000e-03 * tc[1] +
                  7.370980216666666e-07 * tc[2] -
                  8.386767666666666e-11 * tc[3] + 4.419278200000001e-15 * tc[4];
    // species 21: CH3O
    species[21] = +3.781119400000000e+02 * invT + 6.724592660000000e+00 -
                  4.757792380000000e+00 * tc[0] -
                  3.720712370000000e-03 * tc[1] +
                  4.495086266666666e-07 * tc[2] -
                  3.650754200000000e-11 * tc[3] + 1.317685490000000e-15 * tc[4];
    // species 22: CO
    species[22] = -1.415187240000000e+04 * invT - 5.103502110000000e+00 -
                  2.715185610000000e+00 * tc[0] -
                  1.031263715000000e-03 * tc[1] +
                  1.664709618333334e-07 * tc[2] -
                  1.917108400000000e-11 * tc[3] + 1.018238580000000e-15 * tc[4];
    // species 23: CO2
    species[23] = -4.875916600000000e+04 * invT + 1.585822230000000e+00 -
                  3.857460290000000e+00 * tc[0] -
                  2.207185130000000e-03 * tc[1] +
                  3.691356733333334e-07 * tc[2] -
                  4.362418233333334e-11 * tc[3] + 2.360420820000000e-15 * tc[4];
    // species 24: C2H2
    species[24] = +2.593599920000000e+04 * invT + 5.377850850000001e+00 -
                  4.147569640000000e+00 * tc[0] -
                  2.980833320000000e-03 * tc[1] +
                  3.954914200000000e-07 * tc[2] -
                  3.895101425000000e-11 * tc[3] + 1.806176065000000e-15 * tc[4];
    // species 25: C2H3
    species[25] = +3.461287390000000e+04 * invT - 4.770599780000000e+00 -
                  3.016724000000000e+00 * tc[0] -
                  5.165114600000000e-03 * tc[1] +
                  7.801372483333333e-07 * tc[2] -
                  8.480274000000000e-11 * tc[3] + 4.313035205000000e-15 * tc[4];
    // species 26: C2H5
    species[26] = +1.285752000000000e+04 * invT - 1.150777788000000e+01 -
                  1.954656420000000e+00 * tc[0] -
                  8.698636100000001e-03 * tc[1] +
                  1.330344446666667e-06 * tc[2] -
                  1.460147408333333e-10 * tc[3] + 7.482078800000000e-15 * tc[4];
    // species 27: C2H6
    species[27] = -1.142639320000000e+04 * invT - 1.404372920000000e+01 -
                  1.071881500000000e+00 * tc[0] -
                  1.084263385000000e-02 * tc[1] +
                  1.670934450000000e-06 * tc[2] -
                  1.845100008333333e-10 * tc[3] + 9.500144500000000e-15 * tc[4];
    // species 28: HCCO
    species[28] = +1.932721500000000e+04 * invT + 9.558465300000000e+00 -
                  5.628205800000000e+00 * tc[0] -
                  2.042670050000000e-03 * tc[1] +
                  2.655757833333333e-07 * tc[2] -
                  2.385504333333333e-11 * tc[3] + 9.703915999999999e-16 * tc[4];
    // species 29: CH2CO
    species[29] = -7.778500000000000e+03 * invT + 3.879050115000000e+00 -
                  4.511297320000000e+00 * tc[0] -
                  4.501798725000000e-03 * tc[1] +
                  6.948993916666666e-07 * tc[2] -
                  7.694549016666667e-11 * tc[3] + 3.974191005000000e-15 * tc[4];
    // species 30: CH2CHO
    species[30] = -9.695000000000000e+02 * invT + 1.100775780000000e+01 -
                  5.975669900000000e+00 * tc[0] -
                  4.065295700000000e-03 * tc[1] +
                  4.572707500000000e-07 * tc[2] -
                  3.391920083333333e-11 * tc[3] + 1.088008550000000e-15 * tc[4];
    // species 31: aC3H5
    species[31] = +1.748244900000000e+04 * invT + 1.774383770000000e+01 -
                  6.500787700000000e+00 * tc[0] -
                  7.162365500000000e-03 * tc[1] +
                  9.463605333333332e-07 * tc[2] -
                  9.234000833333333e-11 * tc[3] + 4.518194349999999e-15 * tc[4];
    // species 32: C6H5
    species[32] = +3.626104700000000e+04 * invT + 3.155195400000000e+01 -
                  8.597310999999999e+00 * tc[0] -
                  1.112081500000000e-02 * tc[1] +
                  1.453332966666666e-06 * tc[2] -
                  1.149065416666667e-10 * tc[3] + 2.657302800000000e-15 * tc[4];
    // species 33: C6H5CH2
    species[33] = +1.856420300000000e+04 * invT + 6.570956900000000e+01 -
                  1.404398000000000e+01 * tc[0] -
                  1.174693650000000e-02 * tc[1] +
                  1.422922783333333e-06 * tc[2] -
                  1.157570083333333e-10 * tc[3] + 4.180721000000000e-15 * tc[4];
    // species 34: C6H4O2
    species[34] = -2.108577000000000e+04 * invT + 4.803129300000000e+01 -
                  1.173084000000000e+01 * tc[0] -
                  1.180749750000000e-02 * tc[1] +
                  1.705762666666667e-06 * tc[2] -
                  1.627681166666667e-10 * tc[3] + 6.373011000000000e-15 * tc[4];
    // species 35: C6H5CO
    species[35] = +6.914783700000000e+03 * invT + 5.803362700000000e+01 -
                  1.337440900000000e+01 * tc[0] -
                  1.199964450000000e-02 * tc[1] +
                  1.744287333333333e-06 * tc[2] -
                  1.805760916666667e-10 * tc[3] + 9.003522500000000e-15 * tc[4];
    // species 36: C6H5CHO
    species[36] = -1.101974400000000e+04 * invT + 6.161653300000000e+01 -
                  1.365073700000000e+01 * tc[0] -
                  1.284020950000000e-02 * tc[1] +
                  1.744454833333333e-06 * tc[2] -
                  1.617785833333333e-10 * tc[3] + 6.741896000000000e-15 * tc[4];
    // species 37: N2
    species[37] = -9.227977000000000e+02 * invT - 3.053888000000000e+00 -
                  2.926640000000000e+00 * tc[0] -
                  7.439884000000000e-04 * tc[1] +
                  9.474600000000001e-08 * tc[2] -
                  8.414198333333333e-12 * tc[3] + 3.376675500000000e-16 * tc[4];
  }
  return;
}

// compute the a/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
helmholtz(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = -4.04463440e+04 * invT - 1.83651083e+01 -
                 3.16857770e+00 * tc[0] - 3.56017240e-02 * tc[1] -
                 1.44993258e-05 * tc[2] + 1.40510050e-08 * tc[3] -
                 3.79931850e-12 * tc[4];
    // species 1: C2H4
    species[1] = +5.08977593e+03 * invT - 1.13812948e+00 -
                 3.95920148e+00 * tc[0] + 3.78526124e-03 * tc[1] -
                 9.51650487e-06 * tc[2] + 5.76323961e-09 * tc[3] -
                 1.34942187e-12 * tc[4];
    // species 2: CH4
    species[2] = -1.02466476e+04 * invT + 8.79117989e+00 -
                 5.14987613e+00 * tc[0] + 6.83548940e-03 * tc[1] -
                 8.19667665e-06 * tc[2] + 4.03952522e-09 * tc[3] -
                 8.33469780e-13 * tc[4];
    // species 3: H2
    species[3] = -9.17935173e+02 * invT + 6.61320882e-01 -
                 2.34433112e+00 * tc[0] - 3.99026037e-03 * tc[1] +
                 3.24635850e-06 * tc[2] - 1.67976745e-09 * tc[3] +
                 3.68805881e-13 * tc[4];
    // species 4: C3H6
    species[4] = +1.07482600e+03 * invT - 1.56520330e+01 -
                 1.49330700e+00 * tc[0] - 1.04625900e-02 * tc[1] -
                 7.47799000e-07 * tc[2] + 1.39076000e-09 * tc[3] -
                 3.57907300e-13 * tc[4];
    // species 5: C4H81
    species[5] = -1.79040040e+03 * invT - 2.08813310e+01 -
                 1.18113800e+00 * tc[0] - 1.54266900e-02 * tc[1] -
                 8.47754117e-07 * tc[2] + 2.05457400e-09 * tc[3] -
                 5.55509650e-13 * tc[4];
    // species 6: iC4H8
    species[6] = -4.03730690e+03 * invT - 1.10292475e+01 -
                 2.64714050e+00 * tc[0] - 1.29514785e-02 * tc[1] -
                 1.36642257e-06 * tc[2] + 1.84943825e-09 * tc[3] -
                 4.44792900e-13 * tc[4];
    // species 7: C6H6
    species[7] = +9.18177730e+03 * invT - 4.97336054e+01 +
                 4.84377340e+00 * tc[0] - 2.92138065e-02 * tc[1] +
                 4.91430917e-06 * tc[2] + 5.78253667e-10 * tc[3] -
                 4.10626265e-13 * tc[4];
    // species 8: C6H5CH3
    species[8] = +4.07563000e+03 * invT - 1.96669437e+01 -
                 1.61526630e+00 * tc[0] - 1.05497190e-02 * tc[1] -
                 1.42276697e-05 * tc[2] + 1.10508883e-08 * tc[3] -
                 2.79783020e-12 * tc[4];
    // species 9: H
    species[9] = +2.54736599e+04 * invT + 1.94668285e+00 -
                 2.50000000e+00 * tc[0] - 3.52666409e-13 * tc[1] +
                 3.32653273e-16 * tc[2] - 1.91734693e-19 * tc[3] +
                 4.63866166e-23 * tc[4];
    // species 10: O
    species[10] = +2.91222592e+04 * invT + 1.16333640e-01 -
                  3.16826710e+00 * tc[0] + 1.63965942e-03 * tc[1] -
                  1.10717733e-06 * tc[2] + 5.10672187e-10 * tc[3] -
                  1.05632985e-13 * tc[4];
    // species 11: OH
    species[11] = +3.38153812e+03 * invT + 3.81573857e+00 -
                  4.12530561e+00 * tc[0] + 1.61272470e-03 * tc[1] -
                  1.08794115e-06 * tc[2] + 4.83211369e-10 * tc[3] -
                  1.03118689e-13 * tc[4];
    // species 12: HO2
    species[12] = +2.94808040e+02 * invT - 4.14864440e-01 -
                  4.30179801e+00 * tc[0] + 2.37456025e-03 * tc[1] -
                  3.52638152e-06 * tc[2] + 2.02303245e-09 * tc[3] -
                  4.64612562e-13 * tc[4];
    // species 13: H2O
    species[13] = -3.02937267e+04 * invT + 4.04767277e+00 -
                  4.19864056e+00 * tc[0] + 1.01821705e-03 * tc[1] -
                  1.08673369e-06 * tc[2] + 4.57330885e-10 * tc[3] -
                  8.85989085e-14 * tc[4];
    // species 14: H2O2
    species[14] = -1.77025821e+04 * invT - 1.58938050e-01 -
                  4.27611269e+00 * tc[0] + 2.71411208e-04 * tc[1] -
                  2.78892835e-06 * tc[2] + 1.79809011e-09 * tc[3] -
                  4.31227182e-13 * tc[4];
    // species 15: O2
    species[15] = -1.06394356e+03 * invT - 8.75219370e-01 -
                  3.78245636e+00 * tc[0] + 1.49836708e-03 * tc[1] -
                  1.64121700e-06 * tc[2] + 8.06774591e-10 * tc[3] -
                  1.62186418e-13 * tc[4];
    // species 16: CH2
    species[16] = +4.60040401e+04 * invT + 1.20014682e+00 -
                  3.76267867e+00 * tc[0] - 4.84436072e-04 * tc[1] -
                  4.65816402e-07 * tc[2] + 3.20909294e-10 * tc[3] -
                  8.43708595e-14 * tc[4];
    // species 17: CH2*
    species[17] = +5.04968163e+04 * invT + 3.96772308e+00 -
                  4.19860411e+00 * tc[0] + 1.18330710e-03 * tc[1] -
                  1.37216037e-06 * tc[2] + 5.57346651e-10 * tc[3] -
                  9.71573685e-14 * tc[4];
    // species 18: CH3
    species[18] = +1.64449988e+04 * invT + 1.06902607e+00 -
                  3.67359040e+00 * tc[0] - 1.00547588e-03 * tc[1] -
                  9.55036427e-07 * tc[2] + 5.72597854e-10 * tc[3] -
                  1.27192867e-13 * tc[4];
    // species 19: HCO
    species[19] = +3.83956496e+03 * invT - 1.73186590e-01 -
                  4.22118584e+00 * tc[0] + 1.62196266e-03 * tc[1] -
                  2.29665743e-06 * tc[2] + 1.10953411e-09 * tc[3] -
                  2.16884432e-13 * tc[4];
    // species 20: CH2O
    species[20] = -1.43089567e+04 * invT + 3.19091025e+00 -
                  4.79372315e+00 * tc[0] + 4.95416684e-03 * tc[1] -
                  6.22033347e-06 * tc[2] + 3.16071051e-09 * tc[3] -
                  6.58863260e-13 * tc[4];
    // species 21: CH3O
    species[21] = +1.29569760e+03 * invT - 3.86060362e+00 -
                  3.71180502e+00 * tc[0] + 1.40231653e-03 * tc[1] -
                  6.27584952e-06 * tc[2] + 3.94226741e-09 * tc[3] -
                  9.32942100e-13 * tc[4];
    // species 22: CO
    species[22] = -1.43440860e+04 * invT - 9.28875810e-01 -
                  3.57953347e+00 * tc[0] + 3.05176840e-04 * tc[1] -
                  1.69469055e-07 * tc[2] - 7.55838237e-11 * tc[3] +
                  4.52212249e-14 * tc[4];
    // species 23: CO2
    species[23] = -4.83719697e+04 * invT - 8.54427870e+00 -
                  2.35677352e+00 * tc[0] - 4.49229839e-03 * tc[1] +
                  1.18726045e-06 * tc[2] - 2.04932518e-10 * tc[3] +
                  7.18497740e-15 * tc[4];
    // species 24: C2H2
    species[24] = +2.64289807e+04 * invT - 1.41310240e+01 -
                  8.08681094e-01 * tc[0] - 1.16807815e-02 * tc[1] +
                  5.91953025e-06 * tc[2] - 2.33460364e-09 * tc[3] +
                  4.25036487e-13 * tc[4];
    // species 25: C2H3
    species[25] = +3.48598468e+04 * invT - 6.29807380e+00 -
                  3.21246645e+00 * tc[0] - 7.57395810e-04 * tc[1] -
                  4.32015687e-06 * tc[2] + 2.98048206e-09 * tc[3] -
                  7.35754365e-13 * tc[4];
    // species 26: C2H5
    species[26] = +1.28416265e+04 * invT - 1.40074356e+00 -
                  4.30646568e+00 * tc[0] + 2.09329446e-03 * tc[1] -
                  8.28571345e-06 * tc[2] + 4.99272172e-09 * tc[3] -
                  1.15254502e-12 * tc[4];
    // species 27: C2H6
    species[27] = -1.15222055e+04 * invT + 6.24601760e-01 -
                  4.29142492e+00 * tc[0] + 2.75077135e-03 * tc[1] -
                  9.99063813e-06 * tc[2] + 5.90388571e-09 * tc[3] -
                  1.34342886e-12 * tc[4];
    // species 28: HCCO
    species[28] = +2.00594490e+04 * invT - 1.12386956e+01 -
                  2.25172140e+00 * tc[0] - 8.82751050e-03 * tc[1] +
                  3.95485017e-06 * tc[2] - 1.43964658e-09 * tc[3] +
                  2.53324055e-13 * tc[4];
    // species 29: CH2CO
    species[29] = -7.27000000e+03 * invT - 1.10798117e+01 -
                  2.13583630e+00 * tc[0] - 9.05943605e-03 * tc[1] +
                  2.89912457e-06 * tc[2] - 7.78664640e-10 * tc[3] +
                  1.00728807e-13 * tc[4];
    // species 30: CH2CHO
    species[30] = +6.20000000e+01 * invT - 7.16239110e+00 -
                  3.40906240e+00 * tc[0] - 5.36928700e-03 * tc[1] -
                  3.15248750e-07 * tc[2] + 5.96548592e-10 * tc[3] -
                  1.43369255e-13 * tc[4];
    // species 31: aC3H5
    species[31] = +1.92456290e+04 * invT - 1.68100305e+01 -
                  1.36318350e+00 * tc[0] - 9.90691050e-03 * tc[1] -
                  2.08284333e-06 * tc[2] + 2.77962958e-09 * tc[3] -
                  7.92328550e-13 * tc[4];
    // species 32: C6H5
    species[32] = +3.97795900e+04 * invT - 4.60256803e+01 +
                  3.69314530e+00 * tc[0] - 2.60894840e-02 * tc[1] +
                  4.25973783e-06 * tc[2] + 5.88842675e-10 * tc[3] -
                  3.79169875e-13 * tc[4];
    // species 33: C6H5CH2
    species[33] = +2.33070270e+04 * invT - 2.40677046e+01 -
                  4.81115400e-01 * tc[0] - 1.92564160e-02 * tc[1] -
                  5.47691533e-06 * tc[2] + 6.41439342e-09 * tc[3] -
                  1.77115340e-12 * tc[4];
    // species 34: C6H4O2
    species[34] = -1.76110470e+04 * invT - 3.11914431e+01 +
                  9.51930050e-01 * tc[0] - 2.89212225e-02 * tc[1] +
                  6.36907317e-06 * tc[2] - 3.85938800e-10 * tc[3] -
                  1.81483255e-13 * tc[4];
    // species 35: C6H5CO
    species[35] = +1.12558030e+04 * invT - 3.88032905e+01 +
                  2.02511550e+00 * tc[0] - 3.07562705e-02 * tc[1] +
                  5.26727550e-06 * tc[2] + 5.81038325e-10 * tc[3] -
                  3.99175745e-13 * tc[4];
    // species 36: C6H5CHO
    species[36] = -6.11693490e+03 * invT - 4.43944684e+01 +
                  3.16273340e+00 * tc[0] - 3.31846225e-02 * tc[1] +
                  5.80272550e-06 * tc[2] + 5.24994808e-10 * tc[3] -
                  4.29035505e-13 * tc[4];
    // species 37: N2
    species[37] = -1.02089990e+03 * invT - 1.65169500e+00 -
                  3.29867700e+00 * tc[0] - 7.04120200e-04 * tc[1] +
                  6.60537000e-07 * tc[2] - 4.70126250e-10 * tc[3] +
                  1.22242700e-13 * tc[4];
  } else {
    // species 0: POSF10325
    species[0] = -4.87788160e+04 * invT + 1.18046271e+02 -
                 2.32281630e+01 * tc[0] - 3.30941940e-02 * tc[1] +
                 4.02641667e-06 * tc[2] - 2.98879142e-10 * tc[3] +
                 5.11344900e-15 * tc[4];
    // species 1: C2H4
    species[1] = +4.93988614e+03 * invT - 9.26925814e+00 -
                 2.03611116e+00 * tc[0] - 7.32270755e-03 * tc[1] +
                 1.11846319e-06 * tc[2] - 1.22685769e-10 * tc[3] +
                 6.28530305e-15 * tc[4];
    // species 2: CH4
    species[2] = -9.46834459e+03 * invT - 1.93624665e+01 -
                 7.48514950e-02 * tc[0] - 6.69547335e-03 * tc[1] +
                 9.55476348e-07 * tc[2] - 1.01910446e-10 * tc[3] +
                 5.09076150e-15 * tc[4];
    // species 3: H2
    species[3] = -9.50158922e+02 * invT + 5.54230251e+00 -
                 3.33727920e+00 * tc[0] + 2.47012365e-05 * tc[1] -
                 8.32427963e-08 * tc[2] + 1.49638662e-11 * tc[3] -
                 1.00127688e-15 * tc[4];
    // species 4: C3H6
    species[4] = -9.23570300e+02 * invT + 1.90456070e+01 -
                 6.73225700e+00 * tc[0] - 7.45417000e-03 * tc[1] +
                 8.24983167e-07 * tc[2] - 6.01001833e-11 * tc[3] +
                 1.88310200e-15 * tc[4];
    // species 5: C4H81
    species[5] = -2.13972310e+03 * invT - 1.44896169e+01 -
                 2.05358410e+00 * tc[0] - 1.71752535e-02 * tc[1] +
                 2.64719950e-06 * tc[2] - 2.75747183e-10 * tc[3] +
                 1.26805225e-14 * tc[4];
    // species 6: iC4H8
    species[6] = -5.00667580e+03 * invT + 2.39379210e+00 -
                 4.46094700e+00 * tc[0] - 1.48057435e-02 * tc[1] +
                 2.17952150e-06 * tc[2] - 2.21432783e-10 * tc[3] +
                 1.00673565e-14 * tc[4];
    // species 7: C6H6
    species[7] = +5.20434620e+03 * invT + 3.72537895e+01 -
                 9.13812450e+00 * tc[0] - 1.19272165e-02 * tc[1] +
                 1.46879543e-06 * tc[2] - 1.00825175e-10 * tc[3] +
                 9.11075150e-16 * tc[4];
    // species 8: C6H5CH3
    species[8] = -6.97649080e+02 * invT + 5.86688190e+01 -
                 1.29400340e+01 * tc[0] - 1.33456435e-02 * tc[1] +
                 1.61397508e-06 * tc[2] - 1.31155242e-10 * tc[3] +
                 4.73318005e-15 * tc[4];
    // species 9: H
    species[9] = +2.54736599e+04 * invT + 1.94668292e+00 -
                 2.50000001e+00 * tc[0] + 1.15421486e-11 * tc[1] -
                 2.69269913e-15 * tc[2] + 3.94596029e-19 * tc[3] -
                 2.49098679e-23 * tc[4];
    // species 10: O
    species[10] = +2.92175791e+04 * invT - 3.21491786e+00 -
                  2.56942078e+00 * tc[0] + 4.29870569e-05 * tc[1] -
                  6.99140982e-09 * tc[2] + 8.34814992e-13 * tc[3] -
                  6.14168455e-17 * tc[4];
    // species 11: OH
    species[11] = +3.71885774e+03 * invT - 3.83691187e+00 -
                  2.86472886e+00 * tc[0] - 5.28252240e-04 * tc[1] +
                  4.31804597e-08 * tc[2] - 2.54348895e-12 * tc[3] +
                  6.65979380e-17 * tc[4];
    // species 12: HO2
    species[12] = +1.11856713e+02 * invT - 7.67891250e-01 -
                  4.01721090e+00 * tc[0] - 1.11991006e-03 * tc[1] +
                  1.05609692e-07 * tc[2] - 9.52053083e-12 * tc[3] +
                  5.39542675e-16 * tc[4];
    // species 13: H2O
    species[13] = -3.00042971e+04 * invT - 2.93277761e+00 -
                  3.03399249e+00 * tc[0] - 1.08845902e-03 * tc[1] +
                  2.73454197e-08 * tc[2] + 8.08683225e-12 * tc[3] -
                  8.41004960e-16 * tc[4];
    // species 14: H2O2
    species[14] = -1.78617877e+04 * invT + 2.48846230e-01 -
                  4.16500285e+00 * tc[0] - 2.45415847e-03 * tc[1] +
                  3.16898708e-07 * tc[2] - 3.09321655e-11 * tc[3] +
                  1.43954153e-15 * tc[4];
    // species 15: O2
    species[15] = -1.08845772e+03 * invT - 3.17069345e+00 -
                  3.28253784e+00 * tc[0] - 7.41543770e-04 * tc[1] +
                  1.26327778e-07 * tc[2] - 1.74558796e-11 * tc[3] +
                  1.08358897e-15 * tc[4];
    // species 16: CH2
    species[16] = +4.62636040e+04 * invT - 4.29709211e+00 -
                  2.87410113e+00 * tc[0] - 1.82819646e-03 * tc[1] +
                  2.34824328e-07 * tc[2] - 2.16816291e-11 * tc[3] +
                  9.38637835e-16 * tc[4];
    // species 17: CH2*
    species[17] = +5.09259997e+04 * invT - 7.33446327e+00 -
                  2.29203842e+00 * tc[0] - 2.32794318e-03 * tc[1] +
                  3.35319912e-07 * tc[2] - 3.48255000e-11 * tc[3] +
                  1.69858182e-15 * tc[4];
    // species 18: CH3
    species[18] = +1.67755843e+04 * invT - 7.19435407e+00 -
                  2.28571772e+00 * tc[0] - 3.61995018e-03 * tc[1] +
                  4.97857247e-07 * tc[2] - 4.96403870e-11 * tc[3] +
                  2.33577197e-15 * tc[4];
    // species 19: HCO
    species[19] = +4.01191815e+03 * invT - 8.02617054e+00 -
                  2.77217438e+00 * tc[0] - 2.47847763e-03 * tc[1] +
                  4.14076022e-07 * tc[2] - 4.90968148e-11 * tc[3] +
                  2.66754356e-15 * tc[4];
    // species 20: CH2O
    species[20] = -1.39958323e+04 * invT - 1.28956329e+01 -
                  1.76069008e+00 * tc[0] - 4.60000041e-03 * tc[1] +
                  7.37098022e-07 * tc[2] - 8.38676767e-11 * tc[3] +
                  4.41927820e-15 * tc[4];
    // species 21: CH3O
    species[21] = +3.78111940e+02 * invT + 5.72459266e+00 -
                  4.75779238e+00 * tc[0] - 3.72071237e-03 * tc[1] +
                  4.49508627e-07 * tc[2] - 3.65075420e-11 * tc[3] +
                  1.31768549e-15 * tc[4];
    // species 22: CO
    species[22] = -1.41518724e+04 * invT - 6.10350211e+00 -
                  2.71518561e+00 * tc[0] - 1.03126372e-03 * tc[1] +
                  1.66470962e-07 * tc[2] - 1.91710840e-11 * tc[3] +
                  1.01823858e-15 * tc[4];
    // species 23: CO2
    species[23] = -4.87591660e+04 * invT + 5.85822230e-01 -
                  3.85746029e+00 * tc[0] - 2.20718513e-03 * tc[1] +
                  3.69135673e-07 * tc[2] - 4.36241823e-11 * tc[3] +
                  2.36042082e-15 * tc[4];
    // species 24: C2H2
    species[24] = +2.59359992e+04 * invT + 4.37785085e+00 -
                  4.14756964e+00 * tc[0] - 2.98083332e-03 * tc[1] +
                  3.95491420e-07 * tc[2] - 3.89510143e-11 * tc[3] +
                  1.80617607e-15 * tc[4];
    // species 25: C2H3
    species[25] = +3.46128739e+04 * invT - 5.77059978e+00 -
                  3.01672400e+00 * tc[0] - 5.16511460e-03 * tc[1] +
                  7.80137248e-07 * tc[2] - 8.48027400e-11 * tc[3] +
                  4.31303520e-15 * tc[4];
    // species 26: C2H5
    species[26] = +1.28575200e+04 * invT - 1.25077779e+01 -
                  1.95465642e+00 * tc[0] - 8.69863610e-03 * tc[1] +
                  1.33034445e-06 * tc[2] - 1.46014741e-10 * tc[3] +
                  7.48207880e-15 * tc[4];
    // species 27: C2H6
    species[27] = -1.14263932e+04 * invT - 1.50437292e+01 -
                  1.07188150e+00 * tc[0] - 1.08426339e-02 * tc[1] +
                  1.67093445e-06 * tc[2] - 1.84510001e-10 * tc[3] +
                  9.50014450e-15 * tc[4];
    // species 28: HCCO
    species[28] = +1.93272150e+04 * invT + 8.55846530e+00 -
                  5.62820580e+00 * tc[0] - 2.04267005e-03 * tc[1] +
                  2.65575783e-07 * tc[2] - 2.38550433e-11 * tc[3] +
                  9.70391600e-16 * tc[4];
    // species 29: CH2CO
    species[29] = -7.77850000e+03 * invT + 2.87905011e+00 -
                  4.51129732e+00 * tc[0] - 4.50179872e-03 * tc[1] +
                  6.94899392e-07 * tc[2] - 7.69454902e-11 * tc[3] +
                  3.97419100e-15 * tc[4];
    // species 30: CH2CHO
    species[30] = -9.69500000e+02 * invT + 1.00077578e+01 -
                  5.97566990e+00 * tc[0] - 4.06529570e-03 * tc[1] +
                  4.57270750e-07 * tc[2] - 3.39192008e-11 * tc[3] +
                  1.08800855e-15 * tc[4];
    // species 31: aC3H5
    species[31] = +1.74824490e+04 * invT + 1.67438377e+01 -
                  6.50078770e+00 * tc[0] - 7.16236550e-03 * tc[1] +
                  9.46360533e-07 * tc[2] - 9.23400083e-11 * tc[3] +
                  4.51819435e-15 * tc[4];
    // species 32: C6H5
    species[32] = +3.62610470e+04 * invT + 3.05519540e+01 -
                  8.59731100e+00 * tc[0] - 1.11208150e-02 * tc[1] +
                  1.45333297e-06 * tc[2] - 1.14906542e-10 * tc[3] +
                  2.65730280e-15 * tc[4];
    // species 33: C6H5CH2
    species[33] = +1.85642030e+04 * invT + 6.47095690e+01 -
                  1.40439800e+01 * tc[0] - 1.17469365e-02 * tc[1] +
                  1.42292278e-06 * tc[2] - 1.15757008e-10 * tc[3] +
                  4.18072100e-15 * tc[4];
    // species 34: C6H4O2
    species[34] = -2.10857700e+04 * invT + 4.70312930e+01 -
                  1.17308400e+01 * tc[0] - 1.18074975e-02 * tc[1] +
                  1.70576267e-06 * tc[2] - 1.62768117e-10 * tc[3] +
                  6.37301100e-15 * tc[4];
    // species 35: C6H5CO
    species[35] = +6.91478370e+03 * invT + 5.70336270e+01 -
                  1.33744090e+01 * tc[0] - 1.19996445e-02 * tc[1] +
                  1.74428733e-06 * tc[2] - 1.80576092e-10 * tc[3] +
                  9.00352250e-15 * tc[4];
    // species 36: C6H5CHO
    species[36] = -1.10197440e+04 * invT + 6.06165330e+01 -
                  1.36507370e+01 * tc[0] - 1.28402095e-02 * tc[1] +
                  1.74445483e-06 * tc[2] - 1.61778583e-10 * tc[3] +
                  6.74189600e-15 * tc[4];
    // species 37: N2
    species[37] = -9.22797700e+02 * invT - 4.05388800e+00 -
                  2.92664000e+00 * tc[0] - 7.43988400e-04 * tc[1] +
                  9.47460000e-08 * tc[2] - 8.41419833e-12 * tc[3] +
                  3.37667550e-16 * tc[4];
  }
  return;
}

// compute the e/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesInternalEnergy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +2.16857770e+00 + 3.56017240e-02 * tc[1] +
                 2.89986517e-05 * tc[2] - 4.21530150e-08 * tc[3] +
                 1.51972740e-11 * tc[4] - 4.04463440e+04 * invT;
    // species 1: C2H4
    species[1] = +2.95920148e+00 - 3.78526124e-03 * tc[1] +
                 1.90330097e-05 * tc[2] - 1.72897188e-08 * tc[3] +
                 5.39768746e-12 * tc[4] + 5.08977593e+03 * invT;
    // species 2: CH4
    species[2] = +4.14987613e+00 - 6.83548940e-03 * tc[1] +
                 1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
                 3.33387912e-12 * tc[4] - 1.02466476e+04 * invT;
    // species 3: H2
    species[3] = +1.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 4: C3H6
    species[4] = +4.93307000e-01 + 1.04625900e-02 * tc[1] +
                 1.49559800e-06 * tc[2] - 4.17228000e-09 * tc[3] +
                 1.43162920e-12 * tc[4] + 1.07482600e+03 * invT;
    // species 5: C4H81
    species[5] = +1.81138000e-01 + 1.54266900e-02 * tc[1] +
                 1.69550823e-06 * tc[2] - 6.16372200e-09 * tc[3] +
                 2.22203860e-12 * tc[4] - 1.79040040e+03 * invT;
    // species 6: iC4H8
    species[6] = +1.64714050e+00 + 1.29514785e-02 * tc[1] +
                 2.73284513e-06 * tc[2] - 5.54831475e-09 * tc[3] +
                 1.77917160e-12 * tc[4] - 4.03730690e+03 * invT;
    // species 7: C6H6
    species[7] = -5.84377340e+00 + 2.92138065e-02 * tc[1] -
                 9.82861833e-06 * tc[2] - 1.73476100e-09 * tc[3] +
                 1.64250506e-12 * tc[4] + 9.18177730e+03 * invT;
    // species 8: C6H5CH3
    species[8] = +6.15266300e-01 + 1.05497190e-02 * tc[1] +
                 2.84553393e-05 * tc[2] - 3.31526650e-08 * tc[3] +
                 1.11913208e-11 * tc[4] + 4.07563000e+03 * invT;
    // species 9: H
    species[9] = +1.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 10: O
    species[10] = +2.16826710e+00 - 1.63965942e-03 * tc[1] +
                  2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                  4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 11: OH
    species[11] = +3.12530561e+00 - 1.61272470e-03 * tc[1] +
                  2.17588230e-06 * tc[2] - 1.44963411e-09 * tc[3] +
                  4.12474758e-13 * tc[4] + 3.38153812e+03 * invT;
    // species 12: HO2
    species[12] = +3.30179801e+00 - 2.37456025e-03 * tc[1] +
                  7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                  1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 13: H2O
    species[13] = +3.19864056e+00 - 1.01821705e-03 * tc[1] +
                  2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                  3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 14: H2O2
    species[14] = +3.27611269e+00 - 2.71411208e-04 * tc[1] +
                  5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
                  1.72490873e-12 * tc[4] - 1.77025821e+04 * invT;
    // species 15: O2
    species[15] = +2.78245636e+00 - 1.49836708e-03 * tc[1] +
                  3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                  6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 16: CH2
    species[16] = +2.76267867e+00 + 4.84436072e-04 * tc[1] +
                  9.31632803e-07 * tc[2] - 9.62727883e-10 * tc[3] +
                  3.37483438e-13 * tc[4] + 4.60040401e+04 * invT;
    // species 17: CH2*
    species[17] = +3.19860411e+00 - 1.18330710e-03 * tc[1] +
                  2.74432073e-06 * tc[2] - 1.67203995e-09 * tc[3] +
                  3.88629474e-13 * tc[4] + 5.04968163e+04 * invT;
    // species 18: CH3
    species[18] = +2.67359040e+00 + 1.00547588e-03 * tc[1] +
                  1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
                  5.08771468e-13 * tc[4] + 1.64449988e+04 * invT;
    // species 19: HCO
    species[19] = +3.22118584e+00 - 1.62196266e-03 * tc[1] +
                  4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
                  8.67537730e-13 * tc[4] + 3.83956496e+03 * invT;
    // species 20: CH2O
    species[20] = +3.79372315e+00 - 4.95416684e-03 * tc[1] +
                  1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
                  2.63545304e-12 * tc[4] - 1.43089567e+04 * invT;
    // species 21: CH3O
    species[21] = +2.71180502e+00 - 1.40231653e-03 * tc[1] +
                  1.25516990e-05 * tc[2] - 1.18268022e-08 * tc[3] +
                  3.73176840e-12 * tc[4] + 1.29569760e+03 * invT;
    // species 22: CO
    species[22] = +2.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 23: CO2
    species[23] = +1.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 24: C2H2
    species[24] = -1.91318906e-01 + 1.16807815e-02 * tc[1] -
                  1.18390605e-05 * tc[2] + 7.00381092e-09 * tc[3] -
                  1.70014595e-12 * tc[4] + 2.64289807e+04 * invT;
    // species 25: C2H3
    species[25] = +2.21246645e+00 + 7.57395810e-04 * tc[1] +
                  8.64031373e-06 * tc[2] - 8.94144617e-09 * tc[3] +
                  2.94301746e-12 * tc[4] + 3.48598468e+04 * invT;
    // species 26: C2H5
    species[26] = +3.30646568e+00 - 2.09329446e-03 * tc[1] +
                  1.65714269e-05 * tc[2] - 1.49781651e-08 * tc[3] +
                  4.61018008e-12 * tc[4] + 1.28416265e+04 * invT;
    // species 27: C2H6
    species[27] = +3.29142492e+00 - 2.75077135e-03 * tc[1] +
                  1.99812763e-05 * tc[2] - 1.77116571e-08 * tc[3] +
                  5.37371542e-12 * tc[4] - 1.15222055e+04 * invT;
    // species 28: HCCO
    species[28] = +1.25172140e+00 + 8.82751050e-03 * tc[1] -
                  7.90970033e-06 * tc[2] + 4.31893975e-09 * tc[3] -
                  1.01329622e-12 * tc[4] + 2.00594490e+04 * invT;
    // species 29: CH2CO
    species[29] = +1.13583630e+00 + 9.05943605e-03 * tc[1] -
                  5.79824913e-06 * tc[2] + 2.33599392e-09 * tc[3] -
                  4.02915230e-13 * tc[4] - 7.27000000e+03 * invT;
    // species 30: CH2CHO
    species[30] = +2.40906240e+00 + 5.36928700e-03 * tc[1] +
                  6.30497500e-07 * tc[2] - 1.78964578e-09 * tc[3] +
                  5.73477020e-13 * tc[4] + 6.20000000e+01 * invT;
    // species 31: aC3H5
    species[31] = +3.63183500e-01 + 9.90691050e-03 * tc[1] +
                  4.16568667e-06 * tc[2] - 8.33888875e-09 * tc[3] +
                  3.16931420e-12 * tc[4] + 1.92456290e+04 * invT;
    // species 32: C6H5
    species[32] = -4.69314530e+00 + 2.60894840e-02 * tc[1] -
                  8.51947567e-06 * tc[2] - 1.76652803e-09 * tc[3] +
                  1.51667950e-12 * tc[4] + 3.97795900e+04 * invT;
    // species 33: C6H5CH2
    species[33] = -5.18884600e-01 + 1.92564160e-02 * tc[1] +
                  1.09538307e-05 * tc[2] - 1.92431803e-08 * tc[3] +
                  7.08461360e-12 * tc[4] + 2.33070270e+04 * invT;
    // species 34: C6H4O2
    species[34] = -1.95193005e+00 + 2.89212225e-02 * tc[1] -
                  1.27381463e-05 * tc[2] + 1.15781640e-09 * tc[3] +
                  7.25933020e-13 * tc[4] - 1.76110470e+04 * invT;
    // species 35: C6H5CO
    species[35] = -3.02511550e+00 + 3.07562705e-02 * tc[1] -
                  1.05345510e-05 * tc[2] - 1.74311497e-09 * tc[3] +
                  1.59670298e-12 * tc[4] + 1.12558030e+04 * invT;
    // species 36: C6H5CHO
    species[36] = -4.16273340e+00 + 3.31846225e-02 * tc[1] -
                  1.16054510e-05 * tc[2] - 1.57498443e-09 * tc[3] +
                  1.71614202e-12 * tc[4] - 6.11693490e+03 * invT;
    // species 37: N2
    species[37] = +2.29867700e+00 + 7.04120200e-04 * tc[1] -
                  1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                  4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
  } else {
    // species 0: POSF10325
    species[0] = +2.22281630e+01 + 3.30941940e-02 * tc[1] -
                 8.05283333e-06 * tc[2] + 8.96637425e-10 * tc[3] -
                 2.04537960e-14 * tc[4] - 4.87788160e+04 * invT;
    // species 1: C2H4
    species[1] = +1.03611116e+00 + 7.32270755e-03 * tc[1] -
                 2.23692638e-06 * tc[2] + 3.68057308e-10 * tc[3] -
                 2.51412122e-14 * tc[4] + 4.93988614e+03 * invT;
    // species 2: CH4
    species[2] = -9.25148505e-01 + 6.69547335e-03 * tc[1] -
                 1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
                 2.03630460e-14 * tc[4] - 9.46834459e+03 * invT;
    // species 3: H2
    species[3] = +2.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 4: C3H6
    species[4] = +5.73225700e+00 + 7.45417000e-03 * tc[1] -
                 1.64996633e-06 * tc[2] + 1.80300550e-10 * tc[3] -
                 7.53240800e-15 * tc[4] - 9.23570300e+02 * invT;
    // species 5: C4H81
    species[5] = +1.05358410e+00 + 1.71752535e-02 * tc[1] -
                 5.29439900e-06 * tc[2] + 8.27241550e-10 * tc[3] -
                 5.07220900e-14 * tc[4] - 2.13972310e+03 * invT;
    // species 6: iC4H8
    species[6] = +3.46094700e+00 + 1.48057435e-02 * tc[1] -
                 4.35904300e-06 * tc[2] + 6.64298350e-10 * tc[3] -
                 4.02694260e-14 * tc[4] - 5.00667580e+03 * invT;
    // species 7: C6H6
    species[7] = +8.13812450e+00 + 1.19272165e-02 * tc[1] -
                 2.93759087e-06 * tc[2] + 3.02475525e-10 * tc[3] -
                 3.64430060e-15 * tc[4] + 5.20434620e+03 * invT;
    // species 8: C6H5CH3
    species[8] = +1.19400340e+01 + 1.33456435e-02 * tc[1] -
                 3.22795017e-06 * tc[2] + 3.93465725e-10 * tc[3] -
                 1.89327202e-14 * tc[4] - 6.97649080e+02 * invT;
    // species 9: H
    species[9] = +1.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 10: O
    species[10] = +1.56942078e+00 - 4.29870569e-05 * tc[1] +
                  1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                  2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 11: OH
    species[11] = +1.86472886e+00 + 5.28252240e-04 * tc[1] -
                  8.63609193e-08 * tc[2] + 7.63046685e-12 * tc[3] -
                  2.66391752e-16 * tc[4] + 3.71885774e+03 * invT;
    // species 12: HO2
    species[12] = +3.01721090e+00 + 1.11991006e-03 * tc[1] -
                  2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                  2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 13: H2O
    species[13] = +2.03399249e+00 + 1.08845902e-03 * tc[1] -
                  5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                  3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 14: H2O2
    species[14] = +3.16500285e+00 + 2.45415847e-03 * tc[1] -
                  6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
                  5.75816610e-15 * tc[4] - 1.78617877e+04 * invT;
    // species 15: O2
    species[15] = +2.28253784e+00 + 7.41543770e-04 * tc[1] -
                  2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                  4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 16: CH2
    species[16] = +1.87410113e+00 + 1.82819646e-03 * tc[1] -
                  4.69648657e-07 * tc[2] + 6.50448872e-11 * tc[3] -
                  3.75455134e-15 * tc[4] + 4.62636040e+04 * invT;
    // species 17: CH2*
    species[17] = +1.29203842e+00 + 2.32794318e-03 * tc[1] -
                  6.70639823e-07 * tc[2] + 1.04476500e-10 * tc[3] -
                  6.79432730e-15 * tc[4] + 5.09259997e+04 * invT;
    // species 18: CH3
    species[18] = +1.28571772e+00 + 3.61995018e-03 * tc[1] -
                  9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
                  9.34308788e-15 * tc[4] + 1.67755843e+04 * invT;
    // species 19: HCO
    species[19] = +1.77217438e+00 + 2.47847763e-03 * tc[1] -
                  8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
                  1.06701742e-14 * tc[4] + 4.01191815e+03 * invT;
    // species 20: CH2O
    species[20] = +7.60690080e-01 + 4.60000041e-03 * tc[1] -
                  1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
                  1.76771128e-14 * tc[4] - 1.39958323e+04 * invT;
    // species 21: CH3O
    species[21] = +3.75779238e+00 + 3.72071237e-03 * tc[1] -
                  8.99017253e-07 * tc[2] + 1.09522626e-10 * tc[3] -
                  5.27074196e-15 * tc[4] + 3.78111940e+02 * invT;
    // species 22: CO
    species[22] = +1.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 23: CO2
    species[23] = +2.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 24: C2H2
    species[24] = +3.14756964e+00 + 2.98083332e-03 * tc[1] -
                  7.90982840e-07 * tc[2] + 1.16853043e-10 * tc[3] -
                  7.22470426e-15 * tc[4] + 2.59359992e+04 * invT;
    // species 25: C2H3
    species[25] = +2.01672400e+00 + 5.16511460e-03 * tc[1] -
                  1.56027450e-06 * tc[2] + 2.54408220e-10 * tc[3] -
                  1.72521408e-14 * tc[4] + 3.46128739e+04 * invT;
    // species 26: C2H5
    species[26] = +9.54656420e-01 + 8.69863610e-03 * tc[1] -
                  2.66068889e-06 * tc[2] + 4.38044223e-10 * tc[3] -
                  2.99283152e-14 * tc[4] + 1.28575200e+04 * invT;
    // species 27: C2H6
    species[27] = +7.18815000e-02 + 1.08426339e-02 * tc[1] -
                  3.34186890e-06 * tc[2] + 5.53530003e-10 * tc[3] -
                  3.80005780e-14 * tc[4] - 1.14263932e+04 * invT;
    // species 28: HCCO
    species[28] = +4.62820580e+00 + 2.04267005e-03 * tc[1] -
                  5.31151567e-07 * tc[2] + 7.15651300e-11 * tc[3] -
                  3.88156640e-15 * tc[4] + 1.93272150e+04 * invT;
    // species 29: CH2CO
    species[29] = +3.51129732e+00 + 4.50179872e-03 * tc[1] -
                  1.38979878e-06 * tc[2] + 2.30836470e-10 * tc[3] -
                  1.58967640e-14 * tc[4] - 7.77850000e+03 * invT;
    // species 30: CH2CHO
    species[30] = +4.97566990e+00 + 4.06529570e-03 * tc[1] -
                  9.14541500e-07 * tc[2] + 1.01757603e-10 * tc[3] -
                  4.35203420e-15 * tc[4] - 9.69500000e+02 * invT;
    // species 31: aC3H5
    species[31] = +5.50078770e+00 + 7.16236550e-03 * tc[1] -
                  1.89272107e-06 * tc[2] + 2.77020025e-10 * tc[3] -
                  1.80727774e-14 * tc[4] + 1.74824490e+04 * invT;
    // species 32: C6H5
    species[32] = +7.59731100e+00 + 1.11208150e-02 * tc[1] -
                  2.90666593e-06 * tc[2] + 3.44719625e-10 * tc[3] -
                  1.06292112e-14 * tc[4] + 3.62610470e+04 * invT;
    // species 33: C6H5CH2
    species[33] = +1.30439800e+01 + 1.17469365e-02 * tc[1] -
                  2.84584557e-06 * tc[2] + 3.47271025e-10 * tc[3] -
                  1.67228840e-14 * tc[4] + 1.85642030e+04 * invT;
    // species 34: C6H4O2
    species[34] = +1.07308400e+01 + 1.18074975e-02 * tc[1] -
                  3.41152533e-06 * tc[2] + 4.88304350e-10 * tc[3] -
                  2.54920440e-14 * tc[4] - 2.10857700e+04 * invT;
    // species 35: C6H5CO
    species[35] = +1.23744090e+01 + 1.19996445e-02 * tc[1] -
                  3.48857467e-06 * tc[2] + 5.41728275e-10 * tc[3] -
                  3.60140900e-14 * tc[4] + 6.91478370e+03 * invT;
    // species 36: C6H5CHO
    species[36] = +1.26507370e+01 + 1.28402095e-02 * tc[1] -
                  3.48890967e-06 * tc[2] + 4.85335750e-10 * tc[3] -
                  2.69675840e-14 * tc[4] - 1.10197440e+04 * invT;
    // species 37: N2
    species[37] = +1.92664000e+00 + 7.43988400e-04 * tc[1] -
                  1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                  1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
  }
  return;
}

// compute the h/(RT) at the given temperature (Eq 20)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEnthalpy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];
  const amrex::Real invT = 1 / T;

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +3.16857770e+00 + 3.56017240e-02 * tc[1] +
                 2.89986517e-05 * tc[2] - 4.21530150e-08 * tc[3] +
                 1.51972740e-11 * tc[4] - 4.04463440e+04 * invT;
    // species 1: C2H4
    species[1] = +3.95920148e+00 - 3.78526124e-03 * tc[1] +
                 1.90330097e-05 * tc[2] - 1.72897188e-08 * tc[3] +
                 5.39768746e-12 * tc[4] + 5.08977593e+03 * invT;
    // species 2: CH4
    species[2] = +5.14987613e+00 - 6.83548940e-03 * tc[1] +
                 1.63933533e-05 * tc[2] - 1.21185757e-08 * tc[3] +
                 3.33387912e-12 * tc[4] - 1.02466476e+04 * invT;
    // species 3: H2
    species[3] = +2.34433112e+00 + 3.99026037e-03 * tc[1] -
                 6.49271700e-06 * tc[2] + 5.03930235e-09 * tc[3] -
                 1.47522352e-12 * tc[4] - 9.17935173e+02 * invT;
    // species 4: C3H6
    species[4] = +1.49330700e+00 + 1.04625900e-02 * tc[1] +
                 1.49559800e-06 * tc[2] - 4.17228000e-09 * tc[3] +
                 1.43162920e-12 * tc[4] + 1.07482600e+03 * invT;
    // species 5: C4H81
    species[5] = +1.18113800e+00 + 1.54266900e-02 * tc[1] +
                 1.69550823e-06 * tc[2] - 6.16372200e-09 * tc[3] +
                 2.22203860e-12 * tc[4] - 1.79040040e+03 * invT;
    // species 6: iC4H8
    species[6] = +2.64714050e+00 + 1.29514785e-02 * tc[1] +
                 2.73284513e-06 * tc[2] - 5.54831475e-09 * tc[3] +
                 1.77917160e-12 * tc[4] - 4.03730690e+03 * invT;
    // species 7: C6H6
    species[7] = -4.84377340e+00 + 2.92138065e-02 * tc[1] -
                 9.82861833e-06 * tc[2] - 1.73476100e-09 * tc[3] +
                 1.64250506e-12 * tc[4] + 9.18177730e+03 * invT;
    // species 8: C6H5CH3
    species[8] = +1.61526630e+00 + 1.05497190e-02 * tc[1] +
                 2.84553393e-05 * tc[2] - 3.31526650e-08 * tc[3] +
                 1.11913208e-11 * tc[4] + 4.07563000e+03 * invT;
    // species 9: H
    species[9] = +2.50000000e+00 + 3.52666409e-13 * tc[1] -
                 6.65306547e-16 * tc[2] + 5.75204080e-19 * tc[3] -
                 1.85546466e-22 * tc[4] + 2.54736599e+04 * invT;
    // species 10: O
    species[10] = +3.16826710e+00 - 1.63965942e-03 * tc[1] +
                  2.21435465e-06 * tc[2] - 1.53201656e-09 * tc[3] +
                  4.22531942e-13 * tc[4] + 2.91222592e+04 * invT;
    // species 11: OH
    species[11] = +4.12530561e+00 - 1.61272470e-03 * tc[1] +
                  2.17588230e-06 * tc[2] - 1.44963411e-09 * tc[3] +
                  4.12474758e-13 * tc[4] + 3.38153812e+03 * invT;
    // species 12: HO2
    species[12] = +4.30179801e+00 - 2.37456025e-03 * tc[1] +
                  7.05276303e-06 * tc[2] - 6.06909735e-09 * tc[3] +
                  1.85845025e-12 * tc[4] + 2.94808040e+02 * invT;
    // species 13: H2O
    species[13] = +4.19864056e+00 - 1.01821705e-03 * tc[1] +
                  2.17346737e-06 * tc[2] - 1.37199266e-09 * tc[3] +
                  3.54395634e-13 * tc[4] - 3.02937267e+04 * invT;
    // species 14: H2O2
    species[14] = +4.27611269e+00 - 2.71411208e-04 * tc[1] +
                  5.57785670e-06 * tc[2] - 5.39427032e-09 * tc[3] +
                  1.72490873e-12 * tc[4] - 1.77025821e+04 * invT;
    // species 15: O2
    species[15] = +3.78245636e+00 - 1.49836708e-03 * tc[1] +
                  3.28243400e-06 * tc[2] - 2.42032377e-09 * tc[3] +
                  6.48745674e-13 * tc[4] - 1.06394356e+03 * invT;
    // species 16: CH2
    species[16] = +3.76267867e+00 + 4.84436072e-04 * tc[1] +
                  9.31632803e-07 * tc[2] - 9.62727883e-10 * tc[3] +
                  3.37483438e-13 * tc[4] + 4.60040401e+04 * invT;
    // species 17: CH2*
    species[17] = +4.19860411e+00 - 1.18330710e-03 * tc[1] +
                  2.74432073e-06 * tc[2] - 1.67203995e-09 * tc[3] +
                  3.88629474e-13 * tc[4] + 5.04968163e+04 * invT;
    // species 18: CH3
    species[18] = +3.67359040e+00 + 1.00547588e-03 * tc[1] +
                  1.91007285e-06 * tc[2] - 1.71779356e-09 * tc[3] +
                  5.08771468e-13 * tc[4] + 1.64449988e+04 * invT;
    // species 19: HCO
    species[19] = +4.22118584e+00 - 1.62196266e-03 * tc[1] +
                  4.59331487e-06 * tc[2] - 3.32860233e-09 * tc[3] +
                  8.67537730e-13 * tc[4] + 3.83956496e+03 * invT;
    // species 20: CH2O
    species[20] = +4.79372315e+00 - 4.95416684e-03 * tc[1] +
                  1.24406669e-05 * tc[2] - 9.48213152e-09 * tc[3] +
                  2.63545304e-12 * tc[4] - 1.43089567e+04 * invT;
    // species 21: CH3O
    species[21] = +3.71180502e+00 - 1.40231653e-03 * tc[1] +
                  1.25516990e-05 * tc[2] - 1.18268022e-08 * tc[3] +
                  3.73176840e-12 * tc[4] + 1.29569760e+03 * invT;
    // species 22: CO
    species[22] = +3.57953347e+00 - 3.05176840e-04 * tc[1] +
                  3.38938110e-07 * tc[2] + 2.26751471e-10 * tc[3] -
                  1.80884900e-13 * tc[4] - 1.43440860e+04 * invT;
    // species 23: CO2
    species[23] = +2.35677352e+00 + 4.49229839e-03 * tc[1] -
                  2.37452090e-06 * tc[2] + 6.14797555e-10 * tc[3] -
                  2.87399096e-14 * tc[4] - 4.83719697e+04 * invT;
    // species 24: C2H2
    species[24] = +8.08681094e-01 + 1.16807815e-02 * tc[1] -
                  1.18390605e-05 * tc[2] + 7.00381092e-09 * tc[3] -
                  1.70014595e-12 * tc[4] + 2.64289807e+04 * invT;
    // species 25: C2H3
    species[25] = +3.21246645e+00 + 7.57395810e-04 * tc[1] +
                  8.64031373e-06 * tc[2] - 8.94144617e-09 * tc[3] +
                  2.94301746e-12 * tc[4] + 3.48598468e+04 * invT;
    // species 26: C2H5
    species[26] = +4.30646568e+00 - 2.09329446e-03 * tc[1] +
                  1.65714269e-05 * tc[2] - 1.49781651e-08 * tc[3] +
                  4.61018008e-12 * tc[4] + 1.28416265e+04 * invT;
    // species 27: C2H6
    species[27] = +4.29142492e+00 - 2.75077135e-03 * tc[1] +
                  1.99812763e-05 * tc[2] - 1.77116571e-08 * tc[3] +
                  5.37371542e-12 * tc[4] - 1.15222055e+04 * invT;
    // species 28: HCCO
    species[28] = +2.25172140e+00 + 8.82751050e-03 * tc[1] -
                  7.90970033e-06 * tc[2] + 4.31893975e-09 * tc[3] -
                  1.01329622e-12 * tc[4] + 2.00594490e+04 * invT;
    // species 29: CH2CO
    species[29] = +2.13583630e+00 + 9.05943605e-03 * tc[1] -
                  5.79824913e-06 * tc[2] + 2.33599392e-09 * tc[3] -
                  4.02915230e-13 * tc[4] - 7.27000000e+03 * invT;
    // species 30: CH2CHO
    species[30] = +3.40906240e+00 + 5.36928700e-03 * tc[1] +
                  6.30497500e-07 * tc[2] - 1.78964578e-09 * tc[3] +
                  5.73477020e-13 * tc[4] + 6.20000000e+01 * invT;
    // species 31: aC3H5
    species[31] = +1.36318350e+00 + 9.90691050e-03 * tc[1] +
                  4.16568667e-06 * tc[2] - 8.33888875e-09 * tc[3] +
                  3.16931420e-12 * tc[4] + 1.92456290e+04 * invT;
    // species 32: C6H5
    species[32] = -3.69314530e+00 + 2.60894840e-02 * tc[1] -
                  8.51947567e-06 * tc[2] - 1.76652803e-09 * tc[3] +
                  1.51667950e-12 * tc[4] + 3.97795900e+04 * invT;
    // species 33: C6H5CH2
    species[33] = +4.81115400e-01 + 1.92564160e-02 * tc[1] +
                  1.09538307e-05 * tc[2] - 1.92431803e-08 * tc[3] +
                  7.08461360e-12 * tc[4] + 2.33070270e+04 * invT;
    // species 34: C6H4O2
    species[34] = -9.51930050e-01 + 2.89212225e-02 * tc[1] -
                  1.27381463e-05 * tc[2] + 1.15781640e-09 * tc[3] +
                  7.25933020e-13 * tc[4] - 1.76110470e+04 * invT;
    // species 35: C6H5CO
    species[35] = -2.02511550e+00 + 3.07562705e-02 * tc[1] -
                  1.05345510e-05 * tc[2] - 1.74311497e-09 * tc[3] +
                  1.59670298e-12 * tc[4] + 1.12558030e+04 * invT;
    // species 36: C6H5CHO
    species[36] = -3.16273340e+00 + 3.31846225e-02 * tc[1] -
                  1.16054510e-05 * tc[2] - 1.57498443e-09 * tc[3] +
                  1.71614202e-12 * tc[4] - 6.11693490e+03 * invT;
    // species 37: N2
    species[37] = +3.29867700e+00 + 7.04120200e-04 * tc[1] -
                  1.32107400e-06 * tc[2] + 1.41037875e-09 * tc[3] -
                  4.88970800e-13 * tc[4] - 1.02089990e+03 * invT;
  } else {
    // species 0: POSF10325
    species[0] = +2.32281630e+01 + 3.30941940e-02 * tc[1] -
                 8.05283333e-06 * tc[2] + 8.96637425e-10 * tc[3] -
                 2.04537960e-14 * tc[4] - 4.87788160e+04 * invT;
    // species 1: C2H4
    species[1] = +2.03611116e+00 + 7.32270755e-03 * tc[1] -
                 2.23692638e-06 * tc[2] + 3.68057308e-10 * tc[3] -
                 2.51412122e-14 * tc[4] + 4.93988614e+03 * invT;
    // species 2: CH4
    species[2] = +7.48514950e-02 + 6.69547335e-03 * tc[1] -
                 1.91095270e-06 * tc[2] + 3.05731338e-10 * tc[3] -
                 2.03630460e-14 * tc[4] - 9.46834459e+03 * invT;
    // species 3: H2
    species[3] = +3.33727920e+00 - 2.47012365e-05 * tc[1] +
                 1.66485593e-07 * tc[2] - 4.48915985e-11 * tc[3] +
                 4.00510752e-15 * tc[4] - 9.50158922e+02 * invT;
    // species 4: C3H6
    species[4] = +6.73225700e+00 + 7.45417000e-03 * tc[1] -
                 1.64996633e-06 * tc[2] + 1.80300550e-10 * tc[3] -
                 7.53240800e-15 * tc[4] - 9.23570300e+02 * invT;
    // species 5: C4H81
    species[5] = +2.05358410e+00 + 1.71752535e-02 * tc[1] -
                 5.29439900e-06 * tc[2] + 8.27241550e-10 * tc[3] -
                 5.07220900e-14 * tc[4] - 2.13972310e+03 * invT;
    // species 6: iC4H8
    species[6] = +4.46094700e+00 + 1.48057435e-02 * tc[1] -
                 4.35904300e-06 * tc[2] + 6.64298350e-10 * tc[3] -
                 4.02694260e-14 * tc[4] - 5.00667580e+03 * invT;
    // species 7: C6H6
    species[7] = +9.13812450e+00 + 1.19272165e-02 * tc[1] -
                 2.93759087e-06 * tc[2] + 3.02475525e-10 * tc[3] -
                 3.64430060e-15 * tc[4] + 5.20434620e+03 * invT;
    // species 8: C6H5CH3
    species[8] = +1.29400340e+01 + 1.33456435e-02 * tc[1] -
                 3.22795017e-06 * tc[2] + 3.93465725e-10 * tc[3] -
                 1.89327202e-14 * tc[4] - 6.97649080e+02 * invT;
    // species 9: H
    species[9] = +2.50000001e+00 - 1.15421486e-11 * tc[1] +
                 5.38539827e-15 * tc[2] - 1.18378809e-18 * tc[3] +
                 9.96394714e-23 * tc[4] + 2.54736599e+04 * invT;
    // species 10: O
    species[10] = +2.56942078e+00 - 4.29870569e-05 * tc[1] +
                  1.39828196e-08 * tc[2] - 2.50444497e-12 * tc[3] +
                  2.45667382e-16 * tc[4] + 2.92175791e+04 * invT;
    // species 11: OH
    species[11] = +2.86472886e+00 + 5.28252240e-04 * tc[1] -
                  8.63609193e-08 * tc[2] + 7.63046685e-12 * tc[3] -
                  2.66391752e-16 * tc[4] + 3.71885774e+03 * invT;
    // species 12: HO2
    species[12] = +4.01721090e+00 + 1.11991006e-03 * tc[1] -
                  2.11219383e-07 * tc[2] + 2.85615925e-11 * tc[3] -
                  2.15817070e-15 * tc[4] + 1.11856713e+02 * invT;
    // species 13: H2O
    species[13] = +3.03399249e+00 + 1.08845902e-03 * tc[1] -
                  5.46908393e-08 * tc[2] - 2.42604967e-11 * tc[3] +
                  3.36401984e-15 * tc[4] - 3.00042971e+04 * invT;
    // species 14: H2O2
    species[14] = +4.16500285e+00 + 2.45415847e-03 * tc[1] -
                  6.33797417e-07 * tc[2] + 9.27964965e-11 * tc[3] -
                  5.75816610e-15 * tc[4] - 1.78617877e+04 * invT;
    // species 15: O2
    species[15] = +3.28253784e+00 + 7.41543770e-04 * tc[1] -
                  2.52655556e-07 * tc[2] + 5.23676387e-11 * tc[3] -
                  4.33435588e-15 * tc[4] - 1.08845772e+03 * invT;
    // species 16: CH2
    species[16] = +2.87410113e+00 + 1.82819646e-03 * tc[1] -
                  4.69648657e-07 * tc[2] + 6.50448872e-11 * tc[3] -
                  3.75455134e-15 * tc[4] + 4.62636040e+04 * invT;
    // species 17: CH2*
    species[17] = +2.29203842e+00 + 2.32794318e-03 * tc[1] -
                  6.70639823e-07 * tc[2] + 1.04476500e-10 * tc[3] -
                  6.79432730e-15 * tc[4] + 5.09259997e+04 * invT;
    // species 18: CH3
    species[18] = +2.28571772e+00 + 3.61995018e-03 * tc[1] -
                  9.95714493e-07 * tc[2] + 1.48921161e-10 * tc[3] -
                  9.34308788e-15 * tc[4] + 1.67755843e+04 * invT;
    // species 19: HCO
    species[19] = +2.77217438e+00 + 2.47847763e-03 * tc[1] -
                  8.28152043e-07 * tc[2] + 1.47290445e-10 * tc[3] -
                  1.06701742e-14 * tc[4] + 4.01191815e+03 * invT;
    // species 20: CH2O
    species[20] = +1.76069008e+00 + 4.60000041e-03 * tc[1] -
                  1.47419604e-06 * tc[2] + 2.51603030e-10 * tc[3] -
                  1.76771128e-14 * tc[4] - 1.39958323e+04 * invT;
    // species 21: CH3O
    species[21] = +4.75779238e+00 + 3.72071237e-03 * tc[1] -
                  8.99017253e-07 * tc[2] + 1.09522626e-10 * tc[3] -
                  5.27074196e-15 * tc[4] + 3.78111940e+02 * invT;
    // species 22: CO
    species[22] = +2.71518561e+00 + 1.03126372e-03 * tc[1] -
                  3.32941924e-07 * tc[2] + 5.75132520e-11 * tc[3] -
                  4.07295432e-15 * tc[4] - 1.41518724e+04 * invT;
    // species 23: CO2
    species[23] = +3.85746029e+00 + 2.20718513e-03 * tc[1] -
                  7.38271347e-07 * tc[2] + 1.30872547e-10 * tc[3] -
                  9.44168328e-15 * tc[4] - 4.87591660e+04 * invT;
    // species 24: C2H2
    species[24] = +4.14756964e+00 + 2.98083332e-03 * tc[1] -
                  7.90982840e-07 * tc[2] + 1.16853043e-10 * tc[3] -
                  7.22470426e-15 * tc[4] + 2.59359992e+04 * invT;
    // species 25: C2H3
    species[25] = +3.01672400e+00 + 5.16511460e-03 * tc[1] -
                  1.56027450e-06 * tc[2] + 2.54408220e-10 * tc[3] -
                  1.72521408e-14 * tc[4] + 3.46128739e+04 * invT;
    // species 26: C2H5
    species[26] = +1.95465642e+00 + 8.69863610e-03 * tc[1] -
                  2.66068889e-06 * tc[2] + 4.38044223e-10 * tc[3] -
                  2.99283152e-14 * tc[4] + 1.28575200e+04 * invT;
    // species 27: C2H6
    species[27] = +1.07188150e+00 + 1.08426339e-02 * tc[1] -
                  3.34186890e-06 * tc[2] + 5.53530003e-10 * tc[3] -
                  3.80005780e-14 * tc[4] - 1.14263932e+04 * invT;
    // species 28: HCCO
    species[28] = +5.62820580e+00 + 2.04267005e-03 * tc[1] -
                  5.31151567e-07 * tc[2] + 7.15651300e-11 * tc[3] -
                  3.88156640e-15 * tc[4] + 1.93272150e+04 * invT;
    // species 29: CH2CO
    species[29] = +4.51129732e+00 + 4.50179872e-03 * tc[1] -
                  1.38979878e-06 * tc[2] + 2.30836470e-10 * tc[3] -
                  1.58967640e-14 * tc[4] - 7.77850000e+03 * invT;
    // species 30: CH2CHO
    species[30] = +5.97566990e+00 + 4.06529570e-03 * tc[1] -
                  9.14541500e-07 * tc[2] + 1.01757603e-10 * tc[3] -
                  4.35203420e-15 * tc[4] - 9.69500000e+02 * invT;
    // species 31: aC3H5
    species[31] = +6.50078770e+00 + 7.16236550e-03 * tc[1] -
                  1.89272107e-06 * tc[2] + 2.77020025e-10 * tc[3] -
                  1.80727774e-14 * tc[4] + 1.74824490e+04 * invT;
    // species 32: C6H5
    species[32] = +8.59731100e+00 + 1.11208150e-02 * tc[1] -
                  2.90666593e-06 * tc[2] + 3.44719625e-10 * tc[3] -
                  1.06292112e-14 * tc[4] + 3.62610470e+04 * invT;
    // species 33: C6H5CH2
    species[33] = +1.40439800e+01 + 1.17469365e-02 * tc[1] -
                  2.84584557e-06 * tc[2] + 3.47271025e-10 * tc[3] -
                  1.67228840e-14 * tc[4] + 1.85642030e+04 * invT;
    // species 34: C6H4O2
    species[34] = +1.17308400e+01 + 1.18074975e-02 * tc[1] -
                  3.41152533e-06 * tc[2] + 4.88304350e-10 * tc[3] -
                  2.54920440e-14 * tc[4] - 2.10857700e+04 * invT;
    // species 35: C6H5CO
    species[35] = +1.33744090e+01 + 1.19996445e-02 * tc[1] -
                  3.48857467e-06 * tc[2] + 5.41728275e-10 * tc[3] -
                  3.60140900e-14 * tc[4] + 6.91478370e+03 * invT;
    // species 36: C6H5CHO
    species[36] = +1.36507370e+01 + 1.28402095e-02 * tc[1] -
                  3.48890967e-06 * tc[2] + 4.85335750e-10 * tc[3] -
                  2.69675840e-14 * tc[4] - 1.10197440e+04 * invT;
    // species 37: N2
    species[37] = +2.92664000e+00 + 7.43988400e-04 * tc[1] -
                  1.89492000e-07 * tc[2] + 2.52425950e-11 * tc[3] -
                  1.35067020e-15 * tc[4] - 9.22797700e+02 * invT;
  }
  return;
}

// compute the S/R at the given temperature (Eq 21)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
speciesEntropy(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +3.16857770e+00 * tc[0] + 7.12034480e-02 * tc[1] +
                 4.34979775e-05 * tc[2] - 5.62040200e-08 * tc[3] +
                 1.89965925e-11 * tc[4] + 2.05336860e+01;
    // species 1: C2H4
    species[1] = +3.95920148e+00 * tc[0] - 7.57052247e-03 * tc[1] +
                 2.85495146e-05 * tc[2] - 2.30529584e-08 * tc[3] +
                 6.74710933e-12 * tc[4] + 4.09733096e+00;
    // species 2: CH4
    species[2] = +5.14987613e+00 * tc[0] - 1.36709788e-02 * tc[1] +
                 2.45900299e-05 * tc[2] - 1.61581009e-08 * tc[3] +
                 4.16734890e-12 * tc[4] - 4.64130376e+00;
    // species 3: H2
    species[3] = +2.34433112e+00 * tc[0] + 7.98052075e-03 * tc[1] -
                 9.73907550e-06 * tc[2] + 6.71906980e-09 * tc[3] -
                 1.84402940e-12 * tc[4] + 6.83010238e-01;
    // species 4: C3H6
    species[4] = +1.49330700e+00 * tc[0] + 2.09251800e-02 * tc[1] +
                 2.24339700e-06 * tc[2] - 5.56304000e-09 * tc[3] +
                 1.78953650e-12 * tc[4] + 1.61453400e+01;
    // species 5: C4H81
    species[5] = +1.18113800e+00 * tc[0] + 3.08533800e-02 * tc[1] +
                 2.54326235e-06 * tc[2] - 8.21829600e-09 * tc[3] +
                 2.77754825e-12 * tc[4] + 2.10624690e+01;
    // species 6: iC4H8
    species[6] = +2.64714050e+00 * tc[0] + 2.59029570e-02 * tc[1] +
                 4.09926770e-06 * tc[2] - 7.39775300e-09 * tc[3] +
                 2.22396450e-12 * tc[4] + 1.26763880e+01;
    // species 7: C6H6
    species[7] = -4.84377340e+00 * tc[0] + 5.84276130e-02 * tc[1] -
                 1.47429275e-05 * tc[2] - 2.31301467e-09 * tc[3] +
                 2.05313133e-12 * tc[4] + 4.38898320e+01;
    // species 8: C6H5CH3
    species[8] = +1.61526630e+00 * tc[0] + 2.10994380e-02 * tc[1] +
                 4.26830090e-05 * tc[2] - 4.42035533e-08 * tc[3] +
                 1.39891510e-11 * tc[4] + 2.02822100e+01;
    // species 9: H
    species[9] = +2.50000000e+00 * tc[0] + 7.05332819e-13 * tc[1] -
                 9.97959820e-16 * tc[2] + 7.66938773e-19 * tc[3] -
                 2.31933083e-22 * tc[4] - 4.46682853e-01;
    // species 10: O
    species[10] = +3.16826710e+00 * tc[0] - 3.27931884e-03 * tc[1] +
                  3.32153198e-06 * tc[2] - 2.04268875e-09 * tc[3] +
                  5.28164927e-13 * tc[4] + 2.05193346e+00;
    // species 11: OH
    species[11] = +4.12530561e+00 * tc[0] - 3.22544939e-03 * tc[1] +
                  3.26382346e-06 * tc[2] - 1.93284548e-09 * tc[3] +
                  5.15593447e-13 * tc[4] - 6.90432960e-01;
    // species 12: HO2
    species[12] = +4.30179801e+00 * tc[0] - 4.74912051e-03 * tc[1] +
                  1.05791445e-05 * tc[2] - 8.09212980e-09 * tc[3] +
                  2.32306281e-12 * tc[4] + 3.71666245e+00;
    // species 13: H2O
    species[13] = +4.19864056e+00 * tc[0] - 2.03643410e-03 * tc[1] +
                  3.26020105e-06 * tc[2] - 1.82932354e-09 * tc[3] +
                  4.42994543e-13 * tc[4] - 8.49032208e-01;
    // species 14: H2O2
    species[14] = +4.27611269e+00 * tc[0] - 5.42822417e-04 * tc[1] +
                  8.36678505e-06 * tc[2] - 7.19236043e-09 * tc[3] +
                  2.15613591e-12 * tc[4] + 3.43505074e+00;
    // species 15: O2
    species[15] = +3.78245636e+00 * tc[0] - 2.99673416e-03 * tc[1] +
                  4.92365101e-06 * tc[2] - 3.22709836e-09 * tc[3] +
                  8.10932092e-13 * tc[4] + 3.65767573e+00;
    // species 16: CH2
    species[16] = +3.76267867e+00 * tc[0] + 9.68872143e-04 * tc[1] +
                  1.39744921e-06 * tc[2] - 1.28363718e-09 * tc[3] +
                  4.21854298e-13 * tc[4] + 1.56253185e+00;
    // species 17: CH2*
    species[17] = +4.19860411e+00 * tc[0] - 2.36661419e-03 * tc[1] +
                  4.11648110e-06 * tc[2] - 2.22938660e-09 * tc[3] +
                  4.85786843e-13 * tc[4] - 7.69118967e-01;
    // species 18: CH3
    species[18] = +3.67359040e+00 * tc[0] + 2.01095175e-03 * tc[1] +
                  2.86510928e-06 * tc[2] - 2.29039142e-09 * tc[3] +
                  6.35964335e-13 * tc[4] + 1.60456433e+00;
    // species 19: HCO
    species[19] = +4.22118584e+00 * tc[0] - 3.24392532e-03 * tc[1] +
                  6.88997230e-06 * tc[2] - 4.43813643e-09 * tc[3] +
                  1.08442216e-12 * tc[4] + 3.39437243e+00;
    // species 20: CH2O
    species[20] = +4.79372315e+00 * tc[0] - 9.90833369e-03 * tc[1] +
                  1.86610004e-05 * tc[2] - 1.26428420e-08 * tc[3] +
                  3.29431630e-12 * tc[4] + 6.02812900e-01;
    // species 21: CH3O
    species[21] = +3.71180502e+00 * tc[0] - 2.80463306e-03 * tc[1] +
                  1.88275486e-05 * tc[2] - 1.57690696e-08 * tc[3] +
                  4.66471050e-12 * tc[4] + 6.57240864e+00;
    // species 22: CO
    species[22] = +3.57953347e+00 * tc[0] - 6.10353680e-04 * tc[1] +
                  5.08407165e-07 * tc[2] + 3.02335295e-10 * tc[3] -
                  2.26106125e-13 * tc[4] + 3.50840928e+00;
    // species 23: CO2
    species[23] = +2.35677352e+00 * tc[0] + 8.98459677e-03 * tc[1] -
                  3.56178134e-06 * tc[2] + 8.19730073e-10 * tc[3] -
                  3.59248870e-14 * tc[4] + 9.90105222e+00;
    // species 24: C2H2
    species[24] = +8.08681094e-01 * tc[0] + 2.33615629e-02 * tc[1] -
                  1.77585907e-05 * tc[2] + 9.33841457e-09 * tc[3] -
                  2.12518243e-12 * tc[4] + 1.39397051e+01;
    // species 25: C2H3
    species[25] = +3.21246645e+00 * tc[0] + 1.51479162e-03 * tc[1] +
                  1.29604706e-05 * tc[2] - 1.19219282e-08 * tc[3] +
                  3.67877182e-12 * tc[4] + 8.51054025e+00;
    // species 26: C2H5
    species[26] = +4.30646568e+00 * tc[0] - 4.18658892e-03 * tc[1] +
                  2.48571403e-05 * tc[2] - 1.99708869e-08 * tc[3] +
                  5.76272510e-12 * tc[4] + 4.70720924e+00;
    // species 27: C2H6
    species[27] = +4.29142492e+00 * tc[0] - 5.50154270e-03 * tc[1] +
                  2.99719144e-05 * tc[2] - 2.36155428e-08 * tc[3] +
                  6.71714427e-12 * tc[4] + 2.66682316e+00;
    // species 28: HCCO
    species[28] = +2.25172140e+00 * tc[0] + 1.76550210e-02 * tc[1] -
                  1.18645505e-05 * tc[2] + 5.75858633e-09 * tc[3] -
                  1.26662028e-12 * tc[4] + 1.24904170e+01;
    // species 29: CH2CO
    species[29] = +2.13583630e+00 * tc[0] + 1.81188721e-02 * tc[1] -
                  8.69737370e-06 * tc[2] + 3.11465856e-09 * tc[3] -
                  5.03644037e-13 * tc[4] + 1.22156480e+01;
    // species 30: CH2CHO
    species[30] = +3.40906240e+00 * tc[0] + 1.07385740e-02 * tc[1] +
                  9.45746250e-07 * tc[2] - 2.38619437e-09 * tc[3] +
                  7.16846275e-13 * tc[4] + 9.57145350e+00;
    // species 31: aC3H5
    species[31] = +1.36318350e+00 * tc[0] + 1.98138210e-02 * tc[1] +
                  6.24853000e-06 * tc[2] - 1.11185183e-08 * tc[3] +
                  3.96164275e-12 * tc[4] + 1.71732140e+01;
    // species 32: C6H5
    species[32] = -3.69314530e+00 * tc[0] + 5.21789680e-02 * tc[1] -
                  1.27792135e-05 * tc[2] - 2.35537070e-09 * tc[3] +
                  1.89584937e-12 * tc[4] + 4.13325350e+01;
    // species 33: C6H5CH2
    species[33] = +4.81115400e-01 * tc[0] + 3.85128320e-02 * tc[1] +
                  1.64307460e-05 * tc[2] - 2.56575737e-08 * tc[3] +
                  8.85576700e-12 * tc[4] + 2.35488200e+01;
    // species 34: C6H4O2
    species[34] = -9.51930050e-01 * tc[0] + 5.78424450e-02 * tc[1] -
                  1.91072195e-05 * tc[2] + 1.54375520e-09 * tc[3] +
                  9.07416275e-13 * tc[4] + 2.92395130e+01;
    // species 35: C6H5CO
    species[35] = -2.02511550e+00 * tc[0] + 6.15125410e-02 * tc[1] -
                  1.58018265e-05 * tc[2] - 2.32415330e-09 * tc[3] +
                  1.99587872e-12 * tc[4] + 3.57781750e+01;
    // species 36: C6H5CHO
    species[36] = -3.16273340e+00 * tc[0] + 6.63692450e-02 * tc[1] -
                  1.74081765e-05 * tc[2] - 2.09997923e-09 * tc[3] +
                  2.14517753e-12 * tc[4] + 4.02317350e+01;
    // species 37: N2
    species[37] = +3.29867700e+00 * tc[0] + 1.40824040e-03 * tc[1] -
                  1.98161100e-06 * tc[2] + 1.88050500e-09 * tc[3] -
                  6.11213500e-13 * tc[4] + 3.95037200e+00;
  } else {
    // species 0: POSF10325
    species[0] = +2.32281630e+01 * tc[0] + 6.61883880e-02 * tc[1] -
                 1.20792500e-05 * tc[2] + 1.19551657e-09 * tc[3] -
                 2.55672450e-14 * tc[4] - 9.58181080e+01;
    // species 1: C2H4
    species[1] = +2.03611116e+00 * tc[0] + 1.46454151e-02 * tc[1] -
                 3.35538958e-06 * tc[2] + 4.90743077e-10 * tc[3] -
                 3.14265152e-14 * tc[4] + 1.03053693e+01;
    // species 2: CH4
    species[2] = +7.48514950e-02 * tc[0] + 1.33909467e-02 * tc[1] -
                 2.86642905e-06 * tc[2] + 4.07641783e-10 * tc[3] -
                 2.54538075e-14 * tc[4] + 1.84373180e+01;
    // species 3: H2
    species[3] = +3.33727920e+00 * tc[0] - 4.94024731e-05 * tc[1] +
                 2.49728389e-07 * tc[2] - 5.98554647e-11 * tc[3] +
                 5.00638440e-15 * tc[4] - 3.20502331e+00;
    // species 4: C3H6
    species[4] = +6.73225700e+00 * tc[0] + 1.49083400e-02 * tc[1] -
                 2.47494950e-06 * tc[2] + 2.40400733e-10 * tc[3] -
                 9.41551000e-15 * tc[4] - 1.33133500e+01;
    // species 5: C4H81
    species[5] = +2.05358410e+00 * tc[0] + 3.43505070e-02 * tc[1] -
                 7.94159850e-06 * tc[2] + 1.10298873e-09 * tc[3] -
                 6.34026125e-14 * tc[4] + 1.55432010e+01;
    // species 6: iC4H8
    species[6] = +4.46094700e+00 * tc[0] + 2.96114870e-02 * tc[1] -
                 6.53856450e-06 * tc[2] + 8.85731133e-10 * tc[3] -
                 5.03367825e-14 * tc[4] + 1.06715490e+00;
    // species 7: C6H6
    species[7] = +9.13812450e+00 * tc[0] + 2.38544330e-02 * tc[1] -
                 4.40638630e-06 * tc[2] + 4.03300700e-10 * tc[3] -
                 4.55537575e-15 * tc[4] - 2.91156650e+01;
    // species 8: C6H5CH3
    species[8] = +1.29400340e+01 * tc[0] + 2.66912870e-02 * tc[1] -
                 4.84192525e-06 * tc[2] + 5.24620967e-10 * tc[3] -
                 2.36659002e-14 * tc[4] - 4.67287850e+01;
    // species 9: H
    species[9] = +2.50000001e+00 * tc[0] - 2.30842973e-11 * tc[1] +
                 8.07809740e-15 * tc[2] - 1.57838412e-18 * tc[3] +
                 1.24549339e-22 * tc[4] - 4.46682914e-01;
    // species 10: O
    species[10] = +2.56942078e+00 * tc[0] - 8.59741137e-05 * tc[1] +
                  2.09742295e-08 * tc[2] - 3.33925997e-12 * tc[3] +
                  3.07084227e-16 * tc[4] + 4.78433864e+00;
    // species 11: OH
    species[11] = +2.86472886e+00 * tc[0] + 1.05650448e-03 * tc[1] -
                  1.29541379e-07 * tc[2] + 1.01739558e-11 * tc[3] -
                  3.32989690e-16 * tc[4] + 5.70164073e+00;
    // species 12: HO2
    species[12] = +4.01721090e+00 * tc[0] + 2.23982013e-03 * tc[1] -
                  3.16829075e-07 * tc[2] + 3.80821233e-11 * tc[3] -
                  2.69771337e-15 * tc[4] + 3.78510215e+00;
    // species 13: H2O
    species[13] = +3.03399249e+00 * tc[0] + 2.17691804e-03 * tc[1] -
                  8.20362590e-08 * tc[2] - 3.23473290e-11 * tc[3] +
                  4.20502480e-15 * tc[4] + 4.96677010e+00;
    // species 14: H2O2
    species[14] = +4.16500285e+00 * tc[0] + 4.90831694e-03 * tc[1] -
                  9.50696125e-07 * tc[2] + 1.23728662e-10 * tc[3] -
                  7.19770763e-15 * tc[4] + 2.91615662e+00;
    // species 15: O2
    species[15] = +3.28253784e+00 * tc[0] + 1.48308754e-03 * tc[1] -
                  3.78983334e-07 * tc[2] + 6.98235183e-11 * tc[3] -
                  5.41794485e-15 * tc[4] + 5.45323129e+00;
    // species 16: CH2
    species[16] = +2.87410113e+00 * tc[0] + 3.65639292e-03 * tc[1] -
                  7.04472985e-07 * tc[2] + 8.67265163e-11 * tc[3] -
                  4.69318918e-15 * tc[4] + 6.17119324e+00;
    // species 17: CH2*
    species[17] = +2.29203842e+00 * tc[0] + 4.65588637e-03 * tc[1] -
                  1.00595973e-06 * tc[2] + 1.39302000e-10 * tc[3] -
                  8.49290912e-15 * tc[4] + 8.62650169e+00;
    // species 18: CH3
    species[18] = +2.28571772e+00 * tc[0] + 7.23990037e-03 * tc[1] -
                  1.49357174e-06 * tc[2] + 1.98561548e-10 * tc[3] -
                  1.16788599e-14 * tc[4] + 8.48007179e+00;
    // species 19: HCO
    species[19] = +2.77217438e+00 * tc[0] + 4.95695526e-03 * tc[1] -
                  1.24222806e-06 * tc[2] + 1.96387259e-10 * tc[3] -
                  1.33377178e-14 * tc[4] + 9.79834492e+00;
    // species 20: CH2O
    species[20] = +1.76069008e+00 * tc[0] + 9.20000082e-03 * tc[1] -
                  2.21129406e-06 * tc[2] + 3.35470707e-10 * tc[3] -
                  2.20963910e-14 * tc[4] + 1.36563230e+01;
    // species 21: CH3O
    species[21] = +4.75779238e+00 * tc[0] + 7.44142474e-03 * tc[1] -
                  1.34852588e-06 * tc[2] + 1.46030168e-10 * tc[3] -
                  6.58842745e-15 * tc[4] - 1.96680028e+00;
    // species 22: CO
    species[22] = +2.71518561e+00 * tc[0] + 2.06252743e-03 * tc[1] -
                  4.99412886e-07 * tc[2] + 7.66843360e-11 * tc[3] -
                  5.09119290e-15 * tc[4] + 7.81868772e+00;
    // species 23: CO2
    species[23] = +3.85746029e+00 * tc[0] + 4.41437026e-03 * tc[1] -
                  1.10740702e-06 * tc[2] + 1.74496729e-10 * tc[3] -
                  1.18021041e-14 * tc[4] + 2.27163806e+00;
    // species 24: C2H2
    species[24] = +4.14756964e+00 * tc[0] + 5.96166664e-03 * tc[1] -
                  1.18647426e-06 * tc[2] + 1.55804057e-10 * tc[3] -
                  9.03088033e-15 * tc[4] - 1.23028121e+00;
    // species 25: C2H3
    species[25] = +3.01672400e+00 * tc[0] + 1.03302292e-02 * tc[1] -
                  2.34041174e-06 * tc[2] + 3.39210960e-10 * tc[3] -
                  2.15651760e-14 * tc[4] + 7.78732378e+00;
    // species 26: C2H5
    species[26] = +1.95465642e+00 * tc[0] + 1.73972722e-02 * tc[1] -
                  3.99103334e-06 * tc[2] + 5.84058963e-10 * tc[3] -
                  3.74103940e-14 * tc[4] + 1.34624343e+01;
    // species 27: C2H6
    species[27] = +1.07188150e+00 * tc[0] + 2.16852677e-02 * tc[1] -
                  5.01280335e-06 * tc[2] + 7.38040003e-10 * tc[3] -
                  4.75007225e-14 * tc[4] + 1.51156107e+01;
    // species 28: HCCO
    species[28] = +5.62820580e+00 * tc[0] + 4.08534010e-03 * tc[1] -
                  7.96727350e-07 * tc[2] + 9.54201733e-11 * tc[3] -
                  4.85195800e-15 * tc[4] - 3.93025950e+00;
    // species 29: CH2CO
    species[29] = +4.51129732e+00 * tc[0] + 9.00359745e-03 * tc[1] -
                  2.08469817e-06 * tc[2] + 3.07781961e-10 * tc[3] -
                  1.98709550e-14 * tc[4] + 6.32247205e-01;
    // species 30: CH2CHO
    species[30] = +5.97566990e+00 * tc[0] + 8.13059140e-03 * tc[1] -
                  1.37181225e-06 * tc[2] + 1.35676803e-10 * tc[3] -
                  5.44004275e-15 * tc[4] - 5.03208790e+00;
    // species 31: aC3H5
    species[31] = +6.50078770e+00 * tc[0] + 1.43247310e-02 * tc[1] -
                  2.83908160e-06 * tc[2] + 3.69360033e-10 * tc[3] -
                  2.25909717e-14 * tc[4] - 1.12430500e+01;
    // species 32: C6H5
    species[32] = +8.59731100e+00 * tc[0] + 2.22416300e-02 * tc[1] -
                  4.35999890e-06 * tc[2] + 4.59626167e-10 * tc[3] -
                  1.32865140e-14 * tc[4] - 2.29546430e+01;
    // species 33: C6H5CH2
    species[33] = +1.40439800e+01 * tc[0] + 2.34938730e-02 * tc[1] -
                  4.26876835e-06 * tc[2] + 4.63028033e-10 * tc[3] -
                  2.09036050e-14 * tc[4] - 5.16655890e+01;
    // species 34: C6H4O2
    species[34] = +1.17308400e+01 * tc[0] + 2.36149950e-02 * tc[1] -
                  5.11728800e-06 * tc[2] + 6.51072467e-10 * tc[3] -
                  3.18650550e-14 * tc[4] - 3.63004530e+01;
    // species 35: C6H5CO
    species[35] = +1.33744090e+01 * tc[0] + 2.39992890e-02 * tc[1] -
                  5.23286200e-06 * tc[2] + 7.22304367e-10 * tc[3] -
                  4.50176125e-14 * tc[4] - 4.46592180e+01;
    // species 36: C6H5CHO
    species[36] = +1.36507370e+01 * tc[0] + 2.56804190e-02 * tc[1] -
                  5.23336450e-06 * tc[2] + 6.47114333e-10 * tc[3] -
                  3.37094800e-14 * tc[4] - 4.79657960e+01;
    // species 37: N2
    species[37] = +2.92664000e+00 * tc[0] + 1.48797680e-03 * tc[1] -
                  2.84238000e-07 * tc[2] + 3.36567933e-11 * tc[3] -
                  1.68833775e-15 * tc[4] + 5.98052800e+00;
  }
  return;
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBL(amrex::Real* T, amrex::Real* x, amrex::Real* cpbl)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cpor[38];                               //  temporary storage
  cp_R(cpor, tc);

  // perform dot product
  for (id = 0; id < 38; ++id) {
    result += x[id] * cpor[id];
  }

  *cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPBS(amrex::Real* T, amrex::Real* y, amrex::Real* cpbs)
{
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cpor[38], tresult[38];                  //  temporary storage
  amrex::Real imw[38];

  get_imw(imw);

  cp_R(cpor, tc);

  for (int i = 0; i < 38; i++) {
    tresult[i] = cpor[i] * y[i] * imw[i];
  }
  for (int i = 0; i < 38; i++) {
    result += tresult[i];
  }

  *cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBL(amrex::Real* T, amrex::Real* x, amrex::Real* cvbl)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cvor[38];                               //  temporary storage
  cv_R(cvor, tc);

  // perform dot product
  for (id = 0; id < 38; ++id) {
    result += x[id] * cvor[id];
  }

  *cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVBS(amrex::Real* T, amrex::Real* y, amrex::Real* cvbs)
{
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real cvor[38];                               //  temporary storage
  amrex::Real imw[38];

  get_imw(imw);

  cv_R(cvor, tc);

  // multiply by y/molecularweight
  result += cvor[0] * y[0] * imw[0];    // POSF10325
  result += cvor[1] * y[1] * imw[1];    // C2H4
  result += cvor[2] * y[2] * imw[2];    // CH4
  result += cvor[3] * y[3] * imw[3];    // H2
  result += cvor[4] * y[4] * imw[4];    // C3H6
  result += cvor[5] * y[5] * imw[5];    // C4H81
  result += cvor[6] * y[6] * imw[6];    // iC4H8
  result += cvor[7] * y[7] * imw[7];    // C6H6
  result += cvor[8] * y[8] * imw[8];    // C6H5CH3
  result += cvor[9] * y[9] * imw[9];    // H
  result += cvor[10] * y[10] * imw[10]; // O
  result += cvor[11] * y[11] * imw[11]; // OH
  result += cvor[12] * y[12] * imw[12]; // HO2
  result += cvor[13] * y[13] * imw[13]; // H2O
  result += cvor[14] * y[14] * imw[14]; // H2O2
  result += cvor[15] * y[15] * imw[15]; // O2
  result += cvor[16] * y[16] * imw[16]; // CH2
  result += cvor[17] * y[17] * imw[17]; // CH2*
  result += cvor[18] * y[18] * imw[18]; // CH3
  result += cvor[19] * y[19] * imw[19]; // HCO
  result += cvor[20] * y[20] * imw[20]; // CH2O
  result += cvor[21] * y[21] * imw[21]; // CH3O
  result += cvor[22] * y[22] * imw[22]; // CO
  result += cvor[23] * y[23] * imw[23]; // CO2
  result += cvor[24] * y[24] * imw[24]; // C2H2
  result += cvor[25] * y[25] * imw[25]; // C2H3
  result += cvor[26] * y[26] * imw[26]; // C2H5
  result += cvor[27] * y[27] * imw[27]; // C2H6
  result += cvor[28] * y[28] * imw[28]; // HCCO
  result += cvor[29] * y[29] * imw[29]; // CH2CO
  result += cvor[30] * y[30] * imw[30]; // CH2CHO
  result += cvor[31] * y[31] * imw[31]; // aC3H5
  result += cvor[32] * y[32] * imw[32]; // C6H5
  result += cvor[33] * y[33] * imw[33]; // C6H5CH2
  result += cvor[34] * y[34] * imw[34]; // C6H4O2
  result += cvor[35] * y[35] * imw[35]; // C6H5CO
  result += cvor[36] * y[36] * imw[36]; // C6H5CHO
  result += cvor[37] * y[37] * imw[37]; // N2

  *cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBML(amrex::Real* T, amrex::Real* x, amrex::Real* hbml)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real hml[38];                                //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // perform dot product
  for (id = 0; id < 38; ++id) {
    result += x[id] * hml[id];
  }

  *hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHBMS(amrex::Real* T, amrex::Real* y, amrex::Real* hbms)
{
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real hml[38], tmp[38];                       //  temporary storage
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[38];

  get_imw(imw);

  speciesEnthalpy(hml, tc);

  int id;
  for (id = 0; id < 38; ++id) {
    tmp[id] = y[id] * hml[id] * imw[id];
  }
  for (id = 0; id < 38; ++id) {
    result += tmp[id];
  }

  *hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBML(amrex::Real* T, amrex::Real* x, amrex::Real* ubml)
{
  int id; // loop counter
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real uml[38];                                //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // perform dot product
  for (id = 0; id < 38; ++id) {
    result += x[id] * uml[id];
  }

  *ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUBMS(amrex::Real* T, amrex::Real* y, amrex::Real* ubms)
{
  amrex::Real result = 0;
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real ums[38];                                //  temporary energy array
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[38];

  get_imw(imw);

  speciesInternalEnergy(ums, tc);

  // perform dot product + scaling by wt
  result += y[0] * ums[0] * imw[0];    // POSF10325
  result += y[1] * ums[1] * imw[1];    // C2H4
  result += y[2] * ums[2] * imw[2];    // CH4
  result += y[3] * ums[3] * imw[3];    // H2
  result += y[4] * ums[4] * imw[4];    // C3H6
  result += y[5] * ums[5] * imw[5];    // C4H81
  result += y[6] * ums[6] * imw[6];    // iC4H8
  result += y[7] * ums[7] * imw[7];    // C6H6
  result += y[8] * ums[8] * imw[8];    // C6H5CH3
  result += y[9] * ums[9] * imw[9];    // H
  result += y[10] * ums[10] * imw[10]; // O
  result += y[11] * ums[11] * imw[11]; // OH
  result += y[12] * ums[12] * imw[12]; // HO2
  result += y[13] * ums[13] * imw[13]; // H2O
  result += y[14] * ums[14] * imw[14]; // H2O2
  result += y[15] * ums[15] * imw[15]; // O2
  result += y[16] * ums[16] * imw[16]; // CH2
  result += y[17] * ums[17] * imw[17]; // CH2*
  result += y[18] * ums[18] * imw[18]; // CH3
  result += y[19] * ums[19] * imw[19]; // HCO
  result += y[20] * ums[20] * imw[20]; // CH2O
  result += y[21] * ums[21] * imw[21]; // CH3O
  result += y[22] * ums[22] * imw[22]; // CO
  result += y[23] * ums[23] * imw[23]; // CO2
  result += y[24] * ums[24] * imw[24]; // C2H2
  result += y[25] * ums[25] * imw[25]; // C2H3
  result += y[26] * ums[26] * imw[26]; // C2H5
  result += y[27] * ums[27] * imw[27]; // C2H6
  result += y[28] * ums[28] * imw[28]; // HCCO
  result += y[29] * ums[29] * imw[29]; // CH2CO
  result += y[30] * ums[30] * imw[30]; // CH2CHO
  result += y[31] * ums[31] * imw[31]; // aC3H5
  result += y[32] * ums[32] * imw[32]; // C6H5
  result += y[33] * ums[33] * imw[33]; // C6H5CH2
  result += y[34] * ums[34] * imw[34]; // C6H4O2
  result += y[35] * ums[35] * imw[35]; // C6H5CO
  result += y[36] * ums[36] * imw[36]; // C6H5CHO
  result += y[37] * ums[37] * imw[37]; // N2

  *ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBML(amrex::Real* P, amrex::Real* T, amrex::Real* x, amrex::Real* sbml)
{
  int id; // loop counter
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(*P / 1013250.0);
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[38]; //  temporary storage
  speciesEntropy(sor, tc);

  // Compute Eq 42
  for (id = 0; id < 38; ++id) {
    result += x[id] * (sor[id] - log((x[id] + 1e-100)) - logPratio);
  }

  *sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSBMS(amrex::Real* P, amrex::Real* T, amrex::Real* y, amrex::Real* sbms)
{
  amrex::Real result = 0;
  // Log of normalized pressure in cgs units dynes/cm^2 by Patm
  amrex::Real logPratio = log(*P / 1013250.0);
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real sor[38]; //  temporary storage
  amrex::Real x[38];   //  need a ytx conversion
  amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual
  amrex::Real imw[38];

  get_imw(imw);

  // Compute inverse of mean molecular wt first
  YOW += y[0] * imw[0];   // POSF10325
  YOW += y[1] * imw[1];   // C2H4
  YOW += y[2] * imw[2];   // CH4
  YOW += y[3] * imw[3];   // H2
  YOW += y[4] * imw[4];   // C3H6
  YOW += y[5] * imw[5];   // C4H81
  YOW += y[6] * imw[6];   // iC4H8
  YOW += y[7] * imw[7];   // C6H6
  YOW += y[8] * imw[8];   // C6H5CH3
  YOW += y[9] * imw[9];   // H
  YOW += y[10] * imw[10]; // O
  YOW += y[11] * imw[11]; // OH
  YOW += y[12] * imw[12]; // HO2
  YOW += y[13] * imw[13]; // H2O
  YOW += y[14] * imw[14]; // H2O2
  YOW += y[15] * imw[15]; // O2
  YOW += y[16] * imw[16]; // CH2
  YOW += y[17] * imw[17]; // CH2*
  YOW += y[18] * imw[18]; // CH3
  YOW += y[19] * imw[19]; // HCO
  YOW += y[20] * imw[20]; // CH2O
  YOW += y[21] * imw[21]; // CH3O
  YOW += y[22] * imw[22]; // CO
  YOW += y[23] * imw[23]; // CO2
  YOW += y[24] * imw[24]; // C2H2
  YOW += y[25] * imw[25]; // C2H3
  YOW += y[26] * imw[26]; // C2H5
  YOW += y[27] * imw[27]; // C2H6
  YOW += y[28] * imw[28]; // HCCO
  YOW += y[29] * imw[29]; // CH2CO
  YOW += y[30] * imw[30]; // CH2CHO
  YOW += y[31] * imw[31]; // aC3H5
  YOW += y[32] * imw[32]; // C6H5
  YOW += y[33] * imw[33]; // C6H5CH2
  YOW += y[34] * imw[34]; // C6H4O2
  YOW += y[35] * imw[35]; // C6H5CO
  YOW += y[36] * imw[36]; // C6H5CHO
  YOW += y[37] * imw[37]; // N2
  // Now compute y to x conversion
  x[0] = y[0] / (154.297000 * YOW);
  x[1] = y[1] / (28.054000 * YOW);
  x[2] = y[2] / (16.043000 * YOW);
  x[3] = y[3] / (2.016000 * YOW);
  x[4] = y[4] / (42.081000 * YOW);
  x[5] = y[5] / (56.108000 * YOW);
  x[6] = y[6] / (56.108000 * YOW);
  x[7] = y[7] / (78.114000 * YOW);
  x[8] = y[8] / (92.141000 * YOW);
  x[9] = y[9] / (1.008000 * YOW);
  x[10] = y[10] / (15.999000 * YOW);
  x[11] = y[11] / (17.007000 * YOW);
  x[12] = y[12] / (33.006000 * YOW);
  x[13] = y[13] / (18.015000 * YOW);
  x[14] = y[14] / (34.014000 * YOW);
  x[15] = y[15] / (31.998000 * YOW);
  x[16] = y[16] / (14.027000 * YOW);
  x[17] = y[17] / (14.027000 * YOW);
  x[18] = y[18] / (15.035000 * YOW);
  x[19] = y[19] / (29.018000 * YOW);
  x[20] = y[20] / (30.026000 * YOW);
  x[21] = y[21] / (31.034000 * YOW);
  x[22] = y[22] / (28.010000 * YOW);
  x[23] = y[23] / (44.009000 * YOW);
  x[24] = y[24] / (26.038000 * YOW);
  x[25] = y[25] / (27.046000 * YOW);
  x[26] = y[26] / (29.062000 * YOW);
  x[27] = y[27] / (30.070000 * YOW);
  x[28] = y[28] / (41.029000 * YOW);
  x[29] = y[29] / (42.037000 * YOW);
  x[30] = y[30] / (43.045000 * YOW);
  x[31] = y[31] / (41.073000 * YOW);
  x[32] = y[32] / (77.106000 * YOW);
  x[33] = y[33] / (91.133000 * YOW);
  x[34] = y[34] / (108.096000 * YOW);
  x[35] = y[35] / (105.116000 * YOW);
  x[36] = y[36] / (106.124000 * YOW);
  x[37] = y[37] / (28.014000 * YOW);
  speciesEntropy(sor, tc);
  // Perform computation in Eq 42 and 43
  result += x[0] * (sor[0] - log((x[0] + 1e-100)) - logPratio);
  result += x[1] * (sor[1] - log((x[1] + 1e-100)) - logPratio);
  result += x[2] * (sor[2] - log((x[2] + 1e-100)) - logPratio);
  result += x[3] * (sor[3] - log((x[3] + 1e-100)) - logPratio);
  result += x[4] * (sor[4] - log((x[4] + 1e-100)) - logPratio);
  result += x[5] * (sor[5] - log((x[5] + 1e-100)) - logPratio);
  result += x[6] * (sor[6] - log((x[6] + 1e-100)) - logPratio);
  result += x[7] * (sor[7] - log((x[7] + 1e-100)) - logPratio);
  result += x[8] * (sor[8] - log((x[8] + 1e-100)) - logPratio);
  result += x[9] * (sor[9] - log((x[9] + 1e-100)) - logPratio);
  result += x[10] * (sor[10] - log((x[10] + 1e-100)) - logPratio);
  result += x[11] * (sor[11] - log((x[11] + 1e-100)) - logPratio);
  result += x[12] * (sor[12] - log((x[12] + 1e-100)) - logPratio);
  result += x[13] * (sor[13] - log((x[13] + 1e-100)) - logPratio);
  result += x[14] * (sor[14] - log((x[14] + 1e-100)) - logPratio);
  result += x[15] * (sor[15] - log((x[15] + 1e-100)) - logPratio);
  result += x[16] * (sor[16] - log((x[16] + 1e-100)) - logPratio);
  result += x[17] * (sor[17] - log((x[17] + 1e-100)) - logPratio);
  result += x[18] * (sor[18] - log((x[18] + 1e-100)) - logPratio);
  result += x[19] * (sor[19] - log((x[19] + 1e-100)) - logPratio);
  result += x[20] * (sor[20] - log((x[20] + 1e-100)) - logPratio);
  result += x[21] * (sor[21] - log((x[21] + 1e-100)) - logPratio);
  result += x[22] * (sor[22] - log((x[22] + 1e-100)) - logPratio);
  result += x[23] * (sor[23] - log((x[23] + 1e-100)) - logPratio);
  result += x[24] * (sor[24] - log((x[24] + 1e-100)) - logPratio);
  result += x[25] * (sor[25] - log((x[25] + 1e-100)) - logPratio);
  result += x[26] * (sor[26] - log((x[26] + 1e-100)) - logPratio);
  result += x[27] * (sor[27] - log((x[27] + 1e-100)) - logPratio);
  result += x[28] * (sor[28] - log((x[28] + 1e-100)) - logPratio);
  result += x[29] * (sor[29] - log((x[29] + 1e-100)) - logPratio);
  result += x[30] * (sor[30] - log((x[30] + 1e-100)) - logPratio);
  result += x[31] * (sor[31] - log((x[31] + 1e-100)) - logPratio);
  result += x[32] * (sor[32] - log((x[32] + 1e-100)) - logPratio);
  result += x[33] * (sor[33] - log((x[33] + 1e-100)) - logPratio);
  result += x[34] * (sor[34] - log((x[34] + 1e-100)) - logPratio);
  result += x[35] * (sor[35] - log((x[35] + 1e-100)) - logPratio);
  result += x[36] * (sor[36] - log((x[36] + 1e-100)) - logPratio);
  result += x[37] * (sor[37] - log((x[37] + 1e-100)) - logPratio);
  // Scale by R/W
  *sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_EY(amrex::Real* e, amrex::Real* y, amrex::Real* t, int* ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real ein = *e;
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real e1, emin, emax, cv, t1, dt;
  int i; //  loop counter
  CKUBMS(&tmin, y, &emin);
  CKUBMS(&tmax, y, &emax);
  if (ein < emin) {
    // Linear Extrapolation below tmin
    CKCVBS(&tmin, y, &cv);
    *t = tmin - (emin - ein) / cv;
    *ierr = 1;
    return;
  }
  if (ein > emax) {
    // Linear Extrapolation above tmax
    CKCVBS(&tmax, y, &cv);
    *t = tmax - (emax - ein) / cv;
    *ierr = 1;
    return;
  }
  t1 = *t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (emax - emin) * (ein - emin);
  }
  for (i = 0; i < maxiter; ++i) {
    CKUBMS(&t1, y, &e1);
    CKCVBS(&t1, y, &cv);
    dt = (ein - e1) / cv;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol)
      break;
    else if (t1 + dt == t1)
      break;
    t1 += dt;
  }
  *t = t1;
  *ierr = 0;
  return;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_T_GIVEN_HY(amrex::Real* h, amrex::Real* y, amrex::Real* t, int* ierr)
{
#ifdef CONVERGENCE
  const int maxiter = 5000;
  const amrex::Real tol = 1.e-12;
#else
  const int maxiter = 200;
  const amrex::Real tol = 1.e-6;
#endif
  amrex::Real hin = *h;
  amrex::Real tmin = 90;   // max lower bound for thermo def
  amrex::Real tmax = 4000; // min upper bound for thermo def
  amrex::Real h1, hmin, hmax, cp, t1, dt;
  int i; //  loop counter
  CKHBMS(&tmin, y, &hmin);
  CKHBMS(&tmax, y, &hmax);
  if (hin < hmin) {
    // Linear Extrapolation below tmin
    CKCPBS(&tmin, y, &cp);
    *t = tmin - (hmin - hin) / cp;
    *ierr = 1;
    return;
  }
  if (hin > hmax) {
    // Linear Extrapolation above tmax
    CKCPBS(&tmax, y, &cp);
    *t = tmax - (hmax - hin) / cp;
    *ierr = 1;
    return;
  }
  t1 = *t;
  if (t1 < tmin || t1 > tmax) {
    t1 = tmin + (tmax - tmin) / (hmax - hmin) * (hin - hmin);
  }
  for (i = 0; i < maxiter; ++i) {
    CKHBMS(&t1, y, &h1);
    CKCPBS(&t1, y, &cp);
    dt = (hin - h1) / cp;
    if (dt > 100.) {
      dt = 100.;
    } else if (dt < -100.) {
      dt = -100.;
    } else if (fabs(dt) < tol)
      break;
    else if (t1 + dt == t1)
      break;
    t1 += dt;
  }
  *t = t1;
  *ierr = 0;
  return;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPX(amrex::Real* rho, amrex::Real* T, amrex::Real* x, amrex::Real* P)
{
  amrex::Real XW = 0;                           //  To hold mean molecular wt
  XW += x[0] * 154.297000;                      // POSF10325
  XW += x[1] * 28.054000;                       // C2H4
  XW += x[2] * 16.043000;                       // CH4
  XW += x[3] * 2.016000;                        // H2
  XW += x[4] * 42.081000;                       // C3H6
  XW += x[5] * 56.108000;                       // C4H81
  XW += x[6] * 56.108000;                       // iC4H8
  XW += x[7] * 78.114000;                       // C6H6
  XW += x[8] * 92.141000;                       // C6H5CH3
  XW += x[9] * 1.008000;                        // H
  XW += x[10] * 15.999000;                      // O
  XW += x[11] * 17.007000;                      // OH
  XW += x[12] * 33.006000;                      // HO2
  XW += x[13] * 18.015000;                      // H2O
  XW += x[14] * 34.014000;                      // H2O2
  XW += x[15] * 31.998000;                      // O2
  XW += x[16] * 14.027000;                      // CH2
  XW += x[17] * 14.027000;                      // CH2*
  XW += x[18] * 15.035000;                      // CH3
  XW += x[19] * 29.018000;                      // HCO
  XW += x[20] * 30.026000;                      // CH2O
  XW += x[21] * 31.034000;                      // CH3O
  XW += x[22] * 28.010000;                      // CO
  XW += x[23] * 44.009000;                      // CO2
  XW += x[24] * 26.038000;                      // C2H2
  XW += x[25] * 27.046000;                      // C2H3
  XW += x[26] * 29.062000;                      // C2H5
  XW += x[27] * 30.070000;                      // C2H6
  XW += x[28] * 41.029000;                      // HCCO
  XW += x[29] * 42.037000;                      // CH2CO
  XW += x[30] * 43.045000;                      // CH2CHO
  XW += x[31] * 41.073000;                      // aC3H5
  XW += x[32] * 77.106000;                      // C6H5
  XW += x[33] * 91.133000;                      // C6H5CH2
  XW += x[34] * 108.096000;                     // C6H4O2
  XW += x[35] * 105.116000;                     // C6H5CO
  XW += x[36] * 106.124000;                     // C6H5CHO
  XW += x[37] * 28.014000;                      // N2
  *P = *rho * 8.31446261815324e+07 * (*T) / XW; // P = rho*R*T/W

  return;
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPY(amrex::Real* rho, amrex::Real* T, amrex::Real* y, amrex::Real* P)
{
  amrex::Real YOW = 0; //  for computing mean MW
  amrex::Real imw[38];

  get_imw(imw);

  YOW += y[0] * imw[0];                          // POSF10325
  YOW += y[1] * imw[1];                          // C2H4
  YOW += y[2] * imw[2];                          // CH4
  YOW += y[3] * imw[3];                          // H2
  YOW += y[4] * imw[4];                          // C3H6
  YOW += y[5] * imw[5];                          // C4H81
  YOW += y[6] * imw[6];                          // iC4H8
  YOW += y[7] * imw[7];                          // C6H6
  YOW += y[8] * imw[8];                          // C6H5CH3
  YOW += y[9] * imw[9];                          // H
  YOW += y[10] * imw[10];                        // O
  YOW += y[11] * imw[11];                        // OH
  YOW += y[12] * imw[12];                        // HO2
  YOW += y[13] * imw[13];                        // H2O
  YOW += y[14] * imw[14];                        // H2O2
  YOW += y[15] * imw[15];                        // O2
  YOW += y[16] * imw[16];                        // CH2
  YOW += y[17] * imw[17];                        // CH2*
  YOW += y[18] * imw[18];                        // CH3
  YOW += y[19] * imw[19];                        // HCO
  YOW += y[20] * imw[20];                        // CH2O
  YOW += y[21] * imw[21];                        // CH3O
  YOW += y[22] * imw[22];                        // CO
  YOW += y[23] * imw[23];                        // CO2
  YOW += y[24] * imw[24];                        // C2H2
  YOW += y[25] * imw[25];                        // C2H3
  YOW += y[26] * imw[26];                        // C2H5
  YOW += y[27] * imw[27];                        // C2H6
  YOW += y[28] * imw[28];                        // HCCO
  YOW += y[29] * imw[29];                        // CH2CO
  YOW += y[30] * imw[30];                        // CH2CHO
  YOW += y[31] * imw[31];                        // aC3H5
  YOW += y[32] * imw[32];                        // C6H5
  YOW += y[33] * imw[33];                        // C6H5CH2
  YOW += y[34] * imw[34];                        // C6H4O2
  YOW += y[35] * imw[35];                        // C6H5CO
  YOW += y[36] * imw[36];                        // C6H5CHO
  YOW += y[37] * imw[37];                        // N2
  *P = *rho * 8.31446261815324e+07 * (*T) * YOW; // P = rho*R*T/W

  return;
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKPC(amrex::Real* rho, amrex::Real* T, amrex::Real* c, amrex::Real* P)
{
  int id; // loop counter
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 154.297000;  // POSF10325
  W += c[1] * 28.054000;   // C2H4
  W += c[2] * 16.043000;   // CH4
  W += c[3] * 2.016000;    // H2
  W += c[4] * 42.081000;   // C3H6
  W += c[5] * 56.108000;   // C4H81
  W += c[6] * 56.108000;   // iC4H8
  W += c[7] * 78.114000;   // C6H6
  W += c[8] * 92.141000;   // C6H5CH3
  W += c[9] * 1.008000;    // H
  W += c[10] * 15.999000;  // O
  W += c[11] * 17.007000;  // OH
  W += c[12] * 33.006000;  // HO2
  W += c[13] * 18.015000;  // H2O
  W += c[14] * 34.014000;  // H2O2
  W += c[15] * 31.998000;  // O2
  W += c[16] * 14.027000;  // CH2
  W += c[17] * 14.027000;  // CH2*
  W += c[18] * 15.035000;  // CH3
  W += c[19] * 29.018000;  // HCO
  W += c[20] * 30.026000;  // CH2O
  W += c[21] * 31.034000;  // CH3O
  W += c[22] * 28.010000;  // CO
  W += c[23] * 44.009000;  // CO2
  W += c[24] * 26.038000;  // C2H2
  W += c[25] * 27.046000;  // C2H3
  W += c[26] * 29.062000;  // C2H5
  W += c[27] * 30.070000;  // C2H6
  W += c[28] * 41.029000;  // HCCO
  W += c[29] * 42.037000;  // CH2CO
  W += c[30] * 43.045000;  // CH2CHO
  W += c[31] * 41.073000;  // aC3H5
  W += c[32] * 77.106000;  // C6H5
  W += c[33] * 91.133000;  // C6H5CH2
  W += c[34] * 108.096000; // C6H4O2
  W += c[35] * 105.116000; // C6H5CO
  W += c[36] * 106.124000; // C6H5CHO
  W += c[37] * 28.014000;  // N2

  for (id = 0; id < 38; ++id) {
    sumC += c[id];
  }
  *P = *rho * 8.31446261815324e+07 * (*T) * sumC / W; // P = rho*R*T/W

  return;
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOX(amrex::Real* P, amrex::Real* T, amrex::Real* x, amrex::Real* rho)
{
  amrex::Real XW = 0;                             //  To hold mean molecular wt
  XW += x[0] * 154.297000;                        // POSF10325
  XW += x[1] * 28.054000;                         // C2H4
  XW += x[2] * 16.043000;                         // CH4
  XW += x[3] * 2.016000;                          // H2
  XW += x[4] * 42.081000;                         // C3H6
  XW += x[5] * 56.108000;                         // C4H81
  XW += x[6] * 56.108000;                         // iC4H8
  XW += x[7] * 78.114000;                         // C6H6
  XW += x[8] * 92.141000;                         // C6H5CH3
  XW += x[9] * 1.008000;                          // H
  XW += x[10] * 15.999000;                        // O
  XW += x[11] * 17.007000;                        // OH
  XW += x[12] * 33.006000;                        // HO2
  XW += x[13] * 18.015000;                        // H2O
  XW += x[14] * 34.014000;                        // H2O2
  XW += x[15] * 31.998000;                        // O2
  XW += x[16] * 14.027000;                        // CH2
  XW += x[17] * 14.027000;                        // CH2*
  XW += x[18] * 15.035000;                        // CH3
  XW += x[19] * 29.018000;                        // HCO
  XW += x[20] * 30.026000;                        // CH2O
  XW += x[21] * 31.034000;                        // CH3O
  XW += x[22] * 28.010000;                        // CO
  XW += x[23] * 44.009000;                        // CO2
  XW += x[24] * 26.038000;                        // C2H2
  XW += x[25] * 27.046000;                        // C2H3
  XW += x[26] * 29.062000;                        // C2H5
  XW += x[27] * 30.070000;                        // C2H6
  XW += x[28] * 41.029000;                        // HCCO
  XW += x[29] * 42.037000;                        // CH2CO
  XW += x[30] * 43.045000;                        // CH2CHO
  XW += x[31] * 41.073000;                        // aC3H5
  XW += x[32] * 77.106000;                        // C6H5
  XW += x[33] * 91.133000;                        // C6H5CH2
  XW += x[34] * 108.096000;                       // C6H4O2
  XW += x[35] * 105.116000;                       // C6H5CO
  XW += x[36] * 106.124000;                       // C6H5CHO
  XW += x[37] * 28.014000;                        // N2
  *rho = *P * XW / (8.31446261815324e+07 * (*T)); // rho = P*W/(R*T)

  return;
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOY(amrex::Real* P, amrex::Real* T, amrex::Real* y, amrex::Real* rho)
{
  amrex::Real YOW = 0;
  amrex::Real tmp[38];
  amrex::Real imw[38];

  get_imw(imw);

  for (int i = 0; i < 38; i++) {
    tmp[i] = y[i] * imw[i];
  }
  for (int i = 0; i < 38; i++) {
    YOW += tmp[i];
  }

  *rho = *P / (8.31446261815324e+07 * (*T) * YOW); // rho = P*W/(R*T)
  return;
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKRHOC(amrex::Real* P, amrex::Real* T, amrex::Real* c, amrex::Real* rho)
{
  int id; // loop counter
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 154.297000;  // POSF10325
  W += c[1] * 28.054000;   // C2H4
  W += c[2] * 16.043000;   // CH4
  W += c[3] * 2.016000;    // H2
  W += c[4] * 42.081000;   // C3H6
  W += c[5] * 56.108000;   // C4H81
  W += c[6] * 56.108000;   // iC4H8
  W += c[7] * 78.114000;   // C6H6
  W += c[8] * 92.141000;   // C6H5CH3
  W += c[9] * 1.008000;    // H
  W += c[10] * 15.999000;  // O
  W += c[11] * 17.007000;  // OH
  W += c[12] * 33.006000;  // HO2
  W += c[13] * 18.015000;  // H2O
  W += c[14] * 34.014000;  // H2O2
  W += c[15] * 31.998000;  // O2
  W += c[16] * 14.027000;  // CH2
  W += c[17] * 14.027000;  // CH2*
  W += c[18] * 15.035000;  // CH3
  W += c[19] * 29.018000;  // HCO
  W += c[20] * 30.026000;  // CH2O
  W += c[21] * 31.034000;  // CH3O
  W += c[22] * 28.010000;  // CO
  W += c[23] * 44.009000;  // CO2
  W += c[24] * 26.038000;  // C2H2
  W += c[25] * 27.046000;  // C2H3
  W += c[26] * 29.062000;  // C2H5
  W += c[27] * 30.070000;  // C2H6
  W += c[28] * 41.029000;  // HCCO
  W += c[29] * 42.037000;  // CH2CO
  W += c[30] * 43.045000;  // CH2CHO
  W += c[31] * 41.073000;  // aC3H5
  W += c[32] * 77.106000;  // C6H5
  W += c[33] * 91.133000;  // C6H5CH2
  W += c[34] * 108.096000; // C6H4O2
  W += c[35] * 105.116000; // C6H5CO
  W += c[36] * 106.124000; // C6H5CHO
  W += c[37] * 28.014000;  // N2

  for (id = 0; id < 38; ++id) {
    sumC += c[id];
  }
  *rho = *P * W / (sumC * (*T) * 8.31446261815324e+07); // rho = PW/(R*T)

  return;
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWT(amrex::Real* wt)
{
  get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWY(amrex::Real* y, amrex::Real* wtm)
{
  amrex::Real YOW = 0;
  amrex::Real tmp[38];
  amrex::Real imw[38];

  get_imw(imw);

  for (int i = 0; i < 38; i++) {
    tmp[i] = y[i] * imw[i];
  }
  for (int i = 0; i < 38; i++) {
    YOW += tmp[i];
  }

  *wtm = 1.0 / YOW;
  return;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWX(amrex::Real* x, amrex::Real* wtm)
{
  amrex::Real XW = 0;       //  see Eq 4 in CK Manual
  XW += x[0] * 154.297000;  // POSF10325
  XW += x[1] * 28.054000;   // C2H4
  XW += x[2] * 16.043000;   // CH4
  XW += x[3] * 2.016000;    // H2
  XW += x[4] * 42.081000;   // C3H6
  XW += x[5] * 56.108000;   // C4H81
  XW += x[6] * 56.108000;   // iC4H8
  XW += x[7] * 78.114000;   // C6H6
  XW += x[8] * 92.141000;   // C6H5CH3
  XW += x[9] * 1.008000;    // H
  XW += x[10] * 15.999000;  // O
  XW += x[11] * 17.007000;  // OH
  XW += x[12] * 33.006000;  // HO2
  XW += x[13] * 18.015000;  // H2O
  XW += x[14] * 34.014000;  // H2O2
  XW += x[15] * 31.998000;  // O2
  XW += x[16] * 14.027000;  // CH2
  XW += x[17] * 14.027000;  // CH2*
  XW += x[18] * 15.035000;  // CH3
  XW += x[19] * 29.018000;  // HCO
  XW += x[20] * 30.026000;  // CH2O
  XW += x[21] * 31.034000;  // CH3O
  XW += x[22] * 28.010000;  // CO
  XW += x[23] * 44.009000;  // CO2
  XW += x[24] * 26.038000;  // C2H2
  XW += x[25] * 27.046000;  // C2H3
  XW += x[26] * 29.062000;  // C2H5
  XW += x[27] * 30.070000;  // C2H6
  XW += x[28] * 41.029000;  // HCCO
  XW += x[29] * 42.037000;  // CH2CO
  XW += x[30] * 43.045000;  // CH2CHO
  XW += x[31] * 41.073000;  // aC3H5
  XW += x[32] * 77.106000;  // C6H5
  XW += x[33] * 91.133000;  // C6H5CH2
  XW += x[34] * 108.096000; // C6H4O2
  XW += x[35] * 105.116000; // C6H5CO
  XW += x[36] * 106.124000; // C6H5CHO
  XW += x[37] * 28.014000;  // N2
  *wtm = XW;

  return;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKMMWC(amrex::Real* c, amrex::Real* wtm)
{
  int id; // loop counter
  // See Eq 5 in CK Manual
  amrex::Real W = 0;
  amrex::Real sumC = 0;
  W += c[0] * 154.297000;  // POSF10325
  W += c[1] * 28.054000;   // C2H4
  W += c[2] * 16.043000;   // CH4
  W += c[3] * 2.016000;    // H2
  W += c[4] * 42.081000;   // C3H6
  W += c[5] * 56.108000;   // C4H81
  W += c[6] * 56.108000;   // iC4H8
  W += c[7] * 78.114000;   // C6H6
  W += c[8] * 92.141000;   // C6H5CH3
  W += c[9] * 1.008000;    // H
  W += c[10] * 15.999000;  // O
  W += c[11] * 17.007000;  // OH
  W += c[12] * 33.006000;  // HO2
  W += c[13] * 18.015000;  // H2O
  W += c[14] * 34.014000;  // H2O2
  W += c[15] * 31.998000;  // O2
  W += c[16] * 14.027000;  // CH2
  W += c[17] * 14.027000;  // CH2*
  W += c[18] * 15.035000;  // CH3
  W += c[19] * 29.018000;  // HCO
  W += c[20] * 30.026000;  // CH2O
  W += c[21] * 31.034000;  // CH3O
  W += c[22] * 28.010000;  // CO
  W += c[23] * 44.009000;  // CO2
  W += c[24] * 26.038000;  // C2H2
  W += c[25] * 27.046000;  // C2H3
  W += c[26] * 29.062000;  // C2H5
  W += c[27] * 30.070000;  // C2H6
  W += c[28] * 41.029000;  // HCCO
  W += c[29] * 42.037000;  // CH2CO
  W += c[30] * 43.045000;  // CH2CHO
  W += c[31] * 41.073000;  // aC3H5
  W += c[32] * 77.106000;  // C6H5
  W += c[33] * 91.133000;  // C6H5CH2
  W += c[34] * 108.096000; // C6H4O2
  W += c[35] * 105.116000; // C6H5CO
  W += c[36] * 106.124000; // C6H5CHO
  W += c[37] * 28.014000;  // N2

  for (id = 0; id < 38; ++id) {
    sumC += c[id];
  }
  //  CK provides no guard against divison by zero
  *wtm = W / sumC;

  return;
}

// get Cp/R as a function of T
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPOR(amrex::Real* T, amrex::Real* cpor)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpor, tc);
}

// get H/RT as a function of T
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHORT(amrex::Real* T, amrex::Real* hort)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEnthalpy(hort, tc);
}

// get S/R as a function of T
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSOR(amrex::Real* T, amrex::Real* sor)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sor, tc);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTX(amrex::Real* y, amrex::Real* x)
{
  amrex::Real YOW = 0;
  amrex::Real tmp[38];
  amrex::Real imw[38];

  get_imw(imw);

  for (int i = 0; i < 38; i++) {
    tmp[i] = y[i] * imw[i];
  }
  for (int i = 0; i < 38; i++) {
    YOW += tmp[i];
  }

  amrex::Real YOWINV = 1.0 / YOW;

  for (int i = 0; i < 38; i++) {
    x[i] = y[i] * imw[i] * YOWINV;
  }
  return;
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCP(amrex::Real* P, amrex::Real* T, amrex::Real* y, amrex::Real* c)
{
  amrex::Real YOW = 0;
  amrex::Real PWORT;
  amrex::Real imw[38];

  get_imw(imw);

  // Compute inverse of mean molecular wt first
  for (int i = 0; i < 38; i++) {
    c[i] = y[i] * imw[i];
  }
  for (int i = 0; i < 38; i++) {
    YOW += c[i];
  }

  // PW/RT (see Eq. 7)
  PWORT = (*P) / (YOW * 8.31446261815324e+07 * (*T));
  // Now compute conversion

  for (int i = 0; i < 38; i++) {
    c[i] = PWORT * y[i] * imw[i];
  }
  return;
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKYTCR(amrex::Real* rho, amrex::Real* /*T*/, amrex::Real* y, amrex::Real* c)
{
  amrex::Real imw[38];

  get_imw(imw);

  for (int i = 0; i < 38; i++) {
    c[i] = (*rho) * y[i] * imw[i];
  }
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTY(amrex::Real* x, amrex::Real* y)
{
  amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
  // Compute mean molecular wt first
  XW += x[0] * 154.297000;  // POSF10325
  XW += x[1] * 28.054000;   // C2H4
  XW += x[2] * 16.043000;   // CH4
  XW += x[3] * 2.016000;    // H2
  XW += x[4] * 42.081000;   // C3H6
  XW += x[5] * 56.108000;   // C4H81
  XW += x[6] * 56.108000;   // iC4H8
  XW += x[7] * 78.114000;   // C6H6
  XW += x[8] * 92.141000;   // C6H5CH3
  XW += x[9] * 1.008000;    // H
  XW += x[10] * 15.999000;  // O
  XW += x[11] * 17.007000;  // OH
  XW += x[12] * 33.006000;  // HO2
  XW += x[13] * 18.015000;  // H2O
  XW += x[14] * 34.014000;  // H2O2
  XW += x[15] * 31.998000;  // O2
  XW += x[16] * 14.027000;  // CH2
  XW += x[17] * 14.027000;  // CH2*
  XW += x[18] * 15.035000;  // CH3
  XW += x[19] * 29.018000;  // HCO
  XW += x[20] * 30.026000;  // CH2O
  XW += x[21] * 31.034000;  // CH3O
  XW += x[22] * 28.010000;  // CO
  XW += x[23] * 44.009000;  // CO2
  XW += x[24] * 26.038000;  // C2H2
  XW += x[25] * 27.046000;  // C2H3
  XW += x[26] * 29.062000;  // C2H5
  XW += x[27] * 30.070000;  // C2H6
  XW += x[28] * 41.029000;  // HCCO
  XW += x[29] * 42.037000;  // CH2CO
  XW += x[30] * 43.045000;  // CH2CHO
  XW += x[31] * 41.073000;  // aC3H5
  XW += x[32] * 77.106000;  // C6H5
  XW += x[33] * 91.133000;  // C6H5CH2
  XW += x[34] * 108.096000; // C6H4O2
  XW += x[35] * 105.116000; // C6H5CO
  XW += x[36] * 106.124000; // C6H5CHO
  XW += x[37] * 28.014000;  // N2
  // Now compute conversion
  amrex::Real XWinv = 1.0 / XW;
  y[0] = x[0] * 154.297000 * XWinv;
  y[1] = x[1] * 28.054000 * XWinv;
  y[2] = x[2] * 16.043000 * XWinv;
  y[3] = x[3] * 2.016000 * XWinv;
  y[4] = x[4] * 42.081000 * XWinv;
  y[5] = x[5] * 56.108000 * XWinv;
  y[6] = x[6] * 56.108000 * XWinv;
  y[7] = x[7] * 78.114000 * XWinv;
  y[8] = x[8] * 92.141000 * XWinv;
  y[9] = x[9] * 1.008000 * XWinv;
  y[10] = x[10] * 15.999000 * XWinv;
  y[11] = x[11] * 17.007000 * XWinv;
  y[12] = x[12] * 33.006000 * XWinv;
  y[13] = x[13] * 18.015000 * XWinv;
  y[14] = x[14] * 34.014000 * XWinv;
  y[15] = x[15] * 31.998000 * XWinv;
  y[16] = x[16] * 14.027000 * XWinv;
  y[17] = x[17] * 14.027000 * XWinv;
  y[18] = x[18] * 15.035000 * XWinv;
  y[19] = x[19] * 29.018000 * XWinv;
  y[20] = x[20] * 30.026000 * XWinv;
  y[21] = x[21] * 31.034000 * XWinv;
  y[22] = x[22] * 28.010000 * XWinv;
  y[23] = x[23] * 44.009000 * XWinv;
  y[24] = x[24] * 26.038000 * XWinv;
  y[25] = x[25] * 27.046000 * XWinv;
  y[26] = x[26] * 29.062000 * XWinv;
  y[27] = x[27] * 30.070000 * XWinv;
  y[28] = x[28] * 41.029000 * XWinv;
  y[29] = x[29] * 42.037000 * XWinv;
  y[30] = x[30] * 43.045000 * XWinv;
  y[31] = x[31] * 41.073000 * XWinv;
  y[32] = x[32] * 77.106000 * XWinv;
  y[33] = x[33] * 91.133000 * XWinv;
  y[34] = x[34] * 108.096000 * XWinv;
  y[35] = x[35] * 105.116000 * XWinv;
  y[36] = x[36] * 106.124000 * XWinv;
  y[37] = x[37] * 28.014000 * XWinv;

  return;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCP(amrex::Real* P, amrex::Real* T, amrex::Real* x, amrex::Real* c)
{
  int id;                                                  // loop counter
  amrex::Real PORT = (*P) / (8.31446261815324e+07 * (*T)); // P/RT

  // Compute conversion, see Eq 10
  for (id = 0; id < 38; ++id) {
    c[id] = x[id] * PORT;
  }

  return;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKXTCR(amrex::Real* rho, amrex::Real* /*T*/, amrex::Real* x, amrex::Real* c)
{
  int id;             // loop counter
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 154.297000;  // POSF10325
  XW += x[1] * 28.054000;   // C2H4
  XW += x[2] * 16.043000;   // CH4
  XW += x[3] * 2.016000;    // H2
  XW += x[4] * 42.081000;   // C3H6
  XW += x[5] * 56.108000;   // C4H81
  XW += x[6] * 56.108000;   // iC4H8
  XW += x[7] * 78.114000;   // C6H6
  XW += x[8] * 92.141000;   // C6H5CH3
  XW += x[9] * 1.008000;    // H
  XW += x[10] * 15.999000;  // O
  XW += x[11] * 17.007000;  // OH
  XW += x[12] * 33.006000;  // HO2
  XW += x[13] * 18.015000;  // H2O
  XW += x[14] * 34.014000;  // H2O2
  XW += x[15] * 31.998000;  // O2
  XW += x[16] * 14.027000;  // CH2
  XW += x[17] * 14.027000;  // CH2*
  XW += x[18] * 15.035000;  // CH3
  XW += x[19] * 29.018000;  // HCO
  XW += x[20] * 30.026000;  // CH2O
  XW += x[21] * 31.034000;  // CH3O
  XW += x[22] * 28.010000;  // CO
  XW += x[23] * 44.009000;  // CO2
  XW += x[24] * 26.038000;  // C2H2
  XW += x[25] * 27.046000;  // C2H3
  XW += x[26] * 29.062000;  // C2H5
  XW += x[27] * 30.070000;  // C2H6
  XW += x[28] * 41.029000;  // HCCO
  XW += x[29] * 42.037000;  // CH2CO
  XW += x[30] * 43.045000;  // CH2CHO
  XW += x[31] * 41.073000;  // aC3H5
  XW += x[32] * 77.106000;  // C6H5
  XW += x[33] * 91.133000;  // C6H5CH2
  XW += x[34] * 108.096000; // C6H4O2
  XW += x[35] * 105.116000; // C6H5CO
  XW += x[36] * 106.124000; // C6H5CHO
  XW += x[37] * 28.014000;  // N2
  ROW = (*rho) / XW;

  // Compute conversion, see Eq 11
  for (id = 0; id < 38; ++id) {
    c[id] = x[id] * ROW;
  }

  return;
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTX(amrex::Real* c, amrex::Real* x)
{
  int id; // loop counter
  amrex::Real sumC = 0;

  // compute sum of c
  for (id = 0; id < 38; ++id) {
    sumC += c[id];
  }

  //  See Eq 13
  amrex::Real sumCinv = 1.0 / sumC;
  for (id = 0; id < 38; ++id) {
    x[id] = c[id] * sumCinv;
  }

  return;
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCTY(amrex::Real* c, amrex::Real* y)
{
  amrex::Real CW = 0; // See Eq 12 in CK Manual
  // compute denominator in eq 12 first
  CW += c[0] * 154.297000;  // POSF10325
  CW += c[1] * 28.054000;   // C2H4
  CW += c[2] * 16.043000;   // CH4
  CW += c[3] * 2.016000;    // H2
  CW += c[4] * 42.081000;   // C3H6
  CW += c[5] * 56.108000;   // C4H81
  CW += c[6] * 56.108000;   // iC4H8
  CW += c[7] * 78.114000;   // C6H6
  CW += c[8] * 92.141000;   // C6H5CH3
  CW += c[9] * 1.008000;    // H
  CW += c[10] * 15.999000;  // O
  CW += c[11] * 17.007000;  // OH
  CW += c[12] * 33.006000;  // HO2
  CW += c[13] * 18.015000;  // H2O
  CW += c[14] * 34.014000;  // H2O2
  CW += c[15] * 31.998000;  // O2
  CW += c[16] * 14.027000;  // CH2
  CW += c[17] * 14.027000;  // CH2*
  CW += c[18] * 15.035000;  // CH3
  CW += c[19] * 29.018000;  // HCO
  CW += c[20] * 30.026000;  // CH2O
  CW += c[21] * 31.034000;  // CH3O
  CW += c[22] * 28.010000;  // CO
  CW += c[23] * 44.009000;  // CO2
  CW += c[24] * 26.038000;  // C2H2
  CW += c[25] * 27.046000;  // C2H3
  CW += c[26] * 29.062000;  // C2H5
  CW += c[27] * 30.070000;  // C2H6
  CW += c[28] * 41.029000;  // HCCO
  CW += c[29] * 42.037000;  // CH2CO
  CW += c[30] * 43.045000;  // CH2CHO
  CW += c[31] * 41.073000;  // aC3H5
  CW += c[32] * 77.106000;  // C6H5
  CW += c[33] * 91.133000;  // C6H5CH2
  CW += c[34] * 108.096000; // C6H4O2
  CW += c[35] * 105.116000; // C6H5CO
  CW += c[36] * 106.124000; // C6H5CHO
  CW += c[37] * 28.014000;  // N2
  // Now compute conversion
  amrex::Real CWinv = 1.0 / CW;
  y[0] = c[0] * 154.297000 * CWinv;
  y[1] = c[1] * 28.054000 * CWinv;
  y[2] = c[2] * 16.043000 * CWinv;
  y[3] = c[3] * 2.016000 * CWinv;
  y[4] = c[4] * 42.081000 * CWinv;
  y[5] = c[5] * 56.108000 * CWinv;
  y[6] = c[6] * 56.108000 * CWinv;
  y[7] = c[7] * 78.114000 * CWinv;
  y[8] = c[8] * 92.141000 * CWinv;
  y[9] = c[9] * 1.008000 * CWinv;
  y[10] = c[10] * 15.999000 * CWinv;
  y[11] = c[11] * 17.007000 * CWinv;
  y[12] = c[12] * 33.006000 * CWinv;
  y[13] = c[13] * 18.015000 * CWinv;
  y[14] = c[14] * 34.014000 * CWinv;
  y[15] = c[15] * 31.998000 * CWinv;
  y[16] = c[16] * 14.027000 * CWinv;
  y[17] = c[17] * 14.027000 * CWinv;
  y[18] = c[18] * 15.035000 * CWinv;
  y[19] = c[19] * 29.018000 * CWinv;
  y[20] = c[20] * 30.026000 * CWinv;
  y[21] = c[21] * 31.034000 * CWinv;
  y[22] = c[22] * 28.010000 * CWinv;
  y[23] = c[23] * 44.009000 * CWinv;
  y[24] = c[24] * 26.038000 * CWinv;
  y[25] = c[25] * 27.046000 * CWinv;
  y[26] = c[26] * 29.062000 * CWinv;
  y[27] = c[27] * 30.070000 * CWinv;
  y[28] = c[28] * 41.029000 * CWinv;
  y[29] = c[29] * 42.037000 * CWinv;
  y[30] = c[30] * 43.045000 * CWinv;
  y[31] = c[31] * 41.073000 * CWinv;
  y[32] = c[32] * 77.106000 * CWinv;
  y[33] = c[33] * 91.133000 * CWinv;
  y[34] = c[34] * 108.096000 * CWinv;
  y[35] = c[35] * 105.116000 * CWinv;
  y[36] = c[36] * 106.124000 * CWinv;
  y[37] = c[37] * 28.014000 * CWinv;

  return;
}

// get specific heat at constant volume as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVML(amrex::Real* T, amrex::Real* cvml)
{
  int id;              // loop counter
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvml, tc);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    cvml[id] *= 8.31446261815324e+07;
  }
}

// get specific heat at constant pressure as a
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPML(amrex::Real* T, amrex::Real* cpml)
{
  int id;              // loop counter
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpml, tc);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    cpml[id] *= 8.31446261815324e+07;
  }
}

// get internal energy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUML(amrex::Real* T, amrex::Real* uml)
{
  int id;              // loop counter
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesInternalEnergy(uml, tc);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    uml[id] *= RT;
  }
}

// get enthalpy as a function
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHML(amrex::Real* T, amrex::Real* hml)
{
  int id;              // loop counter
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  speciesEnthalpy(hml, tc);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    hml[id] *= RT;
  }
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSML(amrex::Real* T, amrex::Real* sml)
{
  int id;              // loop counter
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sml, tc);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    sml[id] *= 8.31446261815324e+07;
  }
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCVMS(amrex::Real* T, amrex::Real* cvms)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cv_R(cvms, tc);
  // multiply by R/molecularweight
  cvms[0] *= 5.388609382005639e+05;  // POSF10325
  cvms[1] *= 2.963735160103101e+06;  // C2H4
  cvms[2] *= 5.182610869633635e+06;  // CH4
  cvms[3] *= 4.124237409798234e+07;  // H2
  cvms[4] *= 1.975823440068734e+06;  // C3H6
  cvms[5] *= 1.481867580051551e+06;  // C4H81
  cvms[6] *= 1.481867580051551e+06;  // iC4H8
  cvms[7] *= 1.064401082796072e+06;  // C6H6
  cvms[8] *= 9.023629674252765e+05;  // C6H5CH3
  cvms[9] *= 8.248474819596468e+07;  // H
  cvms[10] *= 5.196863940342046e+06; // O
  cvms[11] *= 4.888847308845322e+06; // OH
  cvms[12] *= 2.519076112874398e+06; // HO2
  cvms[13] *= 4.615299815794193e+06; // H2O
  cvms[14] *= 2.444423654422661e+06; // H2O2
  cvms[15] *= 2.598431970171023e+06; // O2
  cvms[16] *= 5.927470320206203e+06; // CH2
  cvms[17] *= 5.927470320206203e+06; // CH2*
  cvms[18] *= 5.530071578419182e+06; // CH3
  cvms[19] *= 2.865277627042952e+06; // HCO
  cvms[20] *= 2.769087663409458e+06; // CH2O
  cvms[21] *= 2.679146297013998e+06; // CH3O
  cvms[22] *= 2.968390795484913e+06; // CO
  cvms[23] *= 1.889264154639560e+06; // CO2
  cvms[24] *= 3.193203248388218e+06; // C2H2
  cvms[25] *= 3.074193085170909e+06; // C2H3
  cvms[26] *= 2.860939583701480e+06; // C2H5
  cvms[27] *= 2.765035789209591e+06; // C2H6
  cvms[28] *= 2.026484344769124e+06; // HCCO
  cvms[29] *= 1.977891528451897e+06; // CH2CO
  cvms[30] *= 1.931574542491170e+06; // CH2CHO
  cvms[31] *= 2.024313446340233e+06; // aC3H5
  cvms[32] *= 1.078315905137504e+06; // C6H5
  cvms[33] *= 9.123437852537764e+05; // C6H5CH2
  cvms[34] *= 7.691739396604166e+05; // C6H4O2
  cvms[35] *= 7.909797383988394e+05; // C6H5CO
  cvms[36] *= 7.834667575810599e+05; // C6H5CHO
  cvms[37] *= 2.967966951578939e+06; // N2
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCPMS(amrex::Real* T, amrex::Real* cpms)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  cp_R(cpms, tc);
  // multiply by R/molecularweight
  cpms[0] *= 5.388609382005639e+05;  // POSF10325
  cpms[1] *= 2.963735160103101e+06;  // C2H4
  cpms[2] *= 5.182610869633635e+06;  // CH4
  cpms[3] *= 4.124237409798234e+07;  // H2
  cpms[4] *= 1.975823440068734e+06;  // C3H6
  cpms[5] *= 1.481867580051551e+06;  // C4H81
  cpms[6] *= 1.481867580051551e+06;  // iC4H8
  cpms[7] *= 1.064401082796072e+06;  // C6H6
  cpms[8] *= 9.023629674252765e+05;  // C6H5CH3
  cpms[9] *= 8.248474819596468e+07;  // H
  cpms[10] *= 5.196863940342046e+06; // O
  cpms[11] *= 4.888847308845322e+06; // OH
  cpms[12] *= 2.519076112874398e+06; // HO2
  cpms[13] *= 4.615299815794193e+06; // H2O
  cpms[14] *= 2.444423654422661e+06; // H2O2
  cpms[15] *= 2.598431970171023e+06; // O2
  cpms[16] *= 5.927470320206203e+06; // CH2
  cpms[17] *= 5.927470320206203e+06; // CH2*
  cpms[18] *= 5.530071578419182e+06; // CH3
  cpms[19] *= 2.865277627042952e+06; // HCO
  cpms[20] *= 2.769087663409458e+06; // CH2O
  cpms[21] *= 2.679146297013998e+06; // CH3O
  cpms[22] *= 2.968390795484913e+06; // CO
  cpms[23] *= 1.889264154639560e+06; // CO2
  cpms[24] *= 3.193203248388218e+06; // C2H2
  cpms[25] *= 3.074193085170909e+06; // C2H3
  cpms[26] *= 2.860939583701480e+06; // C2H5
  cpms[27] *= 2.765035789209591e+06; // C2H6
  cpms[28] *= 2.026484344769124e+06; // HCCO
  cpms[29] *= 1.977891528451897e+06; // CH2CO
  cpms[30] *= 1.931574542491170e+06; // CH2CHO
  cpms[31] *= 2.024313446340233e+06; // aC3H5
  cpms[32] *= 1.078315905137504e+06; // C6H5
  cpms[33] *= 9.123437852537764e+05; // C6H5CH2
  cpms[34] *= 7.691739396604166e+05; // C6H4O2
  cpms[35] *= 7.909797383988394e+05; // C6H5CO
  cpms[36] *= 7.834667575810599e+05; // C6H5CHO
  cpms[37] *= 2.967966951578939e+06; // N2
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKUMS(amrex::Real* T, amrex::Real* ums)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[38];

  get_imw(imw);

  speciesInternalEnergy(ums, tc);

  for (int i = 0; i < 38; i++) {
    ums[i] *= RT * imw[i];
  }
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKHMS(amrex::Real* T, amrex::Real* hms)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    0, tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  amrex::Real RT = 8.31446261815324e+07 * tT;         // R*T
  amrex::Real imw[38];

  get_imw(imw);

  speciesEnthalpy(hms, tc);

  for (int i = 0; i < 38; i++) {
    hms[i] *= RT * imw[i];
  }
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKSMS(amrex::Real* T, amrex::Real* sms)
{
  amrex::Real tT = *T; // temporary temperature
  const amrex::Real tc[5] = {
    log(tT), tT, tT * tT, tT * tT * tT, tT * tT * tT * tT}; // temperature cache
  speciesEntropy(sms, tc);
  // multiply by R/molecularweight
  sms[0] *= 5.388609382005639e+05;  // POSF10325
  sms[1] *= 2.963735160103101e+06;  // C2H4
  sms[2] *= 5.182610869633635e+06;  // CH4
  sms[3] *= 4.124237409798234e+07;  // H2
  sms[4] *= 1.975823440068734e+06;  // C3H6
  sms[5] *= 1.481867580051551e+06;  // C4H81
  sms[6] *= 1.481867580051551e+06;  // iC4H8
  sms[7] *= 1.064401082796072e+06;  // C6H6
  sms[8] *= 9.023629674252765e+05;  // C6H5CH3
  sms[9] *= 8.248474819596468e+07;  // H
  sms[10] *= 5.196863940342046e+06; // O
  sms[11] *= 4.888847308845322e+06; // OH
  sms[12] *= 2.519076112874398e+06; // HO2
  sms[13] *= 4.615299815794193e+06; // H2O
  sms[14] *= 2.444423654422661e+06; // H2O2
  sms[15] *= 2.598431970171023e+06; // O2
  sms[16] *= 5.927470320206203e+06; // CH2
  sms[17] *= 5.927470320206203e+06; // CH2*
  sms[18] *= 5.530071578419182e+06; // CH3
  sms[19] *= 2.865277627042952e+06; // HCO
  sms[20] *= 2.769087663409458e+06; // CH2O
  sms[21] *= 2.679146297013998e+06; // CH3O
  sms[22] *= 2.968390795484913e+06; // CO
  sms[23] *= 1.889264154639560e+06; // CO2
  sms[24] *= 3.193203248388218e+06; // C2H2
  sms[25] *= 3.074193085170909e+06; // C2H3
  sms[26] *= 2.860939583701480e+06; // C2H5
  sms[27] *= 2.765035789209591e+06; // C2H6
  sms[28] *= 2.026484344769124e+06; // HCCO
  sms[29] *= 1.977891528451897e+06; // CH2CO
  sms[30] *= 1.931574542491170e+06; // CH2CHO
  sms[31] *= 2.024313446340233e+06; // aC3H5
  sms[32] *= 1.078315905137504e+06; // C6H5
  sms[33] *= 9.123437852537764e+05; // C6H5CH2
  sms[34] *= 7.691739396604166e+05; // C6H4O2
  sms[35] *= 7.909797383988394e+05; // C6H5CO
  sms[36] *= 7.834667575810599e+05; // C6H5CHO
  sms[37] *= 2.967966951578939e+06; // N2
}

// GPU version of productionRate: no more use of thermo namespace vectors
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
comp_qfqr(
  amrex::Real* qf,
  amrex::Real* qr,
  amrex::Real* sc,
  amrex::Real* sc_qss,
  const amrex::Real* tc,
  amrex::Real invT)
{

  // reaction 15: H + O2 (+M) <=> HO2 (+M)
  qf[0] = sc[9] * sc[15];
  qr[0] = sc[12];

  // reaction 17: 2 OH (+M) <=> H2O2 (+M)
  qf[1] = (sc[11] * sc[11]);
  qr[1] = sc[14];

  // reaction 40: CO + H2 (+M) <=> CH2O (+M)
  qf[2] = sc[3] * sc[22];
  qr[2] = sc[20];

  // reaction 41: H + HCO (+M) <=> CH2O (+M)
  qf[3] = sc[9] * sc[19];
  qr[3] = sc[20];

  // reaction 42: CH2 + H (+M) <=> CH3 (+M)
  qf[4] = sc[9] * sc[16];
  qr[4] = sc[18];

  // reaction 48: CH2 + CO (+M) <=> CH2CO (+M)
  qf[5] = sc[16] * sc[22];
  qr[5] = sc[29];

  // reaction 59: CH2O + H (+M) <=> CH3O (+M)
  qf[6] = sc[9] * sc[20];
  qr[6] = sc[21];

  // reaction 65: CH3 + H (+M) <=> CH4 (+M)
  qf[7] = sc[9] * sc[18];
  qr[7] = sc[2];

  // reaction 77: 2 CH3 (+M) <=> C2H6 (+M)
  qf[8] = (sc[18] * sc[18]);
  qr[8] = sc[27];

  // reaction 93: C2H3 (+M) <=> C2H2 + H (+M)
  qf[9] = sc[25];
  qr[9] = sc[9] * sc[24];

  // reaction 99: CH2CO + H (+M) <=> CH2CHO (+M)
  qf[10] = sc[9] * sc[29];
  qr[10] = sc[30];

  // reaction 105: C2H3 + H (+M) <=> C2H4 (+M)
  qf[11] = sc[9] * sc[25];
  qr[11] = sc[1];

  // reaction 113: C2H3 + CH3 (+M) <=> C3H6 (+M)
  qf[12] = sc[18] * sc[25];
  qr[12] = sc[4];

  // reaction 121: C2H4 + H (+M) <=> C2H5 (+M)
  qf[13] = sc[1] * sc[9];
  qr[13] = sc[26];

  // reaction 132: C2H5 + H (+M) <=> C2H6 (+M)
  qf[14] = sc[9] * sc[26];
  qr[14] = sc[27];

  // reaction 137: C2H3 + C2H5 (+M) <=> C4H81 (+M)
  qf[15] = sc[25] * sc[26];
  qr[15] = sc[5];

  // reaction 142: H + aC3H5 (+M) <=> C3H6 (+M)
  qf[16] = sc[9] * sc[31];
  qr[16] = sc[4];

  // reaction 146: CH3 + aC3H5 (+M) <=> C4H81 (+M)
  qf[17] = sc[18] * sc[31];
  qr[17] = sc[5];

  // reaction 164: C6H5CH2 + H (+M) <=> C6H5CH3 (+M)
  qf[18] = sc[9] * sc[33];
  qr[18] = sc[8];

  // reaction 178: C6H5 + H (+M) <=> C6H6 (+M)
  qf[19] = sc[9] * sc[32];
  qr[19] = sc[7];

  // reaction 28: CO + O (+M) <=> CO2 (+M)
  qf[20] = sc[10] * sc[22];
  qr[20] = sc[23];

  // reaction 10: 2 H + M <=> H2 + M
  qf[21] = (sc[9] * sc[9]);
  qr[21] = sc[3];

  // reaction 11: 2 H + H2O <=> H2 + H2O
  qf[22] = (sc[9] * sc[9]) * sc[13];
  qr[22] = sc[3] * sc[13];

  // reaction 12: H + OH + M <=> H2O + M
  qf[23] = sc[9] * sc[11];
  qr[23] = sc[13];

  // reaction 13: H + O + M <=> OH + M
  qf[24] = sc[9] * sc[10];
  qr[24] = sc[11];

  // reaction 14: 2 O + M <=> O2 + M
  qf[25] = (sc[10] * sc[10]);
  qr[25] = sc[15];

  // reaction 37: HCO + M <=> CO + H + M
  qf[26] = sc[19];
  qr[26] = sc[9] * sc[22];

  // reaction 38: HCO + H2O <=> CO + H + H2O
  qf[27] = sc[13] * sc[19];
  qr[27] = sc[9] * sc[13] * sc[22];

  // reaction 0: POSF10325 => 2.95 C2H4 + 0.39 C3H6 + 0.15 C6H5CH3 + 0.183333
  // C6H6 + CH3 + H + 0.195 iC4H8
  qf[28] = sc[0];
  qr[28] = 0.0;

  // reaction 1: H + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575 C6H5CH3
  // + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2 + 0.243083 iC4H8
  qf[29] = sc[0] * sc[9];
  qr[29] = 0.0;

  // reaction 2: CH3 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
  // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 1.05 CH4 + 0.4 H + 0.243083 iC4H8
  qf[30] = sc[0] * sc[18];
  qr[30] = 0.0;

  // reaction 3: OH + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575 C6H5CH3
  // + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2O + 0.243083 iC4H8
  qf[31] = sc[0] * sc[11];
  qr[31] = 0.0;

  // reaction 4: O2 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575 C6H5CH3
  // + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + HO2 + 0.243083 iC4H8
  qf[32] = sc[0] * sc[15];
  qr[32] = 0.0;

  // reaction 5: HO2 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
  // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2O2 + 0.243083 iC4H8
  qf[33] = sc[0] * sc[12];
  qr[33] = 0.0;

  // reaction 6: H + O2 <=> O + OH
  qf[34] = sc[9] * sc[15];
  qr[34] = sc[10] * sc[11];

  // reaction 7: H2 + O <=> H + OH
  qf[35] = sc[3] * sc[10];
  qr[35] = sc[9] * sc[11];

  // reaction 8: H2 + OH <=> H + H2O
  qf[36] = sc[3] * sc[11];
  qr[36] = sc[9] * sc[13];

  // reaction 9: 2 OH <=> H2O + O
  qf[37] = (sc[11] * sc[11]);
  qr[37] = sc[10] * sc[13];

  // reaction 16: H2 + O2 <=> H + HO2
  qf[38] = sc[3] * sc[15];
  qr[38] = sc[9] * sc[12];

  // reaction 18: H + HO2 <=> 2 OH
  qf[39] = sc[9] * sc[12];
  qr[39] = (sc[11] * sc[11]);

  // reaction 19: HO2 + O <=> O2 + OH
  qf[40] = sc[10] * sc[12];
  qr[40] = sc[11] * sc[15];

  // reaction 20: 2 HO2 <=> H2O2 + O2
  qf[41] = (sc[12] * sc[12]);
  qr[41] = sc[14] * sc[15];

  // reaction 21: 2 HO2 <=> H2O2 + O2
  qf[42] = (sc[12] * sc[12]);
  qr[42] = sc[14] * sc[15];

  // reaction 22: HO2 + OH <=> H2O + O2
  qf[43] = sc[11] * sc[12];
  qr[43] = sc[13] * sc[15];

  // reaction 23: HO2 + OH <=> H2O + O2
  qf[44] = sc[11] * sc[12];
  qr[44] = sc[13] * sc[15];

  // reaction 24: HO2 + OH <=> H2O + O2
  qf[45] = sc[11] * sc[12];
  qr[45] = sc[13] * sc[15];

  // reaction 25: H + H2O2 <=> H2 + HO2
  qf[46] = sc[9] * sc[14];
  qr[46] = sc[3] * sc[12];

  // reaction 26: H + H2O2 <=> H2O + OH
  qf[47] = sc[9] * sc[14];
  qr[47] = sc[11] * sc[13];

  // reaction 27: H2O2 + OH <=> H2O + HO2
  qf[48] = sc[11] * sc[14];
  qr[48] = sc[12] * sc[13];

  // reaction 29: CO + OH <=> CO2 + H
  qf[49] = sc[11] * sc[22];
  qr[49] = sc[9] * sc[23];

  // reaction 30: CO + OH <=> CO2 + H
  qf[50] = sc[11] * sc[22];
  qr[50] = sc[9] * sc[23];

  // reaction 31: CO + O2 <=> CO2 + O
  qf[51] = sc[15] * sc[22];
  qr[51] = sc[10] * sc[23];

  // reaction 32: CO + HO2 <=> CO2 + OH
  qf[52] = sc[12] * sc[22];
  qr[52] = sc[11] * sc[23];

  // reaction 33: H + HCO <=> CO + H2
  qf[53] = sc[9] * sc[19];
  qr[53] = sc[3] * sc[22];

  // reaction 34: HCO + O <=> CO + OH
  qf[54] = sc[10] * sc[19];
  qr[54] = sc[11] * sc[22];

  // reaction 35: HCO + O <=> CO2 + H
  qf[55] = sc[10] * sc[19];
  qr[55] = sc[9] * sc[23];

  // reaction 36: HCO + OH <=> CO + H2O
  qf[56] = sc[11] * sc[19];
  qr[56] = sc[13] * sc[22];

  // reaction 39: HCO + O2 <=> CO + HO2
  qf[57] = sc[15] * sc[19];
  qr[57] = sc[12] * sc[22];

  // reaction 43: CH2 + O <=> H + HCO
  qf[58] = sc[10] * sc[16];
  qr[58] = sc[9] * sc[19];

  // reaction 44: CH2 + OH <=> CH2O + H
  qf[59] = sc[11] * sc[16];
  qr[59] = sc[9] * sc[20];

  // reaction 45: CH2 + H2 <=> CH3 + H
  qf[60] = sc[3] * sc[16];
  qr[60] = sc[9] * sc[18];

  // reaction 46: CH2 + O2 <=> HCO + OH
  qf[61] = sc[15] * sc[16];
  qr[61] = sc[11] * sc[19];

  // reaction 47: CH2 + O2 <=> CO2 + 2 H
  qf[62] = sc[15] * sc[16];
  qr[62] = (sc[9] * sc[9]) * sc[23];

  // reaction 49: CH2* + N2 <=> CH2 + N2
  qf[63] = sc[17] * sc[37];
  qr[63] = sc[16] * sc[37];

  // reaction 50: CH2* + O <=> CO + H2
  qf[64] = sc[10] * sc[17];
  qr[64] = sc[3] * sc[22];

  // reaction 51: CH2* + OH <=> CH2O + H
  qf[65] = sc[11] * sc[17];
  qr[65] = sc[9] * sc[20];

  // reaction 52: CH2* + H2 <=> CH3 + H
  qf[66] = sc[3] * sc[17];
  qr[66] = sc[9] * sc[18];

  // reaction 53: CH2* + O2 <=> CO + H + OH
  qf[67] = sc[15] * sc[17];
  qr[67] = sc[9] * sc[11] * sc[22];

  // reaction 54: CH2* + O2 <=> CO + H2O
  qf[68] = sc[15] * sc[17];
  qr[68] = sc[13] * sc[22];

  // reaction 55: CH2* + H2O <=> CH2 + H2O
  qf[69] = sc[13] * sc[17];
  qr[69] = sc[13] * sc[16];

  // reaction 56: CH2* + CO <=> CH2 + CO
  qf[70] = sc[17] * sc[22];
  qr[70] = sc[16] * sc[22];

  // reaction 57: CH2* + CO2 <=> CH2 + CO2
  qf[71] = sc[17] * sc[23];
  qr[71] = sc[16] * sc[23];

  // reaction 58: CH2* + CO2 <=> CH2O + CO
  qf[72] = sc[17] * sc[23];
  qr[72] = sc[20] * sc[22];

  // reaction 60: CH2O + H <=> H2 + HCO
  qf[73] = sc[9] * sc[20];
  qr[73] = sc[3] * sc[19];

  // reaction 61: CH2O + O <=> HCO + OH
  qf[74] = sc[10] * sc[20];
  qr[74] = sc[11] * sc[19];

  // reaction 62: CH2O + OH <=> H2O + HCO
  qf[75] = sc[11] * sc[20];
  qr[75] = sc[13] * sc[19];

  // reaction 63: CH2O + O2 <=> HCO + HO2
  qf[76] = sc[15] * sc[20];
  qr[76] = sc[12] * sc[19];

  // reaction 64: CH2O + HO2 <=> H2O2 + HCO
  qf[77] = sc[12] * sc[20];
  qr[77] = sc[14] * sc[19];

  // reaction 66: CH3 + O <=> CH2O + H
  qf[78] = sc[10] * sc[18];
  qr[78] = sc[9] * sc[20];

  // reaction 67: CH3 + OH <=> CH2 + H2O
  qf[79] = sc[11] * sc[18];
  qr[79] = sc[13] * sc[16];

  // reaction 68: CH3 + OH <=> CH2* + H2O
  qf[80] = sc[11] * sc[18];
  qr[80] = sc[13] * sc[17];

  // reaction 69: CH3 + O2 <=> CH3O + O
  qf[81] = sc[15] * sc[18];
  qr[81] = sc[10] * sc[21];

  // reaction 70: CH3 + O2 <=> CH2O + OH
  qf[82] = sc[15] * sc[18];
  qr[82] = sc[11] * sc[20];

  // reaction 71: CH3 + HO2 <=> CH4 + O2
  qf[83] = sc[12] * sc[18];
  qr[83] = sc[2] * sc[15];

  // reaction 72: CH3 + HO2 <=> CH3O + OH
  qf[84] = sc[12] * sc[18];
  qr[84] = sc[11] * sc[21];

  // reaction 73: CH3 + H2O2 <=> CH4 + HO2
  qf[85] = sc[14] * sc[18];
  qr[85] = sc[2] * sc[12];

  // reaction 74: CH3 + HCO <=> CH4 + CO
  qf[86] = sc[18] * sc[19];
  qr[86] = sc[2] * sc[22];

  // reaction 75: CH2O + CH3 <=> CH4 + HCO
  qf[87] = sc[18] * sc[20];
  qr[87] = sc[2] * sc[19];

  // reaction 76: CH2 + CH3 <=> C2H4 + H
  qf[88] = sc[16] * sc[18];
  qr[88] = sc[1] * sc[9];

  // reaction 78: 2 CH3 <=> C2H5 + H
  qf[89] = (sc[18] * sc[18]);
  qr[89] = sc[9] * sc[26];

  // reaction 79: CH3 + HCCO <=> C2H4 + CO
  qf[90] = sc[18] * sc[28];
  qr[90] = sc[1] * sc[22];

  // reaction 80: CH3O + H <=> CH2O + H2
  qf[91] = sc[9] * sc[21];
  qr[91] = sc[3] * sc[20];

  // reaction 81: CH3O + H <=> CH3 + OH
  qf[92] = sc[9] * sc[21];
  qr[92] = sc[11] * sc[18];

  // reaction 82: CH3O + H <=> CH2* + H2O
  qf[93] = sc[9] * sc[21];
  qr[93] = sc[13] * sc[17];

  // reaction 83: CH3O + OH <=> CH2O + H2O
  qf[94] = sc[11] * sc[21];
  qr[94] = sc[13] * sc[20];

  // reaction 84: CH3O + O2 <=> CH2O + HO2
  qf[95] = sc[15] * sc[21];
  qr[95] = sc[12] * sc[20];

  // reaction 85: CH4 + H <=> CH3 + H2
  qf[96] = sc[2] * sc[9];
  qr[96] = sc[3] * sc[18];

  // reaction 86: CH4 + O <=> CH3 + OH
  qf[97] = sc[2] * sc[10];
  qr[97] = sc[11] * sc[18];

  // reaction 87: CH4 + OH <=> CH3 + H2O
  qf[98] = sc[2] * sc[11];
  qr[98] = sc[13] * sc[18];

  // reaction 88: CH2* + CH4 <=> 2 CH3
  qf[99] = sc[2] * sc[17];
  qr[99] = (sc[18] * sc[18]);

  // reaction 89: H + HCCO <=> CH2* + CO
  qf[100] = sc[9] * sc[28];
  qr[100] = sc[17] * sc[22];

  // reaction 90: HCCO + O <=> 2 CO + H
  qf[101] = sc[10] * sc[28];
  qr[101] = sc[9] * (sc[22] * sc[22]);

  // reaction 91: HCCO + O2 <=> 2 CO + OH
  qf[102] = sc[15] * sc[28];
  qr[102] = sc[11] * (sc[22] * sc[22]);

  // reaction 92: CH2 + HCCO <=> C2H3 + CO
  qf[103] = sc[16] * sc[28];
  qr[103] = sc[22] * sc[25];

  // reaction 94: C2H2 + O <=> CH2 + CO
  qf[104] = sc[10] * sc[24];
  qr[104] = sc[16] * sc[22];

  // reaction 95: C2H2 + O <=> H + HCCO
  qf[105] = sc[10] * sc[24];
  qr[105] = sc[9] * sc[28];

  // reaction 96: C2H2 + OH <=> CH2CO + H
  qf[106] = sc[11] * sc[24];
  qr[106] = sc[9] * sc[29];

  // reaction 97: C2H2 + HCO <=> C2H3 + CO
  qf[107] = sc[19] * sc[24];
  qr[107] = sc[22] * sc[25];

  // reaction 98: C2H2 + CH3 <=> aC3H5
  qf[108] = sc[18] * sc[24];
  qr[108] = sc[31];

  // reaction 100: CH2CO + H <=> H2 + HCCO
  qf[109] = sc[9] * sc[29];
  qr[109] = sc[3] * sc[28];

  // reaction 101: CH2CO + H <=> CH3 + CO
  qf[110] = sc[9] * sc[29];
  qr[110] = sc[18] * sc[22];

  // reaction 102: CH2CO + O <=> HCCO + OH
  qf[111] = sc[10] * sc[29];
  qr[111] = sc[11] * sc[28];

  // reaction 103: CH2CO + O <=> CH2 + CO2
  qf[112] = sc[10] * sc[29];
  qr[112] = sc[16] * sc[23];

  // reaction 104: CH2CO + OH <=> H2O + HCCO
  qf[113] = sc[11] * sc[29];
  qr[113] = sc[13] * sc[28];

  // reaction 106: C2H3 + H <=> C2H2 + H2
  qf[114] = sc[9] * sc[25];
  qr[114] = sc[3] * sc[24];

  // reaction 107: C2H3 + O <=> CH2CO + H
  qf[115] = sc[10] * sc[25];
  qr[115] = sc[9] * sc[29];

  // reaction 108: C2H3 + O <=> CH3 + CO
  qf[116] = sc[10] * sc[25];
  qr[116] = sc[18] * sc[22];

  // reaction 109: C2H3 + OH <=> C2H2 + H2O
  qf[117] = sc[11] * sc[25];
  qr[117] = sc[13] * sc[24];

  // reaction 110: C2H3 + O2 <=> C2H2 + HO2
  qf[118] = sc[15] * sc[25];
  qr[118] = sc[12] * sc[24];

  // reaction 111: C2H3 + O2 <=> CH2CHO + O
  qf[119] = sc[15] * sc[25];
  qr[119] = sc[10] * sc[30];

  // reaction 112: C2H3 + O2 <=> CH2O + HCO
  qf[120] = sc[15] * sc[25];
  qr[120] = sc[19] * sc[20];

  // reaction 114: C2H3 + CH3 <=> H + aC3H5
  qf[121] = sc[18] * sc[25];
  qr[121] = sc[9] * sc[31];

  // reaction 115: CH2CHO <=> CH3 + CO
  qf[122] = sc[30];
  qr[122] = sc[18] * sc[22];

  // reaction 116: CH2CHO + H <=> CH3 + HCO
  qf[123] = sc[9] * sc[30];
  qr[123] = sc[18] * sc[19];

  // reaction 117: CH2CHO + H <=> CH2CO + H2
  qf[124] = sc[9] * sc[30];
  qr[124] = sc[3] * sc[29];

  // reaction 118: CH2CHO + O <=> CH2CO + OH
  qf[125] = sc[10] * sc[30];
  qr[125] = sc[11] * sc[29];

  // reaction 119: CH2CHO + OH <=> CH2CO + H2O
  qf[126] = sc[11] * sc[30];
  qr[126] = sc[13] * sc[29];

  // reaction 120: CH2CHO + O2 <=> CH2CO + HO2
  qf[127] = sc[15] * sc[30];
  qr[127] = sc[12] * sc[29];

  // reaction 122: C2H4 + H <=> C2H3 + H2
  qf[128] = sc[1] * sc[9];
  qr[128] = sc[3] * sc[25];

  // reaction 123: C2H4 + O <=> C2H3 + OH
  qf[129] = sc[1] * sc[10];
  qr[129] = sc[11] * sc[25];

  // reaction 124: C2H4 + O <=> CH3 + HCO
  qf[130] = sc[1] * sc[10];
  qr[130] = sc[18] * sc[19];

  // reaction 125: C2H4 + O <=> CH2 + CH2O
  qf[131] = sc[1] * sc[10];
  qr[131] = sc[16] * sc[20];

  // reaction 126: C2H4 + OH <=> C2H3 + H2O
  qf[132] = sc[1] * sc[11];
  qr[132] = sc[13] * sc[25];

  // reaction 127: C2H4 + HCO <=> C2H5 + CO
  qf[133] = sc[1] * sc[19];
  qr[133] = sc[22] * sc[26];

  // reaction 128: C2H4 + CH2 <=> H + aC3H5
  qf[134] = sc[1] * sc[16];
  qr[134] = sc[9] * sc[31];

  // reaction 129: C2H4 + CH2* <=> H + aC3H5
  qf[135] = sc[1] * sc[17];
  qr[135] = sc[9] * sc[31];

  // reaction 130: C2H4 + CH3 <=> C2H3 + CH4
  qf[136] = sc[1] * sc[18];
  qr[136] = sc[2] * sc[25];

  // reaction 131: C2H4 + O2 <=> C2H3 + HO2
  qf[137] = sc[1] * sc[15];
  qr[137] = sc[12] * sc[25];

  // reaction 133: C2H5 + H <=> C2H4 + H2
  qf[138] = sc[9] * sc[26];
  qr[138] = sc[1] * sc[3];

  // reaction 134: C2H5 + O <=> CH2O + CH3
  qf[139] = sc[10] * sc[26];
  qr[139] = sc[18] * sc[20];

  // reaction 135: C2H5 + O2 <=> C2H4 + HO2
  qf[140] = sc[15] * sc[26];
  qr[140] = sc[1] * sc[12];

  // reaction 136: C2H5 + HO2 <=> CH2O + CH3 + OH
  qf[141] = sc[12] * sc[26];
  qr[141] = sc[11] * sc[18] * sc[20];

  // reaction 138: C2H6 + H <=> C2H5 + H2
  qf[142] = sc[9] * sc[27];
  qr[142] = sc[3] * sc[26];

  // reaction 139: C2H6 + O <=> C2H5 + OH
  qf[143] = sc[10] * sc[27];
  qr[143] = sc[11] * sc[26];

  // reaction 140: C2H6 + OH <=> C2H5 + H2O
  qf[144] = sc[11] * sc[27];
  qr[144] = sc[13] * sc[26];

  // reaction 141: C2H6 + CH3 <=> C2H5 + CH4
  qf[145] = sc[18] * sc[27];
  qr[145] = sc[2] * sc[26];

  // reaction 143: HO2 + aC3H5 <=> C3H6 + O2
  qf[146] = sc[12] * sc[31];
  qr[146] = sc[4] * sc[15];

  // reaction 144: HO2 + aC3H5 <=> C2H3 + CH2O + OH
  qf[147] = sc[12] * sc[31];
  qr[147] = sc[11] * sc[20] * sc[25];

  // reaction 145: HCO + aC3H5 <=> C3H6 + CO
  qf[148] = sc[19] * sc[31];
  qr[148] = sc[4] * sc[22];

  // reaction 147: C3H6 + H <=> C2H4 + CH3
  qf[149] = sc[4] * sc[9];
  qr[149] = sc[1] * sc[18];

  // reaction 148: C3H6 + H <=> H2 + aC3H5
  qf[150] = sc[4] * sc[9];
  qr[150] = sc[3] * sc[31];

  // reaction 149: C3H6 + O <=> CH2CO + CH3 + H
  qf[151] = sc[4] * sc[10];
  qr[151] = sc[9] * sc[18] * sc[29];

  // reaction 150: C3H6 + O <=> C2H5 + HCO
  qf[152] = sc[4] * sc[10];
  qr[152] = sc[19] * sc[26];

  // reaction 151: C3H6 + O <=> OH + aC3H5
  qf[153] = sc[4] * sc[10];
  qr[153] = sc[11] * sc[31];

  // reaction 152: C3H6 + OH <=> H2O + aC3H5
  qf[154] = sc[4] * sc[11];
  qr[154] = sc[13] * sc[31];

  // reaction 153: C3H6 + CH3 <=> CH4 + aC3H5
  qf[155] = sc[4] * sc[18];
  qr[155] = sc[2] * sc[31];

  // reaction 154: C4H81 + H <=> C2H4 + C2H5
  qf[156] = sc[5] * sc[9];
  qr[156] = sc[1] * sc[26];

  // reaction 155: C4H81 + H <=> C3H6 + CH3
  qf[157] = sc[5] * sc[9];
  qr[157] = sc[4] * sc[18];

  // reaction 156: H + iC4H8 <=> C3H6 + CH3
  qf[158] = sc[6] * sc[9];
  qr[158] = sc[4] * sc[18];

  // reaction 157: O + iC4H8 <=> CH2CO + 2 CH3
  qf[159] = sc[6] * sc[10];
  qr[159] = (sc[18] * sc[18]) * sc[29];

  // reaction 158: C6H5 + CH3 <=> C6H5CH3
  qf[160] = sc[18] * sc[32];
  qr[160] = sc[8];

  // reaction 159: C6H5CH3 + O2 <=> C6H5CH2 + HO2
  qf[161] = sc[8] * sc[15];
  qr[161] = sc[12] * sc[33];

  // reaction 160: C6H5CH3 + OH <=> C6H5CH2 + H2O
  qf[162] = sc[8] * sc[11];
  qr[162] = sc[13] * sc[33];

  // reaction 161: C6H5CH3 + H <=> C6H5CH2 + H2
  qf[163] = sc[8] * sc[9];
  qr[163] = sc[3] * sc[33];

  // reaction 162: C6H5CH3 + H <=> C6H6 + CH3
  qf[164] = sc[8] * sc[9];
  qr[164] = sc[7] * sc[18];

  // reaction 163: C6H5CH3 + CH3 <=> C6H5CH2 + CH4
  qf[165] = sc[8] * sc[18];
  qr[165] = sc[2] * sc[33];

  // reaction 165: C6H5CH2 + H <=> C6H5 + CH3
  qf[166] = sc[9] * sc[33];
  qr[166] = sc[18] * sc[32];

  // reaction 166: C6H5CH2 + O <=> C6H5CHO + H
  qf[167] = sc[10] * sc[33];
  qr[167] = sc[9] * sc[36];

  // reaction 167: C6H5CH2 + HO2 <=> C6H5CHO + H + OH
  qf[168] = sc[12] * sc[33];
  qr[168] = sc[9] * sc[11] * sc[36];

  // reaction 168: C6H5 + HCO <=> C6H5CHO
  qf[169] = sc[19] * sc[32];
  qr[169] = sc[36];

  // reaction 169: C6H5CHO <=> C6H5CO + H
  qf[170] = sc[36];
  qr[170] = sc[9] * sc[35];

  // reaction 170: C6H5CHO + O2 <=> C6H5CO + HO2
  qf[171] = sc[15] * sc[36];
  qr[171] = sc[12] * sc[35];

  // reaction 171: C6H5CHO + OH <=> C6H5CO + H2O
  qf[172] = sc[11] * sc[36];
  qr[172] = sc[13] * sc[35];

  // reaction 172: C6H5CHO + H <=> C6H5CO + H2
  qf[173] = sc[9] * sc[36];
  qr[173] = sc[3] * sc[35];

  // reaction 173: C6H5CHO + H <=> C6H6 + HCO
  qf[174] = sc[9] * sc[36];
  qr[174] = sc[7] * sc[19];

  // reaction 174: C6H5CHO + O <=> C6H5CO + OH
  qf[175] = sc[10] * sc[36];
  qr[175] = sc[11] * sc[35];

  // reaction 175: C6H5CHO + CH3 <=> C6H5CO + CH4
  qf[176] = sc[18] * sc[36];
  qr[176] = sc[2] * sc[35];

  // reaction 176: C6H5CO + H2O2 <=> C6H5CHO + HO2
  qf[177] = sc[14] * sc[35];
  qr[177] = sc[12] * sc[36];

  // reaction 177: C6H5CO <=> C6H5 + CO
  qf[178] = sc[35];
  qr[178] = sc[22] * sc[32];

  // reaction 179: C6H6 + OH <=> C6H5 + H2O
  qf[179] = sc[7] * sc[11];
  qr[179] = sc[13] * sc[32];

  // reaction 180: C6H5 + H2 <=> C6H6 + H
  qf[180] = sc[3] * sc[32];
  qr[180] = sc[7] * sc[9];

  // reaction 181: C6H5 + O2 <=> C6H4O2 + H
  qf[181] = sc[15] * sc[32];
  qr[181] = sc[9] * sc[34];

  // reaction 182: C6H5 + HO2 <=> C6H6 + O2
  qf[182] = sc[12] * sc[32];
  qr[182] = sc[7] * sc[15];

  // reaction 183: C6H5 + CH4 <=> C6H6 + CH3
  qf[183] = sc[2] * sc[32];
  qr[183] = sc[7] * sc[18];

  // reaction 184: C6H4O2 + O <=> C2H2 + CH2CO + 2 CO
  qf[184] = sc[10] * sc[34];
  qr[184] = (sc[22] * sc[22]) * sc[24] * sc[29];

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 38; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[38];
  gibbs(g_RT, tc);

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 * invT;
  amrex::Real refCinv = 1 / refC;

  // Evaluate the kfs
  amrex::Real k_f, k_r, Corr;
  amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

  // reaction 0:  POSF10325 => 2.95 C2H4 + 0.39 C3H6 + 0.15 C6H5CH3 + 0.183333
  // C6H6 + CH3 + H + 0.195 iC4H8
  k_f = 5.86e+25 * exp((-2.66) * tc[0] - (44387.2324406369) * invT);
  qf[28] *= k_f;
  qr[28] *=
    k_f *
    exp(
      -(g_RT[0] - 2.950000 * g_RT[1] - 0.390000 * g_RT[4] - 0.195000 * g_RT[6] -
        0.183333 * g_RT[7] - 0.150000 * g_RT[8] - g_RT[9] - g_RT[18])) *
    (pow(refCinv, 4.868333));
  // reaction 1:  H + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575 C6H5CH3
  // + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2 + 0.243083 iC4H8
  k_f = 1.53e-07 * exp((4.76) * tc[0] - (651.615260550532) * invT);
  qf[29] *= k_f;
  qr[29] *= k_f *
            exp(
              -(g_RT[0] - 2.830833 * g_RT[1] - 0.050000 * g_RT[2] - g_RT[3] -
                0.486167 * g_RT[4] - 0.243083 * g_RT[6] - 0.192500 * g_RT[7] -
                0.157500 * g_RT[8] + g_RT[9] - 0.400000 * g_RT[9] -
                0.600000 * g_RT[18])) *
            (pow(refCinv, 3.960083));
  // reaction 2:  CH3 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
  // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 1.05 CH4 + 0.4 H + 0.243083 iC4H8
  k_f = 9.52e-13 * exp((5.95) * tc[0] - (2389.47401590713) * invT);
  qf[30] *= k_f;
  qr[30] *=
    k_f *
    exp(
      -(g_RT[0] - 2.830833 * g_RT[1] - 1.050000 * g_RT[2] - 0.486167 * g_RT[4] -
        0.243083 * g_RT[6] - 0.192500 * g_RT[7] - 0.157500 * g_RT[8] -
        0.400000 * g_RT[9] + g_RT[18] - 0.600000 * g_RT[18])) *
    (pow(refCinv, 3.960083));
  // reaction 3:  OH + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
  // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2O + 0.243083 iC4H8
  k_f = 35500 * exp((1.02) * tc[0] - (107.285793149566) * invT);
  qf[31] *= k_f;
  qr[31] *=
    k_f *
    exp(
      -(g_RT[0] - 2.830833 * g_RT[1] - 0.050000 * g_RT[2] - 0.486167 * g_RT[4] -
        0.243083 * g_RT[6] - 0.192500 * g_RT[7] - 0.157500 * g_RT[8] -
        0.400000 * g_RT[9] + g_RT[11] - g_RT[13] - 0.600000 * g_RT[18])) *
    (pow(refCinv, 3.960083));
  // reaction 4:  O2 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
  // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + HO2 + 0.243083 iC4H8
  k_f = 255000000 * exp((0.06) * tc[0] - (23919.1964890294) * invT);
  qf[32] *= k_f;
  qr[32] *=
    k_f *
    exp(
      -(g_RT[0] - 2.830833 * g_RT[1] - 0.050000 * g_RT[2] - 0.486167 * g_RT[4] -
        0.243083 * g_RT[6] - 0.192500 * g_RT[7] - 0.157500 * g_RT[8] -
        0.400000 * g_RT[9] - g_RT[12] + g_RT[15] - 0.600000 * g_RT[18])) *
    (pow(refCinv, 3.960083));
  // reaction 5:  HO2 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
  // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2O2 + 0.243083 iC4H8
  k_f = 0.0233 * exp((2.94) * tc[0] - (7452.6388205679) * invT);
  qf[33] *= k_f;
  qr[33] *=
    k_f *
    exp(
      -(g_RT[0] - 2.830833 * g_RT[1] - 0.050000 * g_RT[2] - 0.486167 * g_RT[4] -
        0.243083 * g_RT[6] - 0.192500 * g_RT[7] - 0.157500 * g_RT[8] -
        0.400000 * g_RT[9] + g_RT[12] - g_RT[14] - 0.600000 * g_RT[18])) *
    (pow(refCinv, 3.960083));
  // reaction 6:  H + O2 <=> O + OH
  k_f = 26440000000 * exp((-0.6707) * tc[0] - (8575.31520197823) * invT);
  qf[34] *= k_f;
  qr[34] *= k_f * exp(-(g_RT[9] - g_RT[10] - g_RT[11] + g_RT[15]));
  // reaction 7:  H2 + O <=> H + OH
  k_f = 0.04589 * exp((2.7) * tc[0] - (3150.13632793755) * invT);
  qf[35] *= k_f;
  qr[35] *= k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[10] - g_RT[11]));
  // reaction 8:  H2 + OH <=> H + H2O
  k_f = 173.4 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
  qf[36] *= k_f;
  qr[36] *= k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[11] - g_RT[13]));
  // reaction 9:  2 OH <=> H2O + O
  k_f = 0.03973 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
  qf[37] *= k_f;
  qr[37] *= k_f * exp(-(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[13]));
  // reaction 10:  2 H + M <=> H2 + M
  k_f = 1780000 * exp((-1) * tc[0]);
  Corr = mixture + (-1) * sc[3] + (-1) * sc[13] + (-1) * sc[23];
  qf[21] *= Corr * k_f;
  qr[21] *= Corr * k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[9])) * (refC);
  // reaction 11:  2 H + H2O <=> H2 + H2O
  k_f = 56240000 * exp((-1.25) * tc[0]);
  qf[22] *= k_f;
  qr[22] *= k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[9])) * (refC);
  // reaction 12:  H + OH + M <=> H2O + M
  k_f = 44000000000 * exp((-2) * tc[0]);
  Corr = mixture + sc[3] + (5.3) * sc[13] + (0.75) * sc[22] + (2.6) * sc[23];
  qf[23] *= Corr * k_f;
  qr[23] *= Corr * k_f * exp(-(g_RT[9] + g_RT[11] - g_RT[13])) * (refC);
  // reaction 13:  H + O + M <=> OH + M
  k_f = 9428000 * exp((-1) * tc[0]);
  Corr = mixture + sc[3] + (11) * sc[13] + (0.75) * sc[22] + (2.6) * sc[23];
  qf[24] *= Corr * k_f;
  qr[24] *= Corr * k_f * exp(-(g_RT[9] + g_RT[10] - g_RT[11])) * (refC);
  // reaction 14:  2 O + M <=> O2 + M
  k_f = 120000 * exp((-1) * tc[0]);
  Corr = mixture + (1.4) * sc[3] + (14.4) * sc[13] + (0.75) * sc[22] +
         (2.6) * sc[23];
  qf[25] *= Corr * k_f;
  qr[25] *= Corr * k_f * exp(-(2.000000 * g_RT[10] - g_RT[15])) * (refC);
  // reaction 15:  H + O2 (+M) <=> HO2 (+M)
  k_f = 5116000 * exp((0.44) * tc[0]);
  Corr = mixture + (10.89) * sc[13] + (-0.15) * sc[15] +
         (0.0900000000000001) * sc[22] + (1.18) * sc[23];
  redP = Corr / k_f * 1e-12 * 6.328e+19 *
         exp(-1.4 * tc[0] - 0.50321666580472 * (0) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent =
    log10((0.5) * exp(-tc[1] * 1e+30) + 0.5 * exp(-tc[1] * 1e-30) + 0.0);
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[0] *= Corr * k_f;
  qr[0] *= Corr * k_f * exp(-(g_RT[9] - g_RT[12] + g_RT[15])) * (refC);
  // reaction 16:  H2 + O2 <=> H + HO2
  k_f = 0.5916 * exp((2.433) * tc[0] - (26923.0980538841) * invT);
  qf[38] *= k_f;
  qr[38] *= k_f * exp(-(g_RT[3] - g_RT[9] - g_RT[12] + g_RT[15]));
  // reaction 17:  2 OH (+M) <=> H2O2 (+M)
  k_f = 111000000 * exp((-0.37) * tc[0]);
  Corr = mixture + sc[3] + (5) * sc[13] + (0.75) * sc[22] + (2.6) * sc[23];
  redP = Corr / k_f * 1e-12 * 2.01e+17 *
         exp(-0.584 * tc[0] - 0.50321666580472 * (-2293) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2654) * exp(-tc[1] * 0.0106382978723404) +
    0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[1] *= Corr * k_f;
  qr[1] *= Corr * k_f * exp(-(2.000000 * g_RT[11] - g_RT[14])) * (refC);
  // reaction 18:  H + HO2 <=> 2 OH
  k_f = 74850000 * exp(-(148.448916412392) * invT);
  qf[39] *= k_f;
  qr[39] *= k_f * exp(-(g_RT[9] - 2.000000 * g_RT[11] + g_RT[12]));
  // reaction 19:  HO2 + O <=> O2 + OH
  k_f = 40000000;
  qf[40] *= k_f;
  qr[40] *= k_f * exp(-(g_RT[10] - g_RT[11] + g_RT[12] - g_RT[15]));
  // reaction 20:  2 HO2 <=> H2O2 + O2
  k_f = 130000 * exp(-(-820.243165261693) * invT);
  qf[41] *= k_f;
  qr[41] *= k_f * exp(-(2.000000 * g_RT[12] - g_RT[14] - g_RT[15]));
  // reaction 21:  2 HO2 <=> H2O2 + O2
  k_f = 365800000 * exp(-(6038.59998965664) * invT);
  qf[42] *= k_f;
  qr[42] *= k_f * exp(-(2.000000 * g_RT[12] - g_RT[14] - g_RT[15]));
  // reaction 22:  HO2 + OH <=> H2O + O2
  k_f = 1410000000000 * exp((-1.76) * tc[0] - (30.1929999482832) * invT);
  qf[43] *= k_f;
  qr[43] *= k_f * exp(-(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15]));
  // reaction 23:  HO2 + OH <=> H2O + O2
  k_f = 5.37e+64 * exp((-16.72) * tc[0] - (16555.8283049753) * invT);
  qf[44] *= k_f;
  qr[44] *= k_f * exp(-(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15]));
  // reaction 24:  HO2 + OH <=> H2O + O2
  k_f = 2510000 * exp((2) * tc[0] - (20128.6666321888) * invT);
  qf[45] *= k_f;
  qr[45] *= k_f * exp(-(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15]));
  // reaction 25:  H + H2O2 <=> H2 + HO2
  k_f = 6.05 * exp((2) * tc[0] - (2616.72666218454) * invT);
  qf[46] *= k_f;
  qr[46] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[12] + g_RT[14]));
  // reaction 26:  H + H2O2 <=> H2O + OH
  k_f = 24100000 * exp(-(1997.77016324474) * invT);
  qf[47] *= k_f;
  qr[47] *= k_f * exp(-(g_RT[9] - g_RT[11] - g_RT[13] + g_RT[14]));
  // reaction 27:  H2O2 + OH <=> H2O + HO2
  k_f = 2.67e+35 * exp((-7) * tc[0] - (18920.9466342575) * invT);
  qf[48] *= k_f;
  qr[48] *= k_f * exp(-(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[14]));
  // reaction 28:  CO + O (+M) <=> CO2 (+M)
  k_f = 13620 * exp(-(1199.66853127845) * invT);
  Corr = mixture + sc[3] + (11) * sc[13] + (0.75) * sc[22] + (2.6) * sc[23];
  redP = Corr / k_f * 1e-12 * 1.173e+24 *
         exp(-2.79 * tc[0] - 0.50321666580472 * (4191) * invT);
  Corr = redP / (1. + redP);
  qf[20] *= Corr * k_f;
  qr[20] *= Corr * k_f * exp(-(g_RT[10] + g_RT[22] - g_RT[23])) * (refC);
  // reaction 29:  CO + OH <=> CO2 + H
  k_f = 0.07046 * exp((2.053) * tc[0] - (-178.979071526765) * invT);
  qf[49] *= k_f;
  qr[49] *= k_f * exp(-(-g_RT[9] + g_RT[11] + g_RT[22] - g_RT[23]));
  // reaction 30:  CO + OH <=> CO2 + H
  k_f = 5757000 * exp((-0.664) * tc[0] - (166.98238621398) * invT);
  qf[50] *= k_f;
  qr[50] *= k_f * exp(-(-g_RT[9] + g_RT[11] + g_RT[22] - g_RT[23]));
  // reaction 31:  CO + O2 <=> CO2 + O
  k_f = 1119000 * exp(-(24003.4349588851) * invT);
  qf[51] *= k_f;
  qr[51] *= k_f * exp(-(-g_RT[10] + g_RT[15] + g_RT[22] - g_RT[23]));
  // reaction 32:  CO + HO2 <=> CO2 + OH
  k_f = 0.157 * exp((2.18) * tc[0] - (9029.02038003442) * invT);
  qf[52] *= k_f;
  qr[52] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT[22] - g_RT[23]));
  // reaction 33:  H + HCO <=> CO + H2
  k_f = 120000000;
  qf[53] *= k_f;
  qr[53] *= k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[19] - g_RT[22]));
  // reaction 34:  HCO + O <=> CO + OH
  k_f = 30000000;
  qf[54] *= k_f;
  qr[54] *= k_f * exp(-(g_RT[10] - g_RT[11] + g_RT[19] - g_RT[22]));
  // reaction 35:  HCO + O <=> CO2 + H
  k_f = 30000000;
  qf[55] *= k_f;
  qr[55] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[19] - g_RT[23]));
  // reaction 36:  HCO + OH <=> CO + H2O
  k_f = 30200000;
  qf[56] *= k_f;
  qr[56] *= k_f * exp(-(g_RT[11] - g_RT[13] + g_RT[19] - g_RT[22]));
  // reaction 37:  HCO + M <=> CO + H + M
  k_f = 187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  Corr = mixture + sc[3] + (-1) * sc[13] + (0.75) * sc[22] + (2.6) * sc[23];
  qf[26] *= Corr * k_f;
  qr[26] *= Corr * k_f * exp(-(-g_RT[9] + g_RT[19] - g_RT[22])) * (refCinv);
  // reaction 38:  HCO + H2O <=> CO + H + H2O
  k_f = 2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
  qf[27] *= k_f;
  qr[27] *= k_f * exp(-(-g_RT[9] + g_RT[19] - g_RT[22])) * (refCinv);
  // reaction 39:  HCO + O2 <=> CO + HO2
  k_f = 12040 * exp((0.807) * tc[0] - (-365.838516040031) * invT);
  qf[57] *= k_f;
  qr[57] *= k_f * exp(-(-g_RT[12] + g_RT[15] + g_RT[19] - g_RT[22]));
  // reaction 40:  CO + H2 (+M) <=> CH2O (+M)
  k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 5.07e+27 *
         exp(-3.42 * tc[0] - 0.50321666580472 * (84350) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.0679999999999999) * exp(-tc[1] * 0.0050761421319797) +
    0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[2] *= Corr * k_f;
  qr[2] *= Corr * k_f * exp(-(g_RT[3] - g_RT[20] + g_RT[22])) * (refC);
  // reaction 41:  H + HCO (+M) <=> CH2O (+M)
  k_f = 1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 1.35e+24 *
         exp(-2.57 * tc[0] - 0.50321666580472 * (1425) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.2176) * exp(-tc[1] * 0.003690036900369) +
    0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[3] *= Corr * k_f;
  qr[3] *= Corr * k_f * exp(-(g_RT[9] + g_RT[19] - g_RT[20])) * (refC);
  // reaction 42:  CH2 + H (+M) <=> CH3 (+M)
  k_f = 25000000000 * exp((-0.8) * tc[0]);
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 3.2e+27 *
         exp(-3.14 * tc[0] - 0.50321666580472 * (1230) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.32) * exp(-tc[1] * 0.0128205128205128) +
    0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[4] *= Corr * k_f;
  qr[4] *= Corr * k_f * exp(-(g_RT[9] + g_RT[16] - g_RT[18])) * (refC);
  // reaction 43:  CH2 + O <=> H + HCO
  k_f = 80000000;
  qf[58] *= k_f;
  qr[58] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[16] - g_RT[19]));
  // reaction 44:  CH2 + OH <=> CH2O + H
  k_f = 20000000;
  qf[59] *= k_f;
  qr[59] *= k_f * exp(-(-g_RT[9] + g_RT[11] + g_RT[16] - g_RT[20]));
  // reaction 45:  CH2 + H2 <=> CH3 + H
  k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
  qf[60] *= k_f;
  qr[60] *= k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[16] - g_RT[18]));
  // reaction 46:  CH2 + O2 <=> HCO + OH
  k_f = 10600000 * exp(-(754.82499870708) * invT);
  qf[61] *= k_f;
  qr[61] *= k_f * exp(-(-g_RT[11] + g_RT[15] + g_RT[16] - g_RT[19]));
  // reaction 47:  CH2 + O2 <=> CO2 + 2 H
  k_f = 2640000 * exp(-(754.82499870708) * invT);
  qf[62] *= k_f;
  qr[62] *= k_f * exp(-(-2.000000 * g_RT[9] + g_RT[15] + g_RT[16] - g_RT[23])) *
            (refCinv);
  // reaction 48:  CH2 + CO (+M) <=> CH2CO (+M)
  k_f = 810000 * exp((0.5) * tc[0] - (2269.50716277929) * invT);
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 2.69e+33 *
         exp(-5.11 * tc[0] - 0.50321666580472 * (7095) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4093) * exp(-tc[1] * 0.00363636363636364) +
    0.5907 * exp(-tc[1] * 0.000815660685154976) + exp(-5185 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[5] *= Corr * k_f;
  qr[5] *= Corr * k_f * exp(-(g_RT[16] + g_RT[22] - g_RT[29])) * (refC);
  // reaction 49:  CH2* + N2 <=> CH2 + N2
  k_f = 15000000 * exp(-(301.929999482832) * invT);
  qf[63] *= k_f;
  qr[63] *= k_f * exp(-(-g_RT[16] + g_RT[17] + g_RT[37] - g_RT[37]));
  // reaction 50:  CH2* + O <=> CO + H2
  k_f = 15000000;
  qf[64] *= k_f;
  qr[64] *= k_f * exp(-(-g_RT[3] + g_RT[10] + g_RT[17] - g_RT[22]));
  // reaction 51:  CH2* + OH <=> CH2O + H
  k_f = 30000000;
  qf[65] *= k_f;
  qr[65] *= k_f * exp(-(-g_RT[9] + g_RT[11] + g_RT[17] - g_RT[20]));
  // reaction 52:  CH2* + H2 <=> CH3 + H
  k_f = 70000000;
  qf[66] *= k_f;
  qr[66] *= k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[17] - g_RT[18]));
  // reaction 53:  CH2* + O2 <=> CO + H + OH
  k_f = 28000000;
  qf[67] *= k_f;
  qr[67] *= k_f * exp(-(-g_RT[9] - g_RT[11] + g_RT[15] + g_RT[17] - g_RT[22])) *
            (refCinv);
  // reaction 54:  CH2* + O2 <=> CO + H2O
  k_f = 12000000;
  qf[68] *= k_f;
  qr[68] *= k_f * exp(-(-g_RT[13] + g_RT[15] + g_RT[17] - g_RT[22]));
  // reaction 55:  CH2* + H2O <=> CH2 + H2O
  k_f = 30000000;
  qf[69] *= k_f;
  qr[69] *= k_f * exp(-(g_RT[13] - g_RT[13] - g_RT[16] + g_RT[17]));
  // reaction 56:  CH2* + CO <=> CH2 + CO
  k_f = 9000000;
  qf[70] *= k_f;
  qr[70] *= k_f * exp(-(-g_RT[16] + g_RT[17] + g_RT[22] - g_RT[22]));
  // reaction 57:  CH2* + CO2 <=> CH2 + CO2
  k_f = 7000000;
  qf[71] *= k_f;
  qr[71] *= k_f * exp(-(-g_RT[16] + g_RT[17] + g_RT[23] - g_RT[23]));
  // reaction 58:  CH2* + CO2 <=> CH2O + CO
  k_f = 14000000;
  qf[72] *= k_f;
  qr[72] *= k_f * exp(-(g_RT[17] - g_RT[20] - g_RT[22] + g_RT[23]));
  // reaction 59:  CH2O + H (+M) <=> CH3O (+M)
  k_f = 540000 * exp((0.454) * tc[0] - (1308.36333109227) * invT);
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 2.2e+30 *
         exp(-4.8 * tc[0] - 0.50321666580472 * (5560) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.242) * exp(-tc[1] * 0.0106382978723404) +
    0.758 * exp(-tc[1] * 0.000643086816720257) + exp(-4200 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[6] *= Corr * k_f;
  qr[6] *= Corr * k_f * exp(-(g_RT[9] + g_RT[20] - g_RT[21])) * (refC);
  // reaction 60:  CH2O + H <=> H2 + HCO
  k_f = 23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
  qf[73] *= k_f;
  qr[73] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[19] + g_RT[20]));
  // reaction 61:  CH2O + O <=> HCO + OH
  k_f = 39000000 * exp(-(1781.38699694871) * invT);
  qf[74] *= k_f;
  qr[74] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[19] + g_RT[20]));
  // reaction 62:  CH2O + OH <=> H2O + HCO
  k_f = 3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
  qf[75] *= k_f;
  qr[75] *= k_f * exp(-(g_RT[11] - g_RT[13] - g_RT[19] + g_RT[20]));
  // reaction 63:  CH2O + O2 <=> HCO + HO2
  k_f = 100000000 * exp(-(20128.6666321888) * invT);
  qf[76] *= k_f;
  qr[76] *= k_f * exp(-(-g_RT[12] + g_RT[15] - g_RT[19] + g_RT[20]));
  // reaction 64:  CH2O + HO2 <=> H2O2 + HCO
  k_f = 1000000 * exp(-(4025.73332643776) * invT);
  qf[77] *= k_f;
  qr[77] *= k_f * exp(-(g_RT[12] - g_RT[14] - g_RT[19] + g_RT[20]));
  // reaction 65:  CH3 + H (+M) <=> CH4 (+M)
  k_f = 12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 2.477e+33 *
         exp(-4.76 * tc[0] - 0.50321666580472 * (2440) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.217) * exp(-tc[1] * 0.0135135135135135) +
    0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[7] *= Corr * k_f;
  qr[7] *= Corr * k_f * exp(-(-g_RT[2] + g_RT[9] + g_RT[18])) * (refC);
  // reaction 66:  CH3 + O <=> CH2O + H
  k_f = 84300000;
  qf[78] *= k_f;
  qr[78] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[20]));
  // reaction 67:  CH3 + OH <=> CH2 + H2O
  k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
  qf[79] *= k_f;
  qr[79] *= k_f * exp(-(g_RT[11] - g_RT[13] - g_RT[16] + g_RT[18]));
  // reaction 68:  CH3 + OH <=> CH2* + H2O
  k_f = 25010000;
  qf[80] *= k_f;
  qr[80] *= k_f * exp(-(g_RT[11] - g_RT[13] - g_RT[17] + g_RT[18]));
  // reaction 69:  CH3 + O2 <=> CH3O + O
  k_f = 30830000 * exp(-(14492.6399751759) * invT);
  qf[81] *= k_f;
  qr[81] *= k_f * exp(-(-g_RT[10] + g_RT[15] + g_RT[18] - g_RT[21]));
  // reaction 70:  CH3 + O2 <=> CH2O + OH
  k_f = 36000 * exp(-(4498.75699229419) * invT);
  qf[82] *= k_f;
  qr[82] *= k_f * exp(-(-g_RT[11] + g_RT[15] + g_RT[18] - g_RT[20]));
  // reaction 71:  CH3 + HO2 <=> CH4 + O2
  k_f = 1000000;
  qf[83] *= k_f;
  qr[83] *= k_f * exp(-(-g_RT[2] + g_RT[12] - g_RT[15] + g_RT[18]));
  // reaction 72:  CH3 + HO2 <=> CH3O + OH
  k_f = 13400000;
  qf[84] *= k_f;
  qr[84] *= k_f * exp(-(-g_RT[11] + g_RT[12] + g_RT[18] - g_RT[21]));
  // reaction 73:  CH3 + H2O2 <=> CH4 + HO2
  k_f = 0.0245 * exp((2.47) * tc[0] - (2606.66232886845) * invT);
  qf[85] *= k_f;
  qr[85] *= k_f * exp(-(-g_RT[2] - g_RT[12] + g_RT[14] + g_RT[18]));
  // reaction 74:  CH3 + HCO <=> CH4 + CO
  k_f = 8480000;
  qf[86] *= k_f;
  qr[86] *= k_f * exp(-(-g_RT[2] + g_RT[18] + g_RT[19] - g_RT[22]));
  // reaction 75:  CH2O + CH3 <=> CH4 + HCO
  k_f = 0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
  qf[87] *= k_f;
  qr[87] *= k_f * exp(-(-g_RT[2] + g_RT[18] - g_RT[19] + g_RT[20]));
  // reaction 76:  CH2 + CH3 <=> C2H4 + H
  k_f = 40000000;
  qf[88] *= k_f;
  qr[88] *= k_f * exp(-(-g_RT[1] - g_RT[9] + g_RT[16] + g_RT[18]));
  // reaction 77:  2 CH3 (+M) <=> C2H6 (+M)
  k_f = 21200000000 * exp((-0.97) * tc[0] - (311.994332798926) * invT);
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 1.77e+50 *
         exp(-9.67 * tc[0] - 0.50321666580472 * (6220) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.4675) * exp(-tc[1] * 0.00662251655629139) +
    0.5325 * exp(-tc[1] * 0.000963391136801541) + exp(-4970 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[8] *= Corr * k_f;
  qr[8] *= Corr * k_f * exp(-(2.000000 * g_RT[18] - g_RT[27])) * (refC);
  // reaction 78:  2 CH3 <=> C2H5 + H
  k_f = 4990000 * exp((0.1) * tc[0] - (5334.09665753003) * invT);
  qf[89] *= k_f;
  qr[89] *= k_f * exp(-(-g_RT[9] + 2.000000 * g_RT[18] - g_RT[26]));
  // reaction 79:  CH3 + HCCO <=> C2H4 + CO
  k_f = 50000000;
  qf[90] *= k_f;
  qr[90] *= k_f * exp(-(-g_RT[1] + g_RT[18] - g_RT[22] + g_RT[28]));
  // reaction 80:  CH3O + H <=> CH2O + H2
  k_f = 20000000;
  qf[91] *= k_f;
  qr[91] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[20] + g_RT[21]));
  // reaction 81:  CH3O + H <=> CH3 + OH
  k_f = 32000000;
  qf[92] *= k_f;
  qr[92] *= k_f * exp(-(g_RT[9] - g_RT[11] - g_RT[18] + g_RT[21]));
  // reaction 82:  CH3O + H <=> CH2* + H2O
  k_f = 16000000;
  qf[93] *= k_f;
  qr[93] *= k_f * exp(-(g_RT[9] - g_RT[13] - g_RT[17] + g_RT[21]));
  // reaction 83:  CH3O + OH <=> CH2O + H2O
  k_f = 5000000;
  qf[94] *= k_f;
  qr[94] *= k_f * exp(-(g_RT[11] - g_RT[13] - g_RT[20] + g_RT[21]));
  // reaction 84:  CH3O + O2 <=> CH2O + HO2
  k_f = 4.28e-19 * exp((7.6) * tc[0] - (-1776.35483029066) * invT);
  qf[95] *= k_f;
  qr[95] *= k_f * exp(-(-g_RT[12] + g_RT[15] - g_RT[20] + g_RT[21]));
  // reaction 85:  CH4 + H <=> CH3 + H2
  k_f = 660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
  qf[96] *= k_f;
  qr[96] *= k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[9] - g_RT[18]));
  // reaction 86:  CH4 + O <=> CH3 + OH
  k_f = 1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
  qf[97] *= k_f;
  qr[97] *= k_f * exp(-(g_RT[2] + g_RT[10] - g_RT[11] - g_RT[18]));
  // reaction 87:  CH4 + OH <=> CH3 + H2O
  k_f = 100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
  qf[98] *= k_f;
  qr[98] *= k_f * exp(-(g_RT[2] + g_RT[11] - g_RT[13] - g_RT[18]));
  // reaction 88:  CH2* + CH4 <=> 2 CH3
  k_f = 16000000 * exp(-(-286.83349950869) * invT);
  qf[99] *= k_f;
  qr[99] *= k_f * exp(-(g_RT[2] + g_RT[17] - 2.000000 * g_RT[18]));
  // reaction 89:  H + HCCO <=> CH2* + CO
  k_f = 100000000;
  qf[100] *= k_f;
  qr[100] *= k_f * exp(-(g_RT[9] - g_RT[17] - g_RT[22] + g_RT[28]));
  // reaction 90:  HCCO + O <=> 2 CO + H
  k_f = 100000000;
  qf[101] *= k_f;
  qr[101] *= k_f *
             exp(-(-g_RT[9] + g_RT[10] - 2.000000 * g_RT[22] + g_RT[28])) *
             (refCinv);
  // reaction 91:  HCCO + O2 <=> 2 CO + OH
  k_f = 1600000 * exp(-(429.747032597231) * invT);
  qf[102] *= k_f;
  qr[102] *= k_f *
             exp(-(-g_RT[11] + g_RT[15] - 2.000000 * g_RT[22] + g_RT[28])) *
             (refCinv);
  // reaction 92:  CH2 + HCCO <=> C2H3 + CO
  k_f = 30000000;
  qf[103] *= k_f;
  qr[103] *= k_f * exp(-(g_RT[16] - g_RT[22] - g_RT[25] + g_RT[28]));
  // reaction 93:  C2H3 (+M) <=> C2H2 + H (+M)
  k_f = 386000000 * exp((1.62) * tc[0] - (18643.2716780664) * invT);
  Corr = mixture + (2) * sc[1] + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
         sc[23] + (2) * sc[24] + (2) * sc[27];
  redP = Corr / k_f * 1e-6 * 2.565e+27 *
         exp(-3.4 * tc[0] - 0.50321666580472 * (35798.72) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (-0.9816) * exp(-tc[1] * 0.000185745862510913) +
    1.9816 * exp(-tc[1] * 0.232926488400261) + exp(0.0795 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[9] *= Corr * k_f;
  qr[9] *= Corr * k_f * exp(-(-g_RT[9] - g_RT[24] + g_RT[25])) * (refCinv);
  // reaction 94:  C2H2 + O <=> CH2 + CO
  k_f = 4.08 * exp((2) * tc[0] - (956.111665028967) * invT);
  qf[104] *= k_f;
  qr[104] *= k_f * exp(-(g_RT[10] - g_RT[16] - g_RT[22] + g_RT[24]));
  // reaction 95:  C2H2 + O <=> H + HCCO
  k_f = 16.32 * exp((2) * tc[0] - (956.111665028967) * invT);
  qf[105] *= k_f;
  qr[105] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[24] - g_RT[28]));
  // reaction 96:  C2H2 + OH <=> CH2CO + H
  k_f = 2.18e-10 * exp((4.5) * tc[0] - (-503.21666580472) * invT);
  qf[106] *= k_f;
  qr[106] *= k_f * exp(-(-g_RT[9] + g_RT[11] + g_RT[24] - g_RT[29]));
  // reaction 97:  C2H2 + HCO <=> C2H3 + CO
  k_f = 10 * exp((2) * tc[0] - (3019.29999482832) * invT);
  qf[107] *= k_f;
  qr[107] *= k_f * exp(-(g_RT[19] - g_RT[22] + g_RT[24] - g_RT[25]));
  // reaction 98:  C2H2 + CH3 <=> aC3H5
  k_f = 4.4e+43 * exp((-11.4) * tc[0] - (18468.0516350332) * invT);
  qf[108] *= k_f;
  qr[108] *= k_f * exp(-(g_RT[18] + g_RT[24] - g_RT[31])) * (refC);
  // reaction 99:  CH2CO + H (+M) <=> CH2CHO (+M)
  k_f = 330000000 * exp((-0.06) * tc[0] - (4277.34165934012) * invT);
  Corr = mixture + (2) * sc[1] + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
         sc[23] + (2) * sc[24] + (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 3.8e+41 *
         exp(-7.64 * tc[0] - 0.50321666580472 * (11900) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.663) * exp(-tc[1] * 0.000585823081429408) +
    0.337 * exp(-tc[1] * 0.0003125) + exp(-4131 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[10] *= Corr * k_f;
  qr[10] *= Corr * k_f * exp(-(g_RT[9] + g_RT[29] - g_RT[30])) * (refC);
  // reaction 100:  CH2CO + H <=> H2 + HCCO
  k_f = 50000000 * exp(-(4025.73332643776) * invT);
  qf[109] *= k_f;
  qr[109] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[28] + g_RT[29]));
  // reaction 101:  CH2CO + H <=> CH3 + CO
  k_f = 1500 * exp((1.43) * tc[0] - (1353.6528310147) * invT);
  qf[110] *= k_f;
  qr[110] *= k_f * exp(-(g_RT[9] - g_RT[18] - g_RT[22] + g_RT[29]));
  // reaction 102:  CH2CO + O <=> HCCO + OH
  k_f = 10000000 * exp(-(4025.73332643776) * invT);
  qf[111] *= k_f;
  qr[111] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[28] + g_RT[29]));
  // reaction 103:  CH2CO + O <=> CH2 + CO2
  k_f = 1750000 * exp(-(679.342498836372) * invT);
  qf[112] *= k_f;
  qr[112] *= k_f * exp(-(g_RT[10] - g_RT[16] - g_RT[23] + g_RT[29]));
  // reaction 104:  CH2CO + OH <=> H2O + HCCO
  k_f = 7500000 * exp(-(1006.43333160944) * invT);
  qf[113] *= k_f;
  qr[113] *= k_f * exp(-(g_RT[11] - g_RT[13] - g_RT[28] + g_RT[29]));
  // reaction 105:  C2H3 + H (+M) <=> C2H4 (+M)
  k_f = 6080000 * exp((0.27) * tc[0] - (140.900666425322) * invT);
  Corr = mixture + (2) * sc[1] + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
         sc[23] + (2) * sc[24] + (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 1.4e+30 *
         exp(-3.86 * tc[0] - 0.50321666580472 * (3320) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.218) * exp(-tc[1] * 0.00481927710843374) +
    0.782 * exp(-tc[1] * 0.000375516334960571) + exp(-6095 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[11] *= Corr * k_f;
  qr[11] *= Corr * k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[25])) * (refC);
  // reaction 106:  C2H3 + H <=> C2H2 + H2
  k_f = 90000000;
  qf[114] *= k_f;
  qr[114] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[24] + g_RT[25]));
  // reaction 107:  C2H3 + O <=> CH2CO + H
  k_f = 48000000;
  qf[115] *= k_f;
  qr[115] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[25] - g_RT[29]));
  // reaction 108:  C2H3 + O <=> CH3 + CO
  k_f = 48000000;
  qf[116] *= k_f;
  qr[116] *= k_f * exp(-(g_RT[10] - g_RT[18] - g_RT[22] + g_RT[25]));
  // reaction 109:  C2H3 + OH <=> C2H2 + H2O
  k_f = 30110000;
  qf[117] *= k_f;
  qr[117] *= k_f * exp(-(g_RT[11] - g_RT[13] - g_RT[24] + g_RT[25]));
  // reaction 110:  C2H3 + O2 <=> C2H2 + HO2
  k_f = 1.34 * exp((1.61) * tc[0] - (-192.93326966953) * invT);
  qf[118] *= k_f;
  qr[118] *= k_f * exp(-(-g_RT[12] + g_RT[15] - g_RT[24] + g_RT[25]));
  // reaction 111:  C2H3 + O2 <=> CH2CHO + O
  k_f = 300000 * exp((0.29) * tc[0] - (5.53538332385192) * invT);
  qf[119] *= k_f;
  qr[119] *= k_f * exp(-(-g_RT[10] + g_RT[15] + g_RT[25] - g_RT[30]));
  // reaction 112:  C2H3 + O2 <=> CH2O + HCO
  k_f = 46000000000 * exp((-1.39) * tc[0] - (508.248832462767) * invT);
  qf[120] *= k_f;
  qr[120] *= k_f * exp(-(g_RT[15] - g_RT[19] - g_RT[20] + g_RT[25]));
  // reaction 113:  C2H3 + CH3 (+M) <=> C3H6 (+M)
  k_f = 25000000;
  Corr = mixture + (2) * sc[1] + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
         sc[23] + (2) * sc[24] + (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 4.27e+58 *
         exp(-11.94 * tc[0] - 0.50321666580472 * (9769.8) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.825) * exp(-tc[1] * 0.000745934656124124) +
    0.175 * exp(-tc[1] * 1.66666666666667e-05) + exp(-10139.8 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[12] *= Corr * k_f;
  qr[12] *= Corr * k_f * exp(-(-g_RT[4] + g_RT[18] + g_RT[25])) * (refC);
  // reaction 114:  C2H3 + CH3 <=> H + aC3H5
  k_f = 1.5e+18 * exp((-2.83) * tc[0] - (9368.88788395227) * invT);
  qf[121] *= k_f;
  qr[121] *= k_f * exp(-(-g_RT[9] + g_RT[18] + g_RT[25] - g_RT[31]));
  // reaction 115:  CH2CHO <=> CH3 + CO
  k_f = 1.2e+37 * exp((-7.456) * tc[0] - (23198.2882935976) * invT);
  qf[122] *= k_f;
  qr[122] *= k_f * exp(-(-g_RT[18] - g_RT[22] + g_RT[30])) * (refCinv);
  // reaction 116:  CH2CHO + H <=> CH3 + HCO
  k_f = 90000000;
  qf[123] *= k_f;
  qr[123] *= k_f * exp(-(g_RT[9] - g_RT[18] - g_RT[19] + g_RT[30]));
  // reaction 117:  CH2CHO + H <=> CH2CO + H2
  k_f = 20000000 * exp(-(2012.86666321888) * invT);
  qf[124] *= k_f;
  qr[124] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[29] + g_RT[30]));
  // reaction 118:  CH2CHO + O <=> CH2CO + OH
  k_f = 20000000 * exp(-(2012.86666321888) * invT);
  qf[125] *= k_f;
  qr[125] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[29] + g_RT[30]));
  // reaction 119:  CH2CHO + OH <=> CH2CO + H2O
  k_f = 10000000 * exp(-(1006.43333160944) * invT);
  qf[126] *= k_f;
  qr[126] *= k_f * exp(-(g_RT[11] - g_RT[13] - g_RT[29] + g_RT[30]));
  // reaction 120:  CH2CHO + O2 <=> CH2CO + HO2
  k_f = 140000;
  qf[127] *= k_f;
  qr[127] *= k_f * exp(-(-g_RT[12] + g_RT[15] - g_RT[29] + g_RT[30]));
  // reaction 121:  C2H4 + H (+M) <=> C2H5 (+M)
  k_f = 1370 * exp((1.463) * tc[0] - (681.858582165395) * invT);
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 2.9e+39 *
         exp(-6.642 * tc[0] - 0.50321666580472 * (5769) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (-0.569) * exp(-tc[1] * -0.000109325461900077) +
    1.569 * exp(-tc[1] * 0.00334448160535117) + exp(-152.4 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[13] *= Corr * k_f;
  qr[13] *= Corr * k_f * exp(-(g_RT[1] + g_RT[9] - g_RT[26])) * (refC);
  // reaction 122:  C2H4 + H <=> C2H3 + H2
  k_f = 50.7 * exp((1.9) * tc[0] - (6516.65582217112) * invT);
  qf[128] *= k_f;
  qr[128] *= k_f * exp(-(g_RT[1] - g_RT[3] + g_RT[9] - g_RT[25]));
  // reaction 123:  C2H4 + O <=> C2H3 + OH
  k_f = 15.1 * exp((1.9) * tc[0] - (1882.03033010965) * invT);
  qf[129] *= k_f;
  qr[129] *= k_f * exp(-(g_RT[1] + g_RT[10] - g_RT[11] - g_RT[25]));
  // reaction 124:  C2H4 + O <=> CH3 + HCO
  k_f = 19.2 * exp((1.83) * tc[0] - (110.707666477038) * invT);
  qf[130] *= k_f;
  qr[130] *= k_f * exp(-(g_RT[1] + g_RT[10] - g_RT[18] - g_RT[19]));
  // reaction 125:  C2H4 + O <=> CH2 + CH2O
  k_f = 0.384 * exp((1.83) * tc[0] - (110.707666477038) * invT);
  qf[131] *= k_f;
  qr[131] *= k_f * exp(-(g_RT[1] + g_RT[10] - g_RT[16] - g_RT[20]));
  // reaction 126:  C2H4 + OH <=> C2H3 + H2O
  k_f = 3.6 * exp((2) * tc[0] - (1258.0416645118) * invT);
  qf[132] *= k_f;
  qr[132] *= k_f * exp(-(g_RT[1] + g_RT[11] - g_RT[13] - g_RT[25]));
  // reaction 127:  C2H4 + HCO <=> C2H5 + CO
  k_f = 10 * exp((2) * tc[0] - (4025.73332643776) * invT);
  qf[133] *= k_f;
  qr[133] *= k_f * exp(-(g_RT[1] + g_RT[19] - g_RT[22] - g_RT[26]));
  // reaction 128:  C2H4 + CH2 <=> H + aC3H5
  k_f = 20000000 * exp(-(3019.29999482832) * invT);
  qf[134] *= k_f;
  qr[134] *= k_f * exp(-(g_RT[1] - g_RT[9] + g_RT[16] - g_RT[31]));
  // reaction 129:  C2H4 + CH2* <=> H + aC3H5
  k_f = 50000000;
  qf[135] *= k_f;
  qr[135] *= k_f * exp(-(g_RT[1] - g_RT[9] + g_RT[17] - g_RT[31]));
  // reaction 130:  C2H4 + CH3 <=> C2H3 + CH4
  k_f = 0.227 * exp((2) * tc[0] - (4629.59332540342) * invT);
  qf[136] *= k_f;
  qr[136] *= k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[18] - g_RT[25]));
  // reaction 131:  C2H4 + O2 <=> C2H3 + HO2
  k_f = 42200000 * exp(-(30595.573280927) * invT);
  qf[137] *= k_f;
  qr[137] *= k_f * exp(-(g_RT[1] - g_RT[12] + g_RT[15] - g_RT[25]));
  // reaction 132:  C2H5 + H (+M) <=> C2H6 (+M)
  k_f = 521000000000 * exp((-0.99) * tc[0] - (795.082331971457) * invT);
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 1.99e+41 *
         exp(-7.08 * tc[0] - 0.50321666580472 * (6685) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.1578) * exp(-tc[1] * 0.008) +
    0.8422 * exp(-tc[1] * 0.000450653447498873) + exp(-6882 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[14] *= Corr * k_f;
  qr[14] *= Corr * k_f * exp(-(g_RT[9] + g_RT[26] - g_RT[27])) * (refC);
  // reaction 133:  C2H5 + H <=> C2H4 + H2
  k_f = 2000000;
  qf[138] *= k_f;
  qr[138] *= k_f * exp(-(-g_RT[1] - g_RT[3] + g_RT[9] + g_RT[26]));
  // reaction 134:  C2H5 + O <=> CH2O + CH3
  k_f = 16040000;
  qf[139] *= k_f;
  qr[139] *= k_f * exp(-(g_RT[10] - g_RT[18] - g_RT[20] + g_RT[26]));
  // reaction 135:  C2H5 + O2 <=> C2H4 + HO2
  k_f = 20000;
  qf[140] *= k_f;
  qr[140] *= k_f * exp(-(-g_RT[1] - g_RT[12] + g_RT[15] + g_RT[26]));
  // reaction 136:  C2H5 + HO2 <=> CH2O + CH3 + OH
  k_f = 24000000;
  qf[141] *= k_f;
  qr[141] *= k_f *
             exp(-(-g_RT[11] + g_RT[12] - g_RT[18] - g_RT[20] + g_RT[26])) *
             (refCinv);
  // reaction 137:  C2H3 + C2H5 (+M) <=> C4H81 (+M)
  k_f = 15000000;
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 1.55e+56 *
         exp(-11.79 * tc[0] - 0.50321666580472 * (8984.5) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.802) * exp(-tc[1] * 0.000439000834101585) +
    0.198 * exp(-tc[1] * 1.66666666666667e-05) + exp(-5723.2 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[15] *= Corr * k_f;
  qr[15] *= Corr * k_f * exp(-(-g_RT[5] + g_RT[25] + g_RT[26])) * (refC);
  // reaction 138:  C2H6 + H <=> C2H5 + H2
  k_f = 115 * exp((1.9) * tc[0] - (3789.22149350954) * invT);
  qf[142] *= k_f;
  qr[142] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[26] + g_RT[27]));
  // reaction 139:  C2H6 + O <=> C2H5 + OH
  k_f = 89.8 * exp((1.92) * tc[0] - (2863.30282842885) * invT);
  qf[143] *= k_f;
  qr[143] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[26] + g_RT[27]));
  // reaction 140:  C2H6 + OH <=> C2H5 + H2O
  k_f = 3.54 * exp((2.12) * tc[0] - (437.798499250106) * invT);
  qf[144] *= k_f;
  qr[144] *= k_f * exp(-(g_RT[11] - g_RT[13] - g_RT[26] + g_RT[27]));
  // reaction 141:  C2H6 + CH3 <=> C2H5 + CH4
  k_f = 6.14 * exp((1.74) * tc[0] - (5258.61415765932) * invT);
  qf[145] *= k_f;
  qr[145] *= k_f * exp(-(-g_RT[2] + g_RT[18] - g_RT[26] + g_RT[27]));
  // reaction 142:  H + aC3H5 (+M) <=> C3H6 (+M)
  k_f = 200000000;
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 1.33e+60 *
         exp(-12 * tc[0] - 0.50321666580472 * (5967.8) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.98) * exp(-tc[1] * 0.000911909538573774) +
    0.02 * exp(-tc[1] * 0.000911909538573774) + exp(-6859.5 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[16] *= Corr * k_f;
  qr[16] *= Corr * k_f * exp(-(-g_RT[4] + g_RT[9] + g_RT[31])) * (refC);
  // reaction 143:  HO2 + aC3H5 <=> C3H6 + O2
  k_f = 2660000;
  qf[146] *= k_f;
  qr[146] *= k_f * exp(-(-g_RT[4] + g_RT[12] - g_RT[15] + g_RT[31]));
  // reaction 144:  HO2 + aC3H5 <=> C2H3 + CH2O + OH
  k_f = 6600000;
  qf[147] *= k_f;
  qr[147] *= k_f *
             exp(-(-g_RT[11] + g_RT[12] - g_RT[20] - g_RT[25] + g_RT[31])) *
             (refCinv);
  // reaction 145:  HCO + aC3H5 <=> C3H6 + CO
  k_f = 60000000;
  qf[148] *= k_f;
  qr[148] *= k_f * exp(-(-g_RT[4] + g_RT[19] - g_RT[22] + g_RT[31]));
  // reaction 146:  CH3 + aC3H5 (+M) <=> C4H81 (+M)
  k_f = 100000000 * exp((-0.32) * tc[0] - (-131.993731440578) * invT);
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 3.91e+60 *
         exp(-12.81 * tc[0] - 0.50321666580472 * (6250) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.896) * exp(-tc[1] * 0.00062266500622665) +
    0.104 * exp(-tc[1] * 1.66666666666667e-05) + exp(-6118.4 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[17] *= Corr * k_f;
  qr[17] *= Corr * k_f * exp(-(-g_RT[5] + g_RT[18] + g_RT[31])) * (refC);
  // reaction 147:  C3H6 + H <=> C2H4 + CH3
  k_f = 3.3e+18 * exp((-3.04) * tc[0] - (7855.21215321167) * invT);
  qf[149] *= k_f;
  qr[149] *= k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[18]));
  // reaction 148:  C3H6 + H <=> H2 + aC3H5
  k_f = 0.173 * exp((2.5) * tc[0] - (1253.00949785375) * invT);
  qf[150] *= k_f;
  qr[150] *= k_f * exp(-(-g_RT[3] + g_RT[4] + g_RT[9] - g_RT[31]));
  // reaction 149:  C3H6 + O <=> CH2CO + CH3 + H
  k_f = 80 * exp((1.65) * tc[0] - (164.551849718143) * invT);
  qf[151] *= k_f;
  qr[151] *= k_f * exp(-(g_RT[4] - g_RT[9] + g_RT[10] - g_RT[18] - g_RT[29])) *
             (refCinv);
  // reaction 150:  C3H6 + O <=> C2H5 + HCO
  k_f = 35 * exp((1.65) * tc[0] - (-489.126599162188) * invT);
  qf[152] *= k_f;
  qr[152] *= k_f * exp(-(g_RT[4] + g_RT[10] - g_RT[19] - g_RT[26]));
  // reaction 151:  C3H6 + O <=> OH + aC3H5
  k_f = 180000 * exp((0.7) * tc[0] - (2958.91399493175) * invT);
  qf[153] *= k_f;
  qr[153] *= k_f * exp(-(g_RT[4] + g_RT[10] - g_RT[11] - g_RT[31]));
  // reaction 152:  C3H6 + OH <=> H2O + aC3H5
  k_f = 3.1 * exp((2) * tc[0] - (-149.958566409806) * invT);
  qf[154] *= k_f;
  qr[154] *= k_f * exp(-(g_RT[4] + g_RT[11] - g_RT[13] - g_RT[31]));
  // reaction 153:  C3H6 + CH3 <=> CH4 + aC3H5
  k_f = 2.2e-06 * exp((3.5) * tc[0] - (2855.75457844178) * invT);
  qf[155] *= k_f;
  qr[155] *= k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[18] - g_RT[31]));
  // reaction 154:  C4H81 + H <=> C2H4 + C2H5
  k_f = 1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[156] *= k_f;
  qr[156] *= k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[26]));
  // reaction 155:  C4H81 + H <=> C3H6 + CH3
  k_f = 3.2e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
  qf[157] *= k_f;
  qr[157] *= k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[9] - g_RT[18]));
  // reaction 156:  H + iC4H8 <=> C3H6 + CH3
  k_f = 3.3e+18 * exp((-3.04) * tc[0] - (7855.21215321167) * invT);
  qf[158] *= k_f;
  qr[158] *= k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[9] - g_RT[18]));
  // reaction 157:  O + iC4H8 <=> CH2CO + 2 CH3
  k_f = 120 * exp((1.65) * tc[0] - (164.551849718143) * invT);
  qf[159] *= k_f;
  qr[159] *= k_f * exp(-(g_RT[6] + g_RT[10] - 2.000000 * g_RT[18] - g_RT[29])) *
             (refCinv);
  // reaction 158:  C6H5 + CH3 <=> C6H5CH3
  k_f = 13800000 * exp(-(23.1479666270171) * invT);
  qf[160] *= k_f;
  qr[160] *= k_f * exp(-(-g_RT[8] + g_RT[18] + g_RT[32])) * (refC);
  // reaction 159:  C6H5CH3 + O2 <=> C6H5CH2 + HO2
  k_f = 300000000 * exp(-(21634.2908962765) * invT);
  qf[161] *= k_f;
  qr[161] *= k_f * exp(-(g_RT[8] - g_RT[12] + g_RT[15] - g_RT[33]));
  // reaction 160:  C6H5CH3 + OH <=> C6H5CH2 + H2O
  k_f = 16200000 * exp(-(1393.91016427907) * invT);
  qf[162] *= k_f;
  qr[162] *= k_f * exp(-(g_RT[8] + g_RT[11] - g_RT[13] - g_RT[33]));
  // reaction 161:  C6H5CH3 + H <=> C6H5CH2 + H2
  k_f = 125900000 * exp(-(4206.38810946165) * invT);
  qf[163] *= k_f;
  qr[163] *= k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[33]));
  // reaction 162:  C6H5CH3 + H <=> C6H6 + CH3
  k_f = 1.93 * exp((2.17) * tc[0] - (2094.89097974505) * invT);
  qf[164] *= k_f;
  qr[164] *= k_f * exp(-(-g_RT[7] + g_RT[8] + g_RT[9] - g_RT[18]));
  // reaction 163:  C6H5CH3 + CH3 <=> C6H5CH2 + CH4
  k_f = 316000 * exp(-(4780.55832514484) * invT);
  qf[165] *= k_f;
  qr[165] *= k_f * exp(-(-g_RT[2] + g_RT[8] + g_RT[18] - g_RT[33]));
  // reaction 164:  C6H5CH2 + H (+M) <=> C6H5CH3 (+M)
  k_f = 100000000;
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23] +
         (2) * sc[27];
  redP = Corr / k_f * 1e-12 * 1.1e+103 *
         exp(-24.63 * tc[0] - 0.50321666580472 * (14590) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0.569) * exp(-tc[1] * 0.00261096605744125) +
    0.431 * exp(-tc[1] * 0.00657894736842105) + exp(-4730 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[18] *= Corr * k_f;
  qr[18] *= Corr * k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[33])) * (refC);
  // reaction 165:  C6H5CH2 + H <=> C6H5 + CH3
  k_f = 1.5e+60 * exp((-13.94) * tc[0] - (32497.7322776688) * invT);
  qf[166] *= k_f;
  qr[166] *= k_f * exp(-(g_RT[9] - g_RT[18] - g_RT[32] + g_RT[33]));
  // reaction 166:  C6H5CH2 + O <=> C6H5CHO + H
  k_f = 400000000;
  qf[167] *= k_f;
  qr[167] *= k_f * exp(-(-g_RT[9] + g_RT[10] + g_RT[33] - g_RT[36]));
  // reaction 167:  C6H5CH2 + HO2 <=> C6H5CHO + H + OH
  k_f = 5000000;
  qf[168] *= k_f;
  qr[168] *= k_f *
             exp(-(-g_RT[9] - g_RT[11] + g_RT[12] + g_RT[33] - g_RT[36])) *
             (refCinv);
  // reaction 168:  C6H5 + HCO <=> C6H5CHO
  k_f = 10000000;
  qf[169] *= k_f;
  qr[169] *= k_f * exp(-(g_RT[19] + g_RT[32] - g_RT[36])) * (refC);
  // reaction 169:  C6H5CHO <=> C6H5CO + H
  k_f = 3.98e+15 * exp(-(43729.5282584301) * invT);
  qf[170] *= k_f;
  qr[170] *= k_f * exp(-(-g_RT[9] - g_RT[35] + g_RT[36])) * (refCinv);
  // reaction 170:  C6H5CHO + O2 <=> C6H5CO + HO2
  k_f = 10200000 * exp(-(19600.2891330938) * invT);
  qf[171] *= k_f;
  qr[171] *= k_f * exp(-(-g_RT[12] + g_RT[15] - g_RT[35] + g_RT[36]));
  // reaction 171:  C6H5CHO + OH <=> C6H5CO + H2O
  k_f = 23500 * exp((0.73) * tc[0] - (-558.570499043239) * invT);
  qf[172] *= k_f;
  qr[172] *= k_f * exp(-(g_RT[11] - g_RT[13] - g_RT[35] + g_RT[36]));
  // reaction 172:  C6H5CHO + H <=> C6H5CO + H2
  k_f = 4100 * exp((1.16) * tc[0] - (1207.71999793133) * invT);
  qf[173] *= k_f;
  qr[173] *= k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[35] + g_RT[36]));
  // reaction 173:  C6H5CHO + H <=> C6H6 + HCO
  k_f = 1.93 * exp((2.17) * tc[0] - (2094.89097974505) * invT);
  qf[174] *= k_f;
  qr[174] *= k_f * exp(-(-g_RT[7] + g_RT[9] - g_RT[19] + g_RT[36]));
  // reaction 174:  C6H5CHO + O <=> C6H5CO + OH
  k_f = 5800000 * exp(-(905.789998448495) * invT);
  qf[175] *= k_f;
  qr[175] *= k_f * exp(-(g_RT[10] - g_RT[11] - g_RT[35] + g_RT[36]));
  // reaction 175:  C6H5CHO + CH3 <=> C6H5CO + CH4
  k_f = 2e-12 * exp((5.6) * tc[0] - (1237.91299787961) * invT);
  qf[176] *= k_f;
  qr[176] *= k_f * exp(-(-g_RT[2] + g_RT[18] - g_RT[35] + g_RT[36]));
  // reaction 176:  C6H5CO + H2O2 <=> C6H5CHO + HO2
  k_f = 180000 * exp(-(4139.46029290962) * invT);
  qf[177] *= k_f;
  qr[177] *= k_f * exp(-(-g_RT[12] + g_RT[14] + g_RT[35] - g_RT[36]));
  // reaction 177:  C6H5CO <=> C6H5 + CO
  k_f = 527000000000000 * exp(-(14599.8251249923) * invT);
  qf[178] *= k_f;
  qr[178] *= k_f * exp(-(-g_RT[22] - g_RT[32] + g_RT[35])) * (refCinv);
  // reaction 178:  C6H5 + H (+M) <=> C6H6 (+M)
  k_f = 100000000;
  Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23];
  redP = Corr / k_f * 1e-12 * 6.6e+75 *
         exp(-16.3 * tc[0] - 0.50321666580472 * (7000) * invT);
  F = redP / (1.0 + redP);
  logPred = log10(redP);
  logFcent = log10(
    (0) * exp(-tc[1] * 10) + 1 * exp(-tc[1] * 0.0017096939647803) +
    exp(-6113 * invT));
  troe_c = -0.4 - 0.67 * logFcent;
  troe_n = 0.75 - 1.27 * logFcent;
  troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
  F_troe = pow(10, logFcent / (1.0 + troe * troe));
  Corr = F * F_troe;
  qf[19] *= Corr * k_f;
  qr[19] *= Corr * k_f * exp(-(-g_RT[7] + g_RT[9] + g_RT[32])) * (refC);
  // reaction 179:  C6H6 + OH <=> C6H5 + H2O
  k_f = 0.3985 * exp((2.286) * tc[0] - (532.403232421393) * invT);
  qf[179] *= k_f;
  qr[179] *= k_f * exp(-(g_RT[7] + g_RT[11] - g_RT[13] - g_RT[32]));
  // reaction 180:  C6H5 + H2 <=> C6H6 + H
  k_f = 0.05707 * exp((2.43) * tc[0] - (3156.67814459301) * invT);
  qf[180] *= k_f;
  qr[180] *= k_f * exp(-(g_RT[3] - g_RT[7] - g_RT[9] + g_RT[32]));
  // reaction 181:  C6H5 + O2 <=> C6H4O2 + H
  k_f = 30000000 * exp(-(4518.88565892638) * invT);
  qf[181] *= k_f;
  qr[181] *= k_f * exp(-(-g_RT[9] + g_RT[15] + g_RT[32] - g_RT[34]));
  // reaction 182:  C6H5 + HO2 <=> C6H6 + O2
  k_f = 1000000;
  qf[182] *= k_f;
  qr[182] *= k_f * exp(-(-g_RT[7] + g_RT[12] - g_RT[15] + g_RT[32]));
  // reaction 183:  C6H5 + CH4 <=> C6H6 + CH3
  k_f = 3.89e-09 * exp((4.57) * tc[0] - (2644.90679546961) * invT);
  qf[183] *= k_f;
  qr[183] *= k_f * exp(-(g_RT[2] - g_RT[7] - g_RT[18] + g_RT[32]));
  // reaction 184:  C6H4O2 + O <=> C2H2 + CH2CO + 2 CO
  k_f = 30000000 * exp(-(2516.0833290236) * invT);
  qf[184] *= k_f;
  qr[184] *=
    k_f *
    exp(-(g_RT[10] - 2.000000 * g_RT[22] - g_RT[24] - g_RT[29] + g_RT[34])) *
    ((refCinv * refCinv));

  return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
productionRate(amrex::Real* wdot, amrex::Real* sc, amrex::Real T)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  const amrex::Real invT = 1.0 / tc[1];

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  const amrex::Real refC = 101325 / 8.31446 * invT;
  const amrex::Real refCinv = 1 / refC;

  for (int i = 0; i < 38; ++i) {
    wdot[i] = 0.0;
  }

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int i = 0; i < 38; ++i) {
    mixture += sc[i];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[38];
  gibbs(g_RT, tc);

  {
    // reaction 15:  H + O2 (+M) <=> HO2 (+M)
    const amrex::Real k_f = 5116000 * exp((0.44) * tc[0]);
    amrex::Real Corr = mixture + (10.89) * sc[13] + (-0.15) * sc[15] +
                       (0.0900000000000001) * sc[22] + (1.18) * sc[23];
    const amrex::Real redP =
      Corr / k_f * 63280000 * exp(-1.4 * tc[0] - 0 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(0.5 * exp(-tc[1] * 1e+30) + 0.5 * exp(-tc[1] * 1e-30) + 0.0);
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[15]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] - g_RT[12] + g_RT[15])) * (refC) * (sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 17:  2 OH (+M) <=> H2O2 (+M)
    const amrex::Real k_f = 111000000 * exp((-0.37) * tc[0]);
    amrex::Real Corr =
      mixture + sc[3] + (5) * sc[13] + (0.75) * sc[22] + (2.6) * sc[23];
    const amrex::Real redP =
      Corr / k_f * 201000 * exp(-0.584 * tc[0] - -1153.87581469022 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2654 * exp(-tc[1] * 0.0106382978723404) +
      0.7346 * exp(-tc[1] * 0.000569476082004556) + exp(-5182 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[11] * sc[11]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[11] - g_RT[14])) * (refC) * (sc[14]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= 2.000000 * qdot;
    wdot[14] += qdot;
  }

  {
    // reaction 40:  CO + H2 (+M) <=> CH2O (+M)
    const amrex::Real k_f = 43 * exp((1.5) * tc[0] - (40056.0465980557) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 5.07e+15 * exp(-3.42 * tc[0] - 42446.3257606281 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.0679999999999999 * exp(-tc[1] * 0.0050761421319797) +
      0.932 * exp(-tc[1] * 0.000649350649350649) + exp(-10300 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[3] * sc[22]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[3] - g_RT[20] + g_RT[22])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[20] += qdot;
    wdot[22] -= qdot;
  }

  {
    // reaction 41:  H + HCO (+M) <=> CH2O (+M)
    const amrex::Real k_f =
      1090000 * exp((0.48) * tc[0] - (-130.836333109227) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 1350000000000 * exp(-2.57 * tc[0] - 717.083748771726 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.2176 * exp(-tc[1] * 0.003690036900369) +
      0.7824 * exp(-tc[1] * 0.000362976406533575) + exp(-6570 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[19]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[19] - g_RT[20])) * (refC) * (sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[19] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 42:  CH2 + H (+M) <=> CH3 (+M)
    const amrex::Real k_f = 25000000000 * exp((-0.8) * tc[0]);
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 3.2e+15 * exp(-3.14 * tc[0] - 618.956498939805 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.32 * exp(-tc[1] * 0.0128205128205128) +
      0.68 * exp(-tc[1] * 0.00050125313283208) + exp(-5590 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[16]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[16] - g_RT[18])) * (refC) * (sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[16] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 48:  CH2 + CO (+M) <=> CH2CO (+M)
    const amrex::Real k_f =
      810000 * exp((0.5) * tc[0] - (2269.50716277929) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 2.69e+21 * exp(-5.11 * tc[0] - 3570.32224388449 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4093 * exp(-tc[1] * 0.00363636363636364) +
      0.5907 * exp(-tc[1] * 0.000815660685154976) + exp(-5185 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[16] * sc[22]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[16] + g_RT[22] - g_RT[29])) * (refC) * (sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[22] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 59:  CH2O + H (+M) <=> CH3O (+M)
    const amrex::Real k_f =
      540000 * exp((0.454) * tc[0] - (1308.36333109227) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 2.2e+18 * exp(-4.8 * tc[0] - 2797.88466187424 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.242 * exp(-tc[1] * 0.0106382978723404) +
      0.758 * exp(-tc[1] * 0.000643086816720257) + exp(-4200 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[20]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[20] - g_RT[21])) * (refC) * (sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[20] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 65:  CH3 + H (+M) <=> CH4 (+M)
    const amrex::Real k_f =
      12700000000 * exp((-0.63) * tc[0] - (192.731983003208) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 2.477e+21 * exp(-4.76 * tc[0] - 1227.84866456352 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.217 * exp(-tc[1] * 0.0135135135135135) +
      0.783 * exp(-tc[1] * 0.000340020401224073) + exp(-6964 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[18]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[2] + g_RT[9] + g_RT[18])) * (refC) * (sc[2]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[9] -= qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 77:  2 CH3 (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      21200000000 * exp((-0.97) * tc[0] - (311.994332798926) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 1.77e+38 * exp(-9.67 * tc[0] - 3130.00766130536 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.4675 * exp(-tc[1] * 0.00662251655629139) +
      0.5325 * exp(-tc[1] * 0.000963391136801541) + exp(-4970 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * ((sc[18] * sc[18]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[18] - g_RT[27])) * (refC) * (sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[18] -= 2.000000 * qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 93:  C2H3 (+M) <=> C2H2 + H (+M)
    const amrex::Real k_f =
      386000000 * exp((1.62) * tc[0] - (18643.2716780664) * invT);
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[3] + (5) * sc[13] +
                       (0.5) * sc[22] + sc[23] + (2) * sc[24] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 2.565e+21 * exp(-3.4 * tc[0] - 18014.5125184767 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.9816 * exp(-tc[1] * 0.000185745862510913) +
      1.9816 * exp(-tc[1] * 0.232926488400261) + exp(0.0795 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[25]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[9] - g_RT[24] + g_RT[25])) *
                           (refCinv) * (sc[9] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 99:  CH2CO + H (+M) <=> CH2CHO (+M)
    const amrex::Real k_f =
      330000000 * exp((-0.06) * tc[0] - (4277.34165934012) * invT);
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[3] + (5) * sc[13] +
                       (0.5) * sc[22] + sc[23] + (2) * sc[24] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 3.8e+29 * exp(-7.64 * tc[0] - 5988.27832307616 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.663 * exp(-tc[1] * 0.000585823081429408) +
      0.337 * exp(-tc[1] * 0.0003125) + exp(-4131 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[29]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[29] - g_RT[30])) * (refC) * (sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[29] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 105:  C2H3 + H (+M) <=> C2H4 (+M)
    const amrex::Real k_f =
      6080000 * exp((0.27) * tc[0] - (140.900666425322) * invT);
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[3] + (5) * sc[13] +
                       (0.5) * sc[22] + sc[23] + (2) * sc[24] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 1.4e+18 * exp(-3.86 * tc[0] - 1670.67933047167 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.218 * exp(-tc[1] * 0.00481927710843374) +
      0.782 * exp(-tc[1] * 0.000375516334960571) + exp(-6095 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[25]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[1] + g_RT[9] + g_RT[25])) * (refC) * (sc[1]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] -= qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 113:  C2H3 + CH3 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 25000000;
    amrex::Real Corr = mixture + (2) * sc[1] + sc[2] + sc[3] + (5) * sc[13] +
                       (0.5) * sc[22] + sc[23] + (2) * sc[24] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 4.27e+46 * exp(-11.94 * tc[0] - 4916.32618157895 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.825 * exp(-tc[1] * 0.000745934656124124) +
      0.175 * exp(-tc[1] * 1.66666666666667e-05) + exp(-10139.8 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[18] * sc[25]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[4] + g_RT[18] + g_RT[25])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[18] -= qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 121:  C2H4 + H (+M) <=> C2H5 (+M)
    const amrex::Real k_f =
      1370 * exp((1.463) * tc[0] - (681.858582165395) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 2.9e+27 * exp(-6.642 * tc[0] - 2903.05694502743 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      -0.569 * exp(-tc[1] * -0.000109325461900077) +
      1.569 * exp(-tc[1] * 0.00334448160535117) + exp(-152.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[1] * sc[9]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[1] + g_RT[9] - g_RT[26])) * (refC) * (sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 132:  C2H5 + H (+M) <=> C2H6 (+M)
    const amrex::Real k_f =
      521000000000 * exp((-0.99) * tc[0] - (795.082331971457) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 1.99e+29 * exp(-7.08 * tc[0] - 3364.00341090455 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.1578 * exp(-tc[1] * 0.008) +
      0.8422 * exp(-tc[1] * 0.000450653447498873) + exp(-6882 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[26]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[26] - g_RT[27])) * (refC) * (sc[27]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[26] -= qdot;
    wdot[27] += qdot;
  }

  {
    // reaction 137:  C2H3 + C2H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f = 15000000;
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 1.55e+44 * exp(-11.79 * tc[0] - 4521.1501339225 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.802 * exp(-tc[1] * 0.000439000834101585) +
      0.198 * exp(-tc[1] * 1.66666666666667e-05) + exp(-5723.2 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[25] * sc[26]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[5] + g_RT[25] + g_RT[26])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[25] -= qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 142:  H + aC3H5 (+M) <=> C3H6 (+M)
    const amrex::Real k_f = 200000000;
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 1.33e+48 * exp(-12 * tc[0] - 3003.09641818941 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.98 * exp(-tc[1] * 0.000911909538573774) +
      0.02 * exp(-tc[1] * 0.000911909538573774) + exp(-6859.5 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[31]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[4] + g_RT[9] + g_RT[31])) * (refC) * (sc[4]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[9] -= qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 146:  CH3 + aC3H5 (+M) <=> C4H81 (+M)
    const amrex::Real k_f =
      100000000 * exp((-0.32) * tc[0] - (-131.993731440578) * invT);
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 3.91e+48 * exp(-12.81 * tc[0] - 3145.1041612795 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.896 * exp(-tc[1] * 0.00062266500622665) +
      0.104 * exp(-tc[1] * 1.66666666666667e-05) + exp(-6118.4 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[18] * sc[31]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[5] + g_RT[18] + g_RT[31])) * (refC) * (sc[5]);
    const amrex::Real qdot = qf - qr;
    wdot[5] += qdot;
    wdot[18] -= qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 164:  C6H5CH2 + H (+M) <=> C6H5CH3 (+M)
    const amrex::Real k_f = 100000000;
    amrex::Real Corr = mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] +
                       sc[23] + (2) * sc[27];
    const amrex::Real redP =
      Corr / k_f * 1.1e+91 * exp(-24.63 * tc[0] - 7341.93115409086 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent = log10(
      0.569 * exp(-tc[1] * 0.00261096605744125) +
      0.431 * exp(-tc[1] * 0.00657894736842105) + exp(-4730 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[33]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[8] + g_RT[9] + g_RT[33])) * (refC) * (sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[9] -= qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 178:  C6H5 + H (+M) <=> C6H6 (+M)
    const amrex::Real k_f = 100000000;
    amrex::Real Corr =
      mixture + sc[2] + sc[3] + (5) * sc[13] + (0.5) * sc[22] + sc[23];
    const amrex::Real redP =
      Corr / k_f * 6.6e+63 * exp(-16.3 * tc[0] - 3522.51666063304 * invT);
    const amrex::Real F = redP / (1.0 + redP);
    const amrex::Real logPred = log10(redP);
    const amrex::Real logFcent =
      log10(+1 * exp(-tc[1] * 0.0017096939647803) + exp(-6113 * invT));
    const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
    const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
    const amrex::Real troe =
      (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
    const amrex::Real F_troe = pow(10, logFcent / (1.0 + troe * troe));
    Corr = F * F_troe;
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[32]);
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[7] + g_RT[9] + g_RT[32])) * (refC) * (sc[7]);
    const amrex::Real qdot = qf - qr;
    wdot[7] += qdot;
    wdot[9] -= qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 28:  CO + O (+M) <=> CO2 (+M)
    const amrex::Real k_f = 13620 * exp(-(1199.66853127845) * invT);
    amrex::Real Corr =
      mixture + sc[3] + (11) * sc[13] + (0.75) * sc[22] + (2.6) * sc[23];
    const amrex::Real redP =
      Corr / k_f * 1173000000000 * exp(-2.79 * tc[0] - 2108.98104638758 * invT);
    Corr = redP / (1.0 + redP);
    const amrex::Real qf = Corr * k_f * (sc[10] * sc[22]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[10] + g_RT[22] - g_RT[23])) * (refC) * (sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 10:  2 H + M <=> H2 + M
    const amrex::Real k_f = 1780000 * exp((-1) * tc[0]);
    const amrex::Real Corr =
      mixture + (-1) * sc[3] + (-1) * sc[13] + (-1) * sc[23];
    const amrex::Real qf = Corr * k_f * ((sc[9] * sc[9]));
    const amrex::Real qr =
      Corr * k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[9])) * (refC) * (sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= 2.000000 * qdot;
  }

  {
    // reaction 11:  2 H + H2O <=> H2 + H2O
    const amrex::Real k_f = 56240000 * exp((-1.25) * tc[0]);
    const amrex::Real qf = k_f * ((sc[9] * sc[9]) * sc[13]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + 2.000000 * g_RT[9])) * (refC) * (sc[3] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= 2.000000 * qdot;
  }

  {
    // reaction 12:  H + OH + M <=> H2O + M
    const amrex::Real k_f = 44000000000 * exp((-2) * tc[0]);
    const amrex::Real Corr =
      mixture + sc[3] + (5.3) * sc[13] + (0.75) * sc[22] + (2.6) * sc[23];
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[11]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[11] - g_RT[13])) * (refC) * (sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 13:  H + O + M <=> OH + M
    const amrex::Real k_f = 9428000 * exp((-1) * tc[0]);
    const amrex::Real Corr =
      mixture + sc[3] + (11) * sc[13] + (0.75) * sc[22] + (2.6) * sc[23];
    const amrex::Real qf = Corr * k_f * (sc[9] * sc[10]);
    const amrex::Real qr =
      Corr * k_f * exp(-(g_RT[9] + g_RT[10] - g_RT[11])) * (refC) * (sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 14:  2 O + M <=> O2 + M
    const amrex::Real k_f = 120000 * exp((-1) * tc[0]);
    const amrex::Real Corr = mixture + (1.4) * sc[3] + (14.4) * sc[13] +
                             (0.75) * sc[22] + (2.6) * sc[23];
    const amrex::Real qf = Corr * k_f * ((sc[10] * sc[10]));
    const amrex::Real qr =
      Corr * k_f * exp(-(2.000000 * g_RT[10] - g_RT[15])) * (refC) * (sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= 2.000000 * qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 37:  HCO + M <=> CO + H + M
    const amrex::Real k_f =
      187000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real Corr =
      mixture + sc[3] + (-1) * sc[13] + (0.75) * sc[22] + (2.6) * sc[23];
    const amrex::Real qf = Corr * k_f * (sc[19]);
    const amrex::Real qr = Corr * k_f * exp(-(-g_RT[9] + g_RT[19] - g_RT[22])) *
                           (refCinv) * (sc[9] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 38:  HCO + H2O <=> CO + H + H2O
    const amrex::Real k_f =
      2244000000000 * exp((-1) * tc[0] - (8554.68331868023) * invT);
    const amrex::Real qf = k_f * (sc[13] * sc[19]);
    const amrex::Real qr = k_f * exp(-(-g_RT[9] + g_RT[19] - g_RT[22])) *
                           (refCinv) * (sc[9] * sc[13] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 0:  POSF10325 => 2.95 C2H4 + 0.39 C3H6 + 0.15 C6H5CH3 + 0.183333
    // C6H6 + CH3 + H + 0.195 iC4H8
    const amrex::Real k_f =
      5.86e+25 * exp((-2.66) * tc[0] - (44387.2324406369) * invT);
    const amrex::Real qf = k_f * (sc[0]);
    const amrex::Real qr =
      k_f *
      exp(-(
        g_RT[0] - 2.950000 * g_RT[1] - 0.390000 * g_RT[4] - 0.195000 * g_RT[6] -
        0.183333 * g_RT[7] - 0.150000 * g_RT[8] - g_RT[9] - g_RT[18])) *
      (pow(refCinv, 4.868333)) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 2.950000 * qdot;
    wdot[4] += 0.390000 * qdot;
    wdot[6] += 0.195000 * qdot;
    wdot[7] += 0.183333 * qdot;
    wdot[8] += 0.150000 * qdot;
    wdot[9] += qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 1:  H + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
    // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2 + 0.243083 iC4H8
    const amrex::Real k_f =
      1.53e-07 * exp((4.76) * tc[0] - (651.615260550532) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[9]);
    const amrex::Real qr = k_f *
                           exp(-(
                             g_RT[0] - 2.830833 * g_RT[1] - 0.050000 * g_RT[2] -
                             g_RT[3] - 0.486167 * g_RT[4] - 0.243083 * g_RT[6] -
                             0.192500 * g_RT[7] - 0.157500 * g_RT[8] + g_RT[9] -
                             0.400000 * g_RT[9] - 0.600000 * g_RT[18])) *
                           (pow(refCinv, 3.960083)) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 2.830833 * qdot;
    wdot[2] += 0.050000 * qdot;
    wdot[3] += qdot;
    wdot[4] += 0.486167 * qdot;
    wdot[6] += 0.243083 * qdot;
    wdot[7] += 0.192500 * qdot;
    wdot[8] += 0.157500 * qdot;
    wdot[9] -= qdot;
    wdot[9] += qdot;
    wdot[9] -= 0.400000 * qdot;
    wdot[9] += 0.400000 * qdot;
    wdot[18] += 0.600000 * qdot;
  }

  {
    // reaction 2:  CH3 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
    // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 1.05 CH4 + 0.4 H + 0.243083 iC4H8
    const amrex::Real k_f =
      9.52e-13 * exp((5.95) * tc[0] - (2389.47401590713) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[18]);
    const amrex::Real qr =
      k_f *
      exp(-(
        g_RT[0] - 2.830833 * g_RT[1] - 1.050000 * g_RT[2] - 0.486167 * g_RT[4] -
        0.243083 * g_RT[6] - 0.192500 * g_RT[7] - 0.157500 * g_RT[8] -
        0.400000 * g_RT[9] + g_RT[18] - 0.600000 * g_RT[18])) *
      (pow(refCinv, 3.960083)) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 2.830833 * qdot;
    wdot[2] += 1.050000 * qdot;
    wdot[4] += 0.486167 * qdot;
    wdot[6] += 0.243083 * qdot;
    wdot[7] += 0.192500 * qdot;
    wdot[8] += 0.157500 * qdot;
    wdot[9] += 0.400000 * qdot;
    wdot[18] -= 0.600000 * qdot;
    wdot[18] += 0.600000 * qdot;
    wdot[18] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 3:  OH + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
    // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2O + 0.243083 iC4H8
    const amrex::Real k_f =
      35500 * exp((1.02) * tc[0] - (107.285793149566) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[11]);
    const amrex::Real qr =
      k_f *
      exp(-(
        g_RT[0] - 2.830833 * g_RT[1] - 0.050000 * g_RT[2] - 0.486167 * g_RT[4] -
        0.243083 * g_RT[6] - 0.192500 * g_RT[7] - 0.157500 * g_RT[8] -
        0.400000 * g_RT[9] + g_RT[11] - g_RT[13] - 0.600000 * g_RT[18])) *
      (pow(refCinv, 3.960083)) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 2.830833 * qdot;
    wdot[2] += 0.050000 * qdot;
    wdot[4] += 0.486167 * qdot;
    wdot[6] += 0.243083 * qdot;
    wdot[7] += 0.192500 * qdot;
    wdot[8] += 0.157500 * qdot;
    wdot[9] += 0.400000 * qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[18] += 0.600000 * qdot;
  }

  {
    // reaction 4:  O2 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
    // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + HO2 + 0.243083 iC4H8
    const amrex::Real k_f =
      255000000 * exp((0.06) * tc[0] - (23919.1964890294) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[15]);
    const amrex::Real qr =
      k_f *
      exp(-(
        g_RT[0] - 2.830833 * g_RT[1] - 0.050000 * g_RT[2] - 0.486167 * g_RT[4] -
        0.243083 * g_RT[6] - 0.192500 * g_RT[7] - 0.157500 * g_RT[8] -
        0.400000 * g_RT[9] - g_RT[12] + g_RT[15] - 0.600000 * g_RT[18])) *
      (pow(refCinv, 3.960083)) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 2.830833 * qdot;
    wdot[2] += 0.050000 * qdot;
    wdot[4] += 0.486167 * qdot;
    wdot[6] += 0.243083 * qdot;
    wdot[7] += 0.192500 * qdot;
    wdot[8] += 0.157500 * qdot;
    wdot[9] += 0.400000 * qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[18] += 0.600000 * qdot;
  }

  {
    // reaction 5:  HO2 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
    // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2O2 + 0.243083
    // iC4H8
    const amrex::Real k_f =
      0.0233 * exp((2.94) * tc[0] - (7452.6388205679) * invT);
    const amrex::Real qf = k_f * (sc[0] * sc[12]);
    const amrex::Real qr =
      k_f *
      exp(-(
        g_RT[0] - 2.830833 * g_RT[1] - 0.050000 * g_RT[2] - 0.486167 * g_RT[4] -
        0.243083 * g_RT[6] - 0.192500 * g_RT[7] - 0.157500 * g_RT[8] -
        0.400000 * g_RT[9] + g_RT[12] - g_RT[14] - 0.600000 * g_RT[18])) *
      (pow(refCinv, 3.960083)) * (0.0);
    const amrex::Real qdot = qf - qr;
    wdot[0] -= qdot;
    wdot[1] += 2.830833 * qdot;
    wdot[2] += 0.050000 * qdot;
    wdot[4] += 0.486167 * qdot;
    wdot[6] += 0.243083 * qdot;
    wdot[7] += 0.192500 * qdot;
    wdot[8] += 0.157500 * qdot;
    wdot[9] += 0.400000 * qdot;
    wdot[12] -= qdot;
    wdot[14] += qdot;
    wdot[18] += 0.600000 * qdot;
  }

  {
    // reaction 6:  H + O2 <=> O + OH
    const amrex::Real k_f =
      26440000000 * exp((-0.6707) * tc[0] - (8575.31520197823) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[10] - g_RT[11] + g_RT[15])) *
                           (sc[10] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[10] += qdot;
    wdot[11] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 7:  H2 + O <=> H + OH
    const amrex::Real k_f =
      0.04589 * exp((2.7) * tc[0] - (3150.13632793755) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[10] - g_RT[11])) * (sc[9] * sc[11]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
  }

  {
    // reaction 8:  H2 + OH <=> H + H2O
    const amrex::Real k_f =
      173.4 * exp((1.51) * tc[0] - (1726.03316371019) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[11]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[11] - g_RT[13])) * (sc[9] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 9:  2 OH <=> H2O + O
    const amrex::Real k_f =
      0.03973 * exp((2.4) * tc[0] - (-1061.78716484796) * invT);
    const amrex::Real qf = k_f * ((sc[11] * sc[11]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[13])) *
                           (sc[10] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[11] -= 2.000000 * qdot;
    wdot[13] += qdot;
  }

  {
    // reaction 16:  H2 + O2 <=> H + HO2
    const amrex::Real k_f =
      0.5916 * exp((2.433) * tc[0] - (26923.0980538841) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[15]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] - g_RT[12] + g_RT[15])) * (sc[9] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
  }

  {
    // reaction 18:  H + HO2 <=> 2 OH
    const amrex::Real k_f = 74850000 * exp(-(148.448916412392) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - 2.000000 * g_RT[11] + g_RT[12])) *
                           ((sc[11] * sc[11]));
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[11] += 2.000000 * qdot;
    wdot[12] -= qdot;
  }

  {
    // reaction 19:  HO2 + O <=> O2 + OH
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[10] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] + g_RT[12] - g_RT[15])) *
                           (sc[11] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 20:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 130000 * exp(-(-820.243165261693) * invT);
    const amrex::Real qf = k_f * ((sc[12] * sc[12]));
    const amrex::Real qr = k_f *
                           exp(-(2.000000 * g_RT[12] - g_RT[14] - g_RT[15])) *
                           (sc[14] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= 2.000000 * qdot;
    wdot[14] += qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 21:  2 HO2 <=> H2O2 + O2
    const amrex::Real k_f = 365800000 * exp(-(6038.59998965664) * invT);
    const amrex::Real qf = k_f * ((sc[12] * sc[12]));
    const amrex::Real qr = k_f *
                           exp(-(2.000000 * g_RT[12] - g_RT[14] - g_RT[15])) *
                           (sc[14] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= 2.000000 * qdot;
    wdot[14] += qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 22:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      1410000000000 * exp((-1.76) * tc[0] - (30.1929999482832) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15])) *
                           (sc[13] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 23:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      5.37e+64 * exp((-16.72) * tc[0] - (16555.8283049753) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15])) *
                           (sc[13] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 24:  HO2 + OH <=> H2O + O2
    const amrex::Real k_f =
      2510000 * exp((2) * tc[0] - (20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[12]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15])) *
                           (sc[13] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] -= qdot;
    wdot[13] += qdot;
    wdot[15] += qdot;
  }

  {
    // reaction 25:  H + H2O2 <=> H2 + HO2
    const amrex::Real k_f = 6.05 * exp((2) * tc[0] - (2616.72666218454) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[14]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[12] + g_RT[14])) * (sc[3] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 26:  H + H2O2 <=> H2O + OH
    const amrex::Real k_f = 24100000 * exp(-(1997.77016324474) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[11] - g_RT[13] + g_RT[14])) *
                           (sc[11] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[11] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 27:  H2O2 + OH <=> H2O + HO2
    const amrex::Real k_f =
      2.67e+35 * exp((-7) * tc[0] - (18920.9466342575) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[14]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[14])) *
                           (sc[12] * sc[13]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[12] += qdot;
    wdot[13] += qdot;
    wdot[14] -= qdot;
  }

  {
    // reaction 29:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      0.07046 * exp((2.053) * tc[0] - (-178.979071526765) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[11] + g_RT[22] - g_RT[23])) *
                           (sc[9] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[11] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 30:  CO + OH <=> CO2 + H
    const amrex::Real k_f =
      5757000 * exp((-0.664) * tc[0] - (166.98238621398) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[11] + g_RT[22] - g_RT[23])) *
                           (sc[9] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[11] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 31:  CO + O2 <=> CO2 + O
    const amrex::Real k_f = 1119000 * exp(-(24003.4349588851) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[15] + g_RT[22] - g_RT[23])) *
                           (sc[10] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[15] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 32:  CO + HO2 <=> CO2 + OH
    const amrex::Real k_f =
      0.157 * exp((2.18) * tc[0] - (9029.02038003442) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] + g_RT[22] - g_RT[23])) *
                           (sc[11] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[22] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 33:  H + HCO <=> CO + H2
    const amrex::Real k_f = 120000000;
    const amrex::Real qf = k_f * (sc[9] * sc[19]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] + g_RT[19] - g_RT[22])) * (sc[3] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 34:  HCO + O <=> CO + OH
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[10] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] + g_RT[19] - g_RT[22])) *
                           (sc[11] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 35:  HCO + O <=> CO2 + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[10] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[19] - g_RT[23])) *
                           (sc[9] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[19] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 36:  HCO + OH <=> CO + H2O
    const amrex::Real k_f = 30200000;
    const amrex::Real qf = k_f * (sc[11] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[13] + g_RT[19] - g_RT[22])) *
                           (sc[13] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 39:  HCO + O2 <=> CO + HO2
    const amrex::Real k_f =
      12040 * exp((0.807) * tc[0] - (-365.838516040031) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[15] + g_RT[19] - g_RT[22])) *
                           (sc[12] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 43:  CH2 + O <=> H + HCO
    const amrex::Real k_f = 80000000;
    const amrex::Real qf = k_f * (sc[10] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[16] - g_RT[19])) *
                           (sc[9] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[16] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 44:  CH2 + OH <=> CH2O + H
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[11] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[11] + g_RT[16] - g_RT[20])) *
                           (sc[9] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[11] -= qdot;
    wdot[16] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 45:  CH2 + H2 <=> CH3 + H
    const amrex::Real k_f = 0.5 * exp((2) * tc[0] - (3638.25649376812) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[16] - g_RT[18])) * (sc[9] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[16] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 46:  CH2 + O2 <=> HCO + OH
    const amrex::Real k_f = 10600000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[16]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[15] + g_RT[16] - g_RT[19])) *
                           (sc[11] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[15] -= qdot;
    wdot[16] -= qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 47:  CH2 + O2 <=> CO2 + 2 H
    const amrex::Real k_f = 2640000 * exp(-(754.82499870708) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(-2.000000 * g_RT[9] + g_RT[15] + g_RT[16] - g_RT[23])) *
      (refCinv) * ((sc[9] * sc[9]) * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += 2.000000 * qdot;
    wdot[15] -= qdot;
    wdot[16] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 49:  CH2* + N2 <=> CH2 + N2
    const amrex::Real k_f = 15000000 * exp(-(301.929999482832) * invT);
    const amrex::Real qf = k_f * (sc[17] * sc[37]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[16] + g_RT[17] + g_RT[37] - g_RT[37])) *
                           (sc[16] * sc[37]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[37] -= qdot;
    wdot[37] += qdot;
  }

  {
    // reaction 50:  CH2* + O <=> CO + H2
    const amrex::Real k_f = 15000000;
    const amrex::Real qf = k_f * (sc[10] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[3] + g_RT[10] + g_RT[17] - g_RT[22])) *
                           (sc[3] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[10] -= qdot;
    wdot[17] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 51:  CH2* + OH <=> CH2O + H
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[11] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[11] + g_RT[17] - g_RT[20])) *
                           (sc[9] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[11] -= qdot;
    wdot[17] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 52:  CH2* + H2 <=> CH3 + H
    const amrex::Real k_f = 70000000;
    const amrex::Real qf = k_f * (sc[3] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[9] + g_RT[17] - g_RT[18])) * (sc[9] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[9] += qdot;
    wdot[17] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 53:  CH2* + O2 <=> CO + H + OH
    const amrex::Real k_f = 28000000;
    const amrex::Real qf = k_f * (sc[15] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] - g_RT[11] + g_RT[15] + g_RT[17] - g_RT[22])) *
      (refCinv) * (sc[9] * sc[11] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[11] += qdot;
    wdot[15] -= qdot;
    wdot[17] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 54:  CH2* + O2 <=> CO + H2O
    const amrex::Real k_f = 12000000;
    const amrex::Real qf = k_f * (sc[15] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[13] + g_RT[15] + g_RT[17] - g_RT[22])) *
                           (sc[13] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[13] += qdot;
    wdot[15] -= qdot;
    wdot[17] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 55:  CH2* + H2O <=> CH2 + H2O
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[13] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[13] - g_RT[13] - g_RT[16] + g_RT[17])) *
                           (sc[13] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[13] -= qdot;
    wdot[13] += qdot;
    wdot[16] += qdot;
    wdot[17] -= qdot;
  }

  {
    // reaction 56:  CH2* + CO <=> CH2 + CO
    const amrex::Real k_f = 9000000;
    const amrex::Real qf = k_f * (sc[17] * sc[22]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[16] + g_RT[17] + g_RT[22] - g_RT[22])) *
                           (sc[16] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[22] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 57:  CH2* + CO2 <=> CH2 + CO2
    const amrex::Real k_f = 7000000;
    const amrex::Real qf = k_f * (sc[17] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[16] + g_RT[17] + g_RT[23] - g_RT[23])) *
                           (sc[16] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[16] += qdot;
    wdot[17] -= qdot;
    wdot[23] -= qdot;
    wdot[23] += qdot;
  }

  {
    // reaction 58:  CH2* + CO2 <=> CH2O + CO
    const amrex::Real k_f = 14000000;
    const amrex::Real qf = k_f * (sc[17] * sc[23]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[17] - g_RT[20] - g_RT[22] + g_RT[23])) *
                           (sc[20] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[17] -= qdot;
    wdot[20] += qdot;
    wdot[22] += qdot;
    wdot[23] -= qdot;
  }

  {
    // reaction 60:  CH2O + H <=> H2 + HCO
    const amrex::Real k_f =
      23000 * exp((1.05) * tc[0] - (1648.03458051046) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[20]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[19] + g_RT[20])) * (sc[3] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 61:  CH2O + O <=> HCO + OH
    const amrex::Real k_f = 39000000 * exp(-(1781.38699694871) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[19] + g_RT[20])) *
                           (sc[11] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 62:  CH2O + OH <=> H2O + HCO
    const amrex::Real k_f =
      3430 * exp((1.18) * tc[0] - (-224.93784961471) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[13] - g_RT[19] + g_RT[20])) *
                           (sc[13] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 63:  CH2O + O2 <=> HCO + HO2
    const amrex::Real k_f = 100000000 * exp(-(20128.6666321888) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[15] - g_RT[19] + g_RT[20])) *
                           (sc[12] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 64:  CH2O + HO2 <=> H2O2 + HCO
    const amrex::Real k_f = 1000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[12] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[12] - g_RT[14] - g_RT[19] + g_RT[20])) *
                           (sc[14] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[12] -= qdot;
    wdot[14] += qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 66:  CH3 + O <=> CH2O + H
    const amrex::Real k_f = 84300000;
    const amrex::Real qf = k_f * (sc[10] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[20])) *
                           (sc[9] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 67:  CH3 + OH <=> CH2 + H2O
    const amrex::Real k_f = 56 * exp((1.6) * tc[0] - (2727.43432866158) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[13] - g_RT[16] + g_RT[18])) *
                           (sc[13] * sc[16]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[16] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 68:  CH3 + OH <=> CH2* + H2O
    const amrex::Real k_f = 25010000;
    const amrex::Real qf = k_f * (sc[11] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[13] - g_RT[17] + g_RT[18])) *
                           (sc[13] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[17] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 69:  CH3 + O2 <=> CH3O + O
    const amrex::Real k_f = 30830000 * exp(-(14492.6399751759) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[15] + g_RT[18] - g_RT[21])) *
                           (sc[10] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[15] -= qdot;
    wdot[18] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 70:  CH3 + O2 <=> CH2O + OH
    const amrex::Real k_f = 36000 * exp(-(4498.75699229419) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[15] + g_RT[18] - g_RT[20])) *
                           (sc[11] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[15] -= qdot;
    wdot[18] -= qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 71:  CH3 + HO2 <=> CH4 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[12] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[12] - g_RT[15] + g_RT[18])) *
                           (sc[2] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] -= qdot;
    wdot[15] += qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 72:  CH3 + HO2 <=> CH3O + OH
    const amrex::Real k_f = 13400000;
    const amrex::Real qf = k_f * (sc[12] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[11] + g_RT[12] + g_RT[18] - g_RT[21])) *
                           (sc[11] * sc[21]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[18] -= qdot;
    wdot[21] += qdot;
  }

  {
    // reaction 73:  CH3 + H2O2 <=> CH4 + HO2
    const amrex::Real k_f =
      0.0245 * exp((2.47) * tc[0] - (2606.66232886845) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[18]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] - g_RT[12] + g_RT[14] + g_RT[18])) *
                           (sc[2] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[12] += qdot;
    wdot[14] -= qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 74:  CH3 + HCO <=> CH4 + CO
    const amrex::Real k_f = 8480000;
    const amrex::Real qf = k_f * (sc[18] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[18] + g_RT[19] - g_RT[22])) *
                           (sc[2] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[18] -= qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
  }

  {
    // reaction 75:  CH2O + CH3 <=> CH4 + HCO
    const amrex::Real k_f =
      0.00332 * exp((2.81) * tc[0] - (2948.84966161566) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[20]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[18] - g_RT[19] + g_RT[20])) *
                           (sc[2] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[18] -= qdot;
    wdot[19] += qdot;
    wdot[20] -= qdot;
  }

  {
    // reaction 76:  CH2 + CH3 <=> C2H4 + H
    const amrex::Real k_f = 40000000;
    const amrex::Real qf = k_f * (sc[16] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] - g_RT[9] + g_RT[16] + g_RT[18])) * (sc[1] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[9] += qdot;
    wdot[16] -= qdot;
    wdot[18] -= qdot;
  }

  {
    // reaction 78:  2 CH3 <=> C2H5 + H
    const amrex::Real k_f =
      4990000 * exp((0.1) * tc[0] - (5334.09665753003) * invT);
    const amrex::Real qf = k_f * ((sc[18] * sc[18]));
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + 2.000000 * g_RT[18] - g_RT[26])) *
                           (sc[9] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[18] -= 2.000000 * qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 79:  CH3 + HCCO <=> C2H4 + CO
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[18] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] + g_RT[18] - g_RT[22] + g_RT[28])) *
                           (sc[1] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[18] -= qdot;
    wdot[22] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 80:  CH3O + H <=> CH2O + H2
    const amrex::Real k_f = 20000000;
    const amrex::Real qf = k_f * (sc[9] * sc[21]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[20] + g_RT[21])) * (sc[3] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 81:  CH3O + H <=> CH3 + OH
    const amrex::Real k_f = 32000000;
    const amrex::Real qf = k_f * (sc[9] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[11] - g_RT[18] + g_RT[21])) *
                           (sc[11] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[11] += qdot;
    wdot[18] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 82:  CH3O + H <=> CH2* + H2O
    const amrex::Real k_f = 16000000;
    const amrex::Real qf = k_f * (sc[9] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[13] - g_RT[17] + g_RT[21])) *
                           (sc[13] * sc[17]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[13] += qdot;
    wdot[17] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 83:  CH3O + OH <=> CH2O + H2O
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[11] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[13] - g_RT[20] + g_RT[21])) *
                           (sc[13] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 84:  CH3O + O2 <=> CH2O + HO2
    const amrex::Real k_f =
      4.28e-19 * exp((7.6) * tc[0] - (-1776.35483029066) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[21]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[15] - g_RT[20] + g_RT[21])) *
                           (sc[12] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[20] += qdot;
    wdot[21] -= qdot;
  }

  {
    // reaction 85:  CH4 + H <=> CH3 + H2
    const amrex::Real k_f =
      660 * exp((1.62) * tc[0] - (5454.86865732316) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[3] + g_RT[9] - g_RT[18])) * (sc[3] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 86:  CH4 + O <=> CH3 + OH
    const amrex::Real k_f =
      1020 * exp((1.5) * tc[0] - (4327.66332592059) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] + g_RT[10] - g_RT[11] - g_RT[18])) *
                           (sc[11] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 87:  CH4 + OH <=> CH3 + H2O
    const amrex::Real k_f =
      100 * exp((1.6) * tc[0] - (1570.03599731073) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] + g_RT[11] - g_RT[13] - g_RT[18])) *
                           (sc[13] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 88:  CH2* + CH4 <=> 2 CH3
    const amrex::Real k_f = 16000000 * exp(-(-286.83349950869) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[17]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[2] + g_RT[17] - 2.000000 * g_RT[18])) *
                           ((sc[18] * sc[18]));
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[17] -= qdot;
    wdot[18] += 2.000000 * qdot;
  }

  {
    // reaction 89:  H + HCCO <=> CH2* + CO
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[9] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[17] - g_RT[22] + g_RT[28])) *
                           (sc[17] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[17] += qdot;
    wdot[22] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 90:  HCCO + O <=> 2 CO + H
    const amrex::Real k_f = 100000000;
    const amrex::Real qf = k_f * (sc[10] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] + g_RT[10] - 2.000000 * g_RT[22] + g_RT[28])) *
      (refCinv) * (sc[9] * (sc[22] * sc[22]));
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[22] += 2.000000 * qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 91:  HCCO + O2 <=> 2 CO + OH
    const amrex::Real k_f = 1600000 * exp(-(429.747032597231) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[28]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[11] + g_RT[15] - 2.000000 * g_RT[22] + g_RT[28])) *
      (refCinv) * (sc[11] * (sc[22] * sc[22]));
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[15] -= qdot;
    wdot[22] += 2.000000 * qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 92:  CH2 + HCCO <=> C2H3 + CO
    const amrex::Real k_f = 30000000;
    const amrex::Real qf = k_f * (sc[16] * sc[28]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[16] - g_RT[22] - g_RT[25] + g_RT[28])) *
                           (sc[22] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[16] -= qdot;
    wdot[22] += qdot;
    wdot[25] += qdot;
    wdot[28] -= qdot;
  }

  {
    // reaction 94:  C2H2 + O <=> CH2 + CO
    const amrex::Real k_f = 4.08 * exp((2) * tc[0] - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[16] - g_RT[22] + g_RT[24])) *
                           (sc[16] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[16] += qdot;
    wdot[22] += qdot;
    wdot[24] -= qdot;
  }

  {
    // reaction 95:  C2H2 + O <=> H + HCCO
    const amrex::Real k_f =
      16.32 * exp((2) * tc[0] - (956.111665028967) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[24] - g_RT[28])) *
                           (sc[9] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[24] -= qdot;
    wdot[28] += qdot;
  }

  {
    // reaction 96:  C2H2 + OH <=> CH2CO + H
    const amrex::Real k_f =
      2.18e-10 * exp((4.5) * tc[0] - (-503.21666580472) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[11] + g_RT[24] - g_RT[29])) *
                           (sc[9] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[11] -= qdot;
    wdot[24] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 97:  C2H2 + HCO <=> C2H3 + CO
    const amrex::Real k_f = 10 * exp((2) * tc[0] - (3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[19] * sc[24]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[19] - g_RT[22] + g_RT[24] - g_RT[25])) *
                           (sc[22] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[22] += qdot;
    wdot[24] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 98:  C2H2 + CH3 <=> aC3H5
    const amrex::Real k_f =
      4.4e+43 * exp((-11.4) * tc[0] - (18468.0516350332) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[24]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[18] + g_RT[24] - g_RT[31])) * (refC) * (sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[18] -= qdot;
    wdot[24] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 100:  CH2CO + H <=> H2 + HCCO
    const amrex::Real k_f = 50000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[29]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[28] + g_RT[29])) * (sc[3] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 101:  CH2CO + H <=> CH3 + CO
    const amrex::Real k_f =
      1500 * exp((1.43) * tc[0] - (1353.6528310147) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[18] - g_RT[22] + g_RT[29])) *
                           (sc[18] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[18] += qdot;
    wdot[22] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 102:  CH2CO + O <=> HCCO + OH
    const amrex::Real k_f = 10000000 * exp(-(4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[28] + g_RT[29])) *
                           (sc[11] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 103:  CH2CO + O <=> CH2 + CO2
    const amrex::Real k_f = 1750000 * exp(-(679.342498836372) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[16] - g_RT[23] + g_RT[29])) *
                           (sc[16] * sc[23]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[16] += qdot;
    wdot[23] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 104:  CH2CO + OH <=> H2O + HCCO
    const amrex::Real k_f = 7500000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[29]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[13] - g_RT[28] + g_RT[29])) *
                           (sc[13] * sc[28]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[28] += qdot;
    wdot[29] -= qdot;
  }

  {
    // reaction 106:  C2H3 + H <=> C2H2 + H2
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[9] * sc[25]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[24] + g_RT[25])) * (sc[3] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 107:  C2H3 + O <=> CH2CO + H
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[10] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[25] - g_RT[29])) *
                           (sc[9] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[25] -= qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 108:  C2H3 + O <=> CH3 + CO
    const amrex::Real k_f = 48000000;
    const amrex::Real qf = k_f * (sc[10] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[18] - g_RT[22] + g_RT[25])) *
                           (sc[18] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[18] += qdot;
    wdot[22] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 109:  C2H3 + OH <=> C2H2 + H2O
    const amrex::Real k_f = 30110000;
    const amrex::Real qf = k_f * (sc[11] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[13] - g_RT[24] + g_RT[25])) *
                           (sc[13] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 110:  C2H3 + O2 <=> C2H2 + HO2
    const amrex::Real k_f =
      1.34 * exp((1.61) * tc[0] - (-192.93326966953) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[15] - g_RT[24] + g_RT[25])) *
                           (sc[12] * sc[24]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[24] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 111:  C2H3 + O2 <=> CH2CHO + O
    const amrex::Real k_f =
      300000 * exp((0.29) * tc[0] - (5.53538332385192) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[10] + g_RT[15] + g_RT[25] - g_RT[30])) *
                           (sc[10] * sc[30]);
    const amrex::Real qdot = qf - qr;
    wdot[10] += qdot;
    wdot[15] -= qdot;
    wdot[25] -= qdot;
    wdot[30] += qdot;
  }

  {
    // reaction 112:  C2H3 + O2 <=> CH2O + HCO
    const amrex::Real k_f =
      46000000000 * exp((-1.39) * tc[0] - (508.248832462767) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[15] - g_RT[19] - g_RT[20] + g_RT[25])) *
                           (sc[19] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[15] -= qdot;
    wdot[19] += qdot;
    wdot[20] += qdot;
    wdot[25] -= qdot;
  }

  {
    // reaction 114:  C2H3 + CH3 <=> H + aC3H5
    const amrex::Real k_f =
      1.5e+18 * exp((-2.83) * tc[0] - (9368.88788395227) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[25]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[18] + g_RT[25] - g_RT[31])) *
                           (sc[9] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[18] -= qdot;
    wdot[25] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 115:  CH2CHO <=> CH3 + CO
    const amrex::Real k_f =
      1.2e+37 * exp((-7.456) * tc[0] - (23198.2882935976) * invT);
    const amrex::Real qf = k_f * (sc[30]);
    const amrex::Real qr = k_f * exp(-(-g_RT[18] - g_RT[22] + g_RT[30])) *
                           (refCinv) * (sc[18] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[18] += qdot;
    wdot[22] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 116:  CH2CHO + H <=> CH3 + HCO
    const amrex::Real k_f = 90000000;
    const amrex::Real qf = k_f * (sc[9] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[18] - g_RT[19] + g_RT[30])) *
                           (sc[18] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[18] += qdot;
    wdot[19] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 117:  CH2CHO + H <=> CH2CO + H2
    const amrex::Real k_f = 20000000 * exp(-(2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[30]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[29] + g_RT[30])) * (sc[3] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 118:  CH2CHO + O <=> CH2CO + OH
    const amrex::Real k_f = 20000000 * exp(-(2012.86666321888) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[29] + g_RT[30])) *
                           (sc[11] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 119:  CH2CHO + OH <=> CH2CO + H2O
    const amrex::Real k_f = 10000000 * exp(-(1006.43333160944) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[13] - g_RT[29] + g_RT[30])) *
                           (sc[13] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 120:  CH2CHO + O2 <=> CH2CO + HO2
    const amrex::Real k_f = 140000;
    const amrex::Real qf = k_f * (sc[15] * sc[30]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[15] - g_RT[29] + g_RT[30])) *
                           (sc[12] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[29] += qdot;
    wdot[30] -= qdot;
  }

  {
    // reaction 122:  C2H4 + H <=> C2H3 + H2
    const amrex::Real k_f =
      50.7 * exp((1.9) * tc[0] - (6516.65582217112) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[3] + g_RT[9] - g_RT[25])) * (sc[3] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 123:  C2H4 + O <=> C2H3 + OH
    const amrex::Real k_f =
      15.1 * exp((1.9) * tc[0] - (1882.03033010965) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[10] - g_RT[11] - g_RT[25])) *
                           (sc[11] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 124:  C2H4 + O <=> CH3 + HCO
    const amrex::Real k_f =
      19.2 * exp((1.83) * tc[0] - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[10] - g_RT[18] - g_RT[19])) *
                           (sc[18] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[10] -= qdot;
    wdot[18] += qdot;
    wdot[19] += qdot;
  }

  {
    // reaction 125:  C2H4 + O <=> CH2 + CH2O
    const amrex::Real k_f =
      0.384 * exp((1.83) * tc[0] - (110.707666477038) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[10] - g_RT[16] - g_RT[20])) *
                           (sc[16] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[10] -= qdot;
    wdot[16] += qdot;
    wdot[20] += qdot;
  }

  {
    // reaction 126:  C2H4 + OH <=> C2H3 + H2O
    const amrex::Real k_f = 3.6 * exp((2) * tc[0] - (1258.0416645118) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[11] - g_RT[13] - g_RT[25])) *
                           (sc[13] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 127:  C2H4 + HCO <=> C2H5 + CO
    const amrex::Real k_f = 10 * exp((2) * tc[0] - (4025.73332643776) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[19]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] + g_RT[19] - g_RT[22] - g_RT[26])) *
                           (sc[22] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 128:  C2H4 + CH2 <=> H + aC3H5
    const amrex::Real k_f = 20000000 * exp(-(3019.29999482832) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[16]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[9] + g_RT[16] - g_RT[31])) * (sc[9] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] += qdot;
    wdot[16] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 129:  C2H4 + CH2* <=> H + aC3H5
    const amrex::Real k_f = 50000000;
    const amrex::Real qf = k_f * (sc[1] * sc[17]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[9] + g_RT[17] - g_RT[31])) * (sc[9] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[9] += qdot;
    wdot[17] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 130:  C2H4 + CH3 <=> C2H3 + CH4
    const amrex::Real k_f =
      0.227 * exp((2) * tc[0] - (4629.59332540342) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[1] - g_RT[2] + g_RT[18] - g_RT[25])) * (sc[2] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[2] += qdot;
    wdot[18] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 131:  C2H4 + O2 <=> C2H3 + HO2
    const amrex::Real k_f = 42200000 * exp(-(30595.573280927) * invT);
    const amrex::Real qf = k_f * (sc[1] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[1] - g_RT[12] + g_RT[15] - g_RT[25])) *
                           (sc[12] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[1] -= qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[25] += qdot;
  }

  {
    // reaction 133:  C2H5 + H <=> C2H4 + H2
    const amrex::Real k_f = 2000000;
    const amrex::Real qf = k_f * (sc[9] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] - g_RT[3] + g_RT[9] + g_RT[26])) * (sc[1] * sc[3]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 134:  C2H5 + O <=> CH2O + CH3
    const amrex::Real k_f = 16040000;
    const amrex::Real qf = k_f * (sc[10] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[18] - g_RT[20] + g_RT[26])) *
                           (sc[18] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[18] += qdot;
    wdot[20] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 135:  C2H5 + O2 <=> C2H4 + HO2
    const amrex::Real k_f = 20000;
    const amrex::Real qf = k_f * (sc[15] * sc[26]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[1] - g_RT[12] + g_RT[15] + g_RT[26])) *
                           (sc[1] * sc[12]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 136:  C2H5 + HO2 <=> CH2O + CH3 + OH
    const amrex::Real k_f = 24000000;
    const amrex::Real qf = k_f * (sc[12] * sc[26]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[11] + g_RT[12] - g_RT[18] - g_RT[20] + g_RT[26])) *
      (refCinv) * (sc[11] * sc[18] * sc[20]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[18] += qdot;
    wdot[20] += qdot;
    wdot[26] -= qdot;
  }

  {
    // reaction 138:  C2H6 + H <=> C2H5 + H2
    const amrex::Real k_f =
      115 * exp((1.9) * tc[0] - (3789.22149350954) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[27]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[26] + g_RT[27])) * (sc[3] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[26] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 139:  C2H6 + O <=> C2H5 + OH
    const amrex::Real k_f =
      89.8 * exp((1.92) * tc[0] - (2863.30282842885) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[26] + g_RT[27])) *
                           (sc[11] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[26] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 140:  C2H6 + OH <=> C2H5 + H2O
    const amrex::Real k_f =
      3.54 * exp((2.12) * tc[0] - (437.798499250106) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[13] - g_RT[26] + g_RT[27])) *
                           (sc[13] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[26] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 141:  C2H6 + CH3 <=> C2H5 + CH4
    const amrex::Real k_f =
      6.14 * exp((1.74) * tc[0] - (5258.61415765932) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[27]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[18] - g_RT[26] + g_RT[27])) *
                           (sc[2] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[18] -= qdot;
    wdot[26] += qdot;
    wdot[27] -= qdot;
  }

  {
    // reaction 143:  HO2 + aC3H5 <=> C3H6 + O2
    const amrex::Real k_f = 2660000;
    const amrex::Real qf = k_f * (sc[12] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[12] - g_RT[15] + g_RT[31])) *
                           (sc[4] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[12] -= qdot;
    wdot[15] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 144:  HO2 + aC3H5 <=> C2H3 + CH2O + OH
    const amrex::Real k_f = 6600000;
    const amrex::Real qf = k_f * (sc[12] * sc[31]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[11] + g_RT[12] - g_RT[20] - g_RT[25] + g_RT[31])) *
      (refCinv) * (sc[11] * sc[20] * sc[25]);
    const amrex::Real qdot = qf - qr;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[20] += qdot;
    wdot[25] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 145:  HCO + aC3H5 <=> C3H6 + CO
    const amrex::Real k_f = 60000000;
    const amrex::Real qf = k_f * (sc[19] * sc[31]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[4] + g_RT[19] - g_RT[22] + g_RT[31])) *
                           (sc[4] * sc[22]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[19] -= qdot;
    wdot[22] += qdot;
    wdot[31] -= qdot;
  }

  {
    // reaction 147:  C3H6 + H <=> C2H4 + CH3
    const amrex::Real k_f =
      3.3e+18 * exp((-3.04) * tc[0] - (7855.21215321167) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[18])) * (sc[1] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[4] -= qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 148:  C3H6 + H <=> H2 + aC3H5
    const amrex::Real k_f =
      0.173 * exp((2.5) * tc[0] - (1253.00949785375) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[4] + g_RT[9] - g_RT[31])) * (sc[3] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[4] -= qdot;
    wdot[9] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 149:  C3H6 + O <=> CH2CO + CH3 + H
    const amrex::Real k_f =
      80 * exp((1.65) * tc[0] - (164.551849718143) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[4] - g_RT[9] + g_RT[10] - g_RT[18] - g_RT[29])) *
      (refCinv) * (sc[9] * sc[18] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[18] += qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 150:  C3H6 + O <=> C2H5 + HCO
    const amrex::Real k_f =
      35 * exp((1.65) * tc[0] - (-489.126599162188) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] + g_RT[10] - g_RT[19] - g_RT[26])) *
                           (sc[19] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] -= qdot;
    wdot[19] += qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 151:  C3H6 + O <=> OH + aC3H5
    const amrex::Real k_f =
      180000 * exp((0.7) * tc[0] - (2958.91399493175) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[10]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] + g_RT[10] - g_RT[11] - g_RT[31])) *
                           (sc[11] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 152:  C3H6 + OH <=> H2O + aC3H5
    const amrex::Real k_f = 3.1 * exp((2) * tc[0] - (-149.958566409806) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[4] + g_RT[11] - g_RT[13] - g_RT[31])) *
                           (sc[13] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[4] -= qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 153:  C3H6 + CH3 <=> CH4 + aC3H5
    const amrex::Real k_f =
      2.2e-06 * exp((3.5) * tc[0] - (2855.75457844178) * invT);
    const amrex::Real qf = k_f * (sc[4] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[4] + g_RT[18] - g_RT[31])) * (sc[2] * sc[31]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[4] -= qdot;
    wdot[18] -= qdot;
    wdot[31] += qdot;
  }

  {
    // reaction 154:  C4H81 + H <=> C2H4 + C2H5
    const amrex::Real k_f =
      1.6e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[26])) * (sc[1] * sc[26]);
    const amrex::Real qdot = qf - qr;
    wdot[1] += qdot;
    wdot[5] -= qdot;
    wdot[9] -= qdot;
    wdot[26] += qdot;
  }

  {
    // reaction 155:  C4H81 + H <=> C3H6 + CH3
    const amrex::Real k_f =
      3.2e+16 * exp((-2.39) * tc[0] - (5625.96232369677) * invT);
    const amrex::Real qf = k_f * (sc[5] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[5] + g_RT[9] - g_RT[18])) * (sc[4] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[5] -= qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 156:  H + iC4H8 <=> C3H6 + CH3
    const amrex::Real k_f =
      3.3e+18 * exp((-3.04) * tc[0] - (7855.21215321167) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[4] + g_RT[6] + g_RT[9] - g_RT[18])) * (sc[4] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[4] += qdot;
    wdot[6] -= qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 157:  O + iC4H8 <=> CH2CO + 2 CH3
    const amrex::Real k_f =
      120 * exp((1.65) * tc[0] - (164.551849718143) * invT);
    const amrex::Real qf = k_f * (sc[6] * sc[10]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[6] + g_RT[10] - 2.000000 * g_RT[18] - g_RT[29])) *
      (refCinv) * ((sc[18] * sc[18]) * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[6] -= qdot;
    wdot[10] -= qdot;
    wdot[18] += 2.000000 * qdot;
    wdot[29] += qdot;
  }

  {
    // reaction 158:  C6H5 + CH3 <=> C6H5CH3
    const amrex::Real k_f = 13800000 * exp(-(23.1479666270171) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[32]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[8] + g_RT[18] + g_RT[32])) * (refC) * (sc[8]);
    const amrex::Real qdot = qf - qr;
    wdot[8] += qdot;
    wdot[18] -= qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 159:  C6H5CH3 + O2 <=> C6H5CH2 + HO2
    const amrex::Real k_f = 300000000 * exp(-(21634.2908962765) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[15]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] - g_RT[12] + g_RT[15] - g_RT[33])) *
                           (sc[12] * sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[33] += qdot;
  }

  {
    // reaction 160:  C6H5CH3 + OH <=> C6H5CH2 + H2O
    const amrex::Real k_f = 16200000 * exp(-(1393.91016427907) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[8] + g_RT[11] - g_RT[13] - g_RT[33])) *
                           (sc[13] * sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[8] -= qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[33] += qdot;
  }

  {
    // reaction 161:  C6H5CH3 + H <=> C6H5CH2 + H2
    const amrex::Real k_f = 125900000 * exp(-(4206.38810946165) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[33])) * (sc[3] * sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[8] -= qdot;
    wdot[9] -= qdot;
    wdot[33] += qdot;
  }

  {
    // reaction 162:  C6H5CH3 + H <=> C6H6 + CH3
    const amrex::Real k_f =
      1.93 * exp((2.17) * tc[0] - (2094.89097974505) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[9]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[7] + g_RT[8] + g_RT[9] - g_RT[18])) * (sc[7] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[7] += qdot;
    wdot[8] -= qdot;
    wdot[9] -= qdot;
    wdot[18] += qdot;
  }

  {
    // reaction 163:  C6H5CH3 + CH3 <=> C6H5CH2 + CH4
    const amrex::Real k_f = 316000 * exp(-(4780.55832514484) * invT);
    const amrex::Real qf = k_f * (sc[8] * sc[18]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[2] + g_RT[8] + g_RT[18] - g_RT[33])) * (sc[2] * sc[33]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[8] -= qdot;
    wdot[18] -= qdot;
    wdot[33] += qdot;
  }

  {
    // reaction 165:  C6H5CH2 + H <=> C6H5 + CH3
    const amrex::Real k_f =
      1.5e+60 * exp((-13.94) * tc[0] - (32497.7322776688) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[33]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[9] - g_RT[18] - g_RT[32] + g_RT[33])) *
                           (sc[18] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[9] -= qdot;
    wdot[18] += qdot;
    wdot[32] += qdot;
    wdot[33] -= qdot;
  }

  {
    // reaction 166:  C6H5CH2 + O <=> C6H5CHO + H
    const amrex::Real k_f = 400000000;
    const amrex::Real qf = k_f * (sc[10] * sc[33]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[10] + g_RT[33] - g_RT[36])) *
                           (sc[9] * sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[10] -= qdot;
    wdot[33] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 167:  C6H5CH2 + HO2 <=> C6H5CHO + H + OH
    const amrex::Real k_f = 5000000;
    const amrex::Real qf = k_f * (sc[12] * sc[33]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[9] - g_RT[11] + g_RT[12] + g_RT[33] - g_RT[36])) *
      (refCinv) * (sc[9] * sc[11] * sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[11] += qdot;
    wdot[12] -= qdot;
    wdot[33] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 168:  C6H5 + HCO <=> C6H5CHO
    const amrex::Real k_f = 10000000;
    const amrex::Real qf = k_f * (sc[19] * sc[32]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[19] + g_RT[32] - g_RT[36])) * (refC) * (sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[19] -= qdot;
    wdot[32] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 169:  C6H5CHO <=> C6H5CO + H
    const amrex::Real k_f = 3.98e+15 * exp(-(43729.5282584301) * invT);
    const amrex::Real qf = k_f * (sc[36]);
    const amrex::Real qr = k_f * exp(-(-g_RT[9] - g_RT[35] + g_RT[36])) *
                           (refCinv) * (sc[9] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[35] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 170:  C6H5CHO + O2 <=> C6H5CO + HO2
    const amrex::Real k_f = 10200000 * exp(-(19600.2891330938) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[36]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[15] - g_RT[35] + g_RT[36])) *
                           (sc[12] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[15] -= qdot;
    wdot[35] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 171:  C6H5CHO + OH <=> C6H5CO + H2O
    const amrex::Real k_f =
      23500 * exp((0.73) * tc[0] - (-558.570499043239) * invT);
    const amrex::Real qf = k_f * (sc[11] * sc[36]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[11] - g_RT[13] - g_RT[35] + g_RT[36])) *
                           (sc[13] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[35] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 172:  C6H5CHO + H <=> C6H5CO + H2
    const amrex::Real k_f =
      4100 * exp((1.16) * tc[0] - (1207.71999793133) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[36]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[3] + g_RT[9] - g_RT[35] + g_RT[36])) * (sc[3] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[3] += qdot;
    wdot[9] -= qdot;
    wdot[35] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 173:  C6H5CHO + H <=> C6H6 + HCO
    const amrex::Real k_f =
      1.93 * exp((2.17) * tc[0] - (2094.89097974505) * invT);
    const amrex::Real qf = k_f * (sc[9] * sc[36]);
    const amrex::Real qr =
      k_f * exp(-(-g_RT[7] + g_RT[9] - g_RT[19] + g_RT[36])) * (sc[7] * sc[19]);
    const amrex::Real qdot = qf - qr;
    wdot[7] += qdot;
    wdot[9] -= qdot;
    wdot[19] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 174:  C6H5CHO + O <=> C6H5CO + OH
    const amrex::Real k_f = 5800000 * exp(-(905.789998448495) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[36]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[10] - g_RT[11] - g_RT[35] + g_RT[36])) *
                           (sc[11] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[11] += qdot;
    wdot[35] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 175:  C6H5CHO + CH3 <=> C6H5CO + CH4
    const amrex::Real k_f =
      2e-12 * exp((5.6) * tc[0] - (1237.91299787961) * invT);
    const amrex::Real qf = k_f * (sc[18] * sc[36]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[2] + g_RT[18] - g_RT[35] + g_RT[36])) *
                           (sc[2] * sc[35]);
    const amrex::Real qdot = qf - qr;
    wdot[2] += qdot;
    wdot[18] -= qdot;
    wdot[35] += qdot;
    wdot[36] -= qdot;
  }

  {
    // reaction 176:  C6H5CO + H2O2 <=> C6H5CHO + HO2
    const amrex::Real k_f = 180000 * exp(-(4139.46029290962) * invT);
    const amrex::Real qf = k_f * (sc[14] * sc[35]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[12] + g_RT[14] + g_RT[35] - g_RT[36])) *
                           (sc[12] * sc[36]);
    const amrex::Real qdot = qf - qr;
    wdot[12] += qdot;
    wdot[14] -= qdot;
    wdot[35] -= qdot;
    wdot[36] += qdot;
  }

  {
    // reaction 177:  C6H5CO <=> C6H5 + CO
    const amrex::Real k_f = 527000000000000 * exp(-(14599.8251249923) * invT);
    const amrex::Real qf = k_f * (sc[35]);
    const amrex::Real qr = k_f * exp(-(-g_RT[22] - g_RT[32] + g_RT[35])) *
                           (refCinv) * (sc[22] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[22] += qdot;
    wdot[32] += qdot;
    wdot[35] -= qdot;
  }

  {
    // reaction 179:  C6H6 + OH <=> C6H5 + H2O
    const amrex::Real k_f =
      0.3985 * exp((2.286) * tc[0] - (532.403232421393) * invT);
    const amrex::Real qf = k_f * (sc[7] * sc[11]);
    const amrex::Real qr = k_f *
                           exp(-(g_RT[7] + g_RT[11] - g_RT[13] - g_RT[32])) *
                           (sc[13] * sc[32]);
    const amrex::Real qdot = qf - qr;
    wdot[7] -= qdot;
    wdot[11] -= qdot;
    wdot[13] += qdot;
    wdot[32] += qdot;
  }

  {
    // reaction 180:  C6H5 + H2 <=> C6H6 + H
    const amrex::Real k_f =
      0.05707 * exp((2.43) * tc[0] - (3156.67814459301) * invT);
    const amrex::Real qf = k_f * (sc[3] * sc[32]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[3] - g_RT[7] - g_RT[9] + g_RT[32])) * (sc[7] * sc[9]);
    const amrex::Real qdot = qf - qr;
    wdot[3] -= qdot;
    wdot[7] += qdot;
    wdot[9] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 181:  C6H5 + O2 <=> C6H4O2 + H
    const amrex::Real k_f = 30000000 * exp(-(4518.88565892638) * invT);
    const amrex::Real qf = k_f * (sc[15] * sc[32]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[9] + g_RT[15] + g_RT[32] - g_RT[34])) *
                           (sc[9] * sc[34]);
    const amrex::Real qdot = qf - qr;
    wdot[9] += qdot;
    wdot[15] -= qdot;
    wdot[32] -= qdot;
    wdot[34] += qdot;
  }

  {
    // reaction 182:  C6H5 + HO2 <=> C6H6 + O2
    const amrex::Real k_f = 1000000;
    const amrex::Real qf = k_f * (sc[12] * sc[32]);
    const amrex::Real qr = k_f *
                           exp(-(-g_RT[7] + g_RT[12] - g_RT[15] + g_RT[32])) *
                           (sc[7] * sc[15]);
    const amrex::Real qdot = qf - qr;
    wdot[7] += qdot;
    wdot[12] -= qdot;
    wdot[15] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 183:  C6H5 + CH4 <=> C6H6 + CH3
    const amrex::Real k_f =
      3.89e-09 * exp((4.57) * tc[0] - (2644.90679546961) * invT);
    const amrex::Real qf = k_f * (sc[2] * sc[32]);
    const amrex::Real qr =
      k_f * exp(-(g_RT[2] - g_RT[7] - g_RT[18] + g_RT[32])) * (sc[7] * sc[18]);
    const amrex::Real qdot = qf - qr;
    wdot[2] -= qdot;
    wdot[7] += qdot;
    wdot[18] += qdot;
    wdot[32] -= qdot;
  }

  {
    // reaction 184:  C6H4O2 + O <=> C2H2 + CH2CO + 2 CO
    const amrex::Real k_f = 30000000 * exp(-(2516.0833290236) * invT);
    const amrex::Real qf = k_f * (sc[10] * sc[34]);
    const amrex::Real qr =
      k_f *
      exp(-(g_RT[10] - 2.000000 * g_RT[22] - g_RT[24] - g_RT[29] + g_RT[34])) *
      ((refCinv * refCinv)) * ((sc[22] * sc[22]) * sc[24] * sc[29]);
    const amrex::Real qdot = qf - qr;
    wdot[10] -= qdot;
    wdot[22] += 2.000000 * qdot;
    wdot[24] += qdot;
    wdot[29] += qdot;
    wdot[34] -= qdot;
  }

  return;
}

// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWC(amrex::Real* T, amrex::Real* C, amrex::Real* wdot)
{
  int id; // loop counter

  // convert to SI
  for (id = 0; id < 38; ++id) {
    C[id] *= 1.0e6;
  }

  // convert to chemkin units
  productionRate(wdot, C, *T);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    C[id] *= 1.0e-6;
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYP(amrex::Real* P, amrex::Real* T, amrex::Real* y, amrex::Real* wdot)
{
  int id;            // loop counter
  amrex::Real c[38]; // temporary storage
  amrex::Real YOW = 0;
  amrex::Real PWORT;
  amrex::Real imw[38];

  get_imw(imw);

  // Compute inverse of mean molecular wt first
  YOW += y[0] * imw[0];   // POSF10325
  YOW += y[1] * imw[1];   // C2H4
  YOW += y[2] * imw[2];   // CH4
  YOW += y[3] * imw[3];   // H2
  YOW += y[4] * imw[4];   // C3H6
  YOW += y[5] * imw[5];   // C4H81
  YOW += y[6] * imw[6];   // iC4H8
  YOW += y[7] * imw[7];   // C6H6
  YOW += y[8] * imw[8];   // C6H5CH3
  YOW += y[9] * imw[9];   // H
  YOW += y[10] * imw[10]; // O
  YOW += y[11] * imw[11]; // OH
  YOW += y[12] * imw[12]; // HO2
  YOW += y[13] * imw[13]; // H2O
  YOW += y[14] * imw[14]; // H2O2
  YOW += y[15] * imw[15]; // O2
  YOW += y[16] * imw[16]; // CH2
  YOW += y[17] * imw[17]; // CH2*
  YOW += y[18] * imw[18]; // CH3
  YOW += y[19] * imw[19]; // HCO
  YOW += y[20] * imw[20]; // CH2O
  YOW += y[21] * imw[21]; // CH3O
  YOW += y[22] * imw[22]; // CO
  YOW += y[23] * imw[23]; // CO2
  YOW += y[24] * imw[24]; // C2H2
  YOW += y[25] * imw[25]; // C2H3
  YOW += y[26] * imw[26]; // C2H5
  YOW += y[27] * imw[27]; // C2H6
  YOW += y[28] * imw[28]; // HCCO
  YOW += y[29] * imw[29]; // CH2CO
  YOW += y[30] * imw[30]; // CH2CHO
  YOW += y[31] * imw[31]; // aC3H5
  YOW += y[32] * imw[32]; // C6H5
  YOW += y[33] * imw[33]; // C6H5CH2
  YOW += y[34] * imw[34]; // C6H4O2
  YOW += y[35] * imw[35]; // C6H5CO
  YOW += y[36] * imw[36]; // C6H5CHO
  YOW += y[37] * imw[37]; // N2
  // PW/RT (see Eq. 7)
  PWORT = (*P) / (YOW * 8.31446261815324e+07 * (*T));
  // multiply by 1e6 so c goes to SI
  PWORT *= 1e6;
  // Now compute conversion (and go to SI)
  c[0] = PWORT * y[0] * imw[0];
  c[1] = PWORT * y[1] * imw[1];
  c[2] = PWORT * y[2] * imw[2];
  c[3] = PWORT * y[3] * imw[3];
  c[4] = PWORT * y[4] * imw[4];
  c[5] = PWORT * y[5] * imw[5];
  c[6] = PWORT * y[6] * imw[6];
  c[7] = PWORT * y[7] * imw[7];
  c[8] = PWORT * y[8] * imw[8];
  c[9] = PWORT * y[9] * imw[9];
  c[10] = PWORT * y[10] * imw[10];
  c[11] = PWORT * y[11] * imw[11];
  c[12] = PWORT * y[12] * imw[12];
  c[13] = PWORT * y[13] * imw[13];
  c[14] = PWORT * y[14] * imw[14];
  c[15] = PWORT * y[15] * imw[15];
  c[16] = PWORT * y[16] * imw[16];
  c[17] = PWORT * y[17] * imw[17];
  c[18] = PWORT * y[18] * imw[18];
  c[19] = PWORT * y[19] * imw[19];
  c[20] = PWORT * y[20] * imw[20];
  c[21] = PWORT * y[21] * imw[21];
  c[22] = PWORT * y[22] * imw[22];
  c[23] = PWORT * y[23] * imw[23];
  c[24] = PWORT * y[24] * imw[24];
  c[25] = PWORT * y[25] * imw[25];
  c[26] = PWORT * y[26] * imw[26];
  c[27] = PWORT * y[27] * imw[27];
  c[28] = PWORT * y[28] * imw[28];
  c[29] = PWORT * y[29] * imw[29];
  c[30] = PWORT * y[30] * imw[30];
  c[31] = PWORT * y[31] * imw[31];
  c[32] = PWORT * y[32] * imw[32];
  c[33] = PWORT * y[33] * imw[33];
  c[34] = PWORT * y[34] * imw[34];
  c[35] = PWORT * y[35] * imw[35];
  c[36] = PWORT * y[36] * imw[36];
  c[37] = PWORT * y[37] * imw[37];

  // convert to chemkin units
  productionRate(wdot, c, *T);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXP(amrex::Real* P, amrex::Real* T, amrex::Real* x, amrex::Real* wdot)
{
  int id;            // loop counter
  amrex::Real c[38]; // temporary storage
  amrex::Real PORT =
    1e6 * (*P) /
    (8.31446261815324e+07 * (*T)); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (id = 0; id < 38; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  productionRate(wdot, c, *T);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWYR(amrex::Real* rho, amrex::Real* T, amrex::Real* y, amrex::Real* wdot)
{
  int id;            // loop counter
  amrex::Real c[38]; // temporary storage
  amrex::Real imw[38];

  get_imw(imw);

  // See Eq 8 with an extra 1e6 so c goes to SI
  c[0] = 1e6 * (*rho) * y[0] * imw[0];
  c[1] = 1e6 * (*rho) * y[1] * imw[1];
  c[2] = 1e6 * (*rho) * y[2] * imw[2];
  c[3] = 1e6 * (*rho) * y[3] * imw[3];
  c[4] = 1e6 * (*rho) * y[4] * imw[4];
  c[5] = 1e6 * (*rho) * y[5] * imw[5];
  c[6] = 1e6 * (*rho) * y[6] * imw[6];
  c[7] = 1e6 * (*rho) * y[7] * imw[7];
  c[8] = 1e6 * (*rho) * y[8] * imw[8];
  c[9] = 1e6 * (*rho) * y[9] * imw[9];
  c[10] = 1e6 * (*rho) * y[10] * imw[10];
  c[11] = 1e6 * (*rho) * y[11] * imw[11];
  c[12] = 1e6 * (*rho) * y[12] * imw[12];
  c[13] = 1e6 * (*rho) * y[13] * imw[13];
  c[14] = 1e6 * (*rho) * y[14] * imw[14];
  c[15] = 1e6 * (*rho) * y[15] * imw[15];
  c[16] = 1e6 * (*rho) * y[16] * imw[16];
  c[17] = 1e6 * (*rho) * y[17] * imw[17];
  c[18] = 1e6 * (*rho) * y[18] * imw[18];
  c[19] = 1e6 * (*rho) * y[19] * imw[19];
  c[20] = 1e6 * (*rho) * y[20] * imw[20];
  c[21] = 1e6 * (*rho) * y[21] * imw[21];
  c[22] = 1e6 * (*rho) * y[22] * imw[22];
  c[23] = 1e6 * (*rho) * y[23] * imw[23];
  c[24] = 1e6 * (*rho) * y[24] * imw[24];
  c[25] = 1e6 * (*rho) * y[25] * imw[25];
  c[26] = 1e6 * (*rho) * y[26] * imw[26];
  c[27] = 1e6 * (*rho) * y[27] * imw[27];
  c[28] = 1e6 * (*rho) * y[28] * imw[28];
  c[29] = 1e6 * (*rho) * y[29] * imw[29];
  c[30] = 1e6 * (*rho) * y[30] * imw[30];
  c[31] = 1e6 * (*rho) * y[31] * imw[31];
  c[32] = 1e6 * (*rho) * y[32] * imw[32];
  c[33] = 1e6 * (*rho) * y[33] * imw[33];
  c[34] = 1e6 * (*rho) * y[34] * imw[34];
  c[35] = 1e6 * (*rho) * y[35] * imw[35];
  c[36] = 1e6 * (*rho) * y[36] * imw[36];
  c[37] = 1e6 * (*rho) * y[37] * imw[37];

  // call productionRate
  productionRate(wdot, c, *T);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKWXR(amrex::Real* rho, amrex::Real* T, amrex::Real* x, amrex::Real* wdot)
{
  int id;             // loop counter
  amrex::Real c[38];  // temporary storage
  amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
  amrex::Real ROW;
  // Compute mean molecular wt first
  XW += x[0] * 154.297000;  // POSF10325
  XW += x[1] * 28.054000;   // C2H4
  XW += x[2] * 16.043000;   // CH4
  XW += x[3] * 2.016000;    // H2
  XW += x[4] * 42.081000;   // C3H6
  XW += x[5] * 56.108000;   // C4H81
  XW += x[6] * 56.108000;   // iC4H8
  XW += x[7] * 78.114000;   // C6H6
  XW += x[8] * 92.141000;   // C6H5CH3
  XW += x[9] * 1.008000;    // H
  XW += x[10] * 15.999000;  // O
  XW += x[11] * 17.007000;  // OH
  XW += x[12] * 33.006000;  // HO2
  XW += x[13] * 18.015000;  // H2O
  XW += x[14] * 34.014000;  // H2O2
  XW += x[15] * 31.998000;  // O2
  XW += x[16] * 14.027000;  // CH2
  XW += x[17] * 14.027000;  // CH2*
  XW += x[18] * 15.035000;  // CH3
  XW += x[19] * 29.018000;  // HCO
  XW += x[20] * 30.026000;  // CH2O
  XW += x[21] * 31.034000;  // CH3O
  XW += x[22] * 28.010000;  // CO
  XW += x[23] * 44.009000;  // CO2
  XW += x[24] * 26.038000;  // C2H2
  XW += x[25] * 27.046000;  // C2H3
  XW += x[26] * 29.062000;  // C2H5
  XW += x[27] * 30.070000;  // C2H6
  XW += x[28] * 41.029000;  // HCCO
  XW += x[29] * 42.037000;  // CH2CO
  XW += x[30] * 43.045000;  // CH2CHO
  XW += x[31] * 41.073000;  // aC3H5
  XW += x[32] * 77.106000;  // C6H5
  XW += x[33] * 91.133000;  // C6H5CH2
  XW += x[34] * 108.096000; // C6H4O2
  XW += x[35] * 105.116000; // C6H5CO
  XW += x[36] * 106.124000; // C6H5CHO
  XW += x[37] * 28.014000;  // N2
  // Extra 1e6 factor to take c to SI
  ROW = 1e6 * (*rho) / XW;

  // Compute conversion, see Eq 11
  for (id = 0; id < 38; ++id) {
    c[id] = x[id] * ROW;
  }

  // convert to chemkin units
  productionRate(wdot, c, *T);

  // convert to chemkin units
  for (id = 0; id < 38; ++id) {
    wdot[id] *= 1.0e-6;
  }
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
dcvpRdT(amrex::Real* species, const amrex::Real* tc)
{

  // temperature
  const amrex::Real T = tc[1];

  // species with midpoint at T=1000 kelvin
  if (T < 1000) {
    // species 0: POSF10325
    species[0] = +7.12034480e-02 + 1.73991910e-04 * tc[1] -
                 5.05836180e-07 * tc[2] + 3.03945480e-10 * tc[3];
    // species 1: C2H4
    species[1] = -7.57052247e-03 + 1.14198058e-04 * tc[1] -
                 2.07476626e-07 * tc[2] + 1.07953749e-10 * tc[3];
    // species 2: CH4
    species[2] = -1.36709788e-02 + 9.83601198e-05 * tc[1] -
                 1.45422908e-07 * tc[2] + 6.66775824e-11 * tc[3];
    // species 3: H2
    species[3] = +7.98052075e-03 - 3.89563020e-05 * tc[1] +
                 6.04716282e-08 * tc[2] - 2.95044704e-11 * tc[3];
    // species 4: C3H6
    species[4] = +2.09251800e-02 + 8.97358800e-06 * tc[1] -
                 5.00673600e-08 * tc[2] + 2.86325840e-11 * tc[3];
    // species 5: C4H81
    species[5] = +3.08533800e-02 + 1.01730494e-05 * tc[1] -
                 7.39646640e-08 * tc[2] + 4.44407720e-11 * tc[3];
    // species 6: iC4H8
    species[6] = +2.59029570e-02 + 1.63970708e-05 * tc[1] -
                 6.65797770e-08 * tc[2] + 3.55834320e-11 * tc[3];
    // species 7: C6H6
    species[7] = +5.84276130e-02 - 5.89717100e-05 * tc[1] -
                 2.08171320e-08 * tc[2] + 3.28501012e-11 * tc[3];
    // species 8: C6H5CH3
    species[8] = +2.10994380e-02 + 1.70732036e-04 * tc[1] -
                 3.97831980e-07 * tc[2] + 2.23826416e-10 * tc[3];
    // species 9: H
    species[9] = +7.05332819e-13 - 3.99183928e-15 * tc[1] +
                 6.90244896e-18 * tc[2] - 3.71092933e-21 * tc[3];
    // species 10: O
    species[10] = -3.27931884e-03 + 1.32861279e-05 * tc[1] -
                  1.83841987e-08 * tc[2] + 8.45063884e-12 * tc[3];
    // species 11: OH
    species[11] = -3.22544939e-03 + 1.30552938e-05 * tc[1] -
                  1.73956093e-08 * tc[2] + 8.24949516e-12 * tc[3];
    // species 12: HO2
    species[12] = -4.74912051e-03 + 4.23165782e-05 * tc[1] -
                  7.28291682e-08 * tc[2] + 3.71690050e-11 * tc[3];
    // species 13: H2O
    species[13] = -2.03643410e-03 + 1.30408042e-05 * tc[1] -
                  1.64639119e-08 * tc[2] + 7.08791268e-12 * tc[3];
    // species 14: H2O2
    species[14] = -5.42822417e-04 + 3.34671402e-05 * tc[1] -
                  6.47312439e-08 * tc[2] + 3.44981745e-11 * tc[3];
    // species 15: O2
    species[15] = -2.99673416e-03 + 1.96946040e-05 * tc[1] -
                  2.90438853e-08 * tc[2] + 1.29749135e-11 * tc[3];
    // species 16: CH2
    species[16] = +9.68872143e-04 + 5.58979682e-06 * tc[1] -
                  1.15527346e-08 * tc[2] + 6.74966876e-12 * tc[3];
    // species 17: CH2*
    species[17] = -2.36661419e-03 + 1.64659244e-05 * tc[1] -
                  2.00644794e-08 * tc[2] + 7.77258948e-12 * tc[3];
    // species 18: CH3
    species[18] = +2.01095175e-03 + 1.14604371e-05 * tc[1] -
                  2.06135228e-08 * tc[2] + 1.01754294e-11 * tc[3];
    // species 19: HCO
    species[19] = -3.24392532e-03 + 2.75598892e-05 * tc[1] -
                  3.99432279e-08 * tc[2] + 1.73507546e-11 * tc[3];
    // species 20: CH2O
    species[20] = -9.90833369e-03 + 7.46440016e-05 * tc[1] -
                  1.13785578e-07 * tc[2] + 5.27090608e-11 * tc[3];
    // species 21: CH3O
    species[21] = -2.80463306e-03 + 7.53101942e-05 * tc[1] -
                  1.41921627e-07 * tc[2] + 7.46353680e-11 * tc[3];
    // species 22: CO
    species[22] = -6.10353680e-04 + 2.03362866e-06 * tc[1] +
                  2.72101765e-09 * tc[2] - 3.61769800e-12 * tc[3];
    // species 23: CO2
    species[23] = +8.98459677e-03 - 1.42471254e-05 * tc[1] +
                  7.37757066e-09 * tc[2] - 5.74798192e-13 * tc[3];
    // species 24: C2H2
    species[24] = +2.33615629e-02 - 7.10343630e-05 * tc[1] +
                  8.40457311e-08 * tc[2] - 3.40029190e-11 * tc[3];
    // species 25: C2H3
    species[25] = +1.51479162e-03 + 5.18418824e-05 * tc[1] -
                  1.07297354e-07 * tc[2] + 5.88603492e-11 * tc[3];
    // species 26: C2H5
    species[26] = -4.18658892e-03 + 9.94285614e-05 * tc[1] -
                  1.79737982e-07 * tc[2] + 9.22036016e-11 * tc[3];
    // species 27: C2H6
    species[27] = -5.50154270e-03 + 1.19887658e-04 * tc[1] -
                  2.12539886e-07 * tc[2] + 1.07474308e-10 * tc[3];
    // species 28: HCCO
    species[28] = +1.76550210e-02 - 4.74582020e-05 * tc[1] +
                  5.18272770e-08 * tc[2] - 2.02659244e-11 * tc[3];
    // species 29: CH2CO
    species[29] = +1.81188721e-02 - 3.47894948e-05 * tc[1] +
                  2.80319270e-08 * tc[2] - 8.05830460e-12 * tc[3];
    // species 30: CH2CHO
    species[30] = +1.07385740e-02 + 3.78298500e-06 * tc[1] -
                  2.14757493e-08 * tc[2] + 1.14695404e-11 * tc[3];
    // species 31: aC3H5
    species[31] = +1.98138210e-02 + 2.49941200e-05 * tc[1] -
                  1.00066665e-07 * tc[2] + 6.33862840e-11 * tc[3];
    // species 32: C6H5
    species[32] = +5.21789680e-02 - 5.11168540e-05 * tc[1] -
                  2.11983363e-08 * tc[2] + 3.03335900e-11 * tc[3];
    // species 33: C6H5CH2
    species[33] = +3.85128320e-02 + 6.57229840e-05 * tc[1] -
                  2.30918163e-07 * tc[2] + 1.41692272e-10 * tc[3];
    // species 34: C6H4O2
    species[34] = +5.78424450e-02 - 7.64288780e-05 * tc[1] +
                  1.38937968e-08 * tc[2] + 1.45186604e-11 * tc[3];
    // species 35: C6H5CO
    species[35] = +6.15125410e-02 - 6.32073060e-05 * tc[1] -
                  2.09173797e-08 * tc[2] + 3.19340596e-11 * tc[3];
    // species 36: C6H5CHO
    species[36] = +6.63692450e-02 - 6.96327060e-05 * tc[1] -
                  1.88998131e-08 * tc[2] + 3.43228404e-11 * tc[3];
    // species 37: N2
    species[37] = +1.40824040e-03 - 7.92644400e-06 * tc[1] +
                  1.69245450e-08 * tc[2] - 9.77941600e-12 * tc[3];
  } else {
    // species 0: POSF10325
    species[0] = +6.61883880e-02 - 4.83170000e-05 * tc[1] +
                 1.07596491e-08 * tc[2] - 4.09075920e-13 * tc[3];
    // species 1: C2H4
    species[1] = +1.46454151e-02 - 1.34215583e-05 * tc[1] +
                 4.41668769e-09 * tc[2] - 5.02824244e-13 * tc[3];
    // species 2: CH4
    species[2] = +1.33909467e-02 - 1.14657162e-05 * tc[1] +
                 3.66877605e-09 * tc[2] - 4.07260920e-13 * tc[3];
    // species 3: H2
    species[3] = -4.94024731e-05 + 9.98913556e-07 * tc[1] -
                 5.38699182e-10 * tc[2] + 8.01021504e-14 * tc[3];
    // species 4: C3H6
    species[4] = +1.49083400e-02 - 9.89979800e-06 * tc[1] +
                 2.16360660e-09 * tc[2] - 1.50648160e-13 * tc[3];
    // species 5: C4H81
    species[5] = +3.43505070e-02 - 3.17663940e-05 * tc[1] +
                 9.92689860e-09 * tc[2] - 1.01444180e-12 * tc[3];
    // species 6: iC4H8
    species[6] = +2.96114870e-02 - 2.61542580e-05 * tc[1] +
                 7.97158020e-09 * tc[2] - 8.05388520e-13 * tc[3];
    // species 7: C6H6
    species[7] = +2.38544330e-02 - 1.76255452e-05 * tc[1] +
                 3.62970630e-09 * tc[2] - 7.28860120e-14 * tc[3];
    // species 8: C6H5CH3
    species[8] = +2.66912870e-02 - 1.93677010e-05 * tc[1] +
                 4.72158870e-09 * tc[2] - 3.78654404e-13 * tc[3];
    // species 9: H
    species[9] = -2.30842973e-11 + 3.23123896e-14 * tc[1] -
                 1.42054571e-17 * tc[2] + 1.99278943e-21 * tc[3];
    // species 10: O
    species[10] = -8.59741137e-05 + 8.38969178e-08 * tc[1] -
                  3.00533397e-11 * tc[2] + 4.91334764e-15 * tc[3];
    // species 11: OH
    species[11] = +1.05650448e-03 - 5.18165516e-07 * tc[1] +
                  9.15656022e-11 * tc[2] - 5.32783504e-15 * tc[3];
    // species 12: HO2
    species[12] = +2.23982013e-03 - 1.26731630e-06 * tc[1] +
                  3.42739110e-10 * tc[2] - 4.31634140e-14 * tc[3];
    // species 13: H2O
    species[13] = +2.17691804e-03 - 3.28145036e-07 * tc[1] -
                  2.91125961e-10 * tc[2] + 6.72803968e-14 * tc[3];
    // species 14: H2O2
    species[14] = +4.90831694e-03 - 3.80278450e-06 * tc[1] +
                  1.11355796e-09 * tc[2] - 1.15163322e-13 * tc[3];
    // species 15: O2
    species[15] = +1.48308754e-03 - 1.51593334e-06 * tc[1] +
                  6.28411665e-10 * tc[2] - 8.66871176e-14 * tc[3];
    // species 16: CH2
    species[16] = +3.65639292e-03 - 2.81789194e-06 * tc[1] +
                  7.80538647e-10 * tc[2] - 7.50910268e-14 * tc[3];
    // species 17: CH2*
    species[17] = +4.65588637e-03 - 4.02383894e-06 * tc[1] +
                  1.25371800e-09 * tc[2] - 1.35886546e-13 * tc[3];
    // species 18: CH3
    species[18] = +7.23990037e-03 - 5.97428696e-06 * tc[1] +
                  1.78705393e-09 * tc[2] - 1.86861758e-13 * tc[3];
    // species 19: HCO
    species[19] = +4.95695526e-03 - 4.96891226e-06 * tc[1] +
                  1.76748533e-09 * tc[2] - 2.13403484e-13 * tc[3];
    // species 20: CH2O
    species[20] = +9.20000082e-03 - 8.84517626e-06 * tc[1] +
                  3.01923636e-09 * tc[2] - 3.53542256e-13 * tc[3];
    // species 21: CH3O
    species[21] = +7.44142474e-03 - 5.39410352e-06 * tc[1] +
                  1.31427151e-09 * tc[2] - 1.05414839e-13 * tc[3];
    // species 22: CO
    species[22] = +2.06252743e-03 - 1.99765154e-06 * tc[1] +
                  6.90159024e-10 * tc[2] - 8.14590864e-14 * tc[3];
    // species 23: CO2
    species[23] = +4.41437026e-03 - 4.42962808e-06 * tc[1] +
                  1.57047056e-09 * tc[2] - 1.88833666e-13 * tc[3];
    // species 24: C2H2
    species[24] = +5.96166664e-03 - 4.74589704e-06 * tc[1] +
                  1.40223651e-09 * tc[2] - 1.44494085e-13 * tc[3];
    // species 25: C2H3
    species[25] = +1.03302292e-02 - 9.36164698e-06 * tc[1] +
                  3.05289864e-09 * tc[2] - 3.45042816e-13 * tc[3];
    // species 26: C2H5
    species[26] = +1.73972722e-02 - 1.59641334e-05 * tc[1] +
                  5.25653067e-09 * tc[2] - 5.98566304e-13 * tc[3];
    // species 27: C2H6
    species[27] = +2.16852677e-02 - 2.00512134e-05 * tc[1] +
                  6.64236003e-09 * tc[2] - 7.60011560e-13 * tc[3];
    // species 28: HCCO
    species[28] = +4.08534010e-03 - 3.18690940e-06 * tc[1] +
                  8.58781560e-10 * tc[2] - 7.76313280e-14 * tc[3];
    // species 29: CH2CO
    species[29] = +9.00359745e-03 - 8.33879270e-06 * tc[1] +
                  2.77003765e-09 * tc[2] - 3.17935280e-13 * tc[3];
    // species 30: CH2CHO
    species[30] = +8.13059140e-03 - 5.48724900e-06 * tc[1] +
                  1.22109123e-09 * tc[2] - 8.70406840e-14 * tc[3];
    // species 31: aC3H5
    species[31] = +1.43247310e-02 - 1.13563264e-05 * tc[1] +
                  3.32424030e-09 * tc[2] - 3.61455548e-13 * tc[3];
    // species 32: C6H5
    species[32] = +2.22416300e-02 - 1.74399956e-05 * tc[1] +
                  4.13663550e-09 * tc[2] - 2.12584224e-13 * tc[3];
    // species 33: C6H5CH2
    species[33] = +2.34938730e-02 - 1.70750734e-05 * tc[1] +
                  4.16725230e-09 * tc[2] - 3.34457680e-13 * tc[3];
    // species 34: C6H4O2
    species[34] = +2.36149950e-02 - 2.04691520e-05 * tc[1] +
                  5.85965220e-09 * tc[2] - 5.09840880e-13 * tc[3];
    // species 35: C6H5CO
    species[35] = +2.39992890e-02 - 2.09314480e-05 * tc[1] +
                  6.50073930e-09 * tc[2] - 7.20281800e-13 * tc[3];
    // species 36: C6H5CHO
    species[36] = +2.56804190e-02 - 2.09334580e-05 * tc[1] +
                  5.82402900e-09 * tc[2] - 5.39351680e-13 * tc[3];
    // species 37: N2
    species[37] = +1.48797680e-03 - 1.13695200e-06 * tc[1] +
                  3.02911140e-10 * tc[2] - 2.70134040e-14 * tc[3];
  }
  return;
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian_precond(amrex::Real* J, amrex::Real* sc, amrex::Real T, const int HP)
{

  for (int i = 0; i < 1521; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[38];
  for (int k = 0; k < 38; k++) {
    wdot[k] = 0.0;
  }

  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  amrex::Real invT2 = invT * invT;

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 38; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[38];
  gibbs(g_RT, tc);

  // compute the species enthalpy
  amrex::Real h_RT[38];
  speciesEnthalpy(h_RT, tc);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[38];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 15: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (11.89 - 1) * sc[13] + (0.85 - 1) * sc[15] +
          (1.09 - 1) * sc[22] + (2.18 - 1) * sc[23];
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 5116000 * exp(0.44 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0.44 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 6.328e+19 * exp(-1.4 * tc[0] - 0.50321666580472 * (0) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.4 * invT + 0.50321666580472 * (0) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[12];
  Kc = refCinv * exp(g_RT[9] - g_RT[12] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[15];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac - k_r;
  dqdc[13] = 11.89 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = 0.85 * dcdc_fac + k_f * sc[9];
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.09 * dcdc_fac;
  dqdc[23] = 2.18 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 12] += dqdc[k];
    J[39 * k + 15] -= dqdc[k];
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT

  // reaction 17: 2 OH (+M) <=> H2O2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[3] + (6 - 1) * sc[13] + (1.75 - 1) * sc[22] +
          (3.6 - 1) * sc[23];
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 111000000 * exp(-0.37 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.37 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 2.01e+17 * exp(-0.584 * tc[0] - 0.50321666580472 * (-2293) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -0.584 * invT + 0.50321666580472 * (-2293) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7346) * exp(-T / 94);
  Fcent2 = 0.7346 * exp(-T / 1756);
  Fcent3 = exp(-5182 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1756 + Fcent3 * 5182 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[14];
  Kc = refCinv * exp(2.000000 * g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[14]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[11] -= 2 * q; // OH
  wdot[14] += q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac + k_f * 2.000000 * sc[11];
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac - k_r;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.75 * dcdc_fac;
  dqdc[23] = 3.6 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 11] += -2 * dqdc[k];
    J[39 * k + 14] += dqdc[k];
  }
  J[1493] += -2 * dqdT; // dwdot[OH]/dT
  J[1496] += dqdT;      // dwdot[H2O2]/dT

  // reaction 40: CO + H2 (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[3] * sc[22];
  k_f = 43 * exp(1.5 * tc[0] - 0.50321666580472 * (79600) * invT);
  dlnkfdT = 1.5 * invT + 0.50321666580472 * (79600) * invT2;
  // pressure-fall-off
  k_0 = 5.07e+27 * exp(-3.42 * tc[0] - 0.50321666580472 * (84350) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.42 * invT + 0.50321666580472 * (84350) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.932) * exp(-T / 197);
  Fcent2 = 0.932 * exp(-T / 1540);
  Fcent3 = exp(-10300 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 197 - Fcent2 / 1540 + Fcent3 * 10300 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[3] - g_RT[20] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[22]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= q;  // H2
  wdot[20] += q; // CH2O
  wdot[22] -= q; // CO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac + k_f * sc[22];
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac + k_f * sc[3];
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 3] -= dqdc[k];
    J[39 * k + 20] += dqdc[k];
    J[39 * k + 22] -= dqdc[k];
  }
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT

  // reaction 41: H + HCO (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 1090000 * exp(0.48 * tc[0] - 0.50321666580472 * (-260) * invT);
  dlnkfdT = 0.48 * invT + 0.50321666580472 * (-260) * invT2;
  // pressure-fall-off
  k_0 = 1.35e+24 * exp(-2.57 * tc[0] - 0.50321666580472 * (1425) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.57 * invT + 0.50321666580472 * (1425) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7824) * exp(-T / 271);
  Fcent2 = 0.7824 * exp(-T / 2755);
  Fcent3 = exp(-6570 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 271 - Fcent2 / 2755 + Fcent3 * 6570 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[9] + g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[19]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[19] -= q; // HCO
  wdot[20] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[19];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac + k_f * sc[9];
  dqdc[20] = dcdc_fac - k_r;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 19] -= dqdc[k];
    J[39 * k + 20] += dqdc[k];
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 42: CH2 + H (+M) <=> CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[16];
  k_f = 25000000000 * exp(-0.8 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.8 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 3.2e+27 * exp(-3.14 * tc[0] - 0.50321666580472 * (1230) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.14 * invT + 0.50321666580472 * (1230) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.68) * exp(-T / 78);
  Fcent2 = 0.68 * exp(-T / 1995);
  Fcent3 = exp(-5590 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 78 - Fcent2 / 1995 + Fcent3 * 5590 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[18];
  Kc = refCinv * exp(g_RT[9] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[16]) + (h_RT[18]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[16] -= q; // CH2
  wdot[18] += q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[16];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac + k_f * sc[9];
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac - k_r;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 16] -= dqdc[k];
    J[39 * k + 18] += dqdc[k];
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 48: CH2 + CO (+M) <=> CH2CO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[16] * sc[22];
  k_f = 810000 * exp(0.5 * tc[0] - 0.50321666580472 * (4510) * invT);
  dlnkfdT = 0.5 * invT + 0.50321666580472 * (4510) * invT2;
  // pressure-fall-off
  k_0 = 2.69e+33 * exp(-5.11 * tc[0] - 0.50321666580472 * (7095) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.11 * invT + 0.50321666580472 * (7095) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5907) * exp(-T / 275);
  Fcent2 = 0.5907 * exp(-T / 1226);
  Fcent3 = exp(-5185 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 275 - Fcent2 / 1226 + Fcent3 * 5185 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[16] + g_RT[22] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[22]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[16] -= q; // CH2
  wdot[22] -= q; // CO
  wdot[29] += q; // CH2CO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac + k_f * sc[22];
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac + k_f * sc[16];
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac - k_r;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 16] -= dqdc[k];
    J[39 * k + 22] -= dqdc[k];
    J[39 * k + 29] += dqdc[k];
  }
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT

  // reaction 59: CH2O + H (+M) <=> CH3O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 540000 * exp(0.454 * tc[0] - 0.50321666580472 * (2600) * invT);
  dlnkfdT = 0.454 * invT + 0.50321666580472 * (2600) * invT2;
  // pressure-fall-off
  k_0 = 2.2e+30 * exp(-4.8 * tc[0] - 0.50321666580472 * (5560) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + 0.50321666580472 * (5560) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.758) * exp(-T / 94);
  Fcent2 = 0.758 * exp(-T / 1555);
  Fcent3 = exp(-4200 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1555 + Fcent3 * 4200 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[21];
  Kc = refCinv * exp(g_RT[9] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[21]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[20] -= q; // CH2O
  wdot[21] += q; // CH3O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[20];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac + k_f * sc[9];
  dqdc[21] = dcdc_fac - k_r;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 20] -= dqdc[k];
    J[39 * k + 21] += dqdc[k];
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT
  J[1503] += dqdT; // dwdot[CH3O]/dT

  // reaction 65: CH3 + H (+M) <=> CH4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[18];
  k_f = 12700000000 * exp(-0.63 * tc[0] - 0.50321666580472 * (383) * invT);
  dlnkfdT = -0.63 * invT + 0.50321666580472 * (383) * invT2;
  // pressure-fall-off
  k_0 = 2.477e+33 * exp(-4.76 * tc[0] - 0.50321666580472 * (2440) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.76 * invT + 0.50321666580472 * (2440) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.783) * exp(-T / 74);
  Fcent2 = 0.783 * exp(-T / 2941);
  Fcent3 = exp(-6964 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 74 - Fcent2 / 2941 + Fcent3 * 6964 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[2];
  Kc = refCinv * exp(-g_RT[2] + g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[18]) + (h_RT[2]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] += q;  // CH4
  wdot[9] -= q;  // H
  wdot[18] -= q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac - k_r;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[18];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f * sc[9];
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 2] += dqdc[k];
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 18] -= dqdc[k];
  }
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 77: 2 CH3 (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = (sc[18] * sc[18]);
  k_f = 21200000000 * exp(-0.97 * tc[0] - 0.50321666580472 * (620) * invT);
  dlnkfdT = -0.97 * invT + 0.50321666580472 * (620) * invT2;
  // pressure-fall-off
  k_0 = 1.77e+50 * exp(-9.67 * tc[0] - 0.50321666580472 * (6220) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.67 * invT + 0.50321666580472 * (6220) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5325) * exp(-T / 151);
  Fcent2 = 0.5325 * exp(-T / 1038);
  Fcent3 = exp(-4970 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 151 - Fcent2 / 1038 + Fcent3 * 4970 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(2.000000 * g_RT[18] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[18]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[18] -= 2 * q; // CH3
  wdot[27] += q;     // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f * 2.000000 * sc[18];
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac - k_r;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 18] += -2 * dqdc[k];
    J[39 * k + 27] += dqdc[k];
  }
  J[1500] += -2 * dqdT; // dwdot[CH3]/dT
  J[1509] += dqdT;      // dwdot[C2H6]/dT

  // reaction 93: C2H3 (+M) <=> C2H2 + H (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (3 - 1) * sc[1] + sc[2] + sc[3] + (6 - 1) * sc[13] +
          (1.5 - 1) * sc[22] + sc[23] + (3 - 1) * sc[24] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[25];
  k_f = 386000000 * exp(1.62 * tc[0] - 0.50321666580472 * (37048.2) * invT);
  dlnkfdT = 1.62 * invT + 0.50321666580472 * (37048.2) * invT2;
  // pressure-fall-off
  k_0 = 2.565e+27 * exp(-3.4 * tc[0] - 0.50321666580472 * (35798.72) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.4 * invT + 0.50321666580472 * (35798.72) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1.9816) * exp(-T / 5383.7);
  Fcent2 = 1.9816 * exp(-T / 4.2932);
  Fcent3 = exp(0.0795 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 5383.7 - Fcent2 / 4.2932 + Fcent3 * -0.0795 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[9] * sc[24];
  Kc = refC * exp(-g_RT[9] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25]) + (h_RT[9] + h_RT[24]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] += q;  // H
  wdot[24] += q; // C2H2
  wdot[25] -= q; // C2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = 3 * dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac - k_r * sc[24];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = 3 * dcdc_fac - k_r * sc[9];
  dqdc[25] = dcdc_fac + k_f;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 9] += dqdc[k];
    J[39 * k + 24] += dqdc[k];
    J[39 * k + 25] -= dqdc[k];
  }
  J[1491] += dqdT; // dwdot[H]/dT
  J[1506] += dqdT; // dwdot[C2H2]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 99: CH2CO + H (+M) <=> CH2CHO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (3 - 1) * sc[1] + sc[2] + sc[3] + (6 - 1) * sc[13] +
          (1.5 - 1) * sc[22] + sc[23] + (3 - 1) * sc[24] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[29];
  k_f = 330000000 * exp(-0.06 * tc[0] - 0.50321666580472 * (8500) * invT);
  dlnkfdT = -0.06 * invT + 0.50321666580472 * (8500) * invT2;
  // pressure-fall-off
  k_0 = 3.8e+41 * exp(-7.64 * tc[0] - 0.50321666580472 * (11900) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.64 * invT + 0.50321666580472 * (11900) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.337) * exp(-T / 1707);
  Fcent2 = 0.337 * exp(-T / 3200);
  Fcent3 = exp(-4131 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1707 - Fcent2 / 3200 + Fcent3 * 4131 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[30];
  Kc = refCinv * exp(g_RT[9] + g_RT[29] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[29]) + (h_RT[30]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[29] -= q; // CH2CO
  wdot[30] += q; // CH2CHO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = 3 * dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[29];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = 3 * dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac + k_f * sc[9];
  dqdc[30] = dcdc_fac - k_r;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 29] -= dqdc[k];
    J[39 * k + 30] += dqdc[k];
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT
  J[1512] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 105: C2H3 + H (+M) <=> C2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (3 - 1) * sc[1] + sc[2] + sc[3] + (6 - 1) * sc[13] +
          (1.5 - 1) * sc[22] + sc[23] + (3 - 1) * sc[24] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[25];
  k_f = 6080000 * exp(0.27 * tc[0] - 0.50321666580472 * (280) * invT);
  dlnkfdT = 0.27 * invT + 0.50321666580472 * (280) * invT2;
  // pressure-fall-off
  k_0 = 1.4e+30 * exp(-3.86 * tc[0] - 0.50321666580472 * (3320) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.86 * invT + 0.50321666580472 * (3320) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.782) * exp(-T / 207.5);
  Fcent2 = 0.782 * exp(-T / 2663);
  Fcent3 = exp(-6095 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 207.5 - Fcent2 / 2663 + Fcent3 * 6095 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[1];
  Kc = refCinv * exp(-g_RT[1] + g_RT[9] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[25]) + (h_RT[1]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[9] -= q;  // H
  wdot[25] -= q; // C2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = 3 * dcdc_fac - k_r;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[25];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = 3 * dcdc_fac;
  dqdc[25] = dcdc_fac + k_f * sc[9];
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 1] += dqdc[k];
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 25] -= dqdc[k];
  }
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 113: C2H3 + CH3 (+M) <=> C3H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (3 - 1) * sc[1] + sc[2] + sc[3] + (6 - 1) * sc[13] +
          (1.5 - 1) * sc[22] + sc[23] + (3 - 1) * sc[24] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[18] * sc[25];
  k_f = 25000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 4.27e+58 * exp(-11.94 * tc[0] - 0.50321666580472 * (9769.8) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -11.94 * invT + 0.50321666580472 * (9769.8) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.175) * exp(-T / 1340.6);
  Fcent2 = 0.175 * exp(-T / 60000);
  Fcent3 = exp(-10139.8 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1340.6 - Fcent2 / 60000 + Fcent3 * 10139.8 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(-g_RT[4] + g_RT[18] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[25]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[18] -= q; // CH3
  wdot[25] -= q; // C2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = 3 * dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac - k_r;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f * sc[25];
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = 3 * dcdc_fac;
  dqdc[25] = dcdc_fac + k_f * sc[18];
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 4] += dqdc[k];
    J[39 * k + 18] -= dqdc[k];
    J[39 * k + 25] -= dqdc[k];
  }
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 121: C2H4 + H (+M) <=> C2H5 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[1] * sc[9];
  k_f = 1370 * exp(1.463 * tc[0] - 0.50321666580472 * (1355) * invT);
  dlnkfdT = 1.463 * invT + 0.50321666580472 * (1355) * invT2;
  // pressure-fall-off
  k_0 = 2.9e+39 * exp(-6.642 * tc[0] - 0.50321666580472 * (5769) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.642 * invT + 0.50321666580472 * (5769) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1.569) * exp(-T / -9147);
  Fcent2 = 1.569 * exp(-T / 299);
  Fcent3 = exp(-152.4 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / -9147 - Fcent2 / 299 + Fcent3 * 152.4 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(g_RT[1] + g_RT[9] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[9]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[9] -= q;  // H
  wdot[26] += q; // C2H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac + k_f * sc[9];
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[1];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac - k_r;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 1] -= dqdc[k];
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 26] += dqdc[k];
  }
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT

  // reaction 132: C2H5 + H (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[26];
  k_f = 521000000000 * exp(-0.99 * tc[0] - 0.50321666580472 * (1580) * invT);
  dlnkfdT = -0.99 * invT + 0.50321666580472 * (1580) * invT2;
  // pressure-fall-off
  k_0 = 1.99e+41 * exp(-7.08 * tc[0] - 0.50321666580472 * (6685) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.08 * invT + 0.50321666580472 * (6685) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8422) * exp(-T / 125);
  Fcent2 = 0.8422 * exp(-T / 2219);
  Fcent3 = exp(-6882 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 125 - Fcent2 / 2219 + Fcent3 * 6882 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(g_RT[9] + g_RT[26] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[26]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[26] -= q; // C2H5
  wdot[27] += q; // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[26];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac + k_f * sc[9];
  dqdc[27] = 3 * dcdc_fac - k_r;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 26] -= dqdc[k];
    J[39 * k + 27] += dqdc[k];
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT
  J[1509] += dqdT; // dwdot[C2H6]/dT

  // reaction 137: C2H3 + C2H5 (+M) <=> C4H81 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[25] * sc[26];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 1.55e+56 * exp(-11.79 * tc[0] - 0.50321666580472 * (8984.5) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -11.79 * invT + 0.50321666580472 * (8984.5) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.198) * exp(-T / 2277.9);
  Fcent2 = 0.198 * exp(-T / 60000);
  Fcent3 = exp(-5723.2 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 2277.9 - Fcent2 / 60000 + Fcent3 * 5723.2 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(-g_RT[5] + g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25] + h_RT[26]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] += q;  // C4H81
  wdot[25] -= q; // C2H3
  wdot[26] -= q; // C2H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac - k_r;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac + k_f * sc[26];
  dqdc[26] = dcdc_fac + k_f * sc[25];
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 5] += dqdc[k];
    J[39 * k + 25] -= dqdc[k];
    J[39 * k + 26] -= dqdc[k];
  }
  J[1487] += dqdT; // dwdot[C4H81]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT

  // reaction 142: H + aC3H5 (+M) <=> C3H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[31];
  k_f = 200000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 1.33e+60 * exp(-12 * tc[0] - 0.50321666580472 * (5967.8) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -12 * invT + 0.50321666580472 * (5967.8) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.02) * exp(-T / 1096.6);
  Fcent2 = 0.02 * exp(-T / 1096.6);
  Fcent3 = exp(-6859.5 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1096.6 - Fcent2 / 1096.6 + Fcent3 * 6859.5 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(-g_RT[4] + g_RT[9] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[31]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[9] -= q;  // H
  wdot[31] -= q; // aC3H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac - k_r;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[31];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac + k_f * sc[9];
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 4] += dqdc[k];
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 31] -= dqdc[k];
  }
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1513] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 146: CH3 + aC3H5 (+M) <=> C4H81 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[18] * sc[31];
  k_f = 100000000 * exp(-0.32 * tc[0] - 0.50321666580472 * (-262.3) * invT);
  dlnkfdT = -0.32 * invT + 0.50321666580472 * (-262.3) * invT2;
  // pressure-fall-off
  k_0 = 3.91e+60 * exp(-12.81 * tc[0] - 0.50321666580472 * (6250) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -12.81 * invT + 0.50321666580472 * (6250) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.104) * exp(-T / 1606);
  Fcent2 = 0.104 * exp(-T / 60000);
  Fcent3 = exp(-6118.4 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1606 - Fcent2 / 60000 + Fcent3 * 6118.4 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(-g_RT[5] + g_RT[18] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[31]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] += q;  // C4H81
  wdot[18] -= q; // CH3
  wdot[31] -= q; // aC3H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac - k_r;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac + k_f * sc[31];
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac + k_f * sc[18];
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 5] += dqdc[k];
    J[39 * k + 18] -= dqdc[k];
    J[39 * k + 31] -= dqdc[k];
  }
  J[1487] += dqdT; // dwdot[C4H81]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1513] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 164: C6H5CH2 + H (+M) <=> C6H5CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[33];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 1.1e+103 * exp(-24.63 * tc[0] - 0.50321666580472 * (14590) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -24.63 * invT + 0.50321666580472 * (14590) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.431) * exp(-T / 383);
  Fcent2 = 0.431 * exp(-T / 152);
  Fcent3 = exp(-4730 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 383 - Fcent2 / 152 + Fcent3 * 4730 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(-g_RT[8] + g_RT[9] + g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[33]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[8] += q;  // C6H5CH3
  wdot[9] -= q;  // H
  wdot[33] -= q; // C6H5CH2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac - k_r;
  dqdc[9] = dcdc_fac + k_f * sc[33];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = 3 * dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac + k_f * sc[9];
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 8] += dqdc[k];
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 33] -= dqdc[k];
  }
  J[1490] += dqdT; // dwdot[C6H5CH3]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1515] -= dqdT; // dwdot[C6H5CH2]/dT

  // reaction 178: C6H5 + H (+M) <=> C6H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha =
    mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] + sc[23];
  // forward
  phi_f = sc[9] * sc[32];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 6.6e+75 * exp(-16.3 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -16.3 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 0.1);
  Fcent2 = 1 * exp(-T / 584.9);
  Fcent3 = exp(-6113 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 0.1 - Fcent2 / 584.9 + Fcent3 * 6113 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(-g_RT[7] + g_RT[9] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[32]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[7] += q;  // C6H6
  wdot[9] -= q;  // H
  wdot[32] -= q; // C6H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = 2 * dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac - k_r;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac + k_f * sc[32];
  dqdc[10] = dcdc_fac;
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 6 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.5 * dcdc_fac;
  dqdc[23] = 2 * dcdc_fac;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac + k_f * sc[9];
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 7] += dqdc[k];
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 32] -= dqdc[k];
  }
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT

  // reaction 28: CO + O (+M) <=> CO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[3] + (12 - 1) * sc[13] + (1.75 - 1) * sc[22] +
          (3.6 - 1) * sc[23];
  // forward
  phi_f = sc[10] * sc[22];
  k_f = 13620 * exp(0 * tc[0] - 0.50321666580472 * (2384) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (2384) * invT2;
  // pressure-fall-off
  k_0 = 1.173e+24 * exp(-2.79 * tc[0] - 0.50321666580472 * (4191) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.79 * invT + 0.50321666580472 * (4191) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[23];
  Kc = refCinv * exp(g_RT[10] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[22]) + (h_RT[23]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[10] -= q; // O
  wdot[22] -= q; // CO
  wdot[23] += q; // CO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = 0.0;
  dqdc[0] = dcdc_fac;
  dqdc[1] = dcdc_fac;
  dqdc[2] = dcdc_fac;
  dqdc[3] = 2 * dcdc_fac;
  dqdc[4] = dcdc_fac;
  dqdc[5] = dcdc_fac;
  dqdc[6] = dcdc_fac;
  dqdc[7] = dcdc_fac;
  dqdc[8] = dcdc_fac;
  dqdc[9] = dcdc_fac;
  dqdc[10] = dcdc_fac + k_f * sc[22];
  dqdc[11] = dcdc_fac;
  dqdc[12] = dcdc_fac;
  dqdc[13] = 12 * dcdc_fac;
  dqdc[14] = dcdc_fac;
  dqdc[15] = dcdc_fac;
  dqdc[16] = dcdc_fac;
  dqdc[17] = dcdc_fac;
  dqdc[18] = dcdc_fac;
  dqdc[19] = dcdc_fac;
  dqdc[20] = dcdc_fac;
  dqdc[21] = dcdc_fac;
  dqdc[22] = 1.75 * dcdc_fac + k_f * sc[10];
  dqdc[23] = 3.6 * dcdc_fac - k_r;
  dqdc[24] = dcdc_fac;
  dqdc[25] = dcdc_fac;
  dqdc[26] = dcdc_fac;
  dqdc[27] = dcdc_fac;
  dqdc[28] = dcdc_fac;
  dqdc[29] = dcdc_fac;
  dqdc[30] = dcdc_fac;
  dqdc[31] = dcdc_fac;
  dqdc[32] = dcdc_fac;
  dqdc[33] = dcdc_fac;
  dqdc[34] = dcdc_fac;
  dqdc[35] = dcdc_fac;
  dqdc[36] = dcdc_fac;
  dqdc[37] = dcdc_fac;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 10] -= dqdc[k];
    J[39 * k + 22] -= dqdc[k];
    J[39 * k + 23] += dqdc[k];
  }
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 10: 2 H + M <=> H2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[3] + (0 - 1) * sc[13] + (0 - 1) * sc[23];
  // forward
  phi_f = (sc[9] * sc[9]);
  k_f = 1780000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(-g_RT[3] + 2.000000 * g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[9]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // H2
  wdot[9] -= 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = -k_r;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor + k_f * 2.000000 * sc[9];
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 0.0;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = q_nocor;
  dqdc[23] = 0.0;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 3] += dqdc[k];
    J[39 * k + 9] += -2 * dqdc[k];
  }
  J[1485] += dqdT;      // dwdot[H2]/dT
  J[1491] += -2 * dqdT; // dwdot[H]/dT

  // reaction 11: 2 H + H2O <=> H2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[9] * sc[9]) * sc[13];
  k_f = 56240000 * exp(-1.25 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1.25 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[13];
  Kc = refCinv * exp(-g_RT[3] + 2.000000 * g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[9] + h_RT[13]) + (h_RT[3] + h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // H2
  wdot[9] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[120] += dqdci;      // dwdot[H2]/d[H2]
  J[126] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[9] * sc[13];
  J[354] += dqdci;      // dwdot[H2]/d[H]
  J[360] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * pow(sc[9], 2.000000) - k_r * sc[3];
  J[510] += dqdci;      // dwdot[H2]/d[H2O]
  J[516] += -2 * dqdci; // dwdot[H]/d[H2O]
  // d()/dT
  J[1485] += dqdT;      // dwdot[H2]/dT
  J[1491] += -2 * dqdT; // dwdot[H]/dT

  // reaction 12: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[3] + (6.3 - 1) * sc[13] + (1.75 - 1) * sc[22] +
          (3.6 - 1) * sc[23];
  // forward
  phi_f = sc[9] * sc[11];
  k_f = 44000000000 * exp(-2 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -2 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13];
  Kc = refCinv * exp(g_RT[9] + g_RT[11] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[11]) + (h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = 2 * q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor + k_f * sc[11];
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor + k_f * sc[9];
  dqdc[12] = q_nocor;
  dqdc[13] = 6.3 * q_nocor - k_r;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = 1.75 * q_nocor;
  dqdc[23] = 3.6 * q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 11] -= dqdc[k];
    J[39 * k + 13] += dqdc[k];
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT

  // reaction 13: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[3] + (12 - 1) * sc[13] + (1.75 - 1) * sc[22] +
          (3.6 - 1) * sc[23];
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 9428000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11];
  Kc = refCinv * exp(g_RT[9] + g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = 2 * q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor + k_f * sc[10];
  dqdc[10] = q_nocor + k_f * sc[9];
  dqdc[11] = q_nocor - k_r;
  dqdc[12] = q_nocor;
  dqdc[13] = 12 * q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = 1.75 * q_nocor;
  dqdc[23] = 3.6 * q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 9] -= dqdc[k];
    J[39 * k + 10] -= dqdc[k];
    J[39 * k + 11] += dqdc[k];
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT

  // reaction 14: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.4 - 1) * sc[3] + (15.4 - 1) * sc[13] +
          (1.75 - 1) * sc[22] + (3.6 - 1) * sc[23];
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 120000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[15];
  Kc = refCinv * exp(2.000000 * g_RT[10] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= 2 * q; // O
  wdot[15] += q;     // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = 2.4 * q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor;
  dqdc[10] = q_nocor + k_f * 2.000000 * sc[10];
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 15.4 * q_nocor;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor - k_r;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = 1.75 * q_nocor;
  dqdc[23] = 3.6 * q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 10] += -2 * dqdc[k];
    J[39 * k + 15] += dqdc[k];
  }
  J[1492] += -2 * dqdT; // dwdot[O]/dT
  J[1497] += dqdT;      // dwdot[O2]/dT

  // reaction 37: HCO + M <=> CO + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[3] + (0 - 1) * sc[13] + (1.75 - 1) * sc[22] +
          (3.6 - 1) * sc[23];
  // forward
  phi_f = sc[19];
  k_f = 187000000000 * exp(-1 * tc[0] - 0.50321666580472 * (17000) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (17000) * invT2;
  // reverse
  phi_r = sc[9] * sc[22];
  Kc = refC * exp(-g_RT[9] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[9] + h_RT[22]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  dqdc[0] = q_nocor;
  dqdc[1] = q_nocor;
  dqdc[2] = q_nocor;
  dqdc[3] = 2 * q_nocor;
  dqdc[4] = q_nocor;
  dqdc[5] = q_nocor;
  dqdc[6] = q_nocor;
  dqdc[7] = q_nocor;
  dqdc[8] = q_nocor;
  dqdc[9] = q_nocor - k_r * sc[22];
  dqdc[10] = q_nocor;
  dqdc[11] = q_nocor;
  dqdc[12] = q_nocor;
  dqdc[13] = 0.0;
  dqdc[14] = q_nocor;
  dqdc[15] = q_nocor;
  dqdc[16] = q_nocor;
  dqdc[17] = q_nocor;
  dqdc[18] = q_nocor;
  dqdc[19] = q_nocor + k_f;
  dqdc[20] = q_nocor;
  dqdc[21] = q_nocor;
  dqdc[22] = 1.75 * q_nocor - k_r * sc[9];
  dqdc[23] = 3.6 * q_nocor;
  dqdc[24] = q_nocor;
  dqdc[25] = q_nocor;
  dqdc[26] = q_nocor;
  dqdc[27] = q_nocor;
  dqdc[28] = q_nocor;
  dqdc[29] = q_nocor;
  dqdc[30] = q_nocor;
  dqdc[31] = q_nocor;
  dqdc[32] = q_nocor;
  dqdc[33] = q_nocor;
  dqdc[34] = q_nocor;
  dqdc[35] = q_nocor;
  dqdc[36] = q_nocor;
  dqdc[37] = q_nocor;
  for (int k = 0; k < 38; k++) {
    J[39 * k + 9] += dqdc[k];
    J[39 * k + 19] -= dqdc[k];
    J[39 * k + 22] += dqdc[k];
  }
  J[1491] += dqdT; // dwdot[H]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 38: HCO + H2O <=> CO + H + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[19];
  k_f = 2244000000000 * exp(-1 * tc[0] - 0.50321666580472 * (17000) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (17000) * invT2;
  // reverse
  phi_r = sc[9] * sc[13] * sc[22];
  Kc = refC * exp(-g_RT[9] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[19]) + (h_RT[9] + h_RT[13] + h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[13] * sc[22];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[370] -= dqdci; // dwdot[HCO]/d[H]
  J[373] += dqdci; // dwdot[CO]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[19] - k_r * sc[9] * sc[22];
  J[516] += dqdci; // dwdot[H]/d[H2O]
  J[526] -= dqdci; // dwdot[HCO]/d[H2O]
  J[529] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[HCO]
  dqdci = +k_f * sc[13];
  J[750] += dqdci; // dwdot[H]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[9] * sc[13];
  J[867] += dqdci; // dwdot[H]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 0: POSF10325 => 2.95 C2H4 + 0.39 C3H6 + 0.15 C6H5CH3 + 0.183333
  // C6H6 + CH3 + H + 0.195 iC4H8 a non-third-body and non-pressure-fall-off
  // reaction forward
  phi_f = sc[0];
  k_f = 5.86e+25 * exp(-2.66 * tc[0] - 0.50321666580472 * (88207) * invT);
  dlnkfdT = -2.66 * invT + 0.50321666580472 * (88207) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.95 * q;      // C2H4
  wdot[4] += 0.39 * q;      // C3H6
  wdot[6] += 0.195 * q;     // iC4H8
  wdot[7] += 0.1833333 * q; // C6H6
  wdot[8] += 0.15 * q;      // C6H5CH3
  wdot[9] += q;             // H
  wdot[18] += q;            // CH3
  // d()/d[POSF10325]
  dqdci = +k_f;
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.95 * dqdci;      // dwdot[C2H4]/d[POSF10325]
  J[4] += 0.39 * dqdci;      // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.195 * dqdci;     // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1833333 * dqdci; // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.15 * dqdci;      // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += dqdci;             // dwdot[H]/d[POSF10325]
  J[18] += dqdci;            // dwdot[CH3]/d[POSF10325]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.95 * dqdT;      // dwdot[C2H4]/dT
  J[1486] += 0.39 * dqdT;      // dwdot[C3H6]/dT
  J[1488] += 0.195 * dqdT;     // dwdot[iC4H8]/dT
  J[1489] += 0.1833333 * dqdT; // dwdot[C6H6]/dT
  J[1490] += 0.15 * dqdT;      // dwdot[C6H5CH3]/dT
  J[1491] += dqdT;             // dwdot[H]/dT
  J[1500] += dqdT;             // dwdot[CH3]/dT

  // reaction 1: H + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575 C6H5CH3
  // + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2 + 0.243083 iC4H8 a
  // non-third-body and non-pressure-fall-off reaction forward
  phi_f = sc[0] * sc[9];
  k_f = 1.53e-07 * exp(4.76 * tc[0] - 0.50321666580472 * (1294.9) * invT);
  dlnkfdT = 4.76 * invT + 0.50321666580472 * (1294.9) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.8308333 * q; // C2H4
  wdot[2] += 0.05 * q;      // CH4
  wdot[3] += q;             // H2
  wdot[4] += 0.4861667 * q; // C3H6
  wdot[6] += 0.2430833 * q; // iC4H8
  wdot[7] += 0.1925 * q;    // C6H6
  wdot[8] += 0.1575 * q;    // C6H5CH3
  wdot[9] -= 0.6 * q;       // H
  wdot[18] += 0.6 * q;      // CH3
  // d()/d[POSF10325]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.8308333 * dqdci; // dwdot[C2H4]/d[POSF10325]
  J[2] += 0.05 * dqdci;      // dwdot[CH4]/d[POSF10325]
  J[3] += dqdci;             // dwdot[H2]/d[POSF10325]
  J[4] += 0.4861667 * dqdci; // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1925 * dqdci;    // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += -0.6 * dqdci;      // dwdot[H]/d[POSF10325]
  J[18] += 0.6 * dqdci;      // dwdot[CH3]/d[POSF10325]
  // d()/d[H]
  dqdci = +k_f * sc[0];
  J[351] -= dqdci;             // dwdot[POSF10325]/d[H]
  J[352] += 2.8308333 * dqdci; // dwdot[C2H4]/d[H]
  J[353] += 0.05 * dqdci;      // dwdot[CH4]/d[H]
  J[354] += dqdci;             // dwdot[H2]/d[H]
  J[355] += 0.4861667 * dqdci; // dwdot[C3H6]/d[H]
  J[357] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[H]
  J[358] += 0.1925 * dqdci;    // dwdot[C6H6]/d[H]
  J[359] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[H]
  J[360] += -0.6 * dqdci;      // dwdot[H]/d[H]
  J[369] += 0.6 * dqdci;       // dwdot[CH3]/d[H]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.8308333 * dqdT; // dwdot[C2H4]/dT
  J[1484] += 0.05 * dqdT;      // dwdot[CH4]/dT
  J[1485] += dqdT;             // dwdot[H2]/dT
  J[1486] += 0.4861667 * dqdT; // dwdot[C3H6]/dT
  J[1488] += 0.2430833 * dqdT; // dwdot[iC4H8]/dT
  J[1489] += 0.1925 * dqdT;    // dwdot[C6H6]/dT
  J[1490] += 0.1575 * dqdT;    // dwdot[C6H5CH3]/dT
  J[1491] += -0.6 * dqdT;      // dwdot[H]/dT
  J[1500] += 0.6 * dqdT;       // dwdot[CH3]/dT

  // reaction 2: CH3 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
  // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 1.05 CH4 + 0.4 H + 0.243083 iC4H8 a
  // non-third-body and non-pressure-fall-off reaction forward
  phi_f = sc[0] * sc[18];
  k_f = 9.52e-13 * exp(5.95 * tc[0] - 0.50321666580472 * (4748.4) * invT);
  dlnkfdT = 5.95 * invT + 0.50321666580472 * (4748.4) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.8308333 * q; // C2H4
  wdot[2] += 1.05 * q;      // CH4
  wdot[4] += 0.4861667 * q; // C3H6
  wdot[6] += 0.2430833 * q; // iC4H8
  wdot[7] += 0.1925 * q;    // C6H6
  wdot[8] += 0.1575 * q;    // C6H5CH3
  wdot[9] += 0.4 * q;       // H
  wdot[18] -= 0.4 * q;      // CH3
  // d()/d[POSF10325]
  dqdci = +k_f * sc[18];
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.8308333 * dqdci; // dwdot[C2H4]/d[POSF10325]
  J[2] += 1.05 * dqdci;      // dwdot[CH4]/d[POSF10325]
  J[4] += 0.4861667 * dqdci; // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1925 * dqdci;    // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += 0.4 * dqdci;       // dwdot[H]/d[POSF10325]
  J[18] += -0.4 * dqdci;     // dwdot[CH3]/d[POSF10325]
  // d()/d[CH3]
  dqdci = +k_f * sc[0];
  J[702] -= dqdci;             // dwdot[POSF10325]/d[CH3]
  J[703] += 2.8308333 * dqdci; // dwdot[C2H4]/d[CH3]
  J[704] += 1.05 * dqdci;      // dwdot[CH4]/d[CH3]
  J[706] += 0.4861667 * dqdci; // dwdot[C3H6]/d[CH3]
  J[708] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[CH3]
  J[709] += 0.1925 * dqdci;    // dwdot[C6H6]/d[CH3]
  J[710] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[CH3]
  J[711] += 0.4 * dqdci;       // dwdot[H]/d[CH3]
  J[720] += -0.4 * dqdci;      // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.8308333 * dqdT; // dwdot[C2H4]/dT
  J[1484] += 1.05 * dqdT;      // dwdot[CH4]/dT
  J[1486] += 0.4861667 * dqdT; // dwdot[C3H6]/dT
  J[1488] += 0.2430833 * dqdT; // dwdot[iC4H8]/dT
  J[1489] += 0.1925 * dqdT;    // dwdot[C6H6]/dT
  J[1490] += 0.1575 * dqdT;    // dwdot[C6H5CH3]/dT
  J[1491] += 0.4 * dqdT;       // dwdot[H]/dT
  J[1500] += -0.4 * dqdT;      // dwdot[CH3]/dT

  // reaction 3: OH + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575 C6H5CH3
  // + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2O + 0.243083 iC4H8 a
  // non-third-body and non-pressure-fall-off reaction forward
  phi_f = sc[0] * sc[11];
  k_f = 35500 * exp(1.02 * tc[0] - 0.50321666580472 * (213.2) * invT);
  dlnkfdT = 1.02 * invT + 0.50321666580472 * (213.2) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.8308333 * q; // C2H4
  wdot[2] += 0.05 * q;      // CH4
  wdot[4] += 0.4861667 * q; // C3H6
  wdot[6] += 0.2430833 * q; // iC4H8
  wdot[7] += 0.1925 * q;    // C6H6
  wdot[8] += 0.1575 * q;    // C6H5CH3
  wdot[9] += 0.4 * q;       // H
  wdot[11] -= q;            // OH
  wdot[13] += q;            // H2O
  wdot[18] += 0.6 * q;      // CH3
  // d()/d[POSF10325]
  dqdci = +k_f * sc[11];
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.8308333 * dqdci; // dwdot[C2H4]/d[POSF10325]
  J[2] += 0.05 * dqdci;      // dwdot[CH4]/d[POSF10325]
  J[4] += 0.4861667 * dqdci; // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1925 * dqdci;    // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += 0.4 * dqdci;       // dwdot[H]/d[POSF10325]
  J[11] -= dqdci;            // dwdot[OH]/d[POSF10325]
  J[13] += dqdci;            // dwdot[H2O]/d[POSF10325]
  J[18] += 0.6 * dqdci;      // dwdot[CH3]/d[POSF10325]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[429] -= dqdci;             // dwdot[POSF10325]/d[OH]
  J[430] += 2.8308333 * dqdci; // dwdot[C2H4]/d[OH]
  J[431] += 0.05 * dqdci;      // dwdot[CH4]/d[OH]
  J[433] += 0.4861667 * dqdci; // dwdot[C3H6]/d[OH]
  J[435] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[OH]
  J[436] += 0.1925 * dqdci;    // dwdot[C6H6]/d[OH]
  J[437] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[OH]
  J[438] += 0.4 * dqdci;       // dwdot[H]/d[OH]
  J[440] -= dqdci;             // dwdot[OH]/d[OH]
  J[442] += dqdci;             // dwdot[H2O]/d[OH]
  J[447] += 0.6 * dqdci;       // dwdot[CH3]/d[OH]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.8308333 * dqdT; // dwdot[C2H4]/dT
  J[1484] += 0.05 * dqdT;      // dwdot[CH4]/dT
  J[1486] += 0.4861667 * dqdT; // dwdot[C3H6]/dT
  J[1488] += 0.2430833 * dqdT; // dwdot[iC4H8]/dT
  J[1489] += 0.1925 * dqdT;    // dwdot[C6H6]/dT
  J[1490] += 0.1575 * dqdT;    // dwdot[C6H5CH3]/dT
  J[1491] += 0.4 * dqdT;       // dwdot[H]/dT
  J[1493] -= dqdT;             // dwdot[OH]/dT
  J[1495] += dqdT;             // dwdot[H2O]/dT
  J[1500] += 0.6 * dqdT;       // dwdot[CH3]/dT

  // reaction 4: O2 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575 C6H5CH3
  // + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + HO2 + 0.243083 iC4H8 a
  // non-third-body and non-pressure-fall-off reaction forward
  phi_f = sc[0] * sc[15];
  k_f = 255000000 * exp(0.06 * tc[0] - 0.50321666580472 * (47532.6) * invT);
  dlnkfdT = 0.06 * invT + 0.50321666580472 * (47532.6) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.8308333 * q; // C2H4
  wdot[2] += 0.05 * q;      // CH4
  wdot[4] += 0.4861667 * q; // C3H6
  wdot[6] += 0.2430833 * q; // iC4H8
  wdot[7] += 0.1925 * q;    // C6H6
  wdot[8] += 0.1575 * q;    // C6H5CH3
  wdot[9] += 0.4 * q;       // H
  wdot[12] += q;            // HO2
  wdot[15] -= q;            // O2
  wdot[18] += 0.6 * q;      // CH3
  // d()/d[POSF10325]
  dqdci = +k_f * sc[15];
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.8308333 * dqdci; // dwdot[C2H4]/d[POSF10325]
  J[2] += 0.05 * dqdci;      // dwdot[CH4]/d[POSF10325]
  J[4] += 0.4861667 * dqdci; // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1925 * dqdci;    // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += 0.4 * dqdci;       // dwdot[H]/d[POSF10325]
  J[12] += dqdci;            // dwdot[HO2]/d[POSF10325]
  J[15] -= dqdci;            // dwdot[O2]/d[POSF10325]
  J[18] += 0.6 * dqdci;      // dwdot[CH3]/d[POSF10325]
  // d()/d[O2]
  dqdci = +k_f * sc[0];
  J[585] -= dqdci;             // dwdot[POSF10325]/d[O2]
  J[586] += 2.8308333 * dqdci; // dwdot[C2H4]/d[O2]
  J[587] += 0.05 * dqdci;      // dwdot[CH4]/d[O2]
  J[589] += 0.4861667 * dqdci; // dwdot[C3H6]/d[O2]
  J[591] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[O2]
  J[592] += 0.1925 * dqdci;    // dwdot[C6H6]/d[O2]
  J[593] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[O2]
  J[594] += 0.4 * dqdci;       // dwdot[H]/d[O2]
  J[597] += dqdci;             // dwdot[HO2]/d[O2]
  J[600] -= dqdci;             // dwdot[O2]/d[O2]
  J[603] += 0.6 * dqdci;       // dwdot[CH3]/d[O2]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.8308333 * dqdT; // dwdot[C2H4]/dT
  J[1484] += 0.05 * dqdT;      // dwdot[CH4]/dT
  J[1486] += 0.4861667 * dqdT; // dwdot[C3H6]/dT
  J[1488] += 0.2430833 * dqdT; // dwdot[iC4H8]/dT
  J[1489] += 0.1925 * dqdT;    // dwdot[C6H6]/dT
  J[1490] += 0.1575 * dqdT;    // dwdot[C6H5CH3]/dT
  J[1491] += 0.4 * dqdT;       // dwdot[H]/dT
  J[1494] += dqdT;             // dwdot[HO2]/dT
  J[1497] -= dqdT;             // dwdot[O2]/dT
  J[1500] += 0.6 * dqdT;       // dwdot[CH3]/dT

  // reaction 5: HO2 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
  // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2O2 + 0.243083 iC4H8
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[12];
  k_f = 0.0233 * exp(2.94 * tc[0] - 0.50321666580472 * (14810) * invT);
  dlnkfdT = 2.94 * invT + 0.50321666580472 * (14810) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.8308333 * q; // C2H4
  wdot[2] += 0.05 * q;      // CH4
  wdot[4] += 0.4861667 * q; // C3H6
  wdot[6] += 0.2430833 * q; // iC4H8
  wdot[7] += 0.1925 * q;    // C6H6
  wdot[8] += 0.1575 * q;    // C6H5CH3
  wdot[9] += 0.4 * q;       // H
  wdot[12] -= q;            // HO2
  wdot[14] += q;            // H2O2
  wdot[18] += 0.6 * q;      // CH3
  // d()/d[POSF10325]
  dqdci = +k_f * sc[12];
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.8308333 * dqdci; // dwdot[C2H4]/d[POSF10325]
  J[2] += 0.05 * dqdci;      // dwdot[CH4]/d[POSF10325]
  J[4] += 0.4861667 * dqdci; // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1925 * dqdci;    // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += 0.4 * dqdci;       // dwdot[H]/d[POSF10325]
  J[12] -= dqdci;            // dwdot[HO2]/d[POSF10325]
  J[14] += dqdci;            // dwdot[H2O2]/d[POSF10325]
  J[18] += 0.6 * dqdci;      // dwdot[CH3]/d[POSF10325]
  // d()/d[HO2]
  dqdci = +k_f * sc[0];
  J[468] -= dqdci;             // dwdot[POSF10325]/d[HO2]
  J[469] += 2.8308333 * dqdci; // dwdot[C2H4]/d[HO2]
  J[470] += 0.05 * dqdci;      // dwdot[CH4]/d[HO2]
  J[472] += 0.4861667 * dqdci; // dwdot[C3H6]/d[HO2]
  J[474] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[HO2]
  J[475] += 0.1925 * dqdci;    // dwdot[C6H6]/d[HO2]
  J[476] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[HO2]
  J[477] += 0.4 * dqdci;       // dwdot[H]/d[HO2]
  J[480] -= dqdci;             // dwdot[HO2]/d[HO2]
  J[482] += dqdci;             // dwdot[H2O2]/d[HO2]
  J[486] += 0.6 * dqdci;       // dwdot[CH3]/d[HO2]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.8308333 * dqdT; // dwdot[C2H4]/dT
  J[1484] += 0.05 * dqdT;      // dwdot[CH4]/dT
  J[1486] += 0.4861667 * dqdT; // dwdot[C3H6]/dT
  J[1488] += 0.2430833 * dqdT; // dwdot[iC4H8]/dT
  J[1489] += 0.1925 * dqdT;    // dwdot[C6H6]/dT
  J[1490] += 0.1575 * dqdT;    // dwdot[C6H5CH3]/dT
  J[1491] += 0.4 * dqdT;       // dwdot[H]/dT
  J[1494] -= dqdT;             // dwdot[HO2]/dT
  J[1496] += dqdT;             // dwdot[H2O2]/dT
  J[1500] += 0.6 * dqdT;       // dwdot[CH3]/dT

  // reaction 6: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 26440000000 * exp(-0.6707 * tc[0] - 0.50321666580472 * (17041) * invT);
  dlnkfdT = -0.6707 * invT + 0.50321666580472 * (17041) * invT2;
  // reverse
  phi_r = sc[10] * sc[11];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[11] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[10] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[10] += q; // O
  wdot[11] += q; // OH
  wdot[15] -= q; // O2
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[361] += dqdci; // dwdot[O]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  J[366] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[11];
  J[399] -= dqdci; // dwdot[H]/d[O]
  J[400] += dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[405] -= dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[438] -= dqdci; // dwdot[H]/d[OH]
  J[439] += dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[444] -= dqdci; // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[594] -= dqdci; // dwdot[H]/d[O2]
  J[595] += dqdci; // dwdot[O]/d[O2]
  J[596] += dqdci; // dwdot[OH]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1492] += dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT

  // reaction 7: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 0.04589 * exp(2.7 * tc[0] - 0.50321666580472 * (6260) * invT);
  dlnkfdT = 2.7 * invT + 0.50321666580472 * (6260) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[10];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[127] -= dqdci; // dwdot[O]/d[H2]
  J[128] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[3];
  J[393] -= dqdci; // dwdot[H2]/d[O]
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[432] -= dqdci; // dwdot[H2]/d[OH]
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT

  // reaction 8: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 173.4 * exp(1.51 * tc[0] - 0.50321666580472 * (3430) * invT);
  dlnkfdT = 1.51 * invT + 0.50321666580472 * (3430) * invT2;
  // reverse
  phi_r = sc[9] * sc[13];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[11] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[9] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[11];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[128] -= dqdci; // dwdot[OH]/d[H2]
  J[130] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[364] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[3];
  J[432] -= dqdci; // dwdot[H2]/d[OH]
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[510] -= dqdci; // dwdot[H2]/d[H2O]
  J[516] += dqdci; // dwdot[H]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT

  // reaction 9: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 0.03973 * exp(2.4 * tc[0] - 0.50321666580472 * (-2110) * invT);
  dlnkfdT = 2.4 * invT + 0.50321666580472 * (-2110) * invT2;
  // reverse
  phi_r = sc[10] * sc[13];
  Kc = exp(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[10] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q;     // O
  wdot[11] -= 2 * q; // OH
  wdot[13] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[13];
  J[400] += dqdci;      // dwdot[O]/d[O]
  J[401] += -2 * dqdci; // dwdot[OH]/d[O]
  J[403] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[11];
  J[439] += dqdci;      // dwdot[O]/d[OH]
  J[440] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[517] += dqdci;      // dwdot[O]/d[H2O]
  J[518] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1492] += dqdT;      // dwdot[O]/dT
  J[1493] += -2 * dqdT; // dwdot[OH]/dT
  J[1495] += dqdT;      // dwdot[H2O]/dT

  // reaction 16: H2 + O2 <=> H + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 0.5916 * exp(2.433 * tc[0] - 0.50321666580472 * (53502) * invT);
  dlnkfdT = 2.433 * invT + 0.50321666580472 * (53502) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = exp(g_RT[3] - g_RT[9] - g_RT[12] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[9] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[9] += q;  // H
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  // d()/d[H2]
  dqdci = +k_f * sc[15];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[129] += dqdci; // dwdot[HO2]/d[H2]
  J[132] -= dqdci; // dwdot[O2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[363] += dqdci; // dwdot[HO2]/d[H]
  J[366] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[9];
  J[471] -= dqdci; // dwdot[H2]/d[HO2]
  J[477] += dqdci; // dwdot[H]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[3];
  J[588] -= dqdci; // dwdot[H2]/d[O2]
  J[594] += dqdci; // dwdot[H]/d[O2]
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT

  // reaction 18: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 74850000 * exp(0 * tc[0] - 0.50321666580472 * (295) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (295) * invT2;
  // reverse
  phi_r = (sc[11] * sc[11]);
  Kc = exp(g_RT[9] - 2.000000 * g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (2.000000 * h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;      // H
  wdot[11] += 2 * q; // OH
  wdot[12] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[12];
  J[360] -= dqdci;     // dwdot[H]/d[H]
  J[362] += 2 * dqdci; // dwdot[OH]/d[H]
  J[363] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[11];
  J[438] -= dqdci;     // dwdot[H]/d[OH]
  J[440] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[9];
  J[477] -= dqdci;     // dwdot[H]/d[HO2]
  J[479] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1491] -= dqdT;     // dwdot[H]/dT
  J[1493] += 2 * dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT;     // dwdot[HO2]/dT

  // reaction 19: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[15];
  Kc = exp(g_RT[10] - g_RT[11] + g_RT[12] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (h_RT[11] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[15] += q; // O2
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[402] -= dqdci; // dwdot[HO2]/d[O]
  J[405] += dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[444] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[478] -= dqdci; // dwdot[O]/d[HO2]
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[11];
  J[595] -= dqdci; // dwdot[O]/d[O2]
  J[596] += dqdci; // dwdot[OH]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1497] += dqdT; // dwdot[O2]/dT

  // reaction 20: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 130000 * exp(0 * tc[0] - 0.50321666580472 * (-1630) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-1630) * invT2;
  // reverse
  phi_r = sc[14] * sc[15];
  Kc = exp(2.000000 * g_RT[12] - g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[14] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= 2 * q; // HO2
  wdot[14] += q;     // H2O2
  wdot[15] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[12];
  J[480] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[482] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[483] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[15];
  J[558] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[560] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[561] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[14];
  J[597] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[599] += dqdci;      // dwdot[H2O2]/d[O2]
  J[600] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[1494] += -2 * dqdT; // dwdot[HO2]/dT
  J[1496] += dqdT;      // dwdot[H2O2]/dT
  J[1497] += dqdT;      // dwdot[O2]/dT

  // reaction 21: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 365800000 * exp(0 * tc[0] - 0.50321666580472 * (12000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (12000) * invT2;
  // reverse
  phi_r = sc[14] * sc[15];
  Kc = exp(2.000000 * g_RT[12] - g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[14] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= 2 * q; // HO2
  wdot[14] += q;     // H2O2
  wdot[15] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[12];
  J[480] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[482] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[483] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[15];
  J[558] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[560] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[561] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[14];
  J[597] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[599] += dqdci;      // dwdot[H2O2]/d[O2]
  J[600] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[1494] += -2 * dqdT; // dwdot[HO2]/dT
  J[1496] += dqdT;      // dwdot[H2O2]/dT
  J[1497] += dqdT;      // dwdot[O2]/dT

  // reaction 22: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 1410000000000 * exp(-1.76 * tc[0] - 0.50321666580472 * (60) * invT);
  dlnkfdT = -1.76 * invT + 0.50321666580472 * (60) * invT2;
  // reverse
  phi_r = sc[13] * sc[15];
  Kc = exp(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[13] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[12] -= q; // HO2
  wdot[13] += q; // H2O
  wdot[15] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[444] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[479] -= dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[481] += dqdci; // dwdot[H2O]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[519] -= dqdci; // dwdot[HO2]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[522] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[13];
  J[596] -= dqdci; // dwdot[OH]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[598] += dqdci; // dwdot[H2O]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1497] += dqdT; // dwdot[O2]/dT

  // reaction 23: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 5.37e+64 * exp(-16.72 * tc[0] - 0.50321666580472 * (32900) * invT);
  dlnkfdT = -16.72 * invT + 0.50321666580472 * (32900) * invT2;
  // reverse
  phi_r = sc[13] * sc[15];
  Kc = exp(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[13] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[12] -= q; // HO2
  wdot[13] += q; // H2O
  wdot[15] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[444] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[479] -= dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[481] += dqdci; // dwdot[H2O]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[519] -= dqdci; // dwdot[HO2]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[522] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[13];
  J[596] -= dqdci; // dwdot[OH]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[598] += dqdci; // dwdot[H2O]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1497] += dqdT; // dwdot[O2]/dT

  // reaction 24: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 2510000 * exp(2 * tc[0] - 0.50321666580472 * (40000) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (40000) * invT2;
  // reverse
  phi_r = sc[13] * sc[15];
  Kc = exp(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[13] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[12] -= q; // HO2
  wdot[13] += q; // H2O
  wdot[15] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[444] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[479] -= dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[481] += dqdci; // dwdot[H2O]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[519] -= dqdci; // dwdot[HO2]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[522] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[13];
  J[596] -= dqdci; // dwdot[OH]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[598] += dqdci; // dwdot[H2O]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1497] += dqdT; // dwdot[O2]/dT

  // reaction 25: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[14];
  k_f = 6.05 * exp(2 * tc[0] - 0.50321666580472 * (5200) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (5200) * invT2;
  // reverse
  phi_r = sc[3] * sc[12];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[12] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[14]) + (h_RT[3] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[12] += q; // HO2
  wdot[14] -= q; // H2O2
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[129] += dqdci; // dwdot[HO2]/d[H2]
  J[131] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[363] += dqdci; // dwdot[HO2]/d[H]
  J[365] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[3];
  J[471] += dqdci; // dwdot[H2]/d[HO2]
  J[477] -= dqdci; // dwdot[H]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[482] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[9];
  J[549] += dqdci; // dwdot[H2]/d[H2O2]
  J[555] -= dqdci; // dwdot[H]/d[H2O2]
  J[558] += dqdci; // dwdot[HO2]/d[H2O2]
  J[560] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1496] -= dqdT; // dwdot[H2O2]/dT

  // reaction 26: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[14];
  k_f = 24100000 * exp(0 * tc[0] - 0.50321666580472 * (3970) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3970) * invT2;
  // reverse
  phi_r = sc[11] * sc[13];
  Kc = exp(g_RT[9] - g_RT[11] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[14]) + (h_RT[11] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[11] += q; // OH
  wdot[13] += q; // H2O
  wdot[14] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  J[364] += dqdci; // dwdot[H2O]/d[H]
  J[365] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[438] -= dqdci; // dwdot[H]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[443] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[516] -= dqdci; // dwdot[H]/d[H2O]
  J[518] += dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[521] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[9];
  J[555] -= dqdci; // dwdot[H]/d[H2O2]
  J[557] += dqdci; // dwdot[OH]/d[H2O2]
  J[559] += dqdci; // dwdot[H2O]/d[H2O2]
  J[560] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1496] -= dqdT; // dwdot[H2O2]/dT

  // reaction 27: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[14];
  k_f = 2.67e+35 * exp(-7 * tc[0] - 0.50321666580472 * (37600) * invT);
  dlnkfdT = -7 * invT + 0.50321666580472 * (37600) * invT2;
  // reverse
  phi_r = sc[12] * sc[13];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[14]) + (h_RT[12] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[12] += q; // HO2
  wdot[13] += q; // H2O
  wdot[14] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[441] += dqdci; // dwdot[HO2]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[443] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[13];
  J[479] -= dqdci; // dwdot[OH]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[481] += dqdci; // dwdot[H2O]/d[HO2]
  J[482] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[519] += dqdci; // dwdot[HO2]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[521] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[11];
  J[557] -= dqdci; // dwdot[OH]/d[H2O2]
  J[558] += dqdci; // dwdot[HO2]/d[H2O2]
  J[559] += dqdci; // dwdot[H2O]/d[H2O2]
  J[560] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1496] -= dqdT; // dwdot[H2O2]/dT

  // reaction 29: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[22];
  k_f = 0.07046 * exp(2.053 * tc[0] - 0.50321666580472 * (-355.67) * invT);
  dlnkfdT = 2.053 * invT + 0.50321666580472 * (-355.67) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(-g_RT[9] + g_RT[11] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[22]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[22] -= q; // CO
  wdot[23] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[373] -= dqdci; // dwdot[CO]/d[H]
  J[374] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[451] -= dqdci; // dwdot[CO]/d[OH]
  J[452] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[11];
  J[867] += dqdci; // dwdot[H]/d[CO]
  J[869] -= dqdci; // dwdot[OH]/d[CO]
  J[880] -= dqdci; // dwdot[CO]/d[CO]
  J[881] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[9];
  J[906] += dqdci; // dwdot[H]/d[CO2]
  J[908] -= dqdci; // dwdot[OH]/d[CO2]
  J[919] -= dqdci; // dwdot[CO]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 30: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[22];
  k_f = 5757000 * exp(-0.664 * tc[0] - 0.50321666580472 * (331.83) * invT);
  dlnkfdT = -0.664 * invT + 0.50321666580472 * (331.83) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(-g_RT[9] + g_RT[11] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[22]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[22] -= q; // CO
  wdot[23] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[373] -= dqdci; // dwdot[CO]/d[H]
  J[374] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[451] -= dqdci; // dwdot[CO]/d[OH]
  J[452] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[11];
  J[867] += dqdci; // dwdot[H]/d[CO]
  J[869] -= dqdci; // dwdot[OH]/d[CO]
  J[880] -= dqdci; // dwdot[CO]/d[CO]
  J[881] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[9];
  J[906] += dqdci; // dwdot[H]/d[CO2]
  J[908] -= dqdci; // dwdot[OH]/d[CO2]
  J[919] -= dqdci; // dwdot[CO]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 31: CO + O2 <=> CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[22];
  k_f = 1119000 * exp(0 * tc[0] - 0.50321666580472 * (47700) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (47700) * invT2;
  // reverse
  phi_r = sc[10] * sc[23];
  Kc = exp(-g_RT[10] + g_RT[15] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[22]) + (h_RT[10] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // O
  wdot[15] -= q; // O2
  wdot[22] -= q; // CO
  wdot[23] += q; // CO2
  // d()/d[O]
  dqdci = -k_r * sc[23];
  J[400] += dqdci; // dwdot[O]/d[O]
  J[405] -= dqdci; // dwdot[O2]/d[O]
  J[412] -= dqdci; // dwdot[CO]/d[O]
  J[413] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[22];
  J[595] += dqdci; // dwdot[O]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[607] -= dqdci; // dwdot[CO]/d[O2]
  J[608] += dqdci; // dwdot[CO2]/d[O2]
  // d()/d[CO]
  dqdci = +k_f * sc[15];
  J[868] += dqdci; // dwdot[O]/d[CO]
  J[873] -= dqdci; // dwdot[O2]/d[CO]
  J[880] -= dqdci; // dwdot[CO]/d[CO]
  J[881] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[10];
  J[907] += dqdci; // dwdot[O]/d[CO2]
  J[912] -= dqdci; // dwdot[O2]/d[CO2]
  J[919] -= dqdci; // dwdot[CO]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1492] += dqdT; // dwdot[O]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 32: CO + HO2 <=> CO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[22];
  k_f = 0.157 * exp(2.18 * tc[0] - 0.50321666580472 * (17942.61) * invT);
  dlnkfdT = 2.18 * invT + 0.50321666580472 * (17942.61) * invT2;
  // reverse
  phi_r = sc[11] * sc[23];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[22]) + (h_RT[11] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[22] -= q; // CO
  wdot[23] += q; // CO2
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[451] -= dqdci; // dwdot[CO]/d[OH]
  J[452] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[490] -= dqdci; // dwdot[CO]/d[HO2]
  J[491] += dqdci; // dwdot[CO2]/d[HO2]
  // d()/d[CO]
  dqdci = +k_f * sc[12];
  J[869] += dqdci; // dwdot[OH]/d[CO]
  J[870] -= dqdci; // dwdot[HO2]/d[CO]
  J[880] -= dqdci; // dwdot[CO]/d[CO]
  J[881] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[11];
  J[908] += dqdci; // dwdot[OH]/d[CO2]
  J[909] -= dqdci; // dwdot[HO2]/d[CO2]
  J[919] -= dqdci; // dwdot[CO]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 33: H + HCO <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 120000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[22];
  Kc = exp(-g_RT[3] + g_RT[9] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[19]) + (h_RT[3] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[136] -= dqdci; // dwdot[HCO]/d[H2]
  J[139] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[370] -= dqdci; // dwdot[HCO]/d[H]
  J[373] += dqdci; // dwdot[CO]/d[H]
  // d()/d[HCO]
  dqdci = +k_f * sc[9];
  J[744] += dqdci; // dwdot[H2]/d[HCO]
  J[750] -= dqdci; // dwdot[H]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[3];
  J[861] += dqdci; // dwdot[H2]/d[CO]
  J[867] -= dqdci; // dwdot[H]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 34: HCO + O <=> CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[19];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[22];
  Kc = exp(g_RT[10] - g_RT[11] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[19]) + (h_RT[11] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[409] -= dqdci; // dwdot[HCO]/d[O]
  J[412] += dqdci; // dwdot[CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[22];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[448] -= dqdci; // dwdot[HCO]/d[OH]
  J[451] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[HCO]
  dqdci = +k_f * sc[10];
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[752] += dqdci; // dwdot[OH]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[11];
  J[868] -= dqdci; // dwdot[O]/d[CO]
  J[869] += dqdci; // dwdot[OH]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 35: HCO + O <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[19];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[19] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[19]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[19] -= q; // HCO
  wdot[23] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[370] -= dqdci; // dwdot[HCO]/d[H]
  J[374] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[409] -= dqdci; // dwdot[HCO]/d[O]
  J[413] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[HCO]
  dqdci = +k_f * sc[10];
  J[750] += dqdci; // dwdot[H]/d[HCO]
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[764] += dqdci; // dwdot[CO2]/d[HCO]
  // d()/d[CO2]
  dqdci = -k_r * sc[9];
  J[906] += dqdci; // dwdot[H]/d[CO2]
  J[907] -= dqdci; // dwdot[O]/d[CO2]
  J[916] -= dqdci; // dwdot[HCO]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 36: HCO + OH <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[19];
  k_f = 30200000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[22];
  Kc = exp(g_RT[11] - g_RT[13] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[19]) + (h_RT[13] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[448] -= dqdci; // dwdot[HCO]/d[OH]
  J[451] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[526] -= dqdci; // dwdot[HCO]/d[H2O]
  J[529] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[HCO]
  dqdci = +k_f * sc[11];
  J[752] -= dqdci; // dwdot[OH]/d[HCO]
  J[754] += dqdci; // dwdot[H2O]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[13];
  J[869] -= dqdci; // dwdot[OH]/d[CO]
  J[871] += dqdci; // dwdot[H2O]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 39: HCO + O2 <=> CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[19];
  k_f = 12040 * exp(0.807 * tc[0] - 0.50321666580472 * (-727) * invT);
  dlnkfdT = 0.807 * invT + 0.50321666580472 * (-727) * invT2;
  // reverse
  phi_r = sc[12] * sc[22];
  Kc = exp(-g_RT[12] + g_RT[15] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[19]) + (h_RT[12] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[HO2]
  dqdci = -k_r * sc[22];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[487] -= dqdci; // dwdot[HCO]/d[HO2]
  J[490] += dqdci; // dwdot[CO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[604] -= dqdci; // dwdot[HCO]/d[O2]
  J[607] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[HCO]
  dqdci = +k_f * sc[15];
  J[753] += dqdci; // dwdot[HO2]/d[HCO]
  J[756] -= dqdci; // dwdot[O2]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[12];
  J[870] += dqdci; // dwdot[HO2]/d[CO]
  J[873] -= dqdci; // dwdot[O2]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 43: CH2 + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 80000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[19];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[16] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[9] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[16] -= q; // CH2
  wdot[19] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[19];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[367] -= dqdci; // dwdot[CH2]/d[H]
  J[370] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[406] -= dqdci; // dwdot[CH2]/d[O]
  J[409] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH2]
  dqdci = +k_f * sc[10];
  J[633] += dqdci; // dwdot[H]/d[CH2]
  J[634] -= dqdci; // dwdot[O]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[643] += dqdci; // dwdot[HCO]/d[CH2]
  // d()/d[HCO]
  dqdci = -k_r * sc[9];
  J[750] += dqdci; // dwdot[H]/d[HCO]
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[757] -= dqdci; // dwdot[CH2]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT

  // reaction 44: CH2 + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[16];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[20];
  Kc = exp(-g_RT[9] + g_RT[11] + g_RT[16] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[16]) + (h_RT[9] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[16] -= q; // CH2
  wdot[20] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[20];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[367] -= dqdci; // dwdot[CH2]/d[H]
  J[371] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[445] -= dqdci; // dwdot[CH2]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2]
  dqdci = +k_f * sc[11];
  J[633] += dqdci; // dwdot[H]/d[CH2]
  J[635] -= dqdci; // dwdot[OH]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[644] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[9];
  J[789] += dqdci; // dwdot[H]/d[CH2O]
  J[791] -= dqdci; // dwdot[OH]/d[CH2O]
  J[796] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 45: CH2 + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 0.5 * exp(2 * tc[0] - 0.50321666580472 * (7230) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (7230) * invT2;
  // reverse
  phi_r = sc[9] * sc[18];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[9] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[9] += q;  // H
  wdot[16] -= q; // CH2
  wdot[18] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[16];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[133] -= dqdci; // dwdot[CH2]/d[H2]
  J[135] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[367] -= dqdci; // dwdot[CH2]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[3];
  J[627] -= dqdci; // dwdot[H2]/d[CH2]
  J[633] += dqdci; // dwdot[H]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[642] += dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = -k_r * sc[9];
  J[705] -= dqdci; // dwdot[H2]/d[CH3]
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[718] -= dqdci; // dwdot[CH2]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 46: CH2 + O2 <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[16];
  k_f = 10600000 * exp(0 * tc[0] - 0.50321666580472 * (1500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1500) * invT2;
  // reverse
  phi_r = sc[11] * sc[19];
  Kc = exp(-g_RT[11] + g_RT[15] + g_RT[16] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[16]) + (h_RT[11] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[15] -= q; // O2
  wdot[16] -= q; // CH2
  wdot[19] += q; // HCO
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[444] -= dqdci; // dwdot[O2]/d[OH]
  J[445] -= dqdci; // dwdot[CH2]/d[OH]
  J[448] += dqdci; // dwdot[HCO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[596] += dqdci; // dwdot[OH]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[601] -= dqdci; // dwdot[CH2]/d[O2]
  J[604] += dqdci; // dwdot[HCO]/d[O2]
  // d()/d[CH2]
  dqdci = +k_f * sc[15];
  J[635] += dqdci; // dwdot[OH]/d[CH2]
  J[639] -= dqdci; // dwdot[O2]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[643] += dqdci; // dwdot[HCO]/d[CH2]
  // d()/d[HCO]
  dqdci = -k_r * sc[11];
  J[752] += dqdci; // dwdot[OH]/d[HCO]
  J[756] -= dqdci; // dwdot[O2]/d[HCO]
  J[757] -= dqdci; // dwdot[CH2]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT

  // reaction 47: CH2 + O2 <=> CO2 + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[16];
  k_f = 2640000 * exp(0 * tc[0] - 0.50321666580472 * (1500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1500) * invT2;
  // reverse
  phi_r = (sc[9] * sc[9]) * sc[23];
  Kc = refC * exp(-2.000000 * g_RT[9] + g_RT[15] + g_RT[16] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[16]) + (2.000000 * h_RT[9] + h_RT[23]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += 2 * q; // H
  wdot[15] -= q;    // O2
  wdot[16] -= q;    // CH2
  wdot[23] += q;    // CO2
  // d()/d[H]
  dqdci = -k_r * 2.000000 * sc[9] * sc[23];
  J[360] += 2 * dqdci; // dwdot[H]/d[H]
  J[366] -= dqdci;     // dwdot[O2]/d[H]
  J[367] -= dqdci;     // dwdot[CH2]/d[H]
  J[374] += dqdci;     // dwdot[CO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[594] += 2 * dqdci; // dwdot[H]/d[O2]
  J[600] -= dqdci;     // dwdot[O2]/d[O2]
  J[601] -= dqdci;     // dwdot[CH2]/d[O2]
  J[608] += dqdci;     // dwdot[CO2]/d[O2]
  // d()/d[CH2]
  dqdci = +k_f * sc[15];
  J[633] += 2 * dqdci; // dwdot[H]/d[CH2]
  J[639] -= dqdci;     // dwdot[O2]/d[CH2]
  J[640] -= dqdci;     // dwdot[CH2]/d[CH2]
  J[647] += dqdci;     // dwdot[CO2]/d[CH2]
  // d()/d[CO2]
  dqdci = -k_r * pow(sc[9], 2.000000);
  J[906] += 2 * dqdci; // dwdot[H]/d[CO2]
  J[912] -= dqdci;     // dwdot[O2]/d[CO2]
  J[913] -= dqdci;     // dwdot[CH2]/d[CO2]
  J[920] += dqdci;     // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1491] += 2 * dqdT; // dwdot[H]/dT
  J[1497] -= dqdT;     // dwdot[O2]/dT
  J[1498] -= dqdT;     // dwdot[CH2]/dT
  J[1505] += dqdT;     // dwdot[CO2]/dT

  // reaction 49: CH2* + N2 <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[37];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (600) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (600) * invT2;
  // reverse
  phi_r = sc[16] * sc[37];
  Kc = exp(-g_RT[16] + g_RT[17] + g_RT[37] - g_RT[37]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[37]) + (h_RT[16] + h_RT[37]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // CH2
  wdot[17] -= q; // CH2*
  // d()/d[CH2]
  dqdci = -k_r * sc[37];
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[641] -= dqdci; // dwdot[CH2*]/d[CH2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[37];
  J[679] += dqdci; // dwdot[CH2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  // d()/d[N2]
  dqdci = +k_f * sc[17] - k_r * sc[16];
  J[1459] += dqdci; // dwdot[CH2]/d[N2]
  J[1460] -= dqdci; // dwdot[CH2*]/d[N2]
  // d()/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT

  // reaction 50: CH2* + O <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[17];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[22];
  Kc = exp(-g_RT[3] + g_RT[10] + g_RT[17] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[17]) + (h_RT[3] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[10] -= q; // O
  wdot[17] -= q; // CH2*
  wdot[22] += q; // CO
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[127] -= dqdci; // dwdot[O]/d[H2]
  J[134] -= dqdci; // dwdot[CH2*]/d[H2]
  J[139] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[393] += dqdci; // dwdot[H2]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[407] -= dqdci; // dwdot[CH2*]/d[O]
  J[412] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH2*]
  dqdci = +k_f * sc[10];
  J[666] += dqdci; // dwdot[H2]/d[CH2*]
  J[673] -= dqdci; // dwdot[O]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[685] += dqdci; // dwdot[CO]/d[CH2*]
  // d()/d[CO]
  dqdci = -k_r * sc[3];
  J[861] += dqdci; // dwdot[H2]/d[CO]
  J[868] -= dqdci; // dwdot[O]/d[CO]
  J[875] -= dqdci; // dwdot[CH2*]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 51: CH2* + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[17];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[20];
  Kc = exp(-g_RT[9] + g_RT[11] + g_RT[17] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[17]) + (h_RT[9] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[17] -= q; // CH2*
  wdot[20] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[20];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[368] -= dqdci; // dwdot[CH2*]/d[H]
  J[371] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[446] -= dqdci; // dwdot[CH2*]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2*]
  dqdci = +k_f * sc[11];
  J[672] += dqdci; // dwdot[H]/d[CH2*]
  J[674] -= dqdci; // dwdot[OH]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[683] += dqdci; // dwdot[CH2O]/d[CH2*]
  // d()/d[CH2O]
  dqdci = -k_r * sc[9];
  J[789] += dqdci; // dwdot[H]/d[CH2O]
  J[791] -= dqdci; // dwdot[OH]/d[CH2O]
  J[797] -= dqdci; // dwdot[CH2*]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 52: CH2* + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 70000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[18];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[9] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[9] += q;  // H
  wdot[17] -= q; // CH2*
  wdot[18] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[17];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[134] -= dqdci; // dwdot[CH2*]/d[H2]
  J[135] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[368] -= dqdci; // dwdot[CH2*]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2*]
  dqdci = +k_f * sc[3];
  J[666] -= dqdci; // dwdot[H2]/d[CH2*]
  J[672] += dqdci; // dwdot[H]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[681] += dqdci; // dwdot[CH3]/d[CH2*]
  // d()/d[CH3]
  dqdci = -k_r * sc[9];
  J[705] -= dqdci; // dwdot[H2]/d[CH3]
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[719] -= dqdci; // dwdot[CH2*]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 53: CH2* + O2 <=> CO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[17];
  k_f = 28000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[11] * sc[22];
  Kc = refC * exp(-g_RT[9] - g_RT[11] + g_RT[15] + g_RT[17] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[17]) + (h_RT[9] + h_RT[11] + h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] += q; // OH
  wdot[15] -= q; // O2
  wdot[17] -= q; // CH2*
  wdot[22] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[11] * sc[22];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  J[366] -= dqdci; // dwdot[O2]/d[H]
  J[368] -= dqdci; // dwdot[CH2*]/d[H]
  J[373] += dqdci; // dwdot[CO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[9] * sc[22];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[444] -= dqdci; // dwdot[O2]/d[OH]
  J[446] -= dqdci; // dwdot[CH2*]/d[OH]
  J[451] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[594] += dqdci; // dwdot[H]/d[O2]
  J[596] += dqdci; // dwdot[OH]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[602] -= dqdci; // dwdot[CH2*]/d[O2]
  J[607] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[15];
  J[672] += dqdci; // dwdot[H]/d[CH2*]
  J[674] += dqdci; // dwdot[OH]/d[CH2*]
  J[678] -= dqdci; // dwdot[O2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[685] += dqdci; // dwdot[CO]/d[CH2*]
  // d()/d[CO]
  dqdci = -k_r * sc[9] * sc[11];
  J[867] += dqdci; // dwdot[H]/d[CO]
  J[869] += dqdci; // dwdot[OH]/d[CO]
  J[873] -= dqdci; // dwdot[O2]/d[CO]
  J[875] -= dqdci; // dwdot[CH2*]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 54: CH2* + O2 <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[17];
  k_f = 12000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[22];
  Kc = exp(-g_RT[13] + g_RT[15] + g_RT[17] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[17]) + (h_RT[13] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // H2O
  wdot[15] -= q; // O2
  wdot[17] -= q; // CH2*
  wdot[22] += q; // CO
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[522] -= dqdci; // dwdot[O2]/d[H2O]
  J[524] -= dqdci; // dwdot[CH2*]/d[H2O]
  J[529] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[598] += dqdci; // dwdot[H2O]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[602] -= dqdci; // dwdot[CH2*]/d[O2]
  J[607] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[15];
  J[676] += dqdci; // dwdot[H2O]/d[CH2*]
  J[678] -= dqdci; // dwdot[O2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[685] += dqdci; // dwdot[CO]/d[CH2*]
  // d()/d[CO]
  dqdci = -k_r * sc[13];
  J[871] += dqdci; // dwdot[H2O]/d[CO]
  J[873] -= dqdci; // dwdot[O2]/d[CO]
  J[875] -= dqdci; // dwdot[CH2*]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 55: CH2* + H2O <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[17];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[16];
  Kc = exp(g_RT[13] - g_RT[13] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[17]) + (h_RT[13] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // CH2
  wdot[17] -= q; // CH2*
  // d()/d[H2O]
  dqdci = +k_f * sc[17] - k_r * sc[16];
  J[523] += dqdci; // dwdot[CH2]/d[H2O]
  J[524] -= dqdci; // dwdot[CH2*]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[13];
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[641] -= dqdci; // dwdot[CH2*]/d[CH2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[13];
  J[679] += dqdci; // dwdot[CH2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  // d()/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT

  // reaction 56: CH2* + CO <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[22];
  k_f = 9000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[16] * sc[22];
  Kc = exp(-g_RT[16] + g_RT[17] + g_RT[22] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[22]) + (h_RT[16] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // CH2
  wdot[17] -= q; // CH2*
  // d()/d[CH2]
  dqdci = -k_r * sc[22];
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[641] -= dqdci; // dwdot[CH2*]/d[CH2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[22];
  J[679] += dqdci; // dwdot[CH2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  // d()/d[CO]
  dqdci = +k_f * sc[17] - k_r * sc[16];
  J[874] += dqdci; // dwdot[CH2]/d[CO]
  J[875] -= dqdci; // dwdot[CH2*]/d[CO]
  // d()/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT

  // reaction 57: CH2* + CO2 <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[23];
  k_f = 7000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[16] * sc[23];
  Kc = exp(-g_RT[16] + g_RT[17] + g_RT[23] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[23]) + (h_RT[16] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // CH2
  wdot[17] -= q; // CH2*
  // d()/d[CH2]
  dqdci = -k_r * sc[23];
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[641] -= dqdci; // dwdot[CH2*]/d[CH2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[23];
  J[679] += dqdci; // dwdot[CH2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  // d()/d[CO2]
  dqdci = +k_f * sc[17] - k_r * sc[16];
  J[913] += dqdci; // dwdot[CH2]/d[CO2]
  J[914] -= dqdci; // dwdot[CH2*]/d[CO2]
  // d()/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT

  // reaction 58: CH2* + CO2 <=> CH2O + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[23];
  k_f = 14000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[20] * sc[22];
  Kc = exp(g_RT[17] - g_RT[20] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[23]) + (h_RT[20] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[17] -= q; // CH2*
  wdot[20] += q; // CH2O
  wdot[22] += q; // CO
  wdot[23] -= q; // CO2
  // d()/d[CH2*]
  dqdci = +k_f * sc[23];
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[683] += dqdci; // dwdot[CH2O]/d[CH2*]
  J[685] += dqdci; // dwdot[CO]/d[CH2*]
  J[686] -= dqdci; // dwdot[CO2]/d[CH2*]
  // d()/d[CH2O]
  dqdci = -k_r * sc[22];
  J[797] -= dqdci; // dwdot[CH2*]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[802] += dqdci; // dwdot[CO]/d[CH2O]
  J[803] -= dqdci; // dwdot[CO2]/d[CH2O]
  // d()/d[CO]
  dqdci = -k_r * sc[20];
  J[875] -= dqdci; // dwdot[CH2*]/d[CO]
  J[878] += dqdci; // dwdot[CH2O]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[881] -= dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[17];
  J[914] -= dqdci; // dwdot[CH2*]/d[CO2]
  J[917] += dqdci; // dwdot[CH2O]/d[CO2]
  J[919] += dqdci; // dwdot[CO]/d[CO2]
  J[920] -= dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1505] -= dqdT; // dwdot[CO2]/dT

  // reaction 60: CH2O + H <=> H2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 23000 * exp(1.05 * tc[0] - 0.50321666580472 * (3275) * invT);
  dlnkfdT = 1.05 * invT + 0.50321666580472 * (3275) * invT2;
  // reverse
  phi_r = sc[3] * sc[19];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[3] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[136] += dqdci; // dwdot[HCO]/d[H2]
  J[137] -= dqdci; // dwdot[CH2O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[370] += dqdci; // dwdot[HCO]/d[H]
  J[371] -= dqdci; // dwdot[CH2O]/d[H]
  // d()/d[HCO]
  dqdci = -k_r * sc[3];
  J[744] += dqdci; // dwdot[H2]/d[HCO]
  J[750] -= dqdci; // dwdot[H]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[9];
  J[783] += dqdci; // dwdot[H2]/d[CH2O]
  J[789] -= dqdci; // dwdot[H]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 61: CH2O + O <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 39000000 * exp(0 * tc[0] - 0.50321666580472 * (3540) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3540) * invT2;
  // reverse
  phi_r = sc[11] * sc[19];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[11] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[409] += dqdci; // dwdot[HCO]/d[O]
  J[410] -= dqdci; // dwdot[CH2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[448] += dqdci; // dwdot[HCO]/d[OH]
  J[449] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[11];
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[752] += dqdci; // dwdot[OH]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[10];
  J[790] -= dqdci; // dwdot[O]/d[CH2O]
  J[791] += dqdci; // dwdot[OH]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 62: CH2O + OH <=> H2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[20];
  k_f = 3430 * exp(1.18 * tc[0] - 0.50321666580472 * (-447) * invT);
  dlnkfdT = 1.18 * invT + 0.50321666580472 * (-447) * invT2;
  // reverse
  phi_r = sc[13] * sc[19];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[20]) + (h_RT[13] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[448] += dqdci; // dwdot[HCO]/d[OH]
  J[449] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[526] += dqdci; // dwdot[HCO]/d[H2O]
  J[527] -= dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[HCO]
  dqdci = -k_r * sc[13];
  J[752] -= dqdci; // dwdot[OH]/d[HCO]
  J[754] += dqdci; // dwdot[H2O]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[11];
  J[791] -= dqdci; // dwdot[OH]/d[CH2O]
  J[793] += dqdci; // dwdot[H2O]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 63: CH2O + O2 <=> HCO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[20];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (40000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (40000) * invT2;
  // reverse
  phi_r = sc[12] * sc[19];
  Kc = exp(-g_RT[12] + g_RT[15] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[20]) + (h_RT[12] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[HO2]
  dqdci = -k_r * sc[19];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[487] += dqdci; // dwdot[HCO]/d[HO2]
  J[488] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[20];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[604] += dqdci; // dwdot[HCO]/d[O2]
  J[605] -= dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[12];
  J[753] += dqdci; // dwdot[HO2]/d[HCO]
  J[756] -= dqdci; // dwdot[O2]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[15];
  J[792] += dqdci; // dwdot[HO2]/d[CH2O]
  J[795] -= dqdci; // dwdot[O2]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 64: CH2O + HO2 <=> H2O2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[14] * sc[19];
  Kc = exp(g_RT[12] - g_RT[14] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[14] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // HO2
  wdot[14] += q; // H2O2
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[482] += dqdci; // dwdot[H2O2]/d[HO2]
  J[487] += dqdci; // dwdot[HCO]/d[HO2]
  J[488] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[19];
  J[558] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[560] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[565] += dqdci; // dwdot[HCO]/d[H2O2]
  J[566] -= dqdci; // dwdot[CH2O]/d[H2O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[14];
  J[753] -= dqdci; // dwdot[HO2]/d[HCO]
  J[755] += dqdci; // dwdot[H2O2]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[12];
  J[792] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[794] += dqdci; // dwdot[H2O2]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1496] += dqdT; // dwdot[H2O2]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 66: CH3 + O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 84300000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[20];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[9] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[18] -= q; // CH3
  wdot[20] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[20];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[369] -= dqdci; // dwdot[CH3]/d[H]
  J[371] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[408] -= dqdci; // dwdot[CH3]/d[O]
  J[410] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH3]
  dqdci = +k_f * sc[10];
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[722] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[9];
  J[789] += dqdci; // dwdot[H]/d[CH2O]
  J[790] -= dqdci; // dwdot[O]/d[CH2O]
  J[798] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 67: CH3 + OH <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 56 * exp(1.6 * tc[0] - 0.50321666580472 * (5420) * invT);
  dlnkfdT = 1.6 * invT + 0.50321666580472 * (5420) * invT2;
  // reverse
  phi_r = sc[13] * sc[16];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[16] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[13] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[16] += q; // CH2
  wdot[18] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[445] += dqdci; // dwdot[CH2]/d[OH]
  J[447] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[523] += dqdci; // dwdot[CH2]/d[H2O]
  J[525] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[13];
  J[635] -= dqdci; // dwdot[OH]/d[CH2]
  J[637] += dqdci; // dwdot[H2O]/d[CH2]
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[642] -= dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[11];
  J[713] -= dqdci; // dwdot[OH]/d[CH3]
  J[715] += dqdci; // dwdot[H2O]/d[CH3]
  J[718] += dqdci; // dwdot[CH2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 68: CH3 + OH <=> CH2* + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 25010000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[17];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[13] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[17] += q; // CH2*
  wdot[18] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[446] += dqdci; // dwdot[CH2*]/d[OH]
  J[447] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[524] += dqdci; // dwdot[CH2*]/d[H2O]
  J[525] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2*]
  dqdci = -k_r * sc[13];
  J[674] -= dqdci; // dwdot[OH]/d[CH2*]
  J[676] += dqdci; // dwdot[H2O]/d[CH2*]
  J[680] += dqdci; // dwdot[CH2*]/d[CH2*]
  J[681] -= dqdci; // dwdot[CH3]/d[CH2*]
  // d()/d[CH3]
  dqdci = +k_f * sc[11];
  J[713] -= dqdci; // dwdot[OH]/d[CH3]
  J[715] += dqdci; // dwdot[H2O]/d[CH3]
  J[719] += dqdci; // dwdot[CH2*]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1499] += dqdT; // dwdot[CH2*]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 69: CH3 + O2 <=> CH3O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[18];
  k_f = 30830000 * exp(0 * tc[0] - 0.50321666580472 * (28800) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (28800) * invT2;
  // reverse
  phi_r = sc[10] * sc[21];
  Kc = exp(-g_RT[10] + g_RT[15] + g_RT[18] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[18]) + (h_RT[10] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // O
  wdot[15] -= q; // O2
  wdot[18] -= q; // CH3
  wdot[21] += q; // CH3O
  // d()/d[O]
  dqdci = -k_r * sc[21];
  J[400] += dqdci; // dwdot[O]/d[O]
  J[405] -= dqdci; // dwdot[O2]/d[O]
  J[408] -= dqdci; // dwdot[CH3]/d[O]
  J[411] += dqdci; // dwdot[CH3O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[595] += dqdci; // dwdot[O]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[603] -= dqdci; // dwdot[CH3]/d[O2]
  J[606] += dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[15];
  J[712] += dqdci; // dwdot[O]/d[CH3]
  J[717] -= dqdci; // dwdot[O2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[723] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[10];
  J[829] += dqdci; // dwdot[O]/d[CH3O]
  J[834] -= dqdci; // dwdot[O2]/d[CH3O]
  J[837] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[840] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1492] += dqdT; // dwdot[O]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1503] += dqdT; // dwdot[CH3O]/dT

  // reaction 70: CH3 + O2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[18];
  k_f = 36000 * exp(0 * tc[0] - 0.50321666580472 * (8940) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8940) * invT2;
  // reverse
  phi_r = sc[11] * sc[20];
  Kc = exp(-g_RT[11] + g_RT[15] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[18]) + (h_RT[11] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[15] -= q; // O2
  wdot[18] -= q; // CH3
  wdot[20] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[444] -= dqdci; // dwdot[O2]/d[OH]
  J[447] -= dqdci; // dwdot[CH3]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[596] += dqdci; // dwdot[OH]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[603] -= dqdci; // dwdot[CH3]/d[O2]
  J[605] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[15];
  J[713] += dqdci; // dwdot[OH]/d[CH3]
  J[717] -= dqdci; // dwdot[O2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[722] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[11];
  J[791] += dqdci; // dwdot[OH]/d[CH2O]
  J[795] -= dqdci; // dwdot[O2]/d[CH2O]
  J[798] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 71: CH3 + HO2 <=> CH4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[18];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = exp(-g_RT[2] + g_RT[12] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[18]) + (h_RT[2] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[12] -= q; // HO2
  wdot[15] += q; // O2
  wdot[18] -= q; // CH3
  // d()/d[CH4]
  dqdci = -k_r * sc[15];
  J[80] += dqdci; // dwdot[CH4]/d[CH4]
  J[90] -= dqdci; // dwdot[HO2]/d[CH4]
  J[93] += dqdci; // dwdot[O2]/d[CH4]
  J[96] -= dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[470] += dqdci; // dwdot[CH4]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  J[486] -= dqdci; // dwdot[CH3]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[2];
  J[587] += dqdci; // dwdot[CH4]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  J[603] -= dqdci; // dwdot[CH3]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[12];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[714] -= dqdci; // dwdot[HO2]/d[CH3]
  J[717] += dqdci; // dwdot[O2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1497] += dqdT; // dwdot[O2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 72: CH3 + HO2 <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[18];
  k_f = 13400000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[21];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[18] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[18]) + (h_RT[11] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[18] -= q; // CH3
  wdot[21] += q; // CH3O
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[447] -= dqdci; // dwdot[CH3]/d[OH]
  J[450] += dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[486] -= dqdci; // dwdot[CH3]/d[HO2]
  J[489] += dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[12];
  J[713] += dqdci; // dwdot[OH]/d[CH3]
  J[714] -= dqdci; // dwdot[HO2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[723] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[11];
  J[830] += dqdci; // dwdot[OH]/d[CH3O]
  J[831] -= dqdci; // dwdot[HO2]/d[CH3O]
  J[837] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[840] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1503] += dqdT; // dwdot[CH3O]/dT

  // reaction 73: CH3 + H2O2 <=> CH4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[18];
  k_f = 0.0245 * exp(2.47 * tc[0] - 0.50321666580472 * (5180) * invT);
  dlnkfdT = 2.47 * invT + 0.50321666580472 * (5180) * invT2;
  // reverse
  phi_r = sc[2] * sc[12];
  Kc = exp(-g_RT[2] - g_RT[12] + g_RT[14] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[18]) + (h_RT[2] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[12] += q; // HO2
  wdot[14] -= q; // H2O2
  wdot[18] -= q; // CH3
  // d()/d[CH4]
  dqdci = -k_r * sc[12];
  J[80] += dqdci; // dwdot[CH4]/d[CH4]
  J[90] += dqdci; // dwdot[HO2]/d[CH4]
  J[92] -= dqdci; // dwdot[H2O2]/d[CH4]
  J[96] -= dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[HO2]
  dqdci = -k_r * sc[2];
  J[470] += dqdci; // dwdot[CH4]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[482] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[486] -= dqdci; // dwdot[CH3]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[18];
  J[548] += dqdci; // dwdot[CH4]/d[H2O2]
  J[558] += dqdci; // dwdot[HO2]/d[H2O2]
  J[560] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[564] -= dqdci; // dwdot[CH3]/d[H2O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[14];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[714] += dqdci; // dwdot[HO2]/d[CH3]
  J[716] -= dqdci; // dwdot[H2O2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1496] -= dqdT; // dwdot[H2O2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 74: CH3 + HCO <=> CH4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[19];
  k_f = 8480000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[2] * sc[22];
  Kc = exp(-g_RT[2] + g_RT[18] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[19]) + (h_RT[2] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[18] -= q; // CH3
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[CH4]
  dqdci = -k_r * sc[22];
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[97] -= dqdci;  // dwdot[HCO]/d[CH4]
  J[100] += dqdci; // dwdot[CO]/d[CH4]
  // d()/d[CH3]
  dqdci = +k_f * sc[19];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[721] -= dqdci; // dwdot[HCO]/d[CH3]
  J[724] += dqdci; // dwdot[CO]/d[CH3]
  // d()/d[HCO]
  dqdci = +k_f * sc[18];
  J[743] += dqdci; // dwdot[CH4]/d[HCO]
  J[759] -= dqdci; // dwdot[CH3]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[2];
  J[860] += dqdci; // dwdot[CH4]/d[CO]
  J[876] -= dqdci; // dwdot[CH3]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 75: CH2O + CH3 <=> CH4 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[20];
  k_f = 0.00332 * exp(2.81 * tc[0] - 0.50321666580472 * (5860) * invT);
  dlnkfdT = 2.81 * invT + 0.50321666580472 * (5860) * invT2;
  // reverse
  phi_r = sc[2] * sc[19];
  Kc = exp(-g_RT[2] + g_RT[18] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[20]) + (h_RT[2] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[18] -= q; // CH3
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[CH4]
  dqdci = -k_r * sc[19];
  J[80] += dqdci; // dwdot[CH4]/d[CH4]
  J[96] -= dqdci; // dwdot[CH3]/d[CH4]
  J[97] += dqdci; // dwdot[HCO]/d[CH4]
  J[98] -= dqdci; // dwdot[CH2O]/d[CH4]
  // d()/d[CH3]
  dqdci = +k_f * sc[20];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[721] += dqdci; // dwdot[HCO]/d[CH3]
  J[722] -= dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[2];
  J[743] += dqdci; // dwdot[CH4]/d[HCO]
  J[759] -= dqdci; // dwdot[CH3]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[18];
  J[782] += dqdci; // dwdot[CH4]/d[CH2O]
  J[798] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 76: CH2 + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[18];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] - g_RT[9] + g_RT[16] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[18]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[9] += q;  // H
  wdot[16] -= q; // CH2
  wdot[18] -= q; // CH3
  // d()/d[C2H4]
  dqdci = -k_r * sc[9];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[48] += dqdci; // dwdot[H]/d[C2H4]
  J[55] -= dqdci; // dwdot[CH2]/d[C2H4]
  J[57] -= dqdci; // dwdot[CH3]/d[C2H4]
  // d()/d[H]
  dqdci = -k_r * sc[1];
  J[352] += dqdci; // dwdot[C2H4]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[367] -= dqdci; // dwdot[CH2]/d[H]
  J[369] -= dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[18];
  J[625] += dqdci; // dwdot[C2H4]/d[CH2]
  J[633] += dqdci; // dwdot[H]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[642] -= dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[16];
  J[703] += dqdci; // dwdot[C2H4]/d[CH3]
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[718] -= dqdci; // dwdot[CH2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 78: 2 CH3 <=> C2H5 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[18] * sc[18]);
  k_f = 4990000 * exp(0.1 * tc[0] - 0.50321666580472 * (10600) * invT);
  dlnkfdT = 0.1 * invT + 0.50321666580472 * (10600) * invT2;
  // reverse
  phi_r = sc[9] * sc[26];
  Kc = exp(-g_RT[9] + 2.000000 * g_RT[18] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[18]) + (h_RT[9] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;      // H
  wdot[18] -= 2 * q; // CH3
  wdot[26] += q;     // C2H5
  // d()/d[H]
  dqdci = -k_r * sc[26];
  J[360] += dqdci;      // dwdot[H]/d[H]
  J[369] += -2 * dqdci; // dwdot[CH3]/d[H]
  J[377] += dqdci;      // dwdot[C2H5]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * 2.000000 * sc[18];
  J[711] += dqdci;      // dwdot[H]/d[CH3]
  J[720] += -2 * dqdci; // dwdot[CH3]/d[CH3]
  J[728] += dqdci;      // dwdot[C2H5]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[9];
  J[1023] += dqdci;      // dwdot[H]/d[C2H5]
  J[1032] += -2 * dqdci; // dwdot[CH3]/d[C2H5]
  J[1040] += dqdci;      // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1491] += dqdT;      // dwdot[H]/dT
  J[1500] += -2 * dqdT; // dwdot[CH3]/dT
  J[1508] += dqdT;      // dwdot[C2H5]/dT

  // reaction 79: CH3 + HCCO <=> C2H4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[28];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[18] - g_RT[22] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[28]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[18] -= q; // CH3
  wdot[22] += q; // CO
  wdot[28] -= q; // HCCO
  // d()/d[C2H4]
  dqdci = -k_r * sc[22];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[57] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[61] += dqdci; // dwdot[CO]/d[C2H4]
  J[67] -= dqdci; // dwdot[HCCO]/d[C2H4]
  // d()/d[CH3]
  dqdci = +k_f * sc[28];
  J[703] += dqdci; // dwdot[C2H4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[724] += dqdci; // dwdot[CO]/d[CH3]
  J[730] -= dqdci; // dwdot[HCCO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[1];
  J[859] += dqdci; // dwdot[C2H4]/d[CO]
  J[876] -= dqdci; // dwdot[CH3]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[886] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[18];
  J[1093] += dqdci; // dwdot[C2H4]/d[HCCO]
  J[1110] -= dqdci; // dwdot[CH3]/d[HCCO]
  J[1114] += dqdci; // dwdot[CO]/d[HCCO]
  J[1120] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1510] -= dqdT; // dwdot[HCCO]/dT

  // reaction 80: CH3O + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[20];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[20] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[3] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[20] += q; // CH2O
  wdot[21] -= q; // CH3O
  // d()/d[H2]
  dqdci = -k_r * sc[20];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[137] += dqdci; // dwdot[CH2O]/d[H2]
  J[138] -= dqdci; // dwdot[CH3O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[371] += dqdci; // dwdot[CH2O]/d[H]
  J[372] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3];
  J[783] += dqdci; // dwdot[H2]/d[CH2O]
  J[789] -= dqdci; // dwdot[H]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[801] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[9];
  J[822] += dqdci; // dwdot[H2]/d[CH3O]
  J[828] -= dqdci; // dwdot[H]/d[CH3O]
  J[839] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[840] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1503] -= dqdT; // dwdot[CH3O]/dT

  // reaction 81: CH3O + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 32000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(g_RT[9] - g_RT[11] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[11] += q; // OH
  wdot[18] += q; // CH3
  wdot[21] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  J[372] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[438] -= dqdci; // dwdot[H]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[447] += dqdci; // dwdot[CH3]/d[OH]
  J[450] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[11];
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[713] += dqdci; // dwdot[OH]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[723] -= dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = +k_f * sc[9];
  J[828] -= dqdci; // dwdot[H]/d[CH3O]
  J[830] += dqdci; // dwdot[OH]/d[CH3O]
  J[837] += dqdci; // dwdot[CH3]/d[CH3O]
  J[840] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1503] -= dqdT; // dwdot[CH3O]/dT

  // reaction 82: CH3O + H <=> CH2* + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 16000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[17];
  Kc = exp(g_RT[9] - g_RT[13] - g_RT[17] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[13] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[13] += q; // H2O
  wdot[17] += q; // CH2*
  wdot[21] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[364] += dqdci; // dwdot[H2O]/d[H]
  J[368] += dqdci; // dwdot[CH2*]/d[H]
  J[372] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[516] -= dqdci; // dwdot[H]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[524] += dqdci; // dwdot[CH2*]/d[H2O]
  J[528] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2*]
  dqdci = -k_r * sc[13];
  J[672] -= dqdci; // dwdot[H]/d[CH2*]
  J[676] += dqdci; // dwdot[H2O]/d[CH2*]
  J[680] += dqdci; // dwdot[CH2*]/d[CH2*]
  J[684] -= dqdci; // dwdot[CH3O]/d[CH2*]
  // d()/d[CH3O]
  dqdci = +k_f * sc[9];
  J[828] -= dqdci; // dwdot[H]/d[CH3O]
  J[832] += dqdci; // dwdot[H2O]/d[CH3O]
  J[836] += dqdci; // dwdot[CH2*]/d[CH3O]
  J[840] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1499] += dqdT; // dwdot[CH2*]/dT
  J[1503] -= dqdT; // dwdot[CH3O]/dT

  // reaction 83: CH3O + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[21];
  k_f = 5000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[20];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[20] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[21]) + (h_RT[13] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[20] += q; // CH2O
  wdot[21] -= q; // CH3O
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  J[450] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[527] += dqdci; // dwdot[CH2O]/d[H2O]
  J[528] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[13];
  J[791] -= dqdci; // dwdot[OH]/d[CH2O]
  J[793] += dqdci; // dwdot[H2O]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[801] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[11];
  J[830] -= dqdci; // dwdot[OH]/d[CH3O]
  J[832] += dqdci; // dwdot[H2O]/d[CH3O]
  J[839] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[840] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1503] -= dqdT; // dwdot[CH3O]/dT

  // reaction 84: CH3O + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[21];
  k_f = 4.28e-19 * exp(7.6 * tc[0] - 0.50321666580472 * (-3530) * invT);
  dlnkfdT = 7.6 * invT + 0.50321666580472 * (-3530) * invT2;
  // reverse
  phi_r = sc[12] * sc[20];
  Kc = exp(-g_RT[12] + g_RT[15] - g_RT[20] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[21]) + (h_RT[12] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[20] += q; // CH2O
  wdot[21] -= q; // CH3O
  // d()/d[HO2]
  dqdci = -k_r * sc[20];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[488] += dqdci; // dwdot[CH2O]/d[HO2]
  J[489] -= dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[605] += dqdci; // dwdot[CH2O]/d[O2]
  J[606] -= dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[12];
  J[792] += dqdci; // dwdot[HO2]/d[CH2O]
  J[795] -= dqdci; // dwdot[O2]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[801] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[15];
  J[831] += dqdci; // dwdot[HO2]/d[CH3O]
  J[834] -= dqdci; // dwdot[O2]/d[CH3O]
  J[839] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[840] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1503] -= dqdT; // dwdot[CH3O]/dT

  // reaction 85: CH4 + H <=> CH3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 660 * exp(1.62 * tc[0] - 0.50321666580472 * (10840) * invT);
  dlnkfdT = 1.62 * invT + 0.50321666580472 * (10840) * invT2;
  // reverse
  phi_r = sc[3] * sc[18];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[3] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // CH4
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  // d()/d[CH4]
  dqdci = +k_f * sc[9];
  J[80] -= dqdci; // dwdot[CH4]/d[CH4]
  J[81] += dqdci; // dwdot[H2]/d[CH4]
  J[87] -= dqdci; // dwdot[H]/d[CH4]
  J[96] += dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[119] -= dqdci; // dwdot[CH4]/d[H2]
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[135] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[2];
  J[353] -= dqdci; // dwdot[CH4]/d[H]
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[3];
  J[704] -= dqdci; // dwdot[CH4]/d[CH3]
  J[705] += dqdci; // dwdot[H2]/d[CH3]
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] -= dqdT; // dwdot[CH4]/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 86: CH4 + O <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 1020 * exp(1.5 * tc[0] - 0.50321666580472 * (8600) * invT);
  dlnkfdT = 1.5 * invT + 0.50321666580472 * (8600) * invT2;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(g_RT[2] + g_RT[10] - g_RT[11] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // CH4
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[18] += q; // CH3
  // d()/d[CH4]
  dqdci = +k_f * sc[10];
  J[80] -= dqdci; // dwdot[CH4]/d[CH4]
  J[88] -= dqdci; // dwdot[O]/d[CH4]
  J[89] += dqdci; // dwdot[OH]/d[CH4]
  J[96] += dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[O]
  dqdci = +k_f * sc[2];
  J[392] -= dqdci; // dwdot[CH4]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[408] += dqdci; // dwdot[CH3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[431] -= dqdci; // dwdot[CH4]/d[OH]
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[447] += dqdci; // dwdot[CH3]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[11];
  J[704] -= dqdci; // dwdot[CH4]/d[CH3]
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[713] += dqdci; // dwdot[OH]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] -= dqdT; // dwdot[CH4]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 87: CH4 + OH <=> CH3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 100 * exp(1.6 * tc[0] - 0.50321666580472 * (3120) * invT);
  dlnkfdT = 1.6 * invT + 0.50321666580472 * (3120) * invT2;
  // reverse
  phi_r = sc[13] * sc[18];
  Kc = exp(g_RT[2] + g_RT[11] - g_RT[13] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[13] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // CH4
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[18] += q; // CH3
  // d()/d[CH4]
  dqdci = +k_f * sc[11];
  J[80] -= dqdci; // dwdot[CH4]/d[CH4]
  J[89] -= dqdci; // dwdot[OH]/d[CH4]
  J[91] += dqdci; // dwdot[H2O]/d[CH4]
  J[96] += dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[OH]
  dqdci = +k_f * sc[2];
  J[431] -= dqdci; // dwdot[CH4]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[447] += dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[509] -= dqdci; // dwdot[CH4]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[525] += dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH3]
  dqdci = -k_r * sc[13];
  J[704] -= dqdci; // dwdot[CH4]/d[CH3]
  J[713] -= dqdci; // dwdot[OH]/d[CH3]
  J[715] += dqdci; // dwdot[H2O]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] -= dqdT; // dwdot[CH4]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 88: CH2* + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 16000000 * exp(0 * tc[0] - 0.50321666580472 * (-570) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-570) * invT2;
  // reverse
  phi_r = (sc[18] * sc[18]);
  Kc = exp(g_RT[2] + g_RT[17] - 2.000000 * g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (2.000000 * h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;      // CH4
  wdot[17] -= q;     // CH2*
  wdot[18] += 2 * q; // CH3
  // d()/d[CH4]
  dqdci = +k_f * sc[17];
  J[80] -= dqdci;     // dwdot[CH4]/d[CH4]
  J[95] -= dqdci;     // dwdot[CH2*]/d[CH4]
  J[96] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[CH2*]
  dqdci = +k_f * sc[2];
  J[665] -= dqdci;     // dwdot[CH4]/d[CH2*]
  J[680] -= dqdci;     // dwdot[CH2*]/d[CH2*]
  J[681] += 2 * dqdci; // dwdot[CH3]/d[CH2*]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[18];
  J[704] -= dqdci;     // dwdot[CH4]/d[CH3]
  J[719] -= dqdci;     // dwdot[CH2*]/d[CH3]
  J[720] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] -= dqdT;     // dwdot[CH4]/dT
  J[1499] -= dqdT;     // dwdot[CH2*]/dT
  J[1500] += 2 * dqdT; // dwdot[CH3]/dT

  // reaction 89: H + HCCO <=> CH2* + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[28];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[17] * sc[22];
  Kc = exp(g_RT[9] - g_RT[17] - g_RT[22] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[28]) + (h_RT[17] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[17] += q; // CH2*
  wdot[22] += q; // CO
  wdot[28] -= q; // HCCO
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[368] += dqdci; // dwdot[CH2*]/d[H]
  J[373] += dqdci; // dwdot[CO]/d[H]
  J[379] -= dqdci; // dwdot[HCCO]/d[H]
  // d()/d[CH2*]
  dqdci = -k_r * sc[22];
  J[672] -= dqdci; // dwdot[H]/d[CH2*]
  J[680] += dqdci; // dwdot[CH2*]/d[CH2*]
  J[685] += dqdci; // dwdot[CO]/d[CH2*]
  J[691] -= dqdci; // dwdot[HCCO]/d[CH2*]
  // d()/d[CO]
  dqdci = -k_r * sc[17];
  J[867] -= dqdci; // dwdot[H]/d[CO]
  J[875] += dqdci; // dwdot[CH2*]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[886] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[9];
  J[1101] -= dqdci; // dwdot[H]/d[HCCO]
  J[1109] += dqdci; // dwdot[CH2*]/d[HCCO]
  J[1114] += dqdci; // dwdot[CO]/d[HCCO]
  J[1120] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1499] += dqdT; // dwdot[CH2*]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1510] -= dqdT; // dwdot[HCCO]/dT

  // reaction 90: HCCO + O <=> 2 CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[28];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * (sc[22] * sc[22]);
  Kc = refC * exp(-g_RT[9] + g_RT[10] - 2.000000 * g_RT[22] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[28]) + (h_RT[9] + 2.000000 * h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;      // H
  wdot[10] -= q;     // O
  wdot[22] += 2 * q; // CO
  wdot[28] -= q;     // HCCO
  // d()/d[H]
  dqdci = -k_r * pow(sc[22], 2.000000);
  J[360] += dqdci;     // dwdot[H]/d[H]
  J[361] -= dqdci;     // dwdot[O]/d[H]
  J[373] += 2 * dqdci; // dwdot[CO]/d[H]
  J[379] -= dqdci;     // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[399] += dqdci;     // dwdot[H]/d[O]
  J[400] -= dqdci;     // dwdot[O]/d[O]
  J[412] += 2 * dqdci; // dwdot[CO]/d[O]
  J[418] -= dqdci;     // dwdot[HCCO]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[9] * 2.000000 * sc[22];
  J[867] += dqdci;     // dwdot[H]/d[CO]
  J[868] -= dqdci;     // dwdot[O]/d[CO]
  J[880] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[886] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[10];
  J[1101] += dqdci;     // dwdot[H]/d[HCCO]
  J[1102] -= dqdci;     // dwdot[O]/d[HCCO]
  J[1114] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[1120] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1491] += dqdT;     // dwdot[H]/dT
  J[1492] -= dqdT;     // dwdot[O]/dT
  J[1504] += 2 * dqdT; // dwdot[CO]/dT
  J[1510] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 91: HCCO + O2 <=> 2 CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[28];
  k_f = 1600000 * exp(0 * tc[0] - 0.50321666580472 * (854) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (854) * invT2;
  // reverse
  phi_r = sc[11] * (sc[22] * sc[22]);
  Kc = refC * exp(-g_RT[11] + g_RT[15] - 2.000000 * g_RT[22] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[28]) + (h_RT[11] + 2.000000 * h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q;     // OH
  wdot[15] -= q;     // O2
  wdot[22] += 2 * q; // CO
  wdot[28] -= q;     // HCCO
  // d()/d[OH]
  dqdci = -k_r * pow(sc[22], 2.000000);
  J[440] += dqdci;     // dwdot[OH]/d[OH]
  J[444] -= dqdci;     // dwdot[O2]/d[OH]
  J[451] += 2 * dqdci; // dwdot[CO]/d[OH]
  J[457] -= dqdci;     // dwdot[HCCO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[28];
  J[596] += dqdci;     // dwdot[OH]/d[O2]
  J[600] -= dqdci;     // dwdot[O2]/d[O2]
  J[607] += 2 * dqdci; // dwdot[CO]/d[O2]
  J[613] -= dqdci;     // dwdot[HCCO]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[11] * 2.000000 * sc[22];
  J[869] += dqdci;     // dwdot[OH]/d[CO]
  J[873] -= dqdci;     // dwdot[O2]/d[CO]
  J[880] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[886] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[15];
  J[1103] += dqdci;     // dwdot[OH]/d[HCCO]
  J[1107] -= dqdci;     // dwdot[O2]/d[HCCO]
  J[1114] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[1120] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1493] += dqdT;     // dwdot[OH]/dT
  J[1497] -= dqdT;     // dwdot[O2]/dT
  J[1504] += 2 * dqdT; // dwdot[CO]/dT
  J[1510] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 92: CH2 + HCCO <=> C2H3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[28];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[22] * sc[25];
  Kc = exp(g_RT[16] - g_RT[22] - g_RT[25] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[28]) + (h_RT[22] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] -= q; // CH2
  wdot[22] += q; // CO
  wdot[25] += q; // C2H3
  wdot[28] -= q; // HCCO
  // d()/d[CH2]
  dqdci = +k_f * sc[28];
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[646] += dqdci; // dwdot[CO]/d[CH2]
  J[649] += dqdci; // dwdot[C2H3]/d[CH2]
  J[652] -= dqdci; // dwdot[HCCO]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[25];
  J[874] -= dqdci; // dwdot[CH2]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[883] += dqdci; // dwdot[C2H3]/d[CO]
  J[886] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H3]
  dqdci = -k_r * sc[22];
  J[991] -= dqdci;  // dwdot[CH2]/d[C2H3]
  J[997] += dqdci;  // dwdot[CO]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1003] -= dqdci; // dwdot[HCCO]/d[C2H3]
  // d()/d[HCCO]
  dqdci = +k_f * sc[16];
  J[1108] -= dqdci; // dwdot[CH2]/d[HCCO]
  J[1114] += dqdci; // dwdot[CO]/d[HCCO]
  J[1117] += dqdci; // dwdot[C2H3]/d[HCCO]
  J[1120] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT
  J[1510] -= dqdT; // dwdot[HCCO]/dT

  // reaction 94: C2H2 + O <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[24];
  k_f = 4.08 * exp(2 * tc[0] - 0.50321666580472 * (1900) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (1900) * invT2;
  // reverse
  phi_r = sc[16] * sc[22];
  Kc = exp(g_RT[10] - g_RT[16] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[24]) + (h_RT[16] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[16] += q; // CH2
  wdot[22] += q; // CO
  wdot[24] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[406] += dqdci; // dwdot[CH2]/d[O]
  J[412] += dqdci; // dwdot[CO]/d[O]
  J[414] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[22];
  J[634] -= dqdci; // dwdot[O]/d[CH2]
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[646] += dqdci; // dwdot[CO]/d[CH2]
  J[648] -= dqdci; // dwdot[C2H2]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[16];
  J[868] -= dqdci; // dwdot[O]/d[CO]
  J[874] += dqdci; // dwdot[CH2]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[882] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[10];
  J[946] -= dqdci; // dwdot[O]/d[C2H2]
  J[952] += dqdci; // dwdot[CH2]/d[C2H2]
  J[958] += dqdci; // dwdot[CO]/d[C2H2]
  J[960] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1506] -= dqdT; // dwdot[C2H2]/dT

  // reaction 95: C2H2 + O <=> H + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[24];
  k_f = 16.32 * exp(2 * tc[0] - 0.50321666580472 * (1900) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (1900) * invT2;
  // reverse
  phi_r = sc[9] * sc[28];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[24] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[24]) + (h_RT[9] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[24] -= q; // C2H2
  wdot[28] += q; // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[375] -= dqdci; // dwdot[C2H2]/d[H]
  J[379] += dqdci; // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[414] -= dqdci; // dwdot[C2H2]/d[O]
  J[418] += dqdci; // dwdot[HCCO]/d[O]
  // d()/d[C2H2]
  dqdci = +k_f * sc[10];
  J[945] += dqdci; // dwdot[H]/d[C2H2]
  J[946] -= dqdci; // dwdot[O]/d[C2H2]
  J[960] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[964] += dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = -k_r * sc[9];
  J[1101] += dqdci; // dwdot[H]/d[HCCO]
  J[1102] -= dqdci; // dwdot[O]/d[HCCO]
  J[1116] -= dqdci; // dwdot[C2H2]/d[HCCO]
  J[1120] += dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1506] -= dqdT; // dwdot[C2H2]/dT
  J[1510] += dqdT; // dwdot[HCCO]/dT

  // reaction 96: C2H2 + OH <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[24];
  k_f = 2.18e-10 * exp(4.5 * tc[0] - 0.50321666580472 * (-1000) * invT);
  dlnkfdT = 4.5 * invT + 0.50321666580472 * (-1000) * invT2;
  // reverse
  phi_r = sc[9] * sc[29];
  Kc = exp(-g_RT[9] + g_RT[11] + g_RT[24] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[24]) + (h_RT[9] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[24] -= q; // C2H2
  wdot[29] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[375] -= dqdci; // dwdot[C2H2]/d[H]
  J[380] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[453] -= dqdci; // dwdot[C2H2]/d[OH]
  J[458] += dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[C2H2]
  dqdci = +k_f * sc[11];
  J[945] += dqdci; // dwdot[H]/d[C2H2]
  J[947] -= dqdci; // dwdot[OH]/d[C2H2]
  J[960] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[965] += dqdci; // dwdot[CH2CO]/d[C2H2]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[9];
  J[1140] += dqdci; // dwdot[H]/d[CH2CO]
  J[1142] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[1155] -= dqdci; // dwdot[C2H2]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1506] -= dqdT; // dwdot[C2H2]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT

  // reaction 97: C2H2 + HCO <=> C2H3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[24];
  k_f = 10 * exp(2 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (6000) * invT2;
  // reverse
  phi_r = sc[22] * sc[25];
  Kc = exp(g_RT[19] - g_RT[22] + g_RT[24] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[24]) + (h_RT[22] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  wdot[24] -= q; // C2H2
  wdot[25] += q; // C2H3
  // d()/d[HCO]
  dqdci = +k_f * sc[24];
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  J[765] -= dqdci; // dwdot[C2H2]/d[HCO]
  J[766] += dqdci; // dwdot[C2H3]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[25];
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[882] -= dqdci; // dwdot[C2H2]/d[CO]
  J[883] += dqdci; // dwdot[C2H3]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[19];
  J[955] -= dqdci; // dwdot[HCO]/d[C2H2]
  J[958] += dqdci; // dwdot[CO]/d[C2H2]
  J[960] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[961] += dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = -k_r * sc[22];
  J[994] -= dqdci;  // dwdot[HCO]/d[C2H3]
  J[997] += dqdci;  // dwdot[CO]/d[C2H3]
  J[999] -= dqdci;  // dwdot[C2H2]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1506] -= dqdT; // dwdot[C2H2]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 98: C2H2 + CH3 <=> aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[24];
  k_f = 4.4e+43 * exp(-11.4 * tc[0] - 0.50321666580472 * (36700) * invT);
  dlnkfdT = -11.4 * invT + 0.50321666580472 * (36700) * invT2;
  // reverse
  phi_r = sc[31];
  Kc = refCinv * exp(g_RT[18] + g_RT[24] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[24]) + (h_RT[31]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] -= q; // CH3
  wdot[24] -= q; // C2H2
  wdot[31] += q; // aC3H5
  // d()/d[CH3]
  dqdci = +k_f * sc[24];
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[726] -= dqdci; // dwdot[C2H2]/d[CH3]
  J[733] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[C2H2]
  dqdci = +k_f * sc[18];
  J[954] -= dqdci; // dwdot[CH3]/d[C2H2]
  J[960] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[967] += dqdci; // dwdot[aC3H5]/d[C2H2]
  // d()/d[aC3H5]
  dqdci = -k_r;
  J[1227] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[1233] -= dqdci; // dwdot[C2H2]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1506] -= dqdT; // dwdot[C2H2]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 100: CH2CO + H <=> H2 + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[29];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[3] * sc[28];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[29]) + (h_RT[3] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[28] += q; // HCCO
  wdot[29] -= q; // CH2CO
  // d()/d[H2]
  dqdci = -k_r * sc[28];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[145] += dqdci; // dwdot[HCCO]/d[H2]
  J[146] -= dqdci; // dwdot[CH2CO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[379] += dqdci; // dwdot[HCCO]/d[H]
  J[380] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[HCCO]
  dqdci = -k_r * sc[3];
  J[1095] += dqdci; // dwdot[H2]/d[HCCO]
  J[1101] -= dqdci; // dwdot[H]/d[HCCO]
  J[1120] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1121] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[9];
  J[1134] += dqdci; // dwdot[H2]/d[CH2CO]
  J[1140] -= dqdci; // dwdot[H]/d[CH2CO]
  J[1159] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1510] += dqdT; // dwdot[HCCO]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 101: CH2CO + H <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[29];
  k_f = 1500 * exp(1.43 * tc[0] - 0.50321666580472 * (2690) * invT);
  dlnkfdT = 1.43 * invT + 0.50321666580472 * (2690) * invT2;
  // reverse
  phi_r = sc[18] * sc[22];
  Kc = exp(g_RT[9] - g_RT[18] - g_RT[22] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[29]) + (h_RT[18] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  wdot[22] += q; // CO
  wdot[29] -= q; // CH2CO
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  J[373] += dqdci; // dwdot[CO]/d[H]
  J[380] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[22];
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[724] += dqdci; // dwdot[CO]/d[CH3]
  J[731] -= dqdci; // dwdot[CH2CO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[18];
  J[867] -= dqdci; // dwdot[H]/d[CO]
  J[876] += dqdci; // dwdot[CH3]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[887] -= dqdci; // dwdot[CH2CO]/d[CO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[9];
  J[1140] -= dqdci; // dwdot[H]/d[CH2CO]
  J[1149] += dqdci; // dwdot[CH3]/d[CH2CO]
  J[1153] += dqdci; // dwdot[CO]/d[CH2CO]
  J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 102: CH2CO + O <=> HCCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[29];
  k_f = 10000000 * exp(0 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[11] * sc[28];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[29]) + (h_RT[11] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[28] += q; // HCCO
  wdot[29] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[29];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[418] += dqdci; // dwdot[HCCO]/d[O]
  J[419] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[28];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[457] += dqdci; // dwdot[HCCO]/d[OH]
  J[458] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[HCCO]
  dqdci = -k_r * sc[11];
  J[1102] -= dqdci; // dwdot[O]/d[HCCO]
  J[1103] += dqdci; // dwdot[OH]/d[HCCO]
  J[1120] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1121] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[10];
  J[1141] -= dqdci; // dwdot[O]/d[CH2CO]
  J[1142] += dqdci; // dwdot[OH]/d[CH2CO]
  J[1159] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1510] += dqdT; // dwdot[HCCO]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 103: CH2CO + O <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[29];
  k_f = 1750000 * exp(0 * tc[0] - 0.50321666580472 * (1350) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1350) * invT2;
  // reverse
  phi_r = sc[16] * sc[23];
  Kc = exp(g_RT[10] - g_RT[16] - g_RT[23] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[29]) + (h_RT[16] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[16] += q; // CH2
  wdot[23] += q; // CO2
  wdot[29] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[29];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[406] += dqdci; // dwdot[CH2]/d[O]
  J[413] += dqdci; // dwdot[CO2]/d[O]
  J[419] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[23];
  J[634] -= dqdci; // dwdot[O]/d[CH2]
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[647] += dqdci; // dwdot[CO2]/d[CH2]
  J[653] -= dqdci; // dwdot[CH2CO]/d[CH2]
  // d()/d[CO2]
  dqdci = -k_r * sc[16];
  J[907] -= dqdci; // dwdot[O]/d[CO2]
  J[913] += dqdci; // dwdot[CH2]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  J[926] -= dqdci; // dwdot[CH2CO]/d[CO2]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[10];
  J[1141] -= dqdci; // dwdot[O]/d[CH2CO]
  J[1147] += dqdci; // dwdot[CH2]/d[CH2CO]
  J[1154] += dqdci; // dwdot[CO2]/d[CH2CO]
  J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 104: CH2CO + OH <=> H2O + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[29];
  k_f = 7500000 * exp(0 * tc[0] - 0.50321666580472 * (2000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (2000) * invT2;
  // reverse
  phi_r = sc[13] * sc[28];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[29]) + (h_RT[13] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[28] += q; // HCCO
  wdot[29] -= q; // CH2CO
  // d()/d[OH]
  dqdci = +k_f * sc[29];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[457] += dqdci; // dwdot[HCCO]/d[OH]
  J[458] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[535] += dqdci; // dwdot[HCCO]/d[H2O]
  J[536] -= dqdci; // dwdot[CH2CO]/d[H2O]
  // d()/d[HCCO]
  dqdci = -k_r * sc[13];
  J[1103] -= dqdci; // dwdot[OH]/d[HCCO]
  J[1105] += dqdci; // dwdot[H2O]/d[HCCO]
  J[1120] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1121] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[11];
  J[1142] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[1144] += dqdci; // dwdot[H2O]/d[CH2CO]
  J[1159] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1510] += dqdT; // dwdot[HCCO]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 106: C2H3 + H <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[25];
  k_f = 90000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[24];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[25]) + (h_RT[3] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[24] += q; // C2H2
  wdot[25] -= q; // C2H3
  // d()/d[H2]
  dqdci = -k_r * sc[24];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[141] += dqdci; // dwdot[C2H2]/d[H2]
  J[142] -= dqdci; // dwdot[C2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[375] += dqdci; // dwdot[C2H2]/d[H]
  J[376] -= dqdci; // dwdot[C2H3]/d[H]
  // d()/d[C2H2]
  dqdci = -k_r * sc[3];
  J[939] += dqdci; // dwdot[H2]/d[C2H2]
  J[945] -= dqdci; // dwdot[H]/d[C2H2]
  J[960] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[961] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[9];
  J[978] += dqdci;  // dwdot[H2]/d[C2H3]
  J[984] -= dqdci;  // dwdot[H]/d[C2H3]
  J[999] += dqdci;  // dwdot[C2H2]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1506] += dqdT; // dwdot[C2H2]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 107: C2H3 + O <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[25];
  k_f = 48000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[29];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[25] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[25]) + (h_RT[9] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[25] -= q; // C2H3
  wdot[29] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[376] -= dqdci; // dwdot[C2H3]/d[H]
  J[380] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[415] -= dqdci; // dwdot[C2H3]/d[O]
  J[419] += dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[10];
  J[984] += dqdci;  // dwdot[H]/d[C2H3]
  J[985] -= dqdci;  // dwdot[O]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1004] += dqdci; // dwdot[CH2CO]/d[C2H3]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[9];
  J[1140] += dqdci; // dwdot[H]/d[CH2CO]
  J[1141] -= dqdci; // dwdot[O]/d[CH2CO]
  J[1156] -= dqdci; // dwdot[C2H3]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT

  // reaction 108: C2H3 + O <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[25];
  k_f = 48000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[18] * sc[22];
  Kc = exp(g_RT[10] - g_RT[18] - g_RT[22] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[25]) + (h_RT[18] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[18] += q; // CH3
  wdot[22] += q; // CO
  wdot[25] -= q; // C2H3
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[408] += dqdci; // dwdot[CH3]/d[O]
  J[412] += dqdci; // dwdot[CO]/d[O]
  J[415] -= dqdci; // dwdot[C2H3]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[22];
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[724] += dqdci; // dwdot[CO]/d[CH3]
  J[727] -= dqdci; // dwdot[C2H3]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[18];
  J[868] -= dqdci; // dwdot[O]/d[CO]
  J[876] += dqdci; // dwdot[CH3]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[883] -= dqdci; // dwdot[C2H3]/d[CO]
  // d()/d[C2H3]
  dqdci = +k_f * sc[10];
  J[985] -= dqdci;  // dwdot[O]/d[C2H3]
  J[993] += dqdci;  // dwdot[CH3]/d[C2H3]
  J[997] += dqdci;  // dwdot[CO]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 109: C2H3 + OH <=> C2H2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[25];
  k_f = 30110000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[24];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[25]) + (h_RT[13] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[24] += q; // C2H2
  wdot[25] -= q; // C2H3
  // d()/d[OH]
  dqdci = +k_f * sc[25];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[453] += dqdci; // dwdot[C2H2]/d[OH]
  J[454] -= dqdci; // dwdot[C2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[24];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[531] += dqdci; // dwdot[C2H2]/d[H2O]
  J[532] -= dqdci; // dwdot[C2H3]/d[H2O]
  // d()/d[C2H2]
  dqdci = -k_r * sc[13];
  J[947] -= dqdci; // dwdot[OH]/d[C2H2]
  J[949] += dqdci; // dwdot[H2O]/d[C2H2]
  J[960] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[961] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[11];
  J[986] -= dqdci;  // dwdot[OH]/d[C2H3]
  J[988] += dqdci;  // dwdot[H2O]/d[C2H3]
  J[999] += dqdci;  // dwdot[C2H2]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1506] += dqdT; // dwdot[C2H2]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 110: C2H3 + O2 <=> C2H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[25];
  k_f = 1.34 * exp(1.61 * tc[0] - 0.50321666580472 * (-383.4) * invT);
  dlnkfdT = 1.61 * invT + 0.50321666580472 * (-383.4) * invT2;
  // reverse
  phi_r = sc[12] * sc[24];
  Kc = exp(-g_RT[12] + g_RT[15] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[25]) + (h_RT[12] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[24] += q; // C2H2
  wdot[25] -= q; // C2H3
  // d()/d[HO2]
  dqdci = -k_r * sc[24];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[492] += dqdci; // dwdot[C2H2]/d[HO2]
  J[493] -= dqdci; // dwdot[C2H3]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[25];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[609] += dqdci; // dwdot[C2H2]/d[O2]
  J[610] -= dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[12];
  J[948] += dqdci; // dwdot[HO2]/d[C2H2]
  J[951] -= dqdci; // dwdot[O2]/d[C2H2]
  J[960] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[961] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[15];
  J[987] += dqdci;  // dwdot[HO2]/d[C2H3]
  J[990] -= dqdci;  // dwdot[O2]/d[C2H3]
  J[999] += dqdci;  // dwdot[C2H2]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1506] += dqdT; // dwdot[C2H2]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 111: C2H3 + O2 <=> CH2CHO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[25];
  k_f = 300000 * exp(0.29 * tc[0] - 0.50321666580472 * (11) * invT);
  dlnkfdT = 0.29 * invT + 0.50321666580472 * (11) * invT2;
  // reverse
  phi_r = sc[10] * sc[30];
  Kc = exp(-g_RT[10] + g_RT[15] + g_RT[25] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[25]) + (h_RT[10] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // O
  wdot[15] -= q; // O2
  wdot[25] -= q; // C2H3
  wdot[30] += q; // CH2CHO
  // d()/d[O]
  dqdci = -k_r * sc[30];
  J[400] += dqdci; // dwdot[O]/d[O]
  J[405] -= dqdci; // dwdot[O2]/d[O]
  J[415] -= dqdci; // dwdot[C2H3]/d[O]
  J[420] += dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[25];
  J[595] += dqdci; // dwdot[O]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[610] -= dqdci; // dwdot[C2H3]/d[O2]
  J[615] += dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[15];
  J[985] += dqdci;  // dwdot[O]/d[C2H3]
  J[990] -= dqdci;  // dwdot[O2]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1005] += dqdci; // dwdot[CH2CHO]/d[C2H3]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[10];
  J[1180] += dqdci; // dwdot[O]/d[CH2CHO]
  J[1185] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[1195] -= dqdci; // dwdot[C2H3]/d[CH2CHO]
  J[1200] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1492] += dqdT; // dwdot[O]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT
  J[1512] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 112: C2H3 + O2 <=> CH2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[25];
  k_f = 46000000000 * exp(-1.39 * tc[0] - 0.50321666580472 * (1010) * invT);
  dlnkfdT = -1.39 * invT + 0.50321666580472 * (1010) * invT2;
  // reverse
  phi_r = sc[19] * sc[20];
  Kc = exp(g_RT[15] - g_RT[19] - g_RT[20] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[25]) + (h_RT[19] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // O2
  wdot[19] += q; // HCO
  wdot[20] += q; // CH2O
  wdot[25] -= q; // C2H3
  // d()/d[O2]
  dqdci = +k_f * sc[25];
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[604] += dqdci; // dwdot[HCO]/d[O2]
  J[605] += dqdci; // dwdot[CH2O]/d[O2]
  J[610] -= dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[20];
  J[756] -= dqdci; // dwdot[O2]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] += dqdci; // dwdot[CH2O]/d[HCO]
  J[766] -= dqdci; // dwdot[C2H3]/d[HCO]
  // d()/d[CH2O]
  dqdci = -k_r * sc[19];
  J[795] -= dqdci; // dwdot[O2]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[805] -= dqdci; // dwdot[C2H3]/d[CH2O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[15];
  J[990] -= dqdci;  // dwdot[O2]/d[C2H3]
  J[994] += dqdci;  // dwdot[HCO]/d[C2H3]
  J[995] += dqdci;  // dwdot[CH2O]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 114: C2H3 + CH3 <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[25];
  k_f = 1.5e+18 * exp(-2.83 * tc[0] - 0.50321666580472 * (18618) * invT);
  dlnkfdT = -2.83 * invT + 0.50321666580472 * (18618) * invT2;
  // reverse
  phi_r = sc[9] * sc[31];
  Kc = exp(-g_RT[9] + g_RT[18] + g_RT[25] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[25]) + (h_RT[9] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[18] -= q; // CH3
  wdot[25] -= q; // C2H3
  wdot[31] += q; // aC3H5
  // d()/d[H]
  dqdci = -k_r * sc[31];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[369] -= dqdci; // dwdot[CH3]/d[H]
  J[376] -= dqdci; // dwdot[C2H3]/d[H]
  J[382] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc[25];
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[727] -= dqdci; // dwdot[C2H3]/d[CH3]
  J[733] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[C2H3]
  dqdci = +k_f * sc[18];
  J[984] += dqdci;  // dwdot[H]/d[C2H3]
  J[993] -= dqdci;  // dwdot[CH3]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1006] += dqdci; // dwdot[aC3H5]/d[C2H3]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[9];
  J[1218] += dqdci; // dwdot[H]/d[aC3H5]
  J[1227] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[1234] -= dqdci; // dwdot[C2H3]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 115: CH2CHO <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30];
  k_f = 1.2e+37 * exp(-7.456 * tc[0] - 0.50321666580472 * (46100) * invT);
  dlnkfdT = -7.456 * invT + 0.50321666580472 * (46100) * invT2;
  // reverse
  phi_r = sc[18] * sc[22];
  Kc = refC * exp(-g_RT[18] - g_RT[22] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30]) + (h_RT[18] + h_RT[22]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH3
  wdot[22] += q; // CO
  wdot[30] -= q; // CH2CHO
  // d()/d[CH3]
  dqdci = -k_r * sc[22];
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[724] += dqdci; // dwdot[CO]/d[CH3]
  J[732] -= dqdci; // dwdot[CH2CHO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[18];
  J[876] += dqdci; // dwdot[CH3]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[888] -= dqdci; // dwdot[CH2CHO]/d[CO]
  // d()/d[CH2CHO]
  dqdci = +k_f;
  J[1188] += dqdci; // dwdot[CH3]/d[CH2CHO]
  J[1192] += dqdci; // dwdot[CO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 116: CH2CHO + H <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[30];
  k_f = 90000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[18] * sc[19];
  Kc = exp(g_RT[9] - g_RT[18] - g_RT[19] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[30]) + (h_RT[18] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  wdot[19] += q; // HCO
  wdot[30] -= q; // CH2CHO
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  J[370] += dqdci; // dwdot[HCO]/d[H]
  J[381] -= dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[19];
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[721] += dqdci; // dwdot[HCO]/d[CH3]
  J[732] -= dqdci; // dwdot[CH2CHO]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[18];
  J[750] -= dqdci; // dwdot[H]/d[HCO]
  J[759] += dqdci; // dwdot[CH3]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[771] -= dqdci; // dwdot[CH2CHO]/d[HCO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[9];
  J[1179] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[1188] += dqdci; // dwdot[CH3]/d[CH2CHO]
  J[1189] += dqdci; // dwdot[HCO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 117: CH2CHO + H <=> CH2CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[30];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (4000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (4000) * invT2;
  // reverse
  phi_r = sc[3] * sc[29];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[29] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[30]) + (h_RT[3] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[29] += q; // CH2CO
  wdot[30] -= q; // CH2CHO
  // d()/d[H2]
  dqdci = -k_r * sc[29];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[146] += dqdci; // dwdot[CH2CO]/d[H2]
  J[147] -= dqdci; // dwdot[CH2CHO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[380] += dqdci; // dwdot[CH2CO]/d[H]
  J[381] -= dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[3];
  J[1134] += dqdci; // dwdot[H2]/d[CH2CO]
  J[1140] -= dqdci; // dwdot[H]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[1161] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[9];
  J[1173] += dqdci; // dwdot[H2]/d[CH2CHO]
  J[1179] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[1199] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 118: CH2CHO + O <=> CH2CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[30];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (4000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (4000) * invT2;
  // reverse
  phi_r = sc[11] * sc[29];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[29] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[30]) + (h_RT[11] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[29] += q; // CH2CO
  wdot[30] -= q; // CH2CHO
  // d()/d[O]
  dqdci = +k_f * sc[30];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[419] += dqdci; // dwdot[CH2CO]/d[O]
  J[420] -= dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[29];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[458] += dqdci; // dwdot[CH2CO]/d[OH]
  J[459] -= dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[11];
  J[1141] -= dqdci; // dwdot[O]/d[CH2CO]
  J[1142] += dqdci; // dwdot[OH]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[1161] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[10];
  J[1180] -= dqdci; // dwdot[O]/d[CH2CHO]
  J[1181] += dqdci; // dwdot[OH]/d[CH2CHO]
  J[1199] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 119: CH2CHO + OH <=> CH2CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[30];
  k_f = 10000000 * exp(0 * tc[0] - 0.50321666580472 * (2000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (2000) * invT2;
  // reverse
  phi_r = sc[13] * sc[29];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[29] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[30]) + (h_RT[13] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[29] += q; // CH2CO
  wdot[30] -= q; // CH2CHO
  // d()/d[OH]
  dqdci = +k_f * sc[30];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[458] += dqdci; // dwdot[CH2CO]/d[OH]
  J[459] -= dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[29];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[536] += dqdci; // dwdot[CH2CO]/d[H2O]
  J[537] -= dqdci; // dwdot[CH2CHO]/d[H2O]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[13];
  J[1142] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[1144] += dqdci; // dwdot[H2O]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[1161] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[11];
  J[1181] -= dqdci; // dwdot[OH]/d[CH2CHO]
  J[1183] += dqdci; // dwdot[H2O]/d[CH2CHO]
  J[1199] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 120: CH2CHO + O2 <=> CH2CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[30];
  k_f = 140000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[12] * sc[29];
  Kc = exp(-g_RT[12] + g_RT[15] - g_RT[29] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[30]) + (h_RT[12] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[29] += q; // CH2CO
  wdot[30] -= q; // CH2CHO
  // d()/d[HO2]
  dqdci = -k_r * sc[29];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[497] += dqdci; // dwdot[CH2CO]/d[HO2]
  J[498] -= dqdci; // dwdot[CH2CHO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[30];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[614] += dqdci; // dwdot[CH2CO]/d[O2]
  J[615] -= dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[12];
  J[1143] += dqdci; // dwdot[HO2]/d[CH2CO]
  J[1146] -= dqdci; // dwdot[O2]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[1161] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[15];
  J[1182] += dqdci; // dwdot[HO2]/d[CH2CHO]
  J[1185] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[1199] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 122: C2H4 + H <=> C2H3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[9];
  k_f = 50.7 * exp(1.9 * tc[0] - 0.50321666580472 * (12950) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (12950) * invT2;
  // reverse
  phi_r = sc[3] * sc[25];
  Kc = exp(g_RT[1] - g_RT[3] + g_RT[9] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[9]) + (h_RT[3] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[25] += q; // C2H3
  // d()/d[C2H4]
  dqdci = +k_f * sc[9];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[42] += dqdci; // dwdot[H2]/d[C2H4]
  J[48] -= dqdci; // dwdot[H]/d[C2H4]
  J[64] += dqdci; // dwdot[C2H3]/d[C2H4]
  // d()/d[H2]
  dqdci = -k_r * sc[25];
  J[118] -= dqdci; // dwdot[C2H4]/d[H2]
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[142] += dqdci; // dwdot[C2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[1];
  J[352] -= dqdci; // dwdot[C2H4]/d[H]
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[376] += dqdci; // dwdot[C2H3]/d[H]
  // d()/d[C2H3]
  dqdci = -k_r * sc[3];
  J[976] -= dqdci;  // dwdot[C2H4]/d[C2H3]
  J[978] += dqdci;  // dwdot[H2]/d[C2H3]
  J[984] -= dqdci;  // dwdot[H]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 123: C2H4 + O <=> C2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 15.1 * exp(1.9 * tc[0] - 0.50321666580472 * (3740) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (3740) * invT2;
  // reverse
  phi_r = sc[11] * sc[25];
  Kc = exp(g_RT[1] + g_RT[10] - g_RT[11] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[11] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[25] += q; // C2H3
  // d()/d[C2H4]
  dqdci = +k_f * sc[10];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[49] -= dqdci; // dwdot[O]/d[C2H4]
  J[50] += dqdci; // dwdot[OH]/d[C2H4]
  J[64] += dqdci; // dwdot[C2H3]/d[C2H4]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[391] -= dqdci; // dwdot[C2H4]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[415] += dqdci; // dwdot[C2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[430] -= dqdci; // dwdot[C2H4]/d[OH]
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[454] += dqdci; // dwdot[C2H3]/d[OH]
  // d()/d[C2H3]
  dqdci = -k_r * sc[11];
  J[976] -= dqdci;  // dwdot[C2H4]/d[C2H3]
  J[985] -= dqdci;  // dwdot[O]/d[C2H3]
  J[986] += dqdci;  // dwdot[OH]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 124: C2H4 + O <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 19.2 * exp(1.83 * tc[0] - 0.50321666580472 * (220) * invT);
  dlnkfdT = 1.83 * invT + 0.50321666580472 * (220) * invT2;
  // reverse
  phi_r = sc[18] * sc[19];
  Kc = exp(g_RT[1] + g_RT[10] - g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[18] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[10] -= q; // O
  wdot[18] += q; // CH3
  wdot[19] += q; // HCO
  // d()/d[C2H4]
  dqdci = +k_f * sc[10];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[49] -= dqdci; // dwdot[O]/d[C2H4]
  J[57] += dqdci; // dwdot[CH3]/d[C2H4]
  J[58] += dqdci; // dwdot[HCO]/d[C2H4]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[391] -= dqdci; // dwdot[C2H4]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[408] += dqdci; // dwdot[CH3]/d[O]
  J[409] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[19];
  J[703] -= dqdci; // dwdot[C2H4]/d[CH3]
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[721] += dqdci; // dwdot[HCO]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[18];
  J[742] -= dqdci; // dwdot[C2H4]/d[HCO]
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[759] += dqdci; // dwdot[CH3]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT

  // reaction 125: C2H4 + O <=> CH2 + CH2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 0.384 * exp(1.83 * tc[0] - 0.50321666580472 * (220) * invT);
  dlnkfdT = 1.83 * invT + 0.50321666580472 * (220) * invT2;
  // reverse
  phi_r = sc[16] * sc[20];
  Kc = exp(g_RT[1] + g_RT[10] - g_RT[16] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[16] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[10] -= q; // O
  wdot[16] += q; // CH2
  wdot[20] += q; // CH2O
  // d()/d[C2H4]
  dqdci = +k_f * sc[10];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[49] -= dqdci; // dwdot[O]/d[C2H4]
  J[55] += dqdci; // dwdot[CH2]/d[C2H4]
  J[59] += dqdci; // dwdot[CH2O]/d[C2H4]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[391] -= dqdci; // dwdot[C2H4]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[406] += dqdci; // dwdot[CH2]/d[O]
  J[410] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[20];
  J[625] -= dqdci; // dwdot[C2H4]/d[CH2]
  J[634] -= dqdci; // dwdot[O]/d[CH2]
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[644] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[16];
  J[781] -= dqdci; // dwdot[C2H4]/d[CH2O]
  J[790] -= dqdci; // dwdot[O]/d[CH2O]
  J[796] += dqdci; // dwdot[CH2]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 126: C2H4 + OH <=> C2H3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 3.6 * exp(2 * tc[0] - 0.50321666580472 * (2500) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (2500) * invT2;
  // reverse
  phi_r = sc[13] * sc[25];
  Kc = exp(g_RT[1] + g_RT[11] - g_RT[13] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[13] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[25] += q; // C2H3
  // d()/d[C2H4]
  dqdci = +k_f * sc[11];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[50] -= dqdci; // dwdot[OH]/d[C2H4]
  J[52] += dqdci; // dwdot[H2O]/d[C2H4]
  J[64] += dqdci; // dwdot[C2H3]/d[C2H4]
  // d()/d[OH]
  dqdci = +k_f * sc[1];
  J[430] -= dqdci; // dwdot[C2H4]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[454] += dqdci; // dwdot[C2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[508] -= dqdci; // dwdot[C2H4]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[532] += dqdci; // dwdot[C2H3]/d[H2O]
  // d()/d[C2H3]
  dqdci = -k_r * sc[13];
  J[976] -= dqdci;  // dwdot[C2H4]/d[C2H3]
  J[986] -= dqdci;  // dwdot[OH]/d[C2H3]
  J[988] += dqdci;  // dwdot[H2O]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 127: C2H4 + HCO <=> C2H5 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 10 * exp(2 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[22] * sc[26];
  Kc = exp(g_RT[1] + g_RT[19] - g_RT[22] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[22] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  wdot[26] += q; // C2H5
  // d()/d[C2H4]
  dqdci = +k_f * sc[19];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[58] -= dqdci; // dwdot[HCO]/d[C2H4]
  J[61] += dqdci; // dwdot[CO]/d[C2H4]
  J[65] += dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[HCO]
  dqdci = +k_f * sc[1];
  J[742] -= dqdci; // dwdot[C2H4]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  J[767] += dqdci; // dwdot[C2H5]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[26];
  J[859] -= dqdci; // dwdot[C2H4]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[884] += dqdci; // dwdot[C2H5]/d[CO]
  // d()/d[C2H5]
  dqdci = -k_r * sc[22];
  J[1015] -= dqdci; // dwdot[C2H4]/d[C2H5]
  J[1033] -= dqdci; // dwdot[HCO]/d[C2H5]
  J[1036] += dqdci; // dwdot[CO]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT

  // reaction 128: C2H4 + CH2 <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (6000) * invT2;
  // reverse
  phi_r = sc[9] * sc[31];
  Kc = exp(g_RT[1] - g_RT[9] + g_RT[16] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[9] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[9] += q;  // H
  wdot[16] -= q; // CH2
  wdot[31] += q; // aC3H5
  // d()/d[C2H4]
  dqdci = +k_f * sc[16];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[48] += dqdci; // dwdot[H]/d[C2H4]
  J[55] -= dqdci; // dwdot[CH2]/d[C2H4]
  J[70] += dqdci; // dwdot[aC3H5]/d[C2H4]
  // d()/d[H]
  dqdci = -k_r * sc[31];
  J[352] -= dqdci; // dwdot[C2H4]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[367] -= dqdci; // dwdot[CH2]/d[H]
  J[382] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[1];
  J[625] -= dqdci; // dwdot[C2H4]/d[CH2]
  J[633] += dqdci; // dwdot[H]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[655] += dqdci; // dwdot[aC3H5]/d[CH2]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[9];
  J[1210] -= dqdci; // dwdot[C2H4]/d[aC3H5]
  J[1218] += dqdci; // dwdot[H]/d[aC3H5]
  J[1225] -= dqdci; // dwdot[CH2]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 129: C2H4 + CH2* <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[31];
  Kc = exp(g_RT[1] - g_RT[9] + g_RT[17] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[9] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[9] += q;  // H
  wdot[17] -= q; // CH2*
  wdot[31] += q; // aC3H5
  // d()/d[C2H4]
  dqdci = +k_f * sc[17];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[48] += dqdci; // dwdot[H]/d[C2H4]
  J[56] -= dqdci; // dwdot[CH2*]/d[C2H4]
  J[70] += dqdci; // dwdot[aC3H5]/d[C2H4]
  // d()/d[H]
  dqdci = -k_r * sc[31];
  J[352] -= dqdci; // dwdot[C2H4]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[368] -= dqdci; // dwdot[CH2*]/d[H]
  J[382] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[CH2*]
  dqdci = +k_f * sc[1];
  J[664] -= dqdci; // dwdot[C2H4]/d[CH2*]
  J[672] += dqdci; // dwdot[H]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[694] += dqdci; // dwdot[aC3H5]/d[CH2*]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[9];
  J[1210] -= dqdci; // dwdot[C2H4]/d[aC3H5]
  J[1218] += dqdci; // dwdot[H]/d[aC3H5]
  J[1226] -= dqdci; // dwdot[CH2*]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 130: C2H4 + CH3 <=> C2H3 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 0.227 * exp(2 * tc[0] - 0.50321666580472 * (9200) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (9200) * invT2;
  // reverse
  phi_r = sc[2] * sc[25];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[18] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[2] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[2] += q;  // CH4
  wdot[18] -= q; // CH3
  wdot[25] += q; // C2H3
  // d()/d[C2H4]
  dqdci = +k_f * sc[18];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[41] += dqdci; // dwdot[CH4]/d[C2H4]
  J[57] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[64] += dqdci; // dwdot[C2H3]/d[C2H4]
  // d()/d[CH4]
  dqdci = -k_r * sc[25];
  J[79] -= dqdci;  // dwdot[C2H4]/d[CH4]
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[103] += dqdci; // dwdot[C2H3]/d[CH4]
  // d()/d[CH3]
  dqdci = +k_f * sc[1];
  J[703] -= dqdci; // dwdot[C2H4]/d[CH3]
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[727] += dqdci; // dwdot[C2H3]/d[CH3]
  // d()/d[C2H3]
  dqdci = -k_r * sc[2];
  J[976] -= dqdci;  // dwdot[C2H4]/d[C2H3]
  J[977] += dqdci;  // dwdot[CH4]/d[C2H3]
  J[993] -= dqdci;  // dwdot[CH3]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 131: C2H4 + O2 <=> C2H3 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 42200000 * exp(0 * tc[0] - 0.50321666580472 * (60800) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (60800) * invT2;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(g_RT[1] - g_RT[12] + g_RT[15] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[25] += q; // C2H3
  // d()/d[C2H4]
  dqdci = +k_f * sc[15];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[51] += dqdci; // dwdot[HO2]/d[C2H4]
  J[54] -= dqdci; // dwdot[O2]/d[C2H4]
  J[64] += dqdci; // dwdot[C2H3]/d[C2H4]
  // d()/d[HO2]
  dqdci = -k_r * sc[25];
  J[469] -= dqdci; // dwdot[C2H4]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[493] += dqdci; // dwdot[C2H3]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[586] -= dqdci; // dwdot[C2H4]/d[O2]
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[610] += dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[C2H3]
  dqdci = -k_r * sc[12];
  J[976] -= dqdci;  // dwdot[C2H4]/d[C2H3]
  J[987] += dqdci;  // dwdot[HO2]/d[C2H3]
  J[990] -= dqdci;  // dwdot[O2]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 133: C2H5 + H <=> C2H4 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[26];
  k_f = 2000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[3];
  Kc = exp(-g_RT[1] - g_RT[3] + g_RT[9] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[26]) + (h_RT[1] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[26] -= q; // C2H5
  // d()/d[C2H4]
  dqdci = -k_r * sc[3];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[42] += dqdci; // dwdot[H2]/d[C2H4]
  J[48] -= dqdci; // dwdot[H]/d[C2H4]
  J[65] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[H2]
  dqdci = -k_r * sc[1];
  J[118] += dqdci; // dwdot[C2H4]/d[H2]
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[143] -= dqdci; // dwdot[C2H5]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[352] += dqdci; // dwdot[C2H4]/d[H]
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[377] -= dqdci; // dwdot[C2H5]/d[H]
  // d()/d[C2H5]
  dqdci = +k_f * sc[9];
  J[1015] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[1017] += dqdci; // dwdot[H2]/d[C2H5]
  J[1023] -= dqdci; // dwdot[H]/d[C2H5]
  J[1040] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT

  // reaction 134: C2H5 + O <=> CH2O + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[26];
  k_f = 16040000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[18] * sc[20];
  Kc = exp(g_RT[10] - g_RT[18] - g_RT[20] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[26]) + (h_RT[18] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[18] += q; // CH3
  wdot[20] += q; // CH2O
  wdot[26] -= q; // C2H5
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[408] += dqdci; // dwdot[CH3]/d[O]
  J[410] += dqdci; // dwdot[CH2O]/d[O]
  J[416] -= dqdci; // dwdot[C2H5]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[20];
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[722] += dqdci; // dwdot[CH2O]/d[CH3]
  J[728] -= dqdci; // dwdot[C2H5]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[18];
  J[790] -= dqdci; // dwdot[O]/d[CH2O]
  J[798] += dqdci; // dwdot[CH3]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[806] -= dqdci; // dwdot[C2H5]/d[CH2O]
  // d()/d[C2H5]
  dqdci = +k_f * sc[10];
  J[1024] -= dqdci; // dwdot[O]/d[C2H5]
  J[1032] += dqdci; // dwdot[CH3]/d[C2H5]
  J[1034] += dqdci; // dwdot[CH2O]/d[C2H5]
  J[1040] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT

  // reaction 135: C2H5 + O2 <=> C2H4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[26];
  k_f = 20000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(-g_RT[1] - g_RT[12] + g_RT[15] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[26]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[26] -= q; // C2H5
  // d()/d[C2H4]
  dqdci = -k_r * sc[12];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[51] += dqdci; // dwdot[HO2]/d[C2H4]
  J[54] -= dqdci; // dwdot[O2]/d[C2H4]
  J[65] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[HO2]
  dqdci = -k_r * sc[1];
  J[469] += dqdci; // dwdot[C2H4]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[494] -= dqdci; // dwdot[C2H5]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[26];
  J[586] += dqdci; // dwdot[C2H4]/d[O2]
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[611] -= dqdci; // dwdot[C2H5]/d[O2]
  // d()/d[C2H5]
  dqdci = +k_f * sc[15];
  J[1015] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[1026] += dqdci; // dwdot[HO2]/d[C2H5]
  J[1029] -= dqdci; // dwdot[O2]/d[C2H5]
  J[1040] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT

  // reaction 136: C2H5 + HO2 <=> CH2O + CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[26];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[18] * sc[20];
  Kc = refC * exp(-g_RT[11] + g_RT[12] - g_RT[18] - g_RT[20] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[26]) + (h_RT[11] + h_RT[18] + h_RT[20]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[18] += q; // CH3
  wdot[20] += q; // CH2O
  wdot[26] -= q; // C2H5
  // d()/d[OH]
  dqdci = -k_r * sc[18] * sc[20];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[447] += dqdci; // dwdot[CH3]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  J[455] -= dqdci; // dwdot[C2H5]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[26];
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[486] += dqdci; // dwdot[CH3]/d[HO2]
  J[488] += dqdci; // dwdot[CH2O]/d[HO2]
  J[494] -= dqdci; // dwdot[C2H5]/d[HO2]
  // d()/d[CH3]
  dqdci = -k_r * sc[11] * sc[20];
  J[713] += dqdci; // dwdot[OH]/d[CH3]
  J[714] -= dqdci; // dwdot[HO2]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[722] += dqdci; // dwdot[CH2O]/d[CH3]
  J[728] -= dqdci; // dwdot[C2H5]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[11] * sc[18];
  J[791] += dqdci; // dwdot[OH]/d[CH2O]
  J[792] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[798] += dqdci; // dwdot[CH3]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[806] -= dqdci; // dwdot[C2H5]/d[CH2O]
  // d()/d[C2H5]
  dqdci = +k_f * sc[12];
  J[1025] += dqdci; // dwdot[OH]/d[C2H5]
  J[1026] -= dqdci; // dwdot[HO2]/d[C2H5]
  J[1032] += dqdci; // dwdot[CH3]/d[C2H5]
  J[1034] += dqdci; // dwdot[CH2O]/d[C2H5]
  J[1040] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT

  // reaction 138: C2H6 + H <=> C2H5 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[27];
  k_f = 115 * exp(1.9 * tc[0] - 0.50321666580472 * (7530) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (7530) * invT2;
  // reverse
  phi_r = sc[3] * sc[26];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[27]) + (h_RT[3] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[26] += q; // C2H5
  wdot[27] -= q; // C2H6
  // d()/d[H2]
  dqdci = -k_r * sc[26];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[143] += dqdci; // dwdot[C2H5]/d[H2]
  J[144] -= dqdci; // dwdot[C2H6]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[377] += dqdci; // dwdot[C2H5]/d[H]
  J[378] -= dqdci; // dwdot[C2H6]/d[H]
  // d()/d[C2H5]
  dqdci = -k_r * sc[3];
  J[1017] += dqdci; // dwdot[H2]/d[C2H5]
  J[1023] -= dqdci; // dwdot[H]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1041] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[9];
  J[1056] += dqdci; // dwdot[H2]/d[C2H6]
  J[1062] -= dqdci; // dwdot[H]/d[C2H6]
  J[1079] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1080] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT
  J[1509] -= dqdT; // dwdot[C2H6]/dT

  // reaction 139: C2H6 + O <=> C2H5 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[27];
  k_f = 89.8 * exp(1.92 * tc[0] - 0.50321666580472 * (5690) * invT);
  dlnkfdT = 1.92 * invT + 0.50321666580472 * (5690) * invT2;
  // reverse
  phi_r = sc[11] * sc[26];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[27]) + (h_RT[11] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[26] += q; // C2H5
  wdot[27] -= q; // C2H6
  // d()/d[O]
  dqdci = +k_f * sc[27];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[416] += dqdci; // dwdot[C2H5]/d[O]
  J[417] -= dqdci; // dwdot[C2H6]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[26];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[455] += dqdci; // dwdot[C2H5]/d[OH]
  J[456] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[C2H5]
  dqdci = -k_r * sc[11];
  J[1024] -= dqdci; // dwdot[O]/d[C2H5]
  J[1025] += dqdci; // dwdot[OH]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1041] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[10];
  J[1063] -= dqdci; // dwdot[O]/d[C2H6]
  J[1064] += dqdci; // dwdot[OH]/d[C2H6]
  J[1079] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1080] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT
  J[1509] -= dqdT; // dwdot[C2H6]/dT

  // reaction 140: C2H6 + OH <=> C2H5 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[27];
  k_f = 3.54 * exp(2.12 * tc[0] - 0.50321666580472 * (870) * invT);
  dlnkfdT = 2.12 * invT + 0.50321666580472 * (870) * invT2;
  // reverse
  phi_r = sc[13] * sc[26];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[27]) + (h_RT[13] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[26] += q; // C2H5
  wdot[27] -= q; // C2H6
  // d()/d[OH]
  dqdci = +k_f * sc[27];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[455] += dqdci; // dwdot[C2H5]/d[OH]
  J[456] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[26];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[533] += dqdci; // dwdot[C2H5]/d[H2O]
  J[534] -= dqdci; // dwdot[C2H6]/d[H2O]
  // d()/d[C2H5]
  dqdci = -k_r * sc[13];
  J[1025] -= dqdci; // dwdot[OH]/d[C2H5]
  J[1027] += dqdci; // dwdot[H2O]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1041] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[11];
  J[1064] -= dqdci; // dwdot[OH]/d[C2H6]
  J[1066] += dqdci; // dwdot[H2O]/d[C2H6]
  J[1079] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1080] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT
  J[1509] -= dqdT; // dwdot[C2H6]/dT

  // reaction 141: C2H6 + CH3 <=> C2H5 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[27];
  k_f = 6.14 * exp(1.74 * tc[0] - 0.50321666580472 * (10450) * invT);
  dlnkfdT = 1.74 * invT + 0.50321666580472 * (10450) * invT2;
  // reverse
  phi_r = sc[2] * sc[26];
  Kc = exp(-g_RT[2] + g_RT[18] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[27]) + (h_RT[2] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[18] -= q; // CH3
  wdot[26] += q; // C2H5
  wdot[27] -= q; // C2H6
  // d()/d[CH4]
  dqdci = -k_r * sc[26];
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[104] += dqdci; // dwdot[C2H5]/d[CH4]
  J[105] -= dqdci; // dwdot[C2H6]/d[CH4]
  // d()/d[CH3]
  dqdci = +k_f * sc[27];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[728] += dqdci; // dwdot[C2H5]/d[CH3]
  J[729] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[2];
  J[1016] += dqdci; // dwdot[CH4]/d[C2H5]
  J[1032] -= dqdci; // dwdot[CH3]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1041] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[18];
  J[1055] += dqdci; // dwdot[CH4]/d[C2H6]
  J[1071] -= dqdci; // dwdot[CH3]/d[C2H6]
  J[1079] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1080] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT
  J[1509] -= dqdT; // dwdot[C2H6]/dT

  // reaction 143: HO2 + aC3H5 <=> C3H6 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[31];
  k_f = 2660000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[12] - g_RT[15] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[31]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[12] -= q; // HO2
  wdot[15] += q; // O2
  wdot[31] -= q; // aC3H5
  // d()/d[C3H6]
  dqdci = -k_r * sc[15];
  J[160] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[168] -= dqdci; // dwdot[HO2]/d[C3H6]
  J[171] += dqdci; // dwdot[O2]/d[C3H6]
  J[187] -= dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[HO2]
  dqdci = +k_f * sc[31];
  J[472] += dqdci; // dwdot[C3H6]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  J[499] -= dqdci; // dwdot[aC3H5]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[4];
  J[589] += dqdci; // dwdot[C3H6]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  J[616] -= dqdci; // dwdot[aC3H5]/d[O2]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[12];
  J[1213] += dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1221] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[1224] += dqdci; // dwdot[O2]/d[aC3H5]
  J[1240] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1497] += dqdT; // dwdot[O2]/dT
  J[1513] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 144: HO2 + aC3H5 <=> C2H3 + CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[31];
  k_f = 6600000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[20] * sc[25];
  Kc = refC * exp(-g_RT[11] + g_RT[12] - g_RT[20] - g_RT[25] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[31]) + (h_RT[11] + h_RT[20] + h_RT[25]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[20] += q; // CH2O
  wdot[25] += q; // C2H3
  wdot[31] -= q; // aC3H5
  // d()/d[OH]
  dqdci = -k_r * sc[20] * sc[25];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  J[454] += dqdci; // dwdot[C2H3]/d[OH]
  J[460] -= dqdci; // dwdot[aC3H5]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[31];
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[488] += dqdci; // dwdot[CH2O]/d[HO2]
  J[493] += dqdci; // dwdot[C2H3]/d[HO2]
  J[499] -= dqdci; // dwdot[aC3H5]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[11] * sc[25];
  J[791] += dqdci; // dwdot[OH]/d[CH2O]
  J[792] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[805] += dqdci; // dwdot[C2H3]/d[CH2O]
  J[811] -= dqdci; // dwdot[aC3H5]/d[CH2O]
  // d()/d[C2H3]
  dqdci = -k_r * sc[11] * sc[20];
  J[986] += dqdci;  // dwdot[OH]/d[C2H3]
  J[987] -= dqdci;  // dwdot[HO2]/d[C2H3]
  J[995] += dqdci;  // dwdot[CH2O]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1006] -= dqdci; // dwdot[aC3H5]/d[C2H3]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[12];
  J[1220] += dqdci; // dwdot[OH]/d[aC3H5]
  J[1221] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[1229] += dqdci; // dwdot[CH2O]/d[aC3H5]
  J[1234] += dqdci; // dwdot[C2H3]/d[aC3H5]
  J[1240] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT
  J[1513] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 145: HCO + aC3H5 <=> C3H6 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[31];
  k_f = 60000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[4] * sc[22];
  Kc = exp(-g_RT[4] + g_RT[19] - g_RT[22] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[31]) + (h_RT[4] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  wdot[31] -= q; // aC3H5
  // d()/d[C3H6]
  dqdci = -k_r * sc[22];
  J[160] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[175] -= dqdci; // dwdot[HCO]/d[C3H6]
  J[178] += dqdci; // dwdot[CO]/d[C3H6]
  J[187] -= dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[HCO]
  dqdci = +k_f * sc[31];
  J[745] += dqdci; // dwdot[C3H6]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  J[772] -= dqdci; // dwdot[aC3H5]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[4];
  J[862] += dqdci; // dwdot[C3H6]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[889] -= dqdci; // dwdot[aC3H5]/d[CO]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[19];
  J[1213] += dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1228] -= dqdci; // dwdot[HCO]/d[aC3H5]
  J[1231] += dqdci; // dwdot[CO]/d[aC3H5]
  J[1240] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1513] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 147: C3H6 + H <=> C2H4 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 3.3e+18 * exp(-3.04 * tc[0] - 0.50321666580472 * (15610) * invT);
  dlnkfdT = -3.04 * invT + 0.50321666580472 * (15610) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[4] -= q;  // C3H6
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  // d()/d[C2H4]
  dqdci = -k_r * sc[18];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[43] -= dqdci; // dwdot[C3H6]/d[C2H4]
  J[48] -= dqdci; // dwdot[H]/d[C2H4]
  J[57] += dqdci; // dwdot[CH3]/d[C2H4]
  // d()/d[C3H6]
  dqdci = +k_f * sc[9];
  J[157] += dqdci; // dwdot[C2H4]/d[C3H6]
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[165] -= dqdci; // dwdot[H]/d[C3H6]
  J[174] += dqdci; // dwdot[CH3]/d[C3H6]
  // d()/d[H]
  dqdci = +k_f * sc[4];
  J[352] += dqdci; // dwdot[C2H4]/d[H]
  J[355] -= dqdci; // dwdot[C3H6]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[703] += dqdci; // dwdot[C2H4]/d[CH3]
  J[706] -= dqdci; // dwdot[C3H6]/d[CH3]
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 148: C3H6 + H <=> H2 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 0.173 * exp(2.5 * tc[0] - 0.50321666580472 * (2490) * invT);
  dlnkfdT = 2.5 * invT + 0.50321666580472 * (2490) * invT2;
  // reverse
  phi_r = sc[3] * sc[31];
  Kc = exp(-g_RT[3] + g_RT[4] + g_RT[9] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[3] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[4] -= q;  // C3H6
  wdot[9] -= q;  // H
  wdot[31] += q; // aC3H5
  // d()/d[H2]
  dqdci = -k_r * sc[31];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[121] -= dqdci; // dwdot[C3H6]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[148] += dqdci; // dwdot[aC3H5]/d[H2]
  // d()/d[C3H6]
  dqdci = +k_f * sc[9];
  J[159] += dqdci; // dwdot[H2]/d[C3H6]
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[165] -= dqdci; // dwdot[H]/d[C3H6]
  J[187] += dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[H]
  dqdci = +k_f * sc[4];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[355] -= dqdci; // dwdot[C3H6]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[382] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[3];
  J[1212] += dqdci; // dwdot[H2]/d[aC3H5]
  J[1213] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1218] -= dqdci; // dwdot[H]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 149: C3H6 + O <=> CH2CO + CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 80 * exp(1.65 * tc[0] - 0.50321666580472 * (327) * invT);
  dlnkfdT = 1.65 * invT + 0.50321666580472 * (327) * invT2;
  // reverse
  phi_r = sc[9] * sc[18] * sc[29];
  Kc = refC * exp(g_RT[4] - g_RT[9] + g_RT[10] - g_RT[18] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[4] + h_RT[10]) + (h_RT[9] + h_RT[18] + h_RT[29]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // C3H6
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[18] += q; // CH3
  wdot[29] += q; // CH2CO
  // d()/d[C3H6]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[165] += dqdci; // dwdot[H]/d[C3H6]
  J[166] -= dqdci; // dwdot[O]/d[C3H6]
  J[174] += dqdci; // dwdot[CH3]/d[C3H6]
  J[185] += dqdci; // dwdot[CH2CO]/d[C3H6]
  // d()/d[H]
  dqdci = -k_r * sc[18] * sc[29];
  J[355] -= dqdci; // dwdot[C3H6]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  J[380] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[4];
  J[394] -= dqdci; // dwdot[C3H6]/d[O]
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[408] += dqdci; // dwdot[CH3]/d[O]
  J[419] += dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[9] * sc[29];
  J[706] -= dqdci; // dwdot[C3H6]/d[CH3]
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[731] += dqdci; // dwdot[CH2CO]/d[CH3]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[9] * sc[18];
  J[1135] -= dqdci; // dwdot[C3H6]/d[CH2CO]
  J[1140] += dqdci; // dwdot[H]/d[CH2CO]
  J[1141] -= dqdci; // dwdot[O]/d[CH2CO]
  J[1149] += dqdci; // dwdot[CH3]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT

  // reaction 150: C3H6 + O <=> C2H5 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 35 * exp(1.65 * tc[0] - 0.50321666580472 * (-972) * invT);
  dlnkfdT = 1.65 * invT + 0.50321666580472 * (-972) * invT2;
  // reverse
  phi_r = sc[19] * sc[26];
  Kc = exp(g_RT[4] + g_RT[10] - g_RT[19] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[19] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // C3H6
  wdot[10] -= q; // O
  wdot[19] += q; // HCO
  wdot[26] += q; // C2H5
  // d()/d[C3H6]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[166] -= dqdci; // dwdot[O]/d[C3H6]
  J[175] += dqdci; // dwdot[HCO]/d[C3H6]
  J[182] += dqdci; // dwdot[C2H5]/d[C3H6]
  // d()/d[O]
  dqdci = +k_f * sc[4];
  J[394] -= dqdci; // dwdot[C3H6]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[409] += dqdci; // dwdot[HCO]/d[O]
  J[416] += dqdci; // dwdot[C2H5]/d[O]
  // d()/d[HCO]
  dqdci = -k_r * sc[26];
  J[745] -= dqdci; // dwdot[C3H6]/d[HCO]
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[767] += dqdci; // dwdot[C2H5]/d[HCO]
  // d()/d[C2H5]
  dqdci = -k_r * sc[19];
  J[1018] -= dqdci; // dwdot[C3H6]/d[C2H5]
  J[1024] -= dqdci; // dwdot[O]/d[C2H5]
  J[1033] += dqdci; // dwdot[HCO]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT

  // reaction 151: C3H6 + O <=> OH + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 180000 * exp(0.7 * tc[0] - 0.50321666580472 * (5880) * invT);
  dlnkfdT = 0.7 * invT + 0.50321666580472 * (5880) * invT2;
  // reverse
  phi_r = sc[11] * sc[31];
  Kc = exp(g_RT[4] + g_RT[10] - g_RT[11] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[11] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // C3H6
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[31] += q; // aC3H5
  // d()/d[C3H6]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[166] -= dqdci; // dwdot[O]/d[C3H6]
  J[167] += dqdci; // dwdot[OH]/d[C3H6]
  J[187] += dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[O]
  dqdci = +k_f * sc[4];
  J[394] -= dqdci; // dwdot[C3H6]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[421] += dqdci; // dwdot[aC3H5]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[31];
  J[433] -= dqdci; // dwdot[C3H6]/d[OH]
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[460] += dqdci; // dwdot[aC3H5]/d[OH]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[11];
  J[1213] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1219] -= dqdci; // dwdot[O]/d[aC3H5]
  J[1220] += dqdci; // dwdot[OH]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 152: C3H6 + OH <=> H2O + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 3.1 * exp(2 * tc[0] - 0.50321666580472 * (-298) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (-298) * invT2;
  // reverse
  phi_r = sc[13] * sc[31];
  Kc = exp(g_RT[4] + g_RT[11] - g_RT[13] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[13] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // C3H6
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[31] += q; // aC3H5
  // d()/d[C3H6]
  dqdci = +k_f * sc[11];
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[167] -= dqdci; // dwdot[OH]/d[C3H6]
  J[169] += dqdci; // dwdot[H2O]/d[C3H6]
  J[187] += dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[OH]
  dqdci = +k_f * sc[4];
  J[433] -= dqdci; // dwdot[C3H6]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[460] += dqdci; // dwdot[aC3H5]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[31];
  J[511] -= dqdci; // dwdot[C3H6]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[538] += dqdci; // dwdot[aC3H5]/d[H2O]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[13];
  J[1213] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1220] -= dqdci; // dwdot[OH]/d[aC3H5]
  J[1222] += dqdci; // dwdot[H2O]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 153: C3H6 + CH3 <=> CH4 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 2.2e-06 * exp(3.5 * tc[0] - 0.50321666580472 * (5675) * invT);
  dlnkfdT = 3.5 * invT + 0.50321666580472 * (5675) * invT2;
  // reverse
  phi_r = sc[2] * sc[31];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[18] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[2] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[4] -= q;  // C3H6
  wdot[18] -= q; // CH3
  wdot[31] += q; // aC3H5
  // d()/d[CH4]
  dqdci = -k_r * sc[31];
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[82] -= dqdci;  // dwdot[C3H6]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[109] += dqdci; // dwdot[aC3H5]/d[CH4]
  // d()/d[C3H6]
  dqdci = +k_f * sc[18];
  J[158] += dqdci; // dwdot[CH4]/d[C3H6]
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[174] -= dqdci; // dwdot[CH3]/d[C3H6]
  J[187] += dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[706] -= dqdci; // dwdot[C3H6]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[733] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[2];
  J[1211] += dqdci; // dwdot[CH4]/d[aC3H5]
  J[1213] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1227] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 154: C4H81 + H <=> C2H4 + C2H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[1] * sc[26];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[1] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[5] -= q;  // C4H81
  wdot[9] -= q;  // H
  wdot[26] += q; // C2H5
  // d()/d[C2H4]
  dqdci = -k_r * sc[26];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[44] -= dqdci; // dwdot[C4H81]/d[C2H4]
  J[48] -= dqdci; // dwdot[H]/d[C2H4]
  J[65] += dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[C4H81]
  dqdci = +k_f * sc[9];
  J[196] += dqdci; // dwdot[C2H4]/d[C4H81]
  J[200] -= dqdci; // dwdot[C4H81]/d[C4H81]
  J[204] -= dqdci; // dwdot[H]/d[C4H81]
  J[221] += dqdci; // dwdot[C2H5]/d[C4H81]
  // d()/d[H]
  dqdci = +k_f * sc[5];
  J[352] += dqdci; // dwdot[C2H4]/d[H]
  J[356] -= dqdci; // dwdot[C4H81]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[377] += dqdci; // dwdot[C2H5]/d[H]
  // d()/d[C2H5]
  dqdci = -k_r * sc[1];
  J[1015] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[1019] -= dqdci; // dwdot[C4H81]/d[C2H5]
  J[1023] -= dqdci; // dwdot[H]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1487] -= dqdT; // dwdot[C4H81]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT

  // reaction 155: C4H81 + H <=> C3H6 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 3.2e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(-g_RT[4] + g_RT[5] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[5] -= q;  // C4H81
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  // d()/d[C3H6]
  dqdci = -k_r * sc[18];
  J[160] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[161] -= dqdci; // dwdot[C4H81]/d[C3H6]
  J[165] -= dqdci; // dwdot[H]/d[C3H6]
  J[174] += dqdci; // dwdot[CH3]/d[C3H6]
  // d()/d[C4H81]
  dqdci = +k_f * sc[9];
  J[199] += dqdci; // dwdot[C3H6]/d[C4H81]
  J[200] -= dqdci; // dwdot[C4H81]/d[C4H81]
  J[204] -= dqdci; // dwdot[H]/d[C4H81]
  J[213] += dqdci; // dwdot[CH3]/d[C4H81]
  // d()/d[H]
  dqdci = +k_f * sc[5];
  J[355] += dqdci; // dwdot[C3H6]/d[H]
  J[356] -= dqdci; // dwdot[C4H81]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[706] += dqdci; // dwdot[C3H6]/d[CH3]
  J[707] -= dqdci; // dwdot[C4H81]/d[CH3]
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1487] -= dqdT; // dwdot[C4H81]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 156: H + iC4H8 <=> C3H6 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[9];
  k_f = 3.3e+18 * exp(-3.04 * tc[0] - 0.50321666580472 * (15610) * invT);
  dlnkfdT = -3.04 * invT + 0.50321666580472 * (15610) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[9]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[6] -= q;  // iC4H8
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  // d()/d[C3H6]
  dqdci = -k_r * sc[18];
  J[160] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[162] -= dqdci; // dwdot[iC4H8]/d[C3H6]
  J[165] -= dqdci; // dwdot[H]/d[C3H6]
  J[174] += dqdci; // dwdot[CH3]/d[C3H6]
  // d()/d[iC4H8]
  dqdci = +k_f * sc[9];
  J[238] += dqdci; // dwdot[C3H6]/d[iC4H8]
  J[240] -= dqdci; // dwdot[iC4H8]/d[iC4H8]
  J[243] -= dqdci; // dwdot[H]/d[iC4H8]
  J[252] += dqdci; // dwdot[CH3]/d[iC4H8]
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[355] += dqdci; // dwdot[C3H6]/d[H]
  J[357] -= dqdci; // dwdot[iC4H8]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[706] += dqdci; // dwdot[C3H6]/d[CH3]
  J[708] -= dqdci; // dwdot[iC4H8]/d[CH3]
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1488] -= dqdT; // dwdot[iC4H8]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 157: O + iC4H8 <=> CH2CO + 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 120 * exp(1.65 * tc[0] - 0.50321666580472 * (327) * invT);
  dlnkfdT = 1.65 * invT + 0.50321666580472 * (327) * invT2;
  // reverse
  phi_r = (sc[18] * sc[18]) * sc[29];
  Kc = refC * exp(g_RT[6] + g_RT[10] - 2.000000 * g_RT[18] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (2.000000 * h_RT[18] + h_RT[29]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;      // iC4H8
  wdot[10] -= q;     // O
  wdot[18] += 2 * q; // CH3
  wdot[29] += q;     // CH2CO
  // d()/d[iC4H8]
  dqdci = +k_f * sc[10];
  J[240] -= dqdci;     // dwdot[iC4H8]/d[iC4H8]
  J[244] -= dqdci;     // dwdot[O]/d[iC4H8]
  J[252] += 2 * dqdci; // dwdot[CH3]/d[iC4H8]
  J[263] += dqdci;     // dwdot[CH2CO]/d[iC4H8]
  // d()/d[O]
  dqdci = +k_f * sc[6];
  J[396] -= dqdci;     // dwdot[iC4H8]/d[O]
  J[400] -= dqdci;     // dwdot[O]/d[O]
  J[408] += 2 * dqdci; // dwdot[CH3]/d[O]
  J[419] += dqdci;     // dwdot[CH2CO]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[18] * sc[29];
  J[708] -= dqdci;     // dwdot[iC4H8]/d[CH3]
  J[712] -= dqdci;     // dwdot[O]/d[CH3]
  J[720] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[731] += dqdci;     // dwdot[CH2CO]/d[CH3]
  // d()/d[CH2CO]
  dqdci = -k_r * pow(sc[18], 2.000000);
  J[1137] -= dqdci;     // dwdot[iC4H8]/d[CH2CO]
  J[1141] -= dqdci;     // dwdot[O]/d[CH2CO]
  J[1149] += 2 * dqdci; // dwdot[CH3]/d[CH2CO]
  J[1160] += dqdci;     // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1488] -= dqdT;     // dwdot[iC4H8]/dT
  J[1492] -= dqdT;     // dwdot[O]/dT
  J[1500] += 2 * dqdT; // dwdot[CH3]/dT
  J[1511] += dqdT;     // dwdot[CH2CO]/dT

  // reaction 158: C6H5 + CH3 <=> C6H5CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[32];
  k_f = 13800000 * exp(0 * tc[0] - 0.50321666580472 * (46) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (46) * invT2;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(-g_RT[8] + g_RT[18] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[32]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // C6H5CH3
  wdot[18] -= q; // CH3
  wdot[32] -= q; // C6H5
  // d()/d[C6H5CH3]
  dqdci = -k_r;
  J[320] += dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[330] -= dqdci; // dwdot[CH3]/d[C6H5CH3]
  J[344] -= dqdci; // dwdot[C6H5]/d[C6H5CH3]
  // d()/d[CH3]
  dqdci = +k_f * sc[32];
  J[710] += dqdci; // dwdot[C6H5CH3]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[734] -= dqdci; // dwdot[C6H5]/d[CH3]
  // d()/d[C6H5]
  dqdci = +k_f * sc[18];
  J[1256] += dqdci; // dwdot[C6H5CH3]/d[C6H5]
  J[1266] -= dqdci; // dwdot[CH3]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  // d()/dT
  J[1490] += dqdT; // dwdot[C6H5CH3]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT

  // reaction 159: C6H5CH3 + O2 <=> C6H5CH2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[15];
  k_f = 300000000 * exp(0 * tc[0] - 0.50321666580472 * (42992) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (42992) * invT2;
  // reverse
  phi_r = sc[12] * sc[33];
  Kc = exp(g_RT[8] - g_RT[12] + g_RT[15] - g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[15]) + (h_RT[12] + h_RT[33]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // C6H5CH3
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[33] += q; // C6H5CH2
  // d()/d[C6H5CH3]
  dqdci = +k_f * sc[15];
  J[320] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[324] += dqdci; // dwdot[HO2]/d[C6H5CH3]
  J[327] -= dqdci; // dwdot[O2]/d[C6H5CH3]
  J[345] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH3]
  // d()/d[HO2]
  dqdci = -k_r * sc[33];
  J[476] -= dqdci; // dwdot[C6H5CH3]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[501] += dqdci; // dwdot[C6H5CH2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[593] -= dqdci; // dwdot[C6H5CH3]/d[O2]
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[618] += dqdci; // dwdot[C6H5CH2]/d[O2]
  // d()/d[C6H5CH2]
  dqdci = -k_r * sc[12];
  J[1295] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH2]
  J[1299] += dqdci; // dwdot[HO2]/d[C6H5CH2]
  J[1302] -= dqdci; // dwdot[O2]/d[C6H5CH2]
  J[1320] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  // d()/dT
  J[1490] -= dqdT; // dwdot[C6H5CH3]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1515] += dqdT; // dwdot[C6H5CH2]/dT

  // reaction 160: C6H5CH3 + OH <=> C6H5CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 16200000 * exp(0 * tc[0] - 0.50321666580472 * (2770) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (2770) * invT2;
  // reverse
  phi_r = sc[13] * sc[33];
  Kc = exp(g_RT[8] + g_RT[11] - g_RT[13] - g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[13] + h_RT[33]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // C6H5CH3
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[33] += q; // C6H5CH2
  // d()/d[C6H5CH3]
  dqdci = +k_f * sc[11];
  J[320] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[323] -= dqdci; // dwdot[OH]/d[C6H5CH3]
  J[325] += dqdci; // dwdot[H2O]/d[C6H5CH3]
  J[345] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH3]
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[437] -= dqdci; // dwdot[C6H5CH3]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[462] += dqdci; // dwdot[C6H5CH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[33];
  J[515] -= dqdci; // dwdot[C6H5CH3]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[540] += dqdci; // dwdot[C6H5CH2]/d[H2O]
  // d()/d[C6H5CH2]
  dqdci = -k_r * sc[13];
  J[1295] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH2]
  J[1298] -= dqdci; // dwdot[OH]/d[C6H5CH2]
  J[1300] += dqdci; // dwdot[H2O]/d[C6H5CH2]
  J[1320] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  // d()/dT
  J[1490] -= dqdT; // dwdot[C6H5CH3]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1515] += dqdT; // dwdot[C6H5CH2]/dT

  // reaction 161: C6H5CH3 + H <=> C6H5CH2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[9];
  k_f = 125900000 * exp(0 * tc[0] - 0.50321666580472 * (8359) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8359) * invT2;
  // reverse
  phi_r = sc[3] * sc[33];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[9]) + (h_RT[3] + h_RT[33]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[8] -= q;  // C6H5CH3
  wdot[9] -= q;  // H
  wdot[33] += q; // C6H5CH2
  // d()/d[H2]
  dqdci = -k_r * sc[33];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[125] -= dqdci; // dwdot[C6H5CH3]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[150] += dqdci; // dwdot[C6H5CH2]/d[H2]
  // d()/d[C6H5CH3]
  dqdci = +k_f * sc[9];
  J[315] += dqdci; // dwdot[H2]/d[C6H5CH3]
  J[320] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[321] -= dqdci; // dwdot[H]/d[C6H5CH3]
  J[345] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH3]
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[359] -= dqdci; // dwdot[C6H5CH3]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[384] += dqdci; // dwdot[C6H5CH2]/d[H]
  // d()/d[C6H5CH2]
  dqdci = -k_r * sc[3];
  J[1290] += dqdci; // dwdot[H2]/d[C6H5CH2]
  J[1295] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH2]
  J[1296] -= dqdci; // dwdot[H]/d[C6H5CH2]
  J[1320] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1490] -= dqdT; // dwdot[C6H5CH3]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1515] += dqdT; // dwdot[C6H5CH2]/dT

  // reaction 162: C6H5CH3 + H <=> C6H6 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[9];
  k_f = 1.93 * exp(2.17 * tc[0] - 0.50321666580472 * (4163) * invT);
  dlnkfdT = 2.17 * invT + 0.50321666580472 * (4163) * invT2;
  // reverse
  phi_r = sc[7] * sc[18];
  Kc = exp(-g_RT[7] + g_RT[8] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[9]) + (h_RT[7] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[7] += q;  // C6H6
  wdot[8] -= q;  // C6H5CH3
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  // d()/d[C6H6]
  dqdci = -k_r * sc[18];
  J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
  J[281] -= dqdci; // dwdot[C6H5CH3]/d[C6H6]
  J[282] -= dqdci; // dwdot[H]/d[C6H6]
  J[291] += dqdci; // dwdot[CH3]/d[C6H6]
  // d()/d[C6H5CH3]
  dqdci = +k_f * sc[9];
  J[319] += dqdci; // dwdot[C6H6]/d[C6H5CH3]
  J[320] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[321] -= dqdci; // dwdot[H]/d[C6H5CH3]
  J[330] += dqdci; // dwdot[CH3]/d[C6H5CH3]
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[358] += dqdci; // dwdot[C6H6]/d[H]
  J[359] -= dqdci; // dwdot[C6H5CH3]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[7];
  J[709] += dqdci; // dwdot[C6H6]/d[CH3]
  J[710] -= dqdci; // dwdot[C6H5CH3]/d[CH3]
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1490] -= dqdT; // dwdot[C6H5CH3]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 163: C6H5CH3 + CH3 <=> C6H5CH2 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[18];
  k_f = 316000 * exp(0 * tc[0] - 0.50321666580472 * (9500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (9500) * invT2;
  // reverse
  phi_r = sc[2] * sc[33];
  Kc = exp(-g_RT[2] + g_RT[8] + g_RT[18] - g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[18]) + (h_RT[2] + h_RT[33]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[8] -= q;  // C6H5CH3
  wdot[18] -= q; // CH3
  wdot[33] += q; // C6H5CH2
  // d()/d[CH4]
  dqdci = -k_r * sc[33];
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[86] -= dqdci;  // dwdot[C6H5CH3]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[111] += dqdci; // dwdot[C6H5CH2]/d[CH4]
  // d()/d[C6H5CH3]
  dqdci = +k_f * sc[18];
  J[314] += dqdci; // dwdot[CH4]/d[C6H5CH3]
  J[320] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[330] -= dqdci; // dwdot[CH3]/d[C6H5CH3]
  J[345] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH3]
  // d()/d[CH3]
  dqdci = +k_f * sc[8];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[710] -= dqdci; // dwdot[C6H5CH3]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[735] += dqdci; // dwdot[C6H5CH2]/d[CH3]
  // d()/d[C6H5CH2]
  dqdci = -k_r * sc[2];
  J[1289] += dqdci; // dwdot[CH4]/d[C6H5CH2]
  J[1295] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH2]
  J[1305] -= dqdci; // dwdot[CH3]/d[C6H5CH2]
  J[1320] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1490] -= dqdT; // dwdot[C6H5CH3]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1515] += dqdT; // dwdot[C6H5CH2]/dT

  // reaction 165: C6H5CH2 + H <=> C6H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[33];
  k_f = 1.5e+60 * exp(-13.94 * tc[0] - 0.50321666580472 * (64580) * invT);
  dlnkfdT = -13.94 * invT + 0.50321666580472 * (64580) * invT2;
  // reverse
  phi_r = sc[18] * sc[32];
  Kc = exp(g_RT[9] - g_RT[18] - g_RT[32] + g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[33]) + (h_RT[18] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  wdot[32] += q; // C6H5
  wdot[33] -= q; // C6H5CH2
  // d()/d[H]
  dqdci = +k_f * sc[33];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  J[383] += dqdci; // dwdot[C6H5]/d[H]
  J[384] -= dqdci; // dwdot[C6H5CH2]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[32];
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[734] += dqdci; // dwdot[C6H5]/d[CH3]
  J[735] -= dqdci; // dwdot[C6H5CH2]/d[CH3]
  // d()/d[C6H5]
  dqdci = -k_r * sc[18];
  J[1257] -= dqdci; // dwdot[H]/d[C6H5]
  J[1266] += dqdci; // dwdot[CH3]/d[C6H5]
  J[1280] += dqdci; // dwdot[C6H5]/d[C6H5]
  J[1281] -= dqdci; // dwdot[C6H5CH2]/d[C6H5]
  // d()/d[C6H5CH2]
  dqdci = +k_f * sc[9];
  J[1296] -= dqdci; // dwdot[H]/d[C6H5CH2]
  J[1305] += dqdci; // dwdot[CH3]/d[C6H5CH2]
  J[1319] += dqdci; // dwdot[C6H5]/d[C6H5CH2]
  J[1320] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1514] += dqdT; // dwdot[C6H5]/dT
  J[1515] -= dqdT; // dwdot[C6H5CH2]/dT

  // reaction 166: C6H5CH2 + O <=> C6H5CHO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[33];
  k_f = 400000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[36];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[33] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[33]) + (h_RT[9] + h_RT[36]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[33] -= q; // C6H5CH2
  wdot[36] += q; // C6H5CHO
  // d()/d[H]
  dqdci = -k_r * sc[36];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[384] -= dqdci; // dwdot[C6H5CH2]/d[H]
  J[387] += dqdci; // dwdot[C6H5CHO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[33];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[423] -= dqdci; // dwdot[C6H5CH2]/d[O]
  J[426] += dqdci; // dwdot[C6H5CHO]/d[O]
  // d()/d[C6H5CH2]
  dqdci = +k_f * sc[10];
  J[1296] += dqdci; // dwdot[H]/d[C6H5CH2]
  J[1297] -= dqdci; // dwdot[O]/d[C6H5CH2]
  J[1320] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  J[1323] += dqdci; // dwdot[C6H5CHO]/d[C6H5CH2]
  // d()/d[C6H5CHO]
  dqdci = -k_r * sc[9];
  J[1413] += dqdci; // dwdot[H]/d[C6H5CHO]
  J[1414] -= dqdci; // dwdot[O]/d[C6H5CHO]
  J[1437] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CHO]
  J[1440] += dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1515] -= dqdT; // dwdot[C6H5CH2]/dT
  J[1518] += dqdT; // dwdot[C6H5CHO]/dT

  // reaction 167: C6H5CH2 + HO2 <=> C6H5CHO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[33];
  k_f = 5000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[11] * sc[36];
  Kc = refC * exp(-g_RT[9] - g_RT[11] + g_RT[12] + g_RT[33] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[33]) + (h_RT[9] + h_RT[11] + h_RT[36]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[33] -= q; // C6H5CH2
  wdot[36] += q; // C6H5CHO
  // d()/d[H]
  dqdci = -k_r * sc[11] * sc[36];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  J[363] -= dqdci; // dwdot[HO2]/d[H]
  J[384] -= dqdci; // dwdot[C6H5CH2]/d[H]
  J[387] += dqdci; // dwdot[C6H5CHO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[9] * sc[36];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[462] -= dqdci; // dwdot[C6H5CH2]/d[OH]
  J[465] += dqdci; // dwdot[C6H5CHO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[33];
  J[477] += dqdci; // dwdot[H]/d[HO2]
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[501] -= dqdci; // dwdot[C6H5CH2]/d[HO2]
  J[504] += dqdci; // dwdot[C6H5CHO]/d[HO2]
  // d()/d[C6H5CH2]
  dqdci = +k_f * sc[12];
  J[1296] += dqdci; // dwdot[H]/d[C6H5CH2]
  J[1298] += dqdci; // dwdot[OH]/d[C6H5CH2]
  J[1299] -= dqdci; // dwdot[HO2]/d[C6H5CH2]
  J[1320] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  J[1323] += dqdci; // dwdot[C6H5CHO]/d[C6H5CH2]
  // d()/d[C6H5CHO]
  dqdci = -k_r * sc[9] * sc[11];
  J[1413] += dqdci; // dwdot[H]/d[C6H5CHO]
  J[1415] += dqdci; // dwdot[OH]/d[C6H5CHO]
  J[1416] -= dqdci; // dwdot[HO2]/d[C6H5CHO]
  J[1437] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CHO]
  J[1440] += dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1515] -= dqdT; // dwdot[C6H5CH2]/dT
  J[1518] += dqdT; // dwdot[C6H5CHO]/dT

  // reaction 168: C6H5 + HCO <=> C6H5CHO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[32];
  k_f = 10000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[36];
  Kc = refCinv * exp(g_RT[19] + g_RT[32] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[32]) + (h_RT[36]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] -= q; // HCO
  wdot[32] -= q; // C6H5
  wdot[36] += q; // C6H5CHO
  // d()/d[HCO]
  dqdci = +k_f * sc[32];
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[773] -= dqdci; // dwdot[C6H5]/d[HCO]
  J[777] += dqdci; // dwdot[C6H5CHO]/d[HCO]
  // d()/d[C6H5]
  dqdci = +k_f * sc[19];
  J[1267] -= dqdci; // dwdot[HCO]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  J[1284] += dqdci; // dwdot[C6H5CHO]/d[C6H5]
  // d()/d[C6H5CHO]
  dqdci = -k_r;
  J[1423] -= dqdci; // dwdot[HCO]/d[C6H5CHO]
  J[1436] -= dqdci; // dwdot[C6H5]/d[C6H5CHO]
  J[1440] += dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT
  J[1518] += dqdT; // dwdot[C6H5CHO]/dT

  // reaction 169: C6H5CHO <=> C6H5CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[36];
  k_f = 3.98e+15 * exp(0 * tc[0] - 0.50321666580472 * (86900) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (86900) * invT2;
  // reverse
  phi_r = sc[9] * sc[35];
  Kc = refC * exp(-g_RT[9] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[36]) + (h_RT[9] + h_RT[35]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[H]
  dqdci = -k_r * sc[35];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[386] += dqdci; // dwdot[C6H5CO]/d[H]
  J[387] -= dqdci; // dwdot[C6H5CHO]/d[H]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[9];
  J[1374] += dqdci; // dwdot[H]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f;
  J[1413] += dqdci; // dwdot[H]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 170: C6H5CHO + O2 <=> C6H5CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[36];
  k_f = 10200000 * exp(0 * tc[0] - 0.50321666580472 * (38950) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (38950) * invT2;
  // reverse
  phi_r = sc[12] * sc[35];
  Kc = exp(-g_RT[12] + g_RT[15] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[36]) + (h_RT[12] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[HO2]
  dqdci = -k_r * sc[35];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[503] += dqdci; // dwdot[C6H5CO]/d[HO2]
  J[504] -= dqdci; // dwdot[C6H5CHO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[36];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[620] += dqdci; // dwdot[C6H5CO]/d[O2]
  J[621] -= dqdci; // dwdot[C6H5CHO]/d[O2]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[12];
  J[1377] += dqdci; // dwdot[HO2]/d[C6H5CO]
  J[1380] -= dqdci; // dwdot[O2]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[15];
  J[1416] += dqdci; // dwdot[HO2]/d[C6H5CHO]
  J[1419] -= dqdci; // dwdot[O2]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 171: C6H5CHO + OH <=> C6H5CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[36];
  k_f = 23500 * exp(0.73 * tc[0] - 0.50321666580472 * (-1110) * invT);
  dlnkfdT = 0.73 * invT + 0.50321666580472 * (-1110) * invT2;
  // reverse
  phi_r = sc[13] * sc[35];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[36]) + (h_RT[13] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[OH]
  dqdci = +k_f * sc[36];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[464] += dqdci; // dwdot[C6H5CO]/d[OH]
  J[465] -= dqdci; // dwdot[C6H5CHO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[35];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[542] += dqdci; // dwdot[C6H5CO]/d[H2O]
  J[543] -= dqdci; // dwdot[C6H5CHO]/d[H2O]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[13];
  J[1376] -= dqdci; // dwdot[OH]/d[C6H5CO]
  J[1378] += dqdci; // dwdot[H2O]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[11];
  J[1415] -= dqdci; // dwdot[OH]/d[C6H5CHO]
  J[1417] += dqdci; // dwdot[H2O]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 172: C6H5CHO + H <=> C6H5CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[36];
  k_f = 4100 * exp(1.16 * tc[0] - 0.50321666580472 * (2400) * invT);
  dlnkfdT = 1.16 * invT + 0.50321666580472 * (2400) * invT2;
  // reverse
  phi_r = sc[3] * sc[35];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[36]) + (h_RT[3] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[H2]
  dqdci = -k_r * sc[35];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[152] += dqdci; // dwdot[C6H5CO]/d[H2]
  J[153] -= dqdci; // dwdot[C6H5CHO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[36];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[386] += dqdci; // dwdot[C6H5CO]/d[H]
  J[387] -= dqdci; // dwdot[C6H5CHO]/d[H]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[3];
  J[1368] += dqdci; // dwdot[H2]/d[C6H5CO]
  J[1374] -= dqdci; // dwdot[H]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[9];
  J[1407] += dqdci; // dwdot[H2]/d[C6H5CHO]
  J[1413] -= dqdci; // dwdot[H]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 173: C6H5CHO + H <=> C6H6 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[36];
  k_f = 1.93 * exp(2.17 * tc[0] - 0.50321666580472 * (4163) * invT);
  dlnkfdT = 2.17 * invT + 0.50321666580472 * (4163) * invT2;
  // reverse
  phi_r = sc[7] * sc[19];
  Kc = exp(-g_RT[7] + g_RT[9] - g_RT[19] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[36]) + (h_RT[7] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[7] += q;  // C6H6
  wdot[9] -= q;  // H
  wdot[19] += q; // HCO
  wdot[36] -= q; // C6H5CHO
  // d()/d[C6H6]
  dqdci = -k_r * sc[19];
  J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
  J[282] -= dqdci; // dwdot[H]/d[C6H6]
  J[292] += dqdci; // dwdot[HCO]/d[C6H6]
  J[309] -= dqdci; // dwdot[C6H5CHO]/d[C6H6]
  // d()/d[H]
  dqdci = +k_f * sc[36];
  J[358] += dqdci; // dwdot[C6H6]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[370] += dqdci; // dwdot[HCO]/d[H]
  J[387] -= dqdci; // dwdot[C6H5CHO]/d[H]
  // d()/d[HCO]
  dqdci = -k_r * sc[7];
  J[748] += dqdci; // dwdot[C6H6]/d[HCO]
  J[750] -= dqdci; // dwdot[H]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[777] -= dqdci; // dwdot[C6H5CHO]/d[HCO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[9];
  J[1411] += dqdci; // dwdot[C6H6]/d[C6H5CHO]
  J[1413] -= dqdci; // dwdot[H]/d[C6H5CHO]
  J[1423] += dqdci; // dwdot[HCO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 174: C6H5CHO + O <=> C6H5CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[36];
  k_f = 5800000 * exp(0 * tc[0] - 0.50321666580472 * (1800) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1800) * invT2;
  // reverse
  phi_r = sc[11] * sc[35];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[36]) + (h_RT[11] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[O]
  dqdci = +k_f * sc[36];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[425] += dqdci; // dwdot[C6H5CO]/d[O]
  J[426] -= dqdci; // dwdot[C6H5CHO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[35];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[464] += dqdci; // dwdot[C6H5CO]/d[OH]
  J[465] -= dqdci; // dwdot[C6H5CHO]/d[OH]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[11];
  J[1375] -= dqdci; // dwdot[O]/d[C6H5CO]
  J[1376] += dqdci; // dwdot[OH]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[10];
  J[1414] -= dqdci; // dwdot[O]/d[C6H5CHO]
  J[1415] += dqdci; // dwdot[OH]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 175: C6H5CHO + CH3 <=> C6H5CO + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[36];
  k_f = 2e-12 * exp(5.6 * tc[0] - 0.50321666580472 * (2460) * invT);
  dlnkfdT = 5.6 * invT + 0.50321666580472 * (2460) * invT2;
  // reverse
  phi_r = sc[2] * sc[35];
  Kc = exp(-g_RT[2] + g_RT[18] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[36]) + (h_RT[2] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[18] -= q; // CH3
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[CH4]
  dqdci = -k_r * sc[35];
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[113] += dqdci; // dwdot[C6H5CO]/d[CH4]
  J[114] -= dqdci; // dwdot[C6H5CHO]/d[CH4]
  // d()/d[CH3]
  dqdci = +k_f * sc[36];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[737] += dqdci; // dwdot[C6H5CO]/d[CH3]
  J[738] -= dqdci; // dwdot[C6H5CHO]/d[CH3]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[2];
  J[1367] += dqdci; // dwdot[CH4]/d[C6H5CO]
  J[1383] -= dqdci; // dwdot[CH3]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[18];
  J[1406] += dqdci; // dwdot[CH4]/d[C6H5CHO]
  J[1422] -= dqdci; // dwdot[CH3]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 176: C6H5CO + H2O2 <=> C6H5CHO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[35];
  k_f = 180000 * exp(0 * tc[0] - 0.50321666580472 * (8226) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8226) * invT2;
  // reverse
  phi_r = sc[12] * sc[36];
  Kc = exp(-g_RT[12] + g_RT[14] + g_RT[35] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[35]) + (h_RT[12] + h_RT[36]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[14] -= q; // H2O2
  wdot[35] -= q; // C6H5CO
  wdot[36] += q; // C6H5CHO
  // d()/d[HO2]
  dqdci = -k_r * sc[36];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[482] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[503] -= dqdci; // dwdot[C6H5CO]/d[HO2]
  J[504] += dqdci; // dwdot[C6H5CHO]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[35];
  J[558] += dqdci; // dwdot[HO2]/d[H2O2]
  J[560] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[581] -= dqdci; // dwdot[C6H5CO]/d[H2O2]
  J[582] += dqdci; // dwdot[C6H5CHO]/d[H2O2]
  // d()/d[C6H5CO]
  dqdci = +k_f * sc[14];
  J[1377] += dqdci; // dwdot[HO2]/d[C6H5CO]
  J[1379] -= dqdci; // dwdot[H2O2]/d[C6H5CO]
  J[1400] -= dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] += dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = -k_r * sc[12];
  J[1416] += dqdci; // dwdot[HO2]/d[C6H5CHO]
  J[1418] -= dqdci; // dwdot[H2O2]/d[C6H5CHO]
  J[1439] -= dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] += dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1496] -= dqdT; // dwdot[H2O2]/dT
  J[1517] -= dqdT; // dwdot[C6H5CO]/dT
  J[1518] += dqdT; // dwdot[C6H5CHO]/dT

  // reaction 177: C6H5CO <=> C6H5 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[35];
  k_f = 527000000000000 * exp(0 * tc[0] - 0.50321666580472 * (29013) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (29013) * invT2;
  // reverse
  phi_r = sc[22] * sc[32];
  Kc = refC * exp(-g_RT[22] - g_RT[32] + g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[35]) + (h_RT[22] + h_RT[32]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[22] += q; // CO
  wdot[32] += q; // C6H5
  wdot[35] -= q; // C6H5CO
  // d()/d[CO]
  dqdci = -k_r * sc[32];
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[890] += dqdci; // dwdot[C6H5]/d[CO]
  J[893] -= dqdci; // dwdot[C6H5CO]/d[CO]
  // d()/d[C6H5]
  dqdci = -k_r * sc[22];
  J[1270] += dqdci; // dwdot[CO]/d[C6H5]
  J[1280] += dqdci; // dwdot[C6H5]/d[C6H5]
  J[1283] -= dqdci; // dwdot[C6H5CO]/d[C6H5]
  // d()/d[C6H5CO]
  dqdci = +k_f;
  J[1387] += dqdci; // dwdot[CO]/d[C6H5CO]
  J[1397] += dqdci; // dwdot[C6H5]/d[C6H5CO]
  J[1400] -= dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  // d()/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1514] += dqdT; // dwdot[C6H5]/dT
  J[1517] -= dqdT; // dwdot[C6H5CO]/dT

  // reaction 179: C6H6 + OH <=> C6H5 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[11];
  k_f = 0.3985 * exp(2.286 * tc[0] - 0.50321666580472 * (1058) * invT);
  dlnkfdT = 2.286 * invT + 0.50321666580472 * (1058) * invT2;
  // reverse
  phi_r = sc[13] * sc[32];
  Kc = exp(g_RT[7] + g_RT[11] - g_RT[13] - g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[11]) + (h_RT[13] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[7] -= q;  // C6H6
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[32] += q; // C6H5
  // d()/d[C6H6]
  dqdci = +k_f * sc[11];
  J[280] -= dqdci; // dwdot[C6H6]/d[C6H6]
  J[284] -= dqdci; // dwdot[OH]/d[C6H6]
  J[286] += dqdci; // dwdot[H2O]/d[C6H6]
  J[305] += dqdci; // dwdot[C6H5]/d[C6H6]
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[436] -= dqdci; // dwdot[C6H6]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[461] += dqdci; // dwdot[C6H5]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[32];
  J[514] -= dqdci; // dwdot[C6H6]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[539] += dqdci; // dwdot[C6H5]/d[H2O]
  // d()/d[C6H5]
  dqdci = -k_r * sc[13];
  J[1255] -= dqdci; // dwdot[C6H6]/d[C6H5]
  J[1259] -= dqdci; // dwdot[OH]/d[C6H5]
  J[1261] += dqdci; // dwdot[H2O]/d[C6H5]
  J[1280] += dqdci; // dwdot[C6H5]/d[C6H5]
  // d()/dT
  J[1489] -= dqdT; // dwdot[C6H6]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1514] += dqdT; // dwdot[C6H5]/dT

  // reaction 180: C6H5 + H2 <=> C6H6 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[32];
  k_f = 0.05707 * exp(2.43 * tc[0] - 0.50321666580472 * (6273) * invT);
  dlnkfdT = 2.43 * invT + 0.50321666580472 * (6273) * invT2;
  // reverse
  phi_r = sc[7] * sc[9];
  Kc = exp(g_RT[3] - g_RT[7] - g_RT[9] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[32]) + (h_RT[7] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[7] += q;  // C6H6
  wdot[9] += q;  // H
  wdot[32] -= q; // C6H5
  // d()/d[H2]
  dqdci = +k_f * sc[32];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[124] += dqdci; // dwdot[C6H6]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[149] -= dqdci; // dwdot[C6H5]/d[H2]
  // d()/d[C6H6]
  dqdci = -k_r * sc[9];
  J[276] -= dqdci; // dwdot[H2]/d[C6H6]
  J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
  J[282] += dqdci; // dwdot[H]/d[C6H6]
  J[305] -= dqdci; // dwdot[C6H5]/d[C6H6]
  // d()/d[H]
  dqdci = -k_r * sc[7];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[358] += dqdci; // dwdot[C6H6]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[383] -= dqdci; // dwdot[C6H5]/d[H]
  // d()/d[C6H5]
  dqdci = +k_f * sc[3];
  J[1251] -= dqdci; // dwdot[H2]/d[C6H5]
  J[1255] += dqdci; // dwdot[C6H6]/d[C6H5]
  J[1257] += dqdci; // dwdot[H]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT

  // reaction 181: C6H5 + O2 <=> C6H4O2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[32];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (8980) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8980) * invT2;
  // reverse
  phi_r = sc[9] * sc[34];
  Kc = exp(-g_RT[9] + g_RT[15] + g_RT[32] - g_RT[34]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[32]) + (h_RT[9] + h_RT[34]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[15] -= q; // O2
  wdot[32] -= q; // C6H5
  wdot[34] += q; // C6H4O2
  // d()/d[H]
  dqdci = -k_r * sc[34];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[366] -= dqdci; // dwdot[O2]/d[H]
  J[383] -= dqdci; // dwdot[C6H5]/d[H]
  J[385] += dqdci; // dwdot[C6H4O2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[32];
  J[594] += dqdci; // dwdot[H]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[617] -= dqdci; // dwdot[C6H5]/d[O2]
  J[619] += dqdci; // dwdot[C6H4O2]/d[O2]
  // d()/d[C6H5]
  dqdci = +k_f * sc[15];
  J[1257] += dqdci; // dwdot[H]/d[C6H5]
  J[1263] -= dqdci; // dwdot[O2]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  J[1282] += dqdci; // dwdot[C6H4O2]/d[C6H5]
  // d()/d[C6H4O2]
  dqdci = -k_r * sc[9];
  J[1335] += dqdci; // dwdot[H]/d[C6H4O2]
  J[1341] -= dqdci; // dwdot[O2]/d[C6H4O2]
  J[1358] -= dqdci; // dwdot[C6H5]/d[C6H4O2]
  J[1360] += dqdci; // dwdot[C6H4O2]/d[C6H4O2]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT
  J[1516] += dqdT; // dwdot[C6H4O2]/dT

  // reaction 182: C6H5 + HO2 <=> C6H6 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[32];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[7] * sc[15];
  Kc = exp(-g_RT[7] + g_RT[12] - g_RT[15] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[32]) + (h_RT[7] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[7] += q;  // C6H6
  wdot[12] -= q; // HO2
  wdot[15] += q; // O2
  wdot[32] -= q; // C6H5
  // d()/d[C6H6]
  dqdci = -k_r * sc[15];
  J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
  J[285] -= dqdci; // dwdot[HO2]/d[C6H6]
  J[288] += dqdci; // dwdot[O2]/d[C6H6]
  J[305] -= dqdci; // dwdot[C6H5]/d[C6H6]
  // d()/d[HO2]
  dqdci = +k_f * sc[32];
  J[475] += dqdci; // dwdot[C6H6]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  J[500] -= dqdci; // dwdot[C6H5]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[592] += dqdci; // dwdot[C6H6]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  J[617] -= dqdci; // dwdot[C6H5]/d[O2]
  // d()/d[C6H5]
  dqdci = +k_f * sc[12];
  J[1255] += dqdci; // dwdot[C6H6]/d[C6H5]
  J[1260] -= dqdci; // dwdot[HO2]/d[C6H5]
  J[1263] += dqdci; // dwdot[O2]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  // d()/dT
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1497] += dqdT; // dwdot[O2]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT

  // reaction 183: C6H5 + CH4 <=> C6H6 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[32];
  k_f = 3.89e-09 * exp(4.57 * tc[0] - 0.50321666580472 * (5256) * invT);
  dlnkfdT = 4.57 * invT + 0.50321666580472 * (5256) * invT2;
  // reverse
  phi_r = sc[7] * sc[18];
  Kc = exp(g_RT[2] - g_RT[7] - g_RT[18] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[32]) + (h_RT[7] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // CH4
  wdot[7] += q;  // C6H6
  wdot[18] += q; // CH3
  wdot[32] -= q; // C6H5
  // d()/d[CH4]
  dqdci = +k_f * sc[32];
  J[80] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[85] += dqdci;  // dwdot[C6H6]/d[CH4]
  J[96] += dqdci;  // dwdot[CH3]/d[CH4]
  J[110] -= dqdci; // dwdot[C6H5]/d[CH4]
  // d()/d[C6H6]
  dqdci = -k_r * sc[18];
  J[275] -= dqdci; // dwdot[CH4]/d[C6H6]
  J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
  J[291] += dqdci; // dwdot[CH3]/d[C6H6]
  J[305] -= dqdci; // dwdot[C6H5]/d[C6H6]
  // d()/d[CH3]
  dqdci = -k_r * sc[7];
  J[704] -= dqdci; // dwdot[CH4]/d[CH3]
  J[709] += dqdci; // dwdot[C6H6]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[734] -= dqdci; // dwdot[C6H5]/d[CH3]
  // d()/d[C6H5]
  dqdci = +k_f * sc[2];
  J[1250] -= dqdci; // dwdot[CH4]/d[C6H5]
  J[1255] += dqdci; // dwdot[C6H6]/d[C6H5]
  J[1266] += dqdci; // dwdot[CH3]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  // d()/dT
  J[1484] -= dqdT; // dwdot[CH4]/dT
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT

  // reaction 184: C6H4O2 + O <=> C2H2 + CH2CO + 2 CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[34];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (5000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (5000) * invT2;
  // reverse
  phi_r = (sc[22] * sc[22]) * sc[24] * sc[29];
  Kc = (refC * refC) *
       exp(g_RT[10] - 2.000000 * g_RT[22] - g_RT[24] - g_RT[29] + g_RT[34]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[34]) +
                    (2.000000 * h_RT[22] + h_RT[24] + h_RT[29]) - 2.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q;     // O
  wdot[22] += 2 * q; // CO
  wdot[24] += q;     // C2H2
  wdot[29] += q;     // CH2CO
  wdot[34] -= q;     // C6H4O2
  // d()/d[O]
  dqdci = +k_f * sc[34];
  J[400] -= dqdci;     // dwdot[O]/d[O]
  J[412] += 2 * dqdci; // dwdot[CO]/d[O]
  J[414] += dqdci;     // dwdot[C2H2]/d[O]
  J[419] += dqdci;     // dwdot[CH2CO]/d[O]
  J[424] -= dqdci;     // dwdot[C6H4O2]/d[O]
  // d()/d[CO]
  dqdci = -k_r * 2.000000 * sc[22] * sc[24] * sc[29];
  J[868] -= dqdci;     // dwdot[O]/d[CO]
  J[880] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[882] += dqdci;     // dwdot[C2H2]/d[CO]
  J[887] += dqdci;     // dwdot[CH2CO]/d[CO]
  J[892] -= dqdci;     // dwdot[C6H4O2]/d[CO]
  // d()/d[C2H2]
  dqdci = -k_r * pow(sc[22], 2.000000) * sc[29];
  J[946] -= dqdci;     // dwdot[O]/d[C2H2]
  J[958] += 2 * dqdci; // dwdot[CO]/d[C2H2]
  J[960] += dqdci;     // dwdot[C2H2]/d[C2H2]
  J[965] += dqdci;     // dwdot[CH2CO]/d[C2H2]
  J[970] -= dqdci;     // dwdot[C6H4O2]/d[C2H2]
  // d()/d[CH2CO]
  dqdci = -k_r * pow(sc[22], 2.000000) * sc[24];
  J[1141] -= dqdci;     // dwdot[O]/d[CH2CO]
  J[1153] += 2 * dqdci; // dwdot[CO]/d[CH2CO]
  J[1155] += dqdci;     // dwdot[C2H2]/d[CH2CO]
  J[1160] += dqdci;     // dwdot[CH2CO]/d[CH2CO]
  J[1165] -= dqdci;     // dwdot[C6H4O2]/d[CH2CO]
  // d()/d[C6H4O2]
  dqdci = +k_f * sc[10];
  J[1336] -= dqdci;     // dwdot[O]/d[C6H4O2]
  J[1348] += 2 * dqdci; // dwdot[CO]/d[C6H4O2]
  J[1350] += dqdci;     // dwdot[C2H2]/d[C6H4O2]
  J[1355] += dqdci;     // dwdot[CH2CO]/d[C6H4O2]
  J[1360] -= dqdci;     // dwdot[C6H4O2]/d[C6H4O2]
  // d()/dT
  J[1492] -= dqdT;     // dwdot[O]/dT
  J[1504] += 2 * dqdT; // dwdot[CO]/dT
  J[1506] += dqdT;     // dwdot[C2H2]/dT
  J[1511] += dqdT;     // dwdot[CH2CO]/dT
  J[1516] -= dqdT;     // dwdot[C6H4O2]/dT

  amrex::Real c_R[38], dcRdT[38], e_RT[38];
  amrex::Real* eh_RT;
  if (HP) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 38; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[1482 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 38; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 38; ++m) {
      dehmixdc += eh_RT[m] * J[k * 39 + m];
    }
    J[k * 39 + 38] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[1520] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT_SIMPLIFIED(
  amrex::Real* J, amrex::Real* sc, amrex::Real* Tp, const int* HP)
{
  amrex::Real c[38];

  for (int k = 0; k < 38; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian_precond(J, c, *Tp, *HP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 38; k++) {
    J[1482 + k] *= 1.e-6;
    J[k * 39 + 38] *= 1.e6;
  }

  return;
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
aJacobian(amrex::Real* J, amrex::Real* sc, amrex::Real T, const int consP)
{

  for (int i = 0; i < 1521; i++) {
    J[i] = 0.0;
  }

  amrex::Real wdot[38];
  for (int k = 0; k < 38; k++) {
    wdot[k] = 0.0;
  }

  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  amrex::Real invT2 = invT * invT;

  // reference concentration: P_atm / (RT) in inverse mol/m^3
  amrex::Real refC = 101325 / 8.31446 / T;
  amrex::Real refCinv = 1.0 / refC;

  // compute the mixture concentration
  amrex::Real mixture = 0.0;
  for (int k = 0; k < 38; ++k) {
    mixture += sc[k];
  }

  // compute the Gibbs free energy
  amrex::Real g_RT[38];
  gibbs(g_RT, tc);

  // compute the species enthalpy
  amrex::Real h_RT[38];
  speciesEnthalpy(h_RT, tc);

  amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
  amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
  amrex::Real dqdci, dcdc_fac, dqdc[38];
  amrex::Real Pr, fPr, F, k_0, logPr;
  amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
  amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
  amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
  amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
  const amrex::Real ln10 = log(10.0);
  const amrex::Real log10e = 1.0 / log(10.0);
  // reaction 15: H + O2 (+M) <=> HO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (11.89 - 1) * sc[13] + (0.85 - 1) * sc[15] +
          (1.09 - 1) * sc[22] + (2.18 - 1) * sc[23];
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 5116000 * exp(0.44 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0.44 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 6.328e+19 * exp(-1.4 * tc[0] - 0.50321666580472 * (0) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -1.4 * invT + 0.50321666580472 * (0) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5) * exp(-T / 1e-30);
  Fcent2 = 0.5 * exp(-T / 1e+30);
  Fcent3 = 0.;
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent * (-Fcent1 / 1e-30 - Fcent2 / 1e+30);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[12];
  Kc = refCinv * exp(g_RT[9] - g_RT[12] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[12]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H]
    dqdci = +k_f * sc[15];
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[363] += dqdci; // dwdot[HO2]/d[H]
    J[366] -= dqdci; // dwdot[O2]/d[H]
    // d()/d[HO2]
    dqdci = -k_r;
    J[477] -= dqdci; // dwdot[H]/d[HO2]
    J[480] += dqdci; // dwdot[HO2]/d[HO2]
    J[483] -= dqdci; // dwdot[O2]/d[HO2]
    // d()/d[H2O]
    dqdci = (11.89 - 1) * dcdc_fac;
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[519] += dqdci; // dwdot[HO2]/d[H2O]
    J[522] -= dqdci; // dwdot[O2]/d[H2O]
    // d()/d[O2]
    dqdci = (0.85 - 1) * dcdc_fac + k_f * sc[9];
    J[594] -= dqdci; // dwdot[H]/d[O2]
    J[597] += dqdci; // dwdot[HO2]/d[O2]
    J[600] -= dqdci; // dwdot[O2]/d[O2]
    // d()/d[CO]
    dqdci = (1.09 - 1) * dcdc_fac;
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[870] += dqdci; // dwdot[HO2]/d[CO]
    J[873] -= dqdci; // dwdot[O2]/d[CO]
    // d()/d[CO2]
    dqdci = (2.18 - 1) * dcdc_fac;
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[909] += dqdci; // dwdot[HO2]/d[CO2]
    J[912] -= dqdci; // dwdot[O2]/d[CO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[15];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac - k_r;
    dqdc[13] = 11.89 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = 0.85 * dcdc_fac + k_f * sc[9];
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.09 * dcdc_fac;
    dqdc[23] = 2.18 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 12] += dqdc[k];
      J[39 * k + 15] -= dqdc[k];
    }
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT

  // reaction 17: 2 OH (+M) <=> H2O2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[3] + (6 - 1) * sc[13] + (1.75 - 1) * sc[22] +
          (3.6 - 1) * sc[23];
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 111000000 * exp(-0.37 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.37 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 2.01e+17 * exp(-0.584 * tc[0] - 0.50321666580472 * (-2293) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -0.584 * invT + 0.50321666580472 * (-2293) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7346) * exp(-T / 94);
  Fcent2 = 0.7346 * exp(-T / 1756);
  Fcent3 = exp(-5182 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1756 + Fcent3 * 5182 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[14];
  Kc = refCinv * exp(2.000000 * g_RT[11] - g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[14]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[11] -= 2 * q; // OH
  wdot[14] += q;     // H2O2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[128] += -2 * dqdci; // dwdot[OH]/d[H2]
    J[131] += dqdci;      // dwdot[H2O2]/d[H2]
    // d()/d[OH]
    dqdci = +k_f * 2.000000 * sc[11];
    J[440] += -2 * dqdci; // dwdot[OH]/d[OH]
    J[443] += dqdci;      // dwdot[H2O2]/d[OH]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[518] += -2 * dqdci; // dwdot[OH]/d[H2O]
    J[521] += dqdci;      // dwdot[H2O2]/d[H2O]
    // d()/d[H2O2]
    dqdci = -k_r;
    J[557] += -2 * dqdci; // dwdot[OH]/d[H2O2]
    J[560] += dqdci;      // dwdot[H2O2]/d[H2O2]
    // d()/d[CO]
    dqdci = (1.75 - 1) * dcdc_fac;
    J[869] += -2 * dqdci; // dwdot[OH]/d[CO]
    J[872] += dqdci;      // dwdot[H2O2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * dcdc_fac;
    J[908] += -2 * dqdci; // dwdot[OH]/d[CO2]
    J[911] += dqdci;      // dwdot[H2O2]/d[CO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac + k_f * 2.000000 * sc[11];
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac - k_r;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.75 * dcdc_fac;
    dqdc[23] = 3.6 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 11] += -2 * dqdc[k];
      J[39 * k + 14] += dqdc[k];
    }
  }
  J[1493] += -2 * dqdT; // dwdot[OH]/dT
  J[1496] += dqdT;      // dwdot[H2O2]/dT

  // reaction 40: CO + H2 (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[3] * sc[22];
  k_f = 43 * exp(1.5 * tc[0] - 0.50321666580472 * (79600) * invT);
  dlnkfdT = 1.5 * invT + 0.50321666580472 * (79600) * invT2;
  // pressure-fall-off
  k_0 = 5.07e+27 * exp(-3.42 * tc[0] - 0.50321666580472 * (84350) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.42 * invT + 0.50321666580472 * (84350) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.932) * exp(-T / 197);
  Fcent2 = 0.932 * exp(-T / 1540);
  Fcent3 = exp(-10300 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 197 - Fcent2 / 1540 + Fcent3 * 10300 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[3] - g_RT[20] + g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[22]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[3] -= q;  // H2
  wdot[20] += q; // CH2O
  wdot[22] -= q; // CO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[81] -= dqdci;  // dwdot[H2]/d[CH4]
    J[98] += dqdci;  // dwdot[CH2O]/d[CH4]
    J[100] -= dqdci; // dwdot[CO]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac + k_f * sc[22];
    J[120] -= dqdci; // dwdot[H2]/d[H2]
    J[137] += dqdci; // dwdot[CH2O]/d[H2]
    J[139] -= dqdci; // dwdot[CO]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[510] -= dqdci; // dwdot[H2]/d[H2O]
    J[527] += dqdci; // dwdot[CH2O]/d[H2O]
    J[529] -= dqdci; // dwdot[CO]/d[H2O]
    // d()/d[CH2O]
    dqdci = -k_r;
    J[783] -= dqdci; // dwdot[H2]/d[CH2O]
    J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
    J[802] -= dqdci; // dwdot[CO]/d[CH2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac + k_f * sc[3];
    J[861] -= dqdci; // dwdot[H2]/d[CO]
    J[878] += dqdci; // dwdot[CH2O]/d[CO]
    J[880] -= dqdci; // dwdot[CO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[900] -= dqdci; // dwdot[H2]/d[CO2]
    J[917] += dqdci; // dwdot[CH2O]/d[CO2]
    J[919] -= dqdci; // dwdot[CO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1056] -= dqdci; // dwdot[H2]/d[C2H6]
    J[1073] += dqdci; // dwdot[CH2O]/d[C2H6]
    J[1075] -= dqdci; // dwdot[CO]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac + k_f * sc[22];
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac + k_f * sc[3];
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 3] -= dqdc[k];
      J[39 * k + 20] += dqdc[k];
      J[39 * k + 22] -= dqdc[k];
    }
  }
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT

  // reaction 41: H + HCO (+M) <=> CH2O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 1090000 * exp(0.48 * tc[0] - 0.50321666580472 * (-260) * invT);
  dlnkfdT = 0.48 * invT + 0.50321666580472 * (-260) * invT2;
  // pressure-fall-off
  k_0 = 1.35e+24 * exp(-2.57 * tc[0] - 0.50321666580472 * (1425) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.57 * invT + 0.50321666580472 * (1425) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.7824) * exp(-T / 271);
  Fcent2 = 0.7824 * exp(-T / 2755);
  Fcent3 = exp(-6570 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 271 - Fcent2 / 2755 + Fcent3 * 6570 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[20];
  Kc = refCinv * exp(g_RT[9] + g_RT[19] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[19]) + (h_RT[20]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[19] -= q; // HCO
  wdot[20] += q; // CH2O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[87] -= dqdci; // dwdot[H]/d[CH4]
    J[97] -= dqdci; // dwdot[HCO]/d[CH4]
    J[98] += dqdci; // dwdot[CH2O]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[136] -= dqdci; // dwdot[HCO]/d[H2]
    J[137] += dqdci; // dwdot[CH2O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[19];
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[370] -= dqdci; // dwdot[HCO]/d[H]
    J[371] += dqdci; // dwdot[CH2O]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[526] -= dqdci; // dwdot[HCO]/d[H2O]
    J[527] += dqdci; // dwdot[CH2O]/d[H2O]
    // d()/d[HCO]
    dqdci = +k_f * sc[9];
    J[750] -= dqdci; // dwdot[H]/d[HCO]
    J[760] -= dqdci; // dwdot[HCO]/d[HCO]
    J[761] += dqdci; // dwdot[CH2O]/d[HCO]
    // d()/d[CH2O]
    dqdci = -k_r;
    J[789] -= dqdci; // dwdot[H]/d[CH2O]
    J[799] -= dqdci; // dwdot[HCO]/d[CH2O]
    J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[877] -= dqdci; // dwdot[HCO]/d[CO]
    J[878] += dqdci; // dwdot[CH2O]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[916] -= dqdci; // dwdot[HCO]/d[CO2]
    J[917] += dqdci; // dwdot[CH2O]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1062] -= dqdci; // dwdot[H]/d[C2H6]
    J[1072] -= dqdci; // dwdot[HCO]/d[C2H6]
    J[1073] += dqdci; // dwdot[CH2O]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[19];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac + k_f * sc[9];
    dqdc[20] = dcdc_fac - k_r;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 19] -= dqdc[k];
      J[39 * k + 20] += dqdc[k];
    }
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 42: CH2 + H (+M) <=> CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[16];
  k_f = 25000000000 * exp(-0.8 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -0.8 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 3.2e+27 * exp(-3.14 * tc[0] - 0.50321666580472 * (1230) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.14 * invT + 0.50321666580472 * (1230) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.68) * exp(-T / 78);
  Fcent2 = 0.68 * exp(-T / 1995);
  Fcent3 = exp(-5590 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 78 - Fcent2 / 1995 + Fcent3 * 5590 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[18];
  Kc = refCinv * exp(g_RT[9] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[16]) + (h_RT[18]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[16] -= q; // CH2
  wdot[18] += q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[87] -= dqdci; // dwdot[H]/d[CH4]
    J[94] -= dqdci; // dwdot[CH2]/d[CH4]
    J[96] += dqdci; // dwdot[CH3]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[133] -= dqdci; // dwdot[CH2]/d[H2]
    J[135] += dqdci; // dwdot[CH3]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[16];
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[367] -= dqdci; // dwdot[CH2]/d[H]
    J[369] += dqdci; // dwdot[CH3]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[523] -= dqdci; // dwdot[CH2]/d[H2O]
    J[525] += dqdci; // dwdot[CH3]/d[H2O]
    // d()/d[CH2]
    dqdci = +k_f * sc[9];
    J[633] -= dqdci; // dwdot[H]/d[CH2]
    J[640] -= dqdci; // dwdot[CH2]/d[CH2]
    J[642] += dqdci; // dwdot[CH3]/d[CH2]
    // d()/d[CH3]
    dqdci = -k_r;
    J[711] -= dqdci; // dwdot[H]/d[CH3]
    J[718] -= dqdci; // dwdot[CH2]/d[CH3]
    J[720] += dqdci; // dwdot[CH3]/d[CH3]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[874] -= dqdci; // dwdot[CH2]/d[CO]
    J[876] += dqdci; // dwdot[CH3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[913] -= dqdci; // dwdot[CH2]/d[CO2]
    J[915] += dqdci; // dwdot[CH3]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1062] -= dqdci; // dwdot[H]/d[C2H6]
    J[1069] -= dqdci; // dwdot[CH2]/d[C2H6]
    J[1071] += dqdci; // dwdot[CH3]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[16];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac + k_f * sc[9];
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac - k_r;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 16] -= dqdc[k];
      J[39 * k + 18] += dqdc[k];
    }
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 48: CH2 + CO (+M) <=> CH2CO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[16] * sc[22];
  k_f = 810000 * exp(0.5 * tc[0] - 0.50321666580472 * (4510) * invT);
  dlnkfdT = 0.5 * invT + 0.50321666580472 * (4510) * invT2;
  // pressure-fall-off
  k_0 = 2.69e+33 * exp(-5.11 * tc[0] - 0.50321666580472 * (7095) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -5.11 * invT + 0.50321666580472 * (7095) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5907) * exp(-T / 275);
  Fcent2 = 0.5907 * exp(-T / 1226);
  Fcent3 = exp(-5185 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 275 - Fcent2 / 1226 + Fcent3 * 5185 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[29];
  Kc = refCinv * exp(g_RT[16] + g_RT[22] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[22]) + (h_RT[29]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[16] -= q; // CH2
  wdot[22] -= q; // CO
  wdot[29] += q; // CH2CO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[94] -= dqdci;  // dwdot[CH2]/d[CH4]
    J[100] -= dqdci; // dwdot[CO]/d[CH4]
    J[107] += dqdci; // dwdot[CH2CO]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[133] -= dqdci; // dwdot[CH2]/d[H2]
    J[139] -= dqdci; // dwdot[CO]/d[H2]
    J[146] += dqdci; // dwdot[CH2CO]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[523] -= dqdci; // dwdot[CH2]/d[H2O]
    J[529] -= dqdci; // dwdot[CO]/d[H2O]
    J[536] += dqdci; // dwdot[CH2CO]/d[H2O]
    // d()/d[CH2]
    dqdci = +k_f * sc[22];
    J[640] -= dqdci; // dwdot[CH2]/d[CH2]
    J[646] -= dqdci; // dwdot[CO]/d[CH2]
    J[653] += dqdci; // dwdot[CH2CO]/d[CH2]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac + k_f * sc[16];
    J[874] -= dqdci; // dwdot[CH2]/d[CO]
    J[880] -= dqdci; // dwdot[CO]/d[CO]
    J[887] += dqdci; // dwdot[CH2CO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[913] -= dqdci; // dwdot[CH2]/d[CO2]
    J[919] -= dqdci; // dwdot[CO]/d[CO2]
    J[926] += dqdci; // dwdot[CH2CO]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1069] -= dqdci; // dwdot[CH2]/d[C2H6]
    J[1075] -= dqdci; // dwdot[CO]/d[C2H6]
    J[1082] += dqdci; // dwdot[CH2CO]/d[C2H6]
    // d()/d[CH2CO]
    dqdci = -k_r;
    J[1147] -= dqdci; // dwdot[CH2]/d[CH2CO]
    J[1153] -= dqdci; // dwdot[CO]/d[CH2CO]
    J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac + k_f * sc[22];
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac + k_f * sc[16];
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac - k_r;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 16] -= dqdc[k];
      J[39 * k + 22] -= dqdc[k];
      J[39 * k + 29] += dqdc[k];
    }
  }
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT

  // reaction 59: CH2O + H (+M) <=> CH3O (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 540000 * exp(0.454 * tc[0] - 0.50321666580472 * (2600) * invT);
  dlnkfdT = 0.454 * invT + 0.50321666580472 * (2600) * invT2;
  // pressure-fall-off
  k_0 = 2.2e+30 * exp(-4.8 * tc[0] - 0.50321666580472 * (5560) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.8 * invT + 0.50321666580472 * (5560) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.758) * exp(-T / 94);
  Fcent2 = 0.758 * exp(-T / 1555);
  Fcent3 = exp(-4200 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 94 - Fcent2 / 1555 + Fcent3 * 4200 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[21];
  Kc = refCinv * exp(g_RT[9] + g_RT[20] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[21]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[20] -= q; // CH2O
  wdot[21] += q; // CH3O
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[87] -= dqdci; // dwdot[H]/d[CH4]
    J[98] -= dqdci; // dwdot[CH2O]/d[CH4]
    J[99] += dqdci; // dwdot[CH3O]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[137] -= dqdci; // dwdot[CH2O]/d[H2]
    J[138] += dqdci; // dwdot[CH3O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[20];
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[371] -= dqdci; // dwdot[CH2O]/d[H]
    J[372] += dqdci; // dwdot[CH3O]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[527] -= dqdci; // dwdot[CH2O]/d[H2O]
    J[528] += dqdci; // dwdot[CH3O]/d[H2O]
    // d()/d[CH2O]
    dqdci = +k_f * sc[9];
    J[789] -= dqdci; // dwdot[H]/d[CH2O]
    J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
    J[801] += dqdci; // dwdot[CH3O]/d[CH2O]
    // d()/d[CH3O]
    dqdci = -k_r;
    J[828] -= dqdci; // dwdot[H]/d[CH3O]
    J[839] -= dqdci; // dwdot[CH2O]/d[CH3O]
    J[840] += dqdci; // dwdot[CH3O]/d[CH3O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[878] -= dqdci; // dwdot[CH2O]/d[CO]
    J[879] += dqdci; // dwdot[CH3O]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[917] -= dqdci; // dwdot[CH2O]/d[CO2]
    J[918] += dqdci; // dwdot[CH3O]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1062] -= dqdci; // dwdot[H]/d[C2H6]
    J[1073] -= dqdci; // dwdot[CH2O]/d[C2H6]
    J[1074] += dqdci; // dwdot[CH3O]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[20];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac + k_f * sc[9];
    dqdc[21] = dcdc_fac - k_r;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 20] -= dqdc[k];
      J[39 * k + 21] += dqdc[k];
    }
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT
  J[1503] += dqdT; // dwdot[CH3O]/dT

  // reaction 65: CH3 + H (+M) <=> CH4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[18];
  k_f = 12700000000 * exp(-0.63 * tc[0] - 0.50321666580472 * (383) * invT);
  dlnkfdT = -0.63 * invT + 0.50321666580472 * (383) * invT2;
  // pressure-fall-off
  k_0 = 2.477e+33 * exp(-4.76 * tc[0] - 0.50321666580472 * (2440) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -4.76 * invT + 0.50321666580472 * (2440) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.783) * exp(-T / 74);
  Fcent2 = 0.783 * exp(-T / 2941);
  Fcent3 = exp(-6964 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 74 - Fcent2 / 2941 + Fcent3 * 6964 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[2];
  Kc = refCinv * exp(-g_RT[2] + g_RT[9] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[18]) + (h_RT[2]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[2] += q;  // CH4
  wdot[9] -= q;  // H
  wdot[18] -= q; // CH3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac - k_r;
    J[80] += dqdci; // dwdot[CH4]/d[CH4]
    J[87] -= dqdci; // dwdot[H]/d[CH4]
    J[96] -= dqdci; // dwdot[CH3]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[119] += dqdci; // dwdot[CH4]/d[H2]
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[135] -= dqdci; // dwdot[CH3]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[18];
    J[353] += dqdci; // dwdot[CH4]/d[H]
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[369] -= dqdci; // dwdot[CH3]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[509] += dqdci; // dwdot[CH4]/d[H2O]
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[525] -= dqdci; // dwdot[CH3]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[9];
    J[704] += dqdci; // dwdot[CH4]/d[CH3]
    J[711] -= dqdci; // dwdot[H]/d[CH3]
    J[720] -= dqdci; // dwdot[CH3]/d[CH3]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[860] += dqdci; // dwdot[CH4]/d[CO]
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[876] -= dqdci; // dwdot[CH3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[899] += dqdci; // dwdot[CH4]/d[CO2]
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[915] -= dqdci; // dwdot[CH3]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1055] += dqdci; // dwdot[CH4]/d[C2H6]
    J[1062] -= dqdci; // dwdot[H]/d[C2H6]
    J[1071] -= dqdci; // dwdot[CH3]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac - k_r;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[18];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f * sc[9];
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 2] += dqdc[k];
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 18] -= dqdc[k];
    }
  }
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 77: 2 CH3 (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = (sc[18] * sc[18]);
  k_f = 21200000000 * exp(-0.97 * tc[0] - 0.50321666580472 * (620) * invT);
  dlnkfdT = -0.97 * invT + 0.50321666580472 * (620) * invT2;
  // pressure-fall-off
  k_0 = 1.77e+50 * exp(-9.67 * tc[0] - 0.50321666580472 * (6220) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -9.67 * invT + 0.50321666580472 * (6220) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.5325) * exp(-T / 151);
  Fcent2 = 0.5325 * exp(-T / 1038);
  Fcent3 = exp(-4970 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 151 - Fcent2 / 1038 + Fcent3 * 4970 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(2.000000 * g_RT[18] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[18]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[18] -= 2 * q; // CH3
  wdot[27] += q;     // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[96] += -2 * dqdci; // dwdot[CH3]/d[CH4]
    J[105] += dqdci;     // dwdot[C2H6]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[135] += -2 * dqdci; // dwdot[CH3]/d[H2]
    J[144] += dqdci;      // dwdot[C2H6]/d[H2]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[525] += -2 * dqdci; // dwdot[CH3]/d[H2O]
    J[534] += dqdci;      // dwdot[C2H6]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * 2.000000 * sc[18];
    J[720] += -2 * dqdci; // dwdot[CH3]/d[CH3]
    J[729] += dqdci;      // dwdot[C2H6]/d[CH3]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[876] += -2 * dqdci; // dwdot[CH3]/d[CO]
    J[885] += dqdci;      // dwdot[C2H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[915] += -2 * dqdci; // dwdot[CH3]/d[CO2]
    J[924] += dqdci;      // dwdot[C2H6]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[1071] += -2 * dqdci; // dwdot[CH3]/d[C2H6]
    J[1080] += dqdci;      // dwdot[C2H6]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f * 2.000000 * sc[18];
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac - k_r;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 18] += -2 * dqdc[k];
      J[39 * k + 27] += dqdc[k];
    }
  }
  J[1500] += -2 * dqdT; // dwdot[CH3]/dT
  J[1509] += dqdT;      // dwdot[C2H6]/dT

  // reaction 93: C2H3 (+M) <=> C2H2 + H (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (3 - 1) * sc[1] + sc[2] + sc[3] + (6 - 1) * sc[13] +
          (1.5 - 1) * sc[22] + sc[23] + (3 - 1) * sc[24] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[25];
  k_f = 386000000 * exp(1.62 * tc[0] - 0.50321666580472 * (37048.2) * invT);
  dlnkfdT = 1.62 * invT + 0.50321666580472 * (37048.2) * invT2;
  // pressure-fall-off
  k_0 = 2.565e+27 * exp(-3.4 * tc[0] - 0.50321666580472 * (35798.72) * invT);
  Pr = 1e-6 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.4 * invT + 0.50321666580472 * (35798.72) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1.9816) * exp(-T / 5383.7);
  Fcent2 = 1.9816 * exp(-T / 4.2932);
  Fcent3 = exp(0.0795 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 5383.7 - Fcent2 / 4.2932 + Fcent3 * -0.0795 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[9] * sc[24];
  Kc = refC * exp(-g_RT[9] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25]) + (h_RT[9] + h_RT[24]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] += q;  // H
  wdot[24] += q; // C2H2
  wdot[25] -= q; // C2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[C2H4]
    dqdci = (3 - 1) * dcdc_fac;
    J[48] += dqdci; // dwdot[H]/d[C2H4]
    J[63] += dqdci; // dwdot[C2H2]/d[C2H4]
    J[64] -= dqdci; // dwdot[C2H3]/d[C2H4]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[87] += dqdci;  // dwdot[H]/d[CH4]
    J[102] += dqdci; // dwdot[C2H2]/d[CH4]
    J[103] -= dqdci; // dwdot[C2H3]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[126] += dqdci; // dwdot[H]/d[H2]
    J[141] += dqdci; // dwdot[C2H2]/d[H2]
    J[142] -= dqdci; // dwdot[C2H3]/d[H2]
    // d()/d[H]
    dqdci = -k_r * sc[24];
    J[360] += dqdci; // dwdot[H]/d[H]
    J[375] += dqdci; // dwdot[C2H2]/d[H]
    J[376] -= dqdci; // dwdot[C2H3]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[516] += dqdci; // dwdot[H]/d[H2O]
    J[531] += dqdci; // dwdot[C2H2]/d[H2O]
    J[532] -= dqdci; // dwdot[C2H3]/d[H2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[867] += dqdci; // dwdot[H]/d[CO]
    J[882] += dqdci; // dwdot[C2H2]/d[CO]
    J[883] -= dqdci; // dwdot[C2H3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[906] += dqdci; // dwdot[H]/d[CO2]
    J[921] += dqdci; // dwdot[C2H2]/d[CO2]
    J[922] -= dqdci; // dwdot[C2H3]/d[CO2]
    // d()/d[C2H2]
    dqdci = (3 - 1) * dcdc_fac - k_r * sc[9];
    J[945] += dqdci; // dwdot[H]/d[C2H2]
    J[960] += dqdci; // dwdot[C2H2]/d[C2H2]
    J[961] -= dqdci; // dwdot[C2H3]/d[C2H2]
    // d()/d[C2H3]
    dqdci = +k_f;
    J[984] += dqdci;  // dwdot[H]/d[C2H3]
    J[999] += dqdci;  // dwdot[C2H2]/d[C2H3]
    J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1062] += dqdci; // dwdot[H]/d[C2H6]
    J[1077] += dqdci; // dwdot[C2H2]/d[C2H6]
    J[1078] -= dqdci; // dwdot[C2H3]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = 3 * dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac - k_r * sc[24];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = 3 * dcdc_fac - k_r * sc[9];
    dqdc[25] = dcdc_fac + k_f;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 9] += dqdc[k];
      J[39 * k + 24] += dqdc[k];
      J[39 * k + 25] -= dqdc[k];
    }
  }
  J[1491] += dqdT; // dwdot[H]/dT
  J[1506] += dqdT; // dwdot[C2H2]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 99: CH2CO + H (+M) <=> CH2CHO (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (3 - 1) * sc[1] + sc[2] + sc[3] + (6 - 1) * sc[13] +
          (1.5 - 1) * sc[22] + sc[23] + (3 - 1) * sc[24] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[29];
  k_f = 330000000 * exp(-0.06 * tc[0] - 0.50321666580472 * (8500) * invT);
  dlnkfdT = -0.06 * invT + 0.50321666580472 * (8500) * invT2;
  // pressure-fall-off
  k_0 = 3.8e+41 * exp(-7.64 * tc[0] - 0.50321666580472 * (11900) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.64 * invT + 0.50321666580472 * (11900) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.337) * exp(-T / 1707);
  Fcent2 = 0.337 * exp(-T / 3200);
  Fcent3 = exp(-4131 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 1707 - Fcent2 / 3200 + Fcent3 * 4131 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[30];
  Kc = refCinv * exp(g_RT[9] + g_RT[29] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[29]) + (h_RT[30]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[29] -= q; // CH2CO
  wdot[30] += q; // CH2CHO
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[C2H4]
    dqdci = (3 - 1) * dcdc_fac;
    J[48] -= dqdci; // dwdot[H]/d[C2H4]
    J[68] -= dqdci; // dwdot[CH2CO]/d[C2H4]
    J[69] += dqdci; // dwdot[CH2CHO]/d[C2H4]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[87] -= dqdci;  // dwdot[H]/d[CH4]
    J[107] -= dqdci; // dwdot[CH2CO]/d[CH4]
    J[108] += dqdci; // dwdot[CH2CHO]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[146] -= dqdci; // dwdot[CH2CO]/d[H2]
    J[147] += dqdci; // dwdot[CH2CHO]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[29];
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[380] -= dqdci; // dwdot[CH2CO]/d[H]
    J[381] += dqdci; // dwdot[CH2CHO]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[536] -= dqdci; // dwdot[CH2CO]/d[H2O]
    J[537] += dqdci; // dwdot[CH2CHO]/d[H2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[887] -= dqdci; // dwdot[CH2CO]/d[CO]
    J[888] += dqdci; // dwdot[CH2CHO]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[926] -= dqdci; // dwdot[CH2CO]/d[CO2]
    J[927] += dqdci; // dwdot[CH2CHO]/d[CO2]
    // d()/d[C2H2]
    dqdci = (3 - 1) * dcdc_fac;
    J[945] -= dqdci; // dwdot[H]/d[C2H2]
    J[965] -= dqdci; // dwdot[CH2CO]/d[C2H2]
    J[966] += dqdci; // dwdot[CH2CHO]/d[C2H2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1062] -= dqdci; // dwdot[H]/d[C2H6]
    J[1082] -= dqdci; // dwdot[CH2CO]/d[C2H6]
    J[1083] += dqdci; // dwdot[CH2CHO]/d[C2H6]
    // d()/d[CH2CO]
    dqdci = +k_f * sc[9];
    J[1140] -= dqdci; // dwdot[H]/d[CH2CO]
    J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
    J[1161] += dqdci; // dwdot[CH2CHO]/d[CH2CO]
    // d()/d[CH2CHO]
    dqdci = -k_r;
    J[1179] -= dqdci; // dwdot[H]/d[CH2CHO]
    J[1199] -= dqdci; // dwdot[CH2CO]/d[CH2CHO]
    J[1200] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = 3 * dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[29];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = 3 * dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac + k_f * sc[9];
    dqdc[30] = dcdc_fac - k_r;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 29] -= dqdc[k];
      J[39 * k + 30] += dqdc[k];
    }
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT
  J[1512] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 105: C2H3 + H (+M) <=> C2H4 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (3 - 1) * sc[1] + sc[2] + sc[3] + (6 - 1) * sc[13] +
          (1.5 - 1) * sc[22] + sc[23] + (3 - 1) * sc[24] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[25];
  k_f = 6080000 * exp(0.27 * tc[0] - 0.50321666580472 * (280) * invT);
  dlnkfdT = 0.27 * invT + 0.50321666580472 * (280) * invT2;
  // pressure-fall-off
  k_0 = 1.4e+30 * exp(-3.86 * tc[0] - 0.50321666580472 * (3320) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -3.86 * invT + 0.50321666580472 * (3320) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.782) * exp(-T / 207.5);
  Fcent2 = 0.782 * exp(-T / 2663);
  Fcent3 = exp(-6095 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 207.5 - Fcent2 / 2663 + Fcent3 * 6095 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[1];
  Kc = refCinv * exp(-g_RT[1] + g_RT[9] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[25]) + (h_RT[1]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[9] -= q;  // H
  wdot[25] -= q; // C2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[C2H4]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
    J[48] -= dqdci; // dwdot[H]/d[C2H4]
    J[64] -= dqdci; // dwdot[C2H3]/d[C2H4]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[79] += dqdci;  // dwdot[C2H4]/d[CH4]
    J[87] -= dqdci;  // dwdot[H]/d[CH4]
    J[103] -= dqdci; // dwdot[C2H3]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[118] += dqdci; // dwdot[C2H4]/d[H2]
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[142] -= dqdci; // dwdot[C2H3]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[25];
    J[352] += dqdci; // dwdot[C2H4]/d[H]
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[376] -= dqdci; // dwdot[C2H3]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[508] += dqdci; // dwdot[C2H4]/d[H2O]
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[532] -= dqdci; // dwdot[C2H3]/d[H2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[859] += dqdci; // dwdot[C2H4]/d[CO]
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[883] -= dqdci; // dwdot[C2H3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[898] += dqdci; // dwdot[C2H4]/d[CO2]
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[922] -= dqdci; // dwdot[C2H3]/d[CO2]
    // d()/d[C2H2]
    dqdci = (3 - 1) * dcdc_fac;
    J[937] += dqdci; // dwdot[C2H4]/d[C2H2]
    J[945] -= dqdci; // dwdot[H]/d[C2H2]
    J[961] -= dqdci; // dwdot[C2H3]/d[C2H2]
    // d()/d[C2H3]
    dqdci = +k_f * sc[9];
    J[976] += dqdci;  // dwdot[C2H4]/d[C2H3]
    J[984] -= dqdci;  // dwdot[H]/d[C2H3]
    J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1054] += dqdci; // dwdot[C2H4]/d[C2H6]
    J[1062] -= dqdci; // dwdot[H]/d[C2H6]
    J[1078] -= dqdci; // dwdot[C2H3]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = 3 * dcdc_fac - k_r;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[25];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = 3 * dcdc_fac;
    dqdc[25] = dcdc_fac + k_f * sc[9];
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 1] += dqdc[k];
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 25] -= dqdc[k];
    }
  }
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 113: C2H3 + CH3 (+M) <=> C3H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (3 - 1) * sc[1] + sc[2] + sc[3] + (6 - 1) * sc[13] +
          (1.5 - 1) * sc[22] + sc[23] + (3 - 1) * sc[24] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[18] * sc[25];
  k_f = 25000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 4.27e+58 * exp(-11.94 * tc[0] - 0.50321666580472 * (9769.8) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -11.94 * invT + 0.50321666580472 * (9769.8) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.175) * exp(-T / 1340.6);
  Fcent2 = 0.175 * exp(-T / 60000);
  Fcent3 = exp(-10139.8 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1340.6 - Fcent2 / 60000 + Fcent3 * 10139.8 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(-g_RT[4] + g_RT[18] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[25]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[18] -= q; // CH3
  wdot[25] -= q; // C2H3
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[C2H4]
    dqdci = (3 - 1) * dcdc_fac;
    J[43] += dqdci; // dwdot[C3H6]/d[C2H4]
    J[57] -= dqdci; // dwdot[CH3]/d[C2H4]
    J[64] -= dqdci; // dwdot[C2H3]/d[C2H4]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[82] += dqdci;  // dwdot[C3H6]/d[CH4]
    J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
    J[103] -= dqdci; // dwdot[C2H3]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[121] += dqdci; // dwdot[C3H6]/d[H2]
    J[135] -= dqdci; // dwdot[CH3]/d[H2]
    J[142] -= dqdci; // dwdot[C2H3]/d[H2]
    // d()/d[C3H6]
    dqdci = -k_r;
    J[160] += dqdci; // dwdot[C3H6]/d[C3H6]
    J[174] -= dqdci; // dwdot[CH3]/d[C3H6]
    J[181] -= dqdci; // dwdot[C2H3]/d[C3H6]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[511] += dqdci; // dwdot[C3H6]/d[H2O]
    J[525] -= dqdci; // dwdot[CH3]/d[H2O]
    J[532] -= dqdci; // dwdot[C2H3]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[25];
    J[706] += dqdci; // dwdot[C3H6]/d[CH3]
    J[720] -= dqdci; // dwdot[CH3]/d[CH3]
    J[727] -= dqdci; // dwdot[C2H3]/d[CH3]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[862] += dqdci; // dwdot[C3H6]/d[CO]
    J[876] -= dqdci; // dwdot[CH3]/d[CO]
    J[883] -= dqdci; // dwdot[C2H3]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[901] += dqdci; // dwdot[C3H6]/d[CO2]
    J[915] -= dqdci; // dwdot[CH3]/d[CO2]
    J[922] -= dqdci; // dwdot[C2H3]/d[CO2]
    // d()/d[C2H2]
    dqdci = (3 - 1) * dcdc_fac;
    J[940] += dqdci; // dwdot[C3H6]/d[C2H2]
    J[954] -= dqdci; // dwdot[CH3]/d[C2H2]
    J[961] -= dqdci; // dwdot[C2H3]/d[C2H2]
    // d()/d[C2H3]
    dqdci = +k_f * sc[18];
    J[979] += dqdci;  // dwdot[C3H6]/d[C2H3]
    J[993] -= dqdci;  // dwdot[CH3]/d[C2H3]
    J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1057] += dqdci; // dwdot[C3H6]/d[C2H6]
    J[1071] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[1078] -= dqdci; // dwdot[C2H3]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = 3 * dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac - k_r;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f * sc[25];
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = 3 * dcdc_fac;
    dqdc[25] = dcdc_fac + k_f * sc[18];
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 4] += dqdc[k];
      J[39 * k + 18] -= dqdc[k];
      J[39 * k + 25] -= dqdc[k];
    }
  }
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 121: C2H4 + H (+M) <=> C2H5 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[1] * sc[9];
  k_f = 1370 * exp(1.463 * tc[0] - 0.50321666580472 * (1355) * invT);
  dlnkfdT = 1.463 * invT + 0.50321666580472 * (1355) * invT2;
  // pressure-fall-off
  k_0 = 2.9e+39 * exp(-6.642 * tc[0] - 0.50321666580472 * (5769) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -6.642 * invT + 0.50321666580472 * (5769) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1.569) * exp(-T / -9147);
  Fcent2 = 1.569 * exp(-T / 299);
  Fcent3 = exp(-152.4 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / -9147 - Fcent2 / 299 + Fcent3 * 152.4 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[26];
  Kc = refCinv * exp(g_RT[1] + g_RT[9] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[9]) + (h_RT[26]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[9] -= q;  // H
  wdot[26] += q; // C2H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[C2H4]
    dqdci = +k_f * sc[9];
    J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
    J[48] -= dqdci; // dwdot[H]/d[C2H4]
    J[65] += dqdci; // dwdot[C2H5]/d[C2H4]
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[79] -= dqdci;  // dwdot[C2H4]/d[CH4]
    J[87] -= dqdci;  // dwdot[H]/d[CH4]
    J[104] += dqdci; // dwdot[C2H5]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[118] -= dqdci; // dwdot[C2H4]/d[H2]
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[143] += dqdci; // dwdot[C2H5]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[1];
    J[352] -= dqdci; // dwdot[C2H4]/d[H]
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[377] += dqdci; // dwdot[C2H5]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[508] -= dqdci; // dwdot[C2H4]/d[H2O]
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[533] += dqdci; // dwdot[C2H5]/d[H2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[859] -= dqdci; // dwdot[C2H4]/d[CO]
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[884] += dqdci; // dwdot[C2H5]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[898] -= dqdci; // dwdot[C2H4]/d[CO2]
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[923] += dqdci; // dwdot[C2H5]/d[CO2]
    // d()/d[C2H5]
    dqdci = -k_r;
    J[1015] -= dqdci; // dwdot[C2H4]/d[C2H5]
    J[1023] -= dqdci; // dwdot[H]/d[C2H5]
    J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1054] -= dqdci; // dwdot[C2H4]/d[C2H6]
    J[1062] -= dqdci; // dwdot[H]/d[C2H6]
    J[1079] += dqdci; // dwdot[C2H5]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac + k_f * sc[9];
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[1];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac - k_r;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 1] -= dqdc[k];
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 26] += dqdc[k];
    }
  }
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT

  // reaction 132: C2H5 + H (+M) <=> C2H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[26];
  k_f = 521000000000 * exp(-0.99 * tc[0] - 0.50321666580472 * (1580) * invT);
  dlnkfdT = -0.99 * invT + 0.50321666580472 * (1580) * invT2;
  // pressure-fall-off
  k_0 = 1.99e+41 * exp(-7.08 * tc[0] - 0.50321666580472 * (6685) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -7.08 * invT + 0.50321666580472 * (6685) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.8422) * exp(-T / 125);
  Fcent2 = 0.8422 * exp(-T / 2219);
  Fcent3 = exp(-6882 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 125 - Fcent2 / 2219 + Fcent3 * 6882 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[27];
  Kc = refCinv * exp(g_RT[9] + g_RT[26] - g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[26]) + (h_RT[27]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[9] -= q;  // H
  wdot[26] -= q; // C2H5
  wdot[27] += q; // C2H6
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[87] -= dqdci;  // dwdot[H]/d[CH4]
    J[104] -= dqdci; // dwdot[C2H5]/d[CH4]
    J[105] += dqdci; // dwdot[C2H6]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[143] -= dqdci; // dwdot[C2H5]/d[H2]
    J[144] += dqdci; // dwdot[C2H6]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[26];
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[377] -= dqdci; // dwdot[C2H5]/d[H]
    J[378] += dqdci; // dwdot[C2H6]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[533] -= dqdci; // dwdot[C2H5]/d[H2O]
    J[534] += dqdci; // dwdot[C2H6]/d[H2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[884] -= dqdci; // dwdot[C2H5]/d[CO]
    J[885] += dqdci; // dwdot[C2H6]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[923] -= dqdci; // dwdot[C2H5]/d[CO2]
    J[924] += dqdci; // dwdot[C2H6]/d[CO2]
    // d()/d[C2H5]
    dqdci = +k_f * sc[9];
    J[1023] -= dqdci; // dwdot[H]/d[C2H5]
    J[1040] -= dqdci; // dwdot[C2H5]/d[C2H5]
    J[1041] += dqdci; // dwdot[C2H6]/d[C2H5]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac - k_r;
    J[1062] -= dqdci; // dwdot[H]/d[C2H6]
    J[1079] -= dqdci; // dwdot[C2H5]/d[C2H6]
    J[1080] += dqdci; // dwdot[C2H6]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[26];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac + k_f * sc[9];
    dqdc[27] = 3 * dcdc_fac - k_r;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 26] -= dqdc[k];
      J[39 * k + 27] += dqdc[k];
    }
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT
  J[1509] += dqdT; // dwdot[C2H6]/dT

  // reaction 137: C2H3 + C2H5 (+M) <=> C4H81 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[25] * sc[26];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 1.55e+56 * exp(-11.79 * tc[0] - 0.50321666580472 * (8984.5) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -11.79 * invT + 0.50321666580472 * (8984.5) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.198) * exp(-T / 2277.9);
  Fcent2 = 0.198 * exp(-T / 60000);
  Fcent3 = exp(-5723.2 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 2277.9 - Fcent2 / 60000 + Fcent3 * 5723.2 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(-g_RT[5] + g_RT[25] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[25] + h_RT[26]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] += q;  // C4H81
  wdot[25] -= q; // C2H3
  wdot[26] -= q; // C2H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[83] += dqdci;  // dwdot[C4H81]/d[CH4]
    J[103] -= dqdci; // dwdot[C2H3]/d[CH4]
    J[104] -= dqdci; // dwdot[C2H5]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[122] += dqdci; // dwdot[C4H81]/d[H2]
    J[142] -= dqdci; // dwdot[C2H3]/d[H2]
    J[143] -= dqdci; // dwdot[C2H5]/d[H2]
    // d()/d[C4H81]
    dqdci = -k_r;
    J[200] += dqdci; // dwdot[C4H81]/d[C4H81]
    J[220] -= dqdci; // dwdot[C2H3]/d[C4H81]
    J[221] -= dqdci; // dwdot[C2H5]/d[C4H81]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[512] += dqdci; // dwdot[C4H81]/d[H2O]
    J[532] -= dqdci; // dwdot[C2H3]/d[H2O]
    J[533] -= dqdci; // dwdot[C2H5]/d[H2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[863] += dqdci; // dwdot[C4H81]/d[CO]
    J[883] -= dqdci; // dwdot[C2H3]/d[CO]
    J[884] -= dqdci; // dwdot[C2H5]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[902] += dqdci; // dwdot[C4H81]/d[CO2]
    J[922] -= dqdci; // dwdot[C2H3]/d[CO2]
    J[923] -= dqdci; // dwdot[C2H5]/d[CO2]
    // d()/d[C2H3]
    dqdci = +k_f * sc[26];
    J[980] += dqdci;  // dwdot[C4H81]/d[C2H3]
    J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
    J[1001] -= dqdci; // dwdot[C2H5]/d[C2H3]
    // d()/d[C2H5]
    dqdci = +k_f * sc[25];
    J[1019] += dqdci; // dwdot[C4H81]/d[C2H5]
    J[1039] -= dqdci; // dwdot[C2H3]/d[C2H5]
    J[1040] -= dqdci; // dwdot[C2H5]/d[C2H5]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1058] += dqdci; // dwdot[C4H81]/d[C2H6]
    J[1078] -= dqdci; // dwdot[C2H3]/d[C2H6]
    J[1079] -= dqdci; // dwdot[C2H5]/d[C2H6]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac - k_r;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac + k_f * sc[26];
    dqdc[26] = dcdc_fac + k_f * sc[25];
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 5] += dqdc[k];
      J[39 * k + 25] -= dqdc[k];
      J[39 * k + 26] -= dqdc[k];
    }
  }
  J[1487] += dqdT; // dwdot[C4H81]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT

  // reaction 142: H + aC3H5 (+M) <=> C3H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[31];
  k_f = 200000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 1.33e+60 * exp(-12 * tc[0] - 0.50321666580472 * (5967.8) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -12 * invT + 0.50321666580472 * (5967.8) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.02) * exp(-T / 1096.6);
  Fcent2 = 0.02 * exp(-T / 1096.6);
  Fcent3 = exp(-6859.5 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1096.6 - Fcent2 / 1096.6 + Fcent3 * 6859.5 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[4];
  Kc = refCinv * exp(-g_RT[4] + g_RT[9] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[31]) + (h_RT[4]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[9] -= q;  // H
  wdot[31] -= q; // aC3H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[82] += dqdci;  // dwdot[C3H6]/d[CH4]
    J[87] -= dqdci;  // dwdot[H]/d[CH4]
    J[109] -= dqdci; // dwdot[aC3H5]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[121] += dqdci; // dwdot[C3H6]/d[H2]
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[148] -= dqdci; // dwdot[aC3H5]/d[H2]
    // d()/d[C3H6]
    dqdci = -k_r;
    J[160] += dqdci; // dwdot[C3H6]/d[C3H6]
    J[165] -= dqdci; // dwdot[H]/d[C3H6]
    J[187] -= dqdci; // dwdot[aC3H5]/d[C3H6]
    // d()/d[H]
    dqdci = +k_f * sc[31];
    J[355] += dqdci; // dwdot[C3H6]/d[H]
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[382] -= dqdci; // dwdot[aC3H5]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[511] += dqdci; // dwdot[C3H6]/d[H2O]
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[538] -= dqdci; // dwdot[aC3H5]/d[H2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[862] += dqdci; // dwdot[C3H6]/d[CO]
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[889] -= dqdci; // dwdot[aC3H5]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[901] += dqdci; // dwdot[C3H6]/d[CO2]
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[928] -= dqdci; // dwdot[aC3H5]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1057] += dqdci; // dwdot[C3H6]/d[C2H6]
    J[1062] -= dqdci; // dwdot[H]/d[C2H6]
    J[1084] -= dqdci; // dwdot[aC3H5]/d[C2H6]
    // d()/d[aC3H5]
    dqdci = +k_f * sc[9];
    J[1213] += dqdci; // dwdot[C3H6]/d[aC3H5]
    J[1218] -= dqdci; // dwdot[H]/d[aC3H5]
    J[1240] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac - k_r;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[31];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac + k_f * sc[9];
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 4] += dqdc[k];
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 31] -= dqdc[k];
    }
  }
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1513] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 146: CH3 + aC3H5 (+M) <=> C4H81 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[18] * sc[31];
  k_f = 100000000 * exp(-0.32 * tc[0] - 0.50321666580472 * (-262.3) * invT);
  dlnkfdT = -0.32 * invT + 0.50321666580472 * (-262.3) * invT2;
  // pressure-fall-off
  k_0 = 3.91e+60 * exp(-12.81 * tc[0] - 0.50321666580472 * (6250) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -12.81 * invT + 0.50321666580472 * (6250) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.104) * exp(-T / 1606);
  Fcent2 = 0.104 * exp(-T / 60000);
  Fcent3 = exp(-6118.4 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT = log10e / Fcent *
                (-Fcent1 / 1606 - Fcent2 / 60000 + Fcent3 * 6118.4 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[5];
  Kc = refCinv * exp(-g_RT[5] + g_RT[18] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[31]) + (h_RT[5]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[5] += q;  // C4H81
  wdot[18] -= q; // CH3
  wdot[31] -= q; // aC3H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[83] += dqdci;  // dwdot[C4H81]/d[CH4]
    J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
    J[109] -= dqdci; // dwdot[aC3H5]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[122] += dqdci; // dwdot[C4H81]/d[H2]
    J[135] -= dqdci; // dwdot[CH3]/d[H2]
    J[148] -= dqdci; // dwdot[aC3H5]/d[H2]
    // d()/d[C4H81]
    dqdci = -k_r;
    J[200] += dqdci; // dwdot[C4H81]/d[C4H81]
    J[213] -= dqdci; // dwdot[CH3]/d[C4H81]
    J[226] -= dqdci; // dwdot[aC3H5]/d[C4H81]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[512] += dqdci; // dwdot[C4H81]/d[H2O]
    J[525] -= dqdci; // dwdot[CH3]/d[H2O]
    J[538] -= dqdci; // dwdot[aC3H5]/d[H2O]
    // d()/d[CH3]
    dqdci = +k_f * sc[31];
    J[707] += dqdci; // dwdot[C4H81]/d[CH3]
    J[720] -= dqdci; // dwdot[CH3]/d[CH3]
    J[733] -= dqdci; // dwdot[aC3H5]/d[CH3]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[863] += dqdci; // dwdot[C4H81]/d[CO]
    J[876] -= dqdci; // dwdot[CH3]/d[CO]
    J[889] -= dqdci; // dwdot[aC3H5]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[902] += dqdci; // dwdot[C4H81]/d[CO2]
    J[915] -= dqdci; // dwdot[CH3]/d[CO2]
    J[928] -= dqdci; // dwdot[aC3H5]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1058] += dqdci; // dwdot[C4H81]/d[C2H6]
    J[1071] -= dqdci; // dwdot[CH3]/d[C2H6]
    J[1084] -= dqdci; // dwdot[aC3H5]/d[C2H6]
    // d()/d[aC3H5]
    dqdci = +k_f * sc[18];
    J[1214] += dqdci; // dwdot[C4H81]/d[aC3H5]
    J[1227] -= dqdci; // dwdot[CH3]/d[aC3H5]
    J[1240] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac - k_r;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac + k_f * sc[31];
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac + k_f * sc[18];
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 5] += dqdc[k];
      J[39 * k + 18] -= dqdc[k];
      J[39 * k + 31] -= dqdc[k];
    }
  }
  J[1487] += dqdT; // dwdot[C4H81]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1513] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 164: C6H5CH2 + H (+M) <=> C6H5CH3 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] +
          sc[23] + (3 - 1) * sc[27];
  // forward
  phi_f = sc[9] * sc[33];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 1.1e+103 * exp(-24.63 * tc[0] - 0.50321666580472 * (14590) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -24.63 * invT + 0.50321666580472 * (14590) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 0.431) * exp(-T / 383);
  Fcent2 = 0.431 * exp(-T / 152);
  Fcent3 = exp(-4730 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 383 - Fcent2 / 152 + Fcent3 * 4730 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(-g_RT[8] + g_RT[9] + g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[33]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[8] += q;  // C6H5CH3
  wdot[9] -= q;  // H
  wdot[33] -= q; // C6H5CH2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[86] += dqdci;  // dwdot[C6H5CH3]/d[CH4]
    J[87] -= dqdci;  // dwdot[H]/d[CH4]
    J[111] -= dqdci; // dwdot[C6H5CH2]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[125] += dqdci; // dwdot[C6H5CH3]/d[H2]
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[150] -= dqdci; // dwdot[C6H5CH2]/d[H2]
    // d()/d[C6H5CH3]
    dqdci = -k_r;
    J[320] += dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
    J[321] -= dqdci; // dwdot[H]/d[C6H5CH3]
    J[345] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CH3]
    // d()/d[H]
    dqdci = +k_f * sc[33];
    J[359] += dqdci; // dwdot[C6H5CH3]/d[H]
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[384] -= dqdci; // dwdot[C6H5CH2]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[515] += dqdci; // dwdot[C6H5CH3]/d[H2O]
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[540] -= dqdci; // dwdot[C6H5CH2]/d[H2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[866] += dqdci; // dwdot[C6H5CH3]/d[CO]
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[891] -= dqdci; // dwdot[C6H5CH2]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[905] += dqdci; // dwdot[C6H5CH3]/d[CO2]
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[930] -= dqdci; // dwdot[C6H5CH2]/d[CO2]
    // d()/d[C2H6]
    dqdci = (3 - 1) * dcdc_fac;
    J[1061] += dqdci; // dwdot[C6H5CH3]/d[C2H6]
    J[1062] -= dqdci; // dwdot[H]/d[C2H6]
    J[1086] -= dqdci; // dwdot[C6H5CH2]/d[C2H6]
    // d()/d[C6H5CH2]
    dqdci = +k_f * sc[9];
    J[1295] += dqdci; // dwdot[C6H5CH3]/d[C6H5CH2]
    J[1296] -= dqdci; // dwdot[H]/d[C6H5CH2]
    J[1320] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac - k_r;
    dqdc[9] = dcdc_fac + k_f * sc[33];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = 3 * dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac + k_f * sc[9];
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 8] += dqdc[k];
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 33] -= dqdc[k];
    }
  }
  J[1490] += dqdT; // dwdot[C6H5CH3]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1515] -= dqdT; // dwdot[C6H5CH2]/dT

  // reaction 178: C6H5 + H (+M) <=> C6H6 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha =
    mixture + sc[2] + sc[3] + (6 - 1) * sc[13] + (1.5 - 1) * sc[22] + sc[23];
  // forward
  phi_f = sc[9] * sc[32];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // pressure-fall-off
  k_0 = 6.6e+75 * exp(-16.3 * tc[0] - 0.50321666580472 * (7000) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -16.3 * invT + 0.50321666580472 * (7000) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Troe form
  logPr = log10(Pr);
  Fcent1 = (1. - 1) * exp(-T / 0.1);
  Fcent2 = 1 * exp(-T / 584.9);
  Fcent3 = exp(-6113 * invT);
  Fcent = Fcent1 + Fcent2 + Fcent3;
  logFcent = log10(Fcent);
  troe_c = -.4 - .67 * logFcent;
  troe_n = .75 - 1.27 * logFcent;
  troePr_den = 1.0 / (troe_n - .14 * (troe_c + logPr));
  troePr = (troe_c + logPr) * troePr_den;
  troe = 1.0 / (1.0 + troePr * troePr);
  F = pow(10.0, logFcent * troe);
  dlogFcentdT =
    log10e / Fcent * (-Fcent1 / 0.1 - Fcent2 / 584.9 + Fcent3 * 6113 * invT2);
  dlogFdcn_fac = 2.0 * logFcent * troe * troe * troePr * troePr_den;
  dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
  dlogFdn = dlogFdcn_fac * troePr;
  dlogFdlogPr = dlogFdc;
  dlogFdT = dlogFcentdT * (troe - 0.67 * dlogFdc - 1.27 * dlogFdn) +
            dlogFdlogPr * dlogPrdT;
  // reverse
  phi_r = sc[7];
  Kc = refCinv * exp(-g_RT[7] + g_RT[9] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[32]) + (h_RT[7]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[7] += q;  // C6H6
  wdot[9] -= q;  // H
  wdot[32] -= q; // C6H5
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[CH4]
    dqdci = (2 - 1) * dcdc_fac;
    J[85] += dqdci;  // dwdot[C6H6]/d[CH4]
    J[87] -= dqdci;  // dwdot[H]/d[CH4]
    J[110] -= dqdci; // dwdot[C6H5]/d[CH4]
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[124] += dqdci; // dwdot[C6H6]/d[H2]
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[149] -= dqdci; // dwdot[C6H5]/d[H2]
    // d()/d[C6H6]
    dqdci = -k_r;
    J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
    J[282] -= dqdci; // dwdot[H]/d[C6H6]
    J[305] -= dqdci; // dwdot[C6H5]/d[C6H6]
    // d()/d[H]
    dqdci = +k_f * sc[32];
    J[358] += dqdci; // dwdot[C6H6]/d[H]
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[383] -= dqdci; // dwdot[C6H5]/d[H]
    // d()/d[H2O]
    dqdci = (6 - 1) * dcdc_fac;
    J[514] += dqdci; // dwdot[C6H6]/d[H2O]
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[539] -= dqdci; // dwdot[C6H5]/d[H2O]
    // d()/d[CO]
    dqdci = (1.5 - 1) * dcdc_fac;
    J[865] += dqdci; // dwdot[C6H6]/d[CO]
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[890] -= dqdci; // dwdot[C6H5]/d[CO]
    // d()/d[CO2]
    dqdci = (2 - 1) * dcdc_fac;
    J[904] += dqdci; // dwdot[C6H6]/d[CO2]
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[929] -= dqdci; // dwdot[C6H5]/d[CO2]
    // d()/d[C6H5]
    dqdci = +k_f * sc[9];
    J[1255] += dqdci; // dwdot[C6H6]/d[C6H5]
    J[1257] -= dqdci; // dwdot[H]/d[C6H5]
    J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = 2 * dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac - k_r;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac + k_f * sc[32];
    dqdc[10] = dcdc_fac;
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 6 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.5 * dcdc_fac;
    dqdc[23] = 2 * dcdc_fac;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac + k_f * sc[9];
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 7] += dqdc[k];
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 32] -= dqdc[k];
    }
  }
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT

  // reaction 28: CO + O (+M) <=> CO2 (+M)
  // a third-body and pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[3] + (12 - 1) * sc[13] + (1.75 - 1) * sc[22] +
          (3.6 - 1) * sc[23];
  // forward
  phi_f = sc[10] * sc[22];
  k_f = 13620 * exp(0 * tc[0] - 0.50321666580472 * (2384) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (2384) * invT2;
  // pressure-fall-off
  k_0 = 1.173e+24 * exp(-2.79 * tc[0] - 0.50321666580472 * (4191) * invT);
  Pr = 1e-12 * alpha / k_f * k_0;
  fPr = Pr / (1.0 + Pr);
  dlnk0dT = -2.79 * invT + 0.50321666580472 * (4191) * invT2;
  dlogPrdT = log10e * (dlnk0dT - dlnkfdT);
  dlogfPrdT = dlogPrdT / (1.0 + Pr);
  // Lindemann form
  F = 1.0;
  dlogFdlogPr = 0.0;
  dlogFdT = 0.0;
  // reverse
  phi_r = sc[23];
  Kc = refCinv * exp(g_RT[10] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[22]) + (h_RT[23]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  Corr = fPr * F;
  q = Corr * q_nocor;
  dlnCorrdT = ln10 * (dlogfPrdT + dlogFdT);
  dqdT = Corr * (dlnkfdT * k_f * phi_f - dkrdT * phi_r) + dlnCorrdT * q;
  // update wdot
  wdot[10] -= q; // O
  wdot[22] -= q; // CO
  wdot[23] += q; // CO2
  // for convenience
  k_f *= Corr;
  k_r *= Corr;
  dcdc_fac = q / alpha * (1.0 / (Pr + 1.0) + dlogFdlogPr);
  if (consP) {
    // d()/d[H2]
    dqdci = (2 - 1) * dcdc_fac;
    J[127] -= dqdci; // dwdot[O]/d[H2]
    J[139] -= dqdci; // dwdot[CO]/d[H2]
    J[140] += dqdci; // dwdot[CO2]/d[H2]
    // d()/d[O]
    dqdci = +k_f * sc[22];
    J[400] -= dqdci; // dwdot[O]/d[O]
    J[412] -= dqdci; // dwdot[CO]/d[O]
    J[413] += dqdci; // dwdot[CO2]/d[O]
    // d()/d[H2O]
    dqdci = (12 - 1) * dcdc_fac;
    J[517] -= dqdci; // dwdot[O]/d[H2O]
    J[529] -= dqdci; // dwdot[CO]/d[H2O]
    J[530] += dqdci; // dwdot[CO2]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * dcdc_fac + k_f * sc[10];
    J[868] -= dqdci; // dwdot[O]/d[CO]
    J[880] -= dqdci; // dwdot[CO]/d[CO]
    J[881] += dqdci; // dwdot[CO2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * dcdc_fac - k_r;
    J[907] -= dqdci; // dwdot[O]/d[CO2]
    J[919] -= dqdci; // dwdot[CO]/d[CO2]
    J[920] += dqdci; // dwdot[CO2]/d[CO2]
  } else {
    dqdc[0] = dcdc_fac;
    dqdc[1] = dcdc_fac;
    dqdc[2] = dcdc_fac;
    dqdc[3] = 2 * dcdc_fac;
    dqdc[4] = dcdc_fac;
    dqdc[5] = dcdc_fac;
    dqdc[6] = dcdc_fac;
    dqdc[7] = dcdc_fac;
    dqdc[8] = dcdc_fac;
    dqdc[9] = dcdc_fac;
    dqdc[10] = dcdc_fac + k_f * sc[22];
    dqdc[11] = dcdc_fac;
    dqdc[12] = dcdc_fac;
    dqdc[13] = 12 * dcdc_fac;
    dqdc[14] = dcdc_fac;
    dqdc[15] = dcdc_fac;
    dqdc[16] = dcdc_fac;
    dqdc[17] = dcdc_fac;
    dqdc[18] = dcdc_fac;
    dqdc[19] = dcdc_fac;
    dqdc[20] = dcdc_fac;
    dqdc[21] = dcdc_fac;
    dqdc[22] = 1.75 * dcdc_fac + k_f * sc[10];
    dqdc[23] = 3.6 * dcdc_fac - k_r;
    dqdc[24] = dcdc_fac;
    dqdc[25] = dcdc_fac;
    dqdc[26] = dcdc_fac;
    dqdc[27] = dcdc_fac;
    dqdc[28] = dcdc_fac;
    dqdc[29] = dcdc_fac;
    dqdc[30] = dcdc_fac;
    dqdc[31] = dcdc_fac;
    dqdc[32] = dcdc_fac;
    dqdc[33] = dcdc_fac;
    dqdc[34] = dcdc_fac;
    dqdc[35] = dcdc_fac;
    dqdc[36] = dcdc_fac;
    dqdc[37] = dcdc_fac;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 10] -= dqdc[k];
      J[39 * k + 22] -= dqdc[k];
      J[39 * k + 23] += dqdc[k];
    }
  }
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 10: 2 H + M <=> H2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (0 - 1) * sc[3] + (0 - 1) * sc[13] + (0 - 1) * sc[23];
  // forward
  phi_f = (sc[9] * sc[9]);
  k_f = 1780000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3];
  Kc = refCinv * exp(-g_RT[3] + 2.000000 * g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[9]) + (h_RT[3]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // H2
  wdot[9] -= 2 * q; // H
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP) {
    // d()/d[H2]
    dqdci = (0 - 1) * q_nocor - k_r;
    J[120] += dqdci;      // dwdot[H2]/d[H2]
    J[126] += -2 * dqdci; // dwdot[H]/d[H2]
    // d()/d[H]
    dqdci = +k_f * 2.000000 * sc[9];
    J[354] += dqdci;      // dwdot[H2]/d[H]
    J[360] += -2 * dqdci; // dwdot[H]/d[H]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[510] += dqdci;      // dwdot[H2]/d[H2O]
    J[516] += -2 * dqdci; // dwdot[H]/d[H2O]
    // d()/d[CO2]
    dqdci = (0 - 1) * q_nocor;
    J[900] += dqdci;      // dwdot[H2]/d[CO2]
    J[906] += -2 * dqdci; // dwdot[H]/d[CO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = -k_r;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor + k_f * 2.000000 * sc[9];
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 3] += dqdc[k];
      J[39 * k + 9] += -2 * dqdc[k];
    }
  }
  J[1485] += dqdT;      // dwdot[H2]/dT
  J[1491] += -2 * dqdT; // dwdot[H]/dT

  // reaction 11: 2 H + H2O <=> H2 + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[9] * sc[9]) * sc[13];
  k_f = 56240000 * exp(-1.25 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1.25 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[13];
  Kc = refCinv * exp(-g_RT[3] + 2.000000 * g_RT[9]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(2.000000 * h_RT[9] + h_RT[13]) + (h_RT[3] + h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;     // H2
  wdot[9] -= 2 * q; // H
  // d()/d[H2]
  dqdci = -k_r * sc[13];
  J[120] += dqdci;      // dwdot[H2]/d[H2]
  J[126] += -2 * dqdci; // dwdot[H]/d[H2]
  // d()/d[H]
  dqdci = +k_f * 2.000000 * sc[9] * sc[13];
  J[354] += dqdci;      // dwdot[H2]/d[H]
  J[360] += -2 * dqdci; // dwdot[H]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * pow(sc[9], 2.000000) - k_r * sc[3];
  J[510] += dqdci;      // dwdot[H2]/d[H2O]
  J[516] += -2 * dqdci; // dwdot[H]/d[H2O]
  // d()/dT
  J[1485] += dqdT;      // dwdot[H2]/dT
  J[1491] += -2 * dqdT; // dwdot[H]/dT

  // reaction 12: H + OH + M <=> H2O + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[3] + (6.3 - 1) * sc[13] + (1.75 - 1) * sc[22] +
          (3.6 - 1) * sc[23];
  // forward
  phi_f = sc[9] * sc[11];
  k_f = 44000000000 * exp(-2 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -2 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13];
  Kc = refCinv * exp(g_RT[9] + g_RT[11] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[11]) + (h_RT[13]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[128] -= dqdci; // dwdot[OH]/d[H2]
    J[130] += dqdci; // dwdot[H2O]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[11];
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[362] -= dqdci; // dwdot[OH]/d[H]
    J[364] += dqdci; // dwdot[H2O]/d[H]
    // d()/d[OH]
    dqdci = +k_f * sc[9];
    J[438] -= dqdci; // dwdot[H]/d[OH]
    J[440] -= dqdci; // dwdot[OH]/d[OH]
    J[442] += dqdci; // dwdot[H2O]/d[OH]
    // d()/d[H2O]
    dqdci = (6.3 - 1) * q_nocor - k_r;
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[518] -= dqdci; // dwdot[OH]/d[H2O]
    J[520] += dqdci; // dwdot[H2O]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[869] -= dqdci; // dwdot[OH]/d[CO]
    J[871] += dqdci; // dwdot[H2O]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[908] -= dqdci; // dwdot[OH]/d[CO2]
    J[910] += dqdci; // dwdot[H2O]/d[CO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = 2 * q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor + k_f * sc[11];
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor + k_f * sc[9];
    dqdc[12] = q_nocor;
    dqdc[13] = 6.3 * q_nocor - k_r;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = 1.75 * q_nocor;
    dqdc[23] = 3.6 * q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 11] -= dqdc[k];
      J[39 * k + 13] += dqdc[k];
    }
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT

  // reaction 13: H + O + M <=> OH + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[3] + (12 - 1) * sc[13] + (1.75 - 1) * sc[22] +
          (3.6 - 1) * sc[23];
  // forward
  phi_f = sc[9] * sc[10];
  k_f = 9428000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11];
  Kc = refCinv * exp(g_RT[9] + g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[10]) + (h_RT[11]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[126] -= dqdci; // dwdot[H]/d[H2]
    J[127] -= dqdci; // dwdot[O]/d[H2]
    J[128] += dqdci; // dwdot[OH]/d[H2]
    // d()/d[H]
    dqdci = +k_f * sc[10];
    J[360] -= dqdci; // dwdot[H]/d[H]
    J[361] -= dqdci; // dwdot[O]/d[H]
    J[362] += dqdci; // dwdot[OH]/d[H]
    // d()/d[O]
    dqdci = +k_f * sc[9];
    J[399] -= dqdci; // dwdot[H]/d[O]
    J[400] -= dqdci; // dwdot[O]/d[O]
    J[401] += dqdci; // dwdot[OH]/d[O]
    // d()/d[OH]
    dqdci = -k_r;
    J[438] -= dqdci; // dwdot[H]/d[OH]
    J[439] -= dqdci; // dwdot[O]/d[OH]
    J[440] += dqdci; // dwdot[OH]/d[OH]
    // d()/d[H2O]
    dqdci = (12 - 1) * q_nocor;
    J[516] -= dqdci; // dwdot[H]/d[H2O]
    J[517] -= dqdci; // dwdot[O]/d[H2O]
    J[518] += dqdci; // dwdot[OH]/d[H2O]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[867] -= dqdci; // dwdot[H]/d[CO]
    J[868] -= dqdci; // dwdot[O]/d[CO]
    J[869] += dqdci; // dwdot[OH]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[906] -= dqdci; // dwdot[H]/d[CO2]
    J[907] -= dqdci; // dwdot[O]/d[CO2]
    J[908] += dqdci; // dwdot[OH]/d[CO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = 2 * q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor + k_f * sc[10];
    dqdc[10] = q_nocor + k_f * sc[9];
    dqdc[11] = q_nocor - k_r;
    dqdc[12] = q_nocor;
    dqdc[13] = 12 * q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = 1.75 * q_nocor;
    dqdc[23] = 3.6 * q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 9] -= dqdc[k];
      J[39 * k + 10] -= dqdc[k];
      J[39 * k + 11] += dqdc[k];
    }
  }
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT

  // reaction 14: 2 O + M <=> O2 + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + (2.4 - 1) * sc[3] + (15.4 - 1) * sc[13] +
          (1.75 - 1) * sc[22] + (3.6 - 1) * sc[23];
  // forward
  phi_f = (sc[10] * sc[10]);
  k_f = 120000 * exp(-1 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[15];
  Kc = refCinv * exp(2.000000 * g_RT[10] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[10]) + (h_RT[15]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= 2 * q; // O
  wdot[15] += q;     // O2
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP) {
    // d()/d[H2]
    dqdci = (2.4 - 1) * q_nocor;
    J[127] += -2 * dqdci; // dwdot[O]/d[H2]
    J[132] += dqdci;      // dwdot[O2]/d[H2]
    // d()/d[O]
    dqdci = +k_f * 2.000000 * sc[10];
    J[400] += -2 * dqdci; // dwdot[O]/d[O]
    J[405] += dqdci;      // dwdot[O2]/d[O]
    // d()/d[H2O]
    dqdci = (15.4 - 1) * q_nocor;
    J[517] += -2 * dqdci; // dwdot[O]/d[H2O]
    J[522] += dqdci;      // dwdot[O2]/d[H2O]
    // d()/d[O2]
    dqdci = -k_r;
    J[595] += -2 * dqdci; // dwdot[O]/d[O2]
    J[600] += dqdci;      // dwdot[O2]/d[O2]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor;
    J[868] += -2 * dqdci; // dwdot[O]/d[CO]
    J[873] += dqdci;      // dwdot[O2]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[907] += -2 * dqdci; // dwdot[O]/d[CO2]
    J[912] += dqdci;      // dwdot[O2]/d[CO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = 2.4 * q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor;
    dqdc[10] = q_nocor + k_f * 2.000000 * sc[10];
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[13] = 15.4 * q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor - k_r;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = 1.75 * q_nocor;
    dqdc[23] = 3.6 * q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 10] += -2 * dqdc[k];
      J[39 * k + 15] += dqdc[k];
    }
  }
  J[1492] += -2 * dqdT; // dwdot[O]/dT
  J[1497] += dqdT;      // dwdot[O2]/dT

  // reaction 37: HCO + M <=> CO + H + M
  // a third-body and non-pressure-fall-off reaction
  // 3-body correction factor
  alpha = mixture + sc[3] + (0 - 1) * sc[13] + (1.75 - 1) * sc[22] +
          (3.6 - 1) * sc[23];
  // forward
  phi_f = sc[19];
  k_f = 187000000000 * exp(-1 * tc[0] - 0.50321666580472 * (17000) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (17000) * invT2;
  // reverse
  phi_r = sc[9] * sc[22];
  Kc = refC * exp(-g_RT[9] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19]) + (h_RT[9] + h_RT[22]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q_nocor = k_f * phi_f - k_r * phi_r;
  q = alpha * q_nocor;
  dqdT = alpha * (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // for convenience
  k_f *= alpha;
  k_r *= alpha;
  if (consP) {
    // d()/d[H2]
    dqdci = (2 - 1) * q_nocor;
    J[126] += dqdci; // dwdot[H]/d[H2]
    J[136] -= dqdci; // dwdot[HCO]/d[H2]
    J[139] += dqdci; // dwdot[CO]/d[H2]
    // d()/d[H]
    dqdci = -k_r * sc[22];
    J[360] += dqdci; // dwdot[H]/d[H]
    J[370] -= dqdci; // dwdot[HCO]/d[H]
    J[373] += dqdci; // dwdot[CO]/d[H]
    // d()/d[H2O]
    dqdci = (0 - 1) * q_nocor;
    J[516] += dqdci; // dwdot[H]/d[H2O]
    J[526] -= dqdci; // dwdot[HCO]/d[H2O]
    J[529] += dqdci; // dwdot[CO]/d[H2O]
    // d()/d[HCO]
    dqdci = +k_f;
    J[750] += dqdci; // dwdot[H]/d[HCO]
    J[760] -= dqdci; // dwdot[HCO]/d[HCO]
    J[763] += dqdci; // dwdot[CO]/d[HCO]
    // d()/d[CO]
    dqdci = (1.75 - 1) * q_nocor - k_r * sc[9];
    J[867] += dqdci; // dwdot[H]/d[CO]
    J[877] -= dqdci; // dwdot[HCO]/d[CO]
    J[880] += dqdci; // dwdot[CO]/d[CO]
    // d()/d[CO2]
    dqdci = (3.6 - 1) * q_nocor;
    J[906] += dqdci; // dwdot[H]/d[CO2]
    J[916] -= dqdci; // dwdot[HCO]/d[CO2]
    J[919] += dqdci; // dwdot[CO]/d[CO2]
  } else {
    dqdc[0] = q_nocor;
    dqdc[1] = q_nocor;
    dqdc[2] = q_nocor;
    dqdc[3] = 2 * q_nocor;
    dqdc[4] = q_nocor;
    dqdc[5] = q_nocor;
    dqdc[6] = q_nocor;
    dqdc[7] = q_nocor;
    dqdc[8] = q_nocor;
    dqdc[9] = q_nocor - k_r * sc[22];
    dqdc[10] = q_nocor;
    dqdc[11] = q_nocor;
    dqdc[12] = q_nocor;
    dqdc[14] = q_nocor;
    dqdc[15] = q_nocor;
    dqdc[16] = q_nocor;
    dqdc[17] = q_nocor;
    dqdc[18] = q_nocor;
    dqdc[19] = q_nocor + k_f;
    dqdc[20] = q_nocor;
    dqdc[21] = q_nocor;
    dqdc[22] = 1.75 * q_nocor - k_r * sc[9];
    dqdc[23] = 3.6 * q_nocor;
    dqdc[24] = q_nocor;
    dqdc[25] = q_nocor;
    dqdc[26] = q_nocor;
    dqdc[27] = q_nocor;
    dqdc[28] = q_nocor;
    dqdc[29] = q_nocor;
    dqdc[30] = q_nocor;
    dqdc[31] = q_nocor;
    dqdc[32] = q_nocor;
    dqdc[33] = q_nocor;
    dqdc[34] = q_nocor;
    dqdc[35] = q_nocor;
    dqdc[36] = q_nocor;
    dqdc[37] = q_nocor;
    for (int k = 0; k < 38; k++) {
      J[39 * k + 9] += dqdc[k];
      J[39 * k + 19] -= dqdc[k];
      J[39 * k + 22] += dqdc[k];
    }
  }
  J[1491] += dqdT; // dwdot[H]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 38: HCO + H2O <=> CO + H + H2O
  // a third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[19];
  k_f = 2244000000000 * exp(-1 * tc[0] - 0.50321666580472 * (17000) * invT);
  dlnkfdT = -1 * invT + 0.50321666580472 * (17000) * invT2;
  // reverse
  phi_r = sc[9] * sc[13] * sc[22];
  Kc = refC * exp(-g_RT[9] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[19]) + (h_RT[9] + h_RT[13] + h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[13] * sc[22];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[370] -= dqdci; // dwdot[HCO]/d[H]
  J[373] += dqdci; // dwdot[CO]/d[H]
  // d()/d[H2O]
  dqdci = +k_f * sc[19] - k_r * sc[9] * sc[22];
  J[516] += dqdci; // dwdot[H]/d[H2O]
  J[526] -= dqdci; // dwdot[HCO]/d[H2O]
  J[529] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[HCO]
  dqdci = +k_f * sc[13];
  J[750] += dqdci; // dwdot[H]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[9] * sc[13];
  J[867] += dqdci; // dwdot[H]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 0: POSF10325 => 2.95 C2H4 + 0.39 C3H6 + 0.15 C6H5CH3 + 0.183333
  // C6H6 + CH3 + H + 0.195 iC4H8 a non-third-body and non-pressure-fall-off
  // reaction forward
  phi_f = sc[0];
  k_f = 5.86e+25 * exp(-2.66 * tc[0] - 0.50321666580472 * (88207) * invT);
  dlnkfdT = -2.66 * invT + 0.50321666580472 * (88207) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.95 * q;      // C2H4
  wdot[4] += 0.39 * q;      // C3H6
  wdot[6] += 0.195 * q;     // iC4H8
  wdot[7] += 0.1833333 * q; // C6H6
  wdot[8] += 0.15 * q;      // C6H5CH3
  wdot[9] += q;             // H
  wdot[18] += q;            // CH3
  // d()/d[POSF10325]
  dqdci = +k_f;
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.95 * dqdci;      // dwdot[C2H4]/d[POSF10325]
  J[4] += 0.39 * dqdci;      // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.195 * dqdci;     // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1833333 * dqdci; // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.15 * dqdci;      // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += dqdci;             // dwdot[H]/d[POSF10325]
  J[18] += dqdci;            // dwdot[CH3]/d[POSF10325]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.95 * dqdT;      // dwdot[C2H4]/dT
  J[1486] += 0.39 * dqdT;      // dwdot[C3H6]/dT
  J[1488] += 0.195 * dqdT;     // dwdot[iC4H8]/dT
  J[1489] += 0.1833333 * dqdT; // dwdot[C6H6]/dT
  J[1490] += 0.15 * dqdT;      // dwdot[C6H5CH3]/dT
  J[1491] += dqdT;             // dwdot[H]/dT
  J[1500] += dqdT;             // dwdot[CH3]/dT

  // reaction 1: H + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575 C6H5CH3
  // + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2 + 0.243083 iC4H8 a
  // non-third-body and non-pressure-fall-off reaction forward
  phi_f = sc[0] * sc[9];
  k_f = 1.53e-07 * exp(4.76 * tc[0] - 0.50321666580472 * (1294.9) * invT);
  dlnkfdT = 4.76 * invT + 0.50321666580472 * (1294.9) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.8308333 * q; // C2H4
  wdot[2] += 0.05 * q;      // CH4
  wdot[3] += q;             // H2
  wdot[4] += 0.4861667 * q; // C3H6
  wdot[6] += 0.2430833 * q; // iC4H8
  wdot[7] += 0.1925 * q;    // C6H6
  wdot[8] += 0.1575 * q;    // C6H5CH3
  wdot[9] -= 0.6 * q;       // H
  wdot[18] += 0.6 * q;      // CH3
  // d()/d[POSF10325]
  dqdci = +k_f * sc[9];
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.8308333 * dqdci; // dwdot[C2H4]/d[POSF10325]
  J[2] += 0.05 * dqdci;      // dwdot[CH4]/d[POSF10325]
  J[3] += dqdci;             // dwdot[H2]/d[POSF10325]
  J[4] += 0.4861667 * dqdci; // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1925 * dqdci;    // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += -0.6 * dqdci;      // dwdot[H]/d[POSF10325]
  J[18] += 0.6 * dqdci;      // dwdot[CH3]/d[POSF10325]
  // d()/d[H]
  dqdci = +k_f * sc[0];
  J[351] -= dqdci;             // dwdot[POSF10325]/d[H]
  J[352] += 2.8308333 * dqdci; // dwdot[C2H4]/d[H]
  J[353] += 0.05 * dqdci;      // dwdot[CH4]/d[H]
  J[354] += dqdci;             // dwdot[H2]/d[H]
  J[355] += 0.4861667 * dqdci; // dwdot[C3H6]/d[H]
  J[357] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[H]
  J[358] += 0.1925 * dqdci;    // dwdot[C6H6]/d[H]
  J[359] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[H]
  J[360] += -0.6 * dqdci;      // dwdot[H]/d[H]
  J[369] += 0.6 * dqdci;       // dwdot[CH3]/d[H]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.8308333 * dqdT; // dwdot[C2H4]/dT
  J[1484] += 0.05 * dqdT;      // dwdot[CH4]/dT
  J[1485] += dqdT;             // dwdot[H2]/dT
  J[1486] += 0.4861667 * dqdT; // dwdot[C3H6]/dT
  J[1488] += 0.2430833 * dqdT; // dwdot[iC4H8]/dT
  J[1489] += 0.1925 * dqdT;    // dwdot[C6H6]/dT
  J[1490] += 0.1575 * dqdT;    // dwdot[C6H5CH3]/dT
  J[1491] += -0.6 * dqdT;      // dwdot[H]/dT
  J[1500] += 0.6 * dqdT;       // dwdot[CH3]/dT

  // reaction 2: CH3 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
  // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 1.05 CH4 + 0.4 H + 0.243083 iC4H8 a
  // non-third-body and non-pressure-fall-off reaction forward
  phi_f = sc[0] * sc[18];
  k_f = 9.52e-13 * exp(5.95 * tc[0] - 0.50321666580472 * (4748.4) * invT);
  dlnkfdT = 5.95 * invT + 0.50321666580472 * (4748.4) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.8308333 * q; // C2H4
  wdot[2] += 1.05 * q;      // CH4
  wdot[4] += 0.4861667 * q; // C3H6
  wdot[6] += 0.2430833 * q; // iC4H8
  wdot[7] += 0.1925 * q;    // C6H6
  wdot[8] += 0.1575 * q;    // C6H5CH3
  wdot[9] += 0.4 * q;       // H
  wdot[18] -= 0.4 * q;      // CH3
  // d()/d[POSF10325]
  dqdci = +k_f * sc[18];
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.8308333 * dqdci; // dwdot[C2H4]/d[POSF10325]
  J[2] += 1.05 * dqdci;      // dwdot[CH4]/d[POSF10325]
  J[4] += 0.4861667 * dqdci; // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1925 * dqdci;    // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += 0.4 * dqdci;       // dwdot[H]/d[POSF10325]
  J[18] += -0.4 * dqdci;     // dwdot[CH3]/d[POSF10325]
  // d()/d[CH3]
  dqdci = +k_f * sc[0];
  J[702] -= dqdci;             // dwdot[POSF10325]/d[CH3]
  J[703] += 2.8308333 * dqdci; // dwdot[C2H4]/d[CH3]
  J[704] += 1.05 * dqdci;      // dwdot[CH4]/d[CH3]
  J[706] += 0.4861667 * dqdci; // dwdot[C3H6]/d[CH3]
  J[708] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[CH3]
  J[709] += 0.1925 * dqdci;    // dwdot[C6H6]/d[CH3]
  J[710] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[CH3]
  J[711] += 0.4 * dqdci;       // dwdot[H]/d[CH3]
  J[720] += -0.4 * dqdci;      // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.8308333 * dqdT; // dwdot[C2H4]/dT
  J[1484] += 1.05 * dqdT;      // dwdot[CH4]/dT
  J[1486] += 0.4861667 * dqdT; // dwdot[C3H6]/dT
  J[1488] += 0.2430833 * dqdT; // dwdot[iC4H8]/dT
  J[1489] += 0.1925 * dqdT;    // dwdot[C6H6]/dT
  J[1490] += 0.1575 * dqdT;    // dwdot[C6H5CH3]/dT
  J[1491] += 0.4 * dqdT;       // dwdot[H]/dT
  J[1500] += -0.4 * dqdT;      // dwdot[CH3]/dT

  // reaction 3: OH + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575 C6H5CH3
  // + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2O + 0.243083 iC4H8 a
  // non-third-body and non-pressure-fall-off reaction forward
  phi_f = sc[0] * sc[11];
  k_f = 35500 * exp(1.02 * tc[0] - 0.50321666580472 * (213.2) * invT);
  dlnkfdT = 1.02 * invT + 0.50321666580472 * (213.2) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.8308333 * q; // C2H4
  wdot[2] += 0.05 * q;      // CH4
  wdot[4] += 0.4861667 * q; // C3H6
  wdot[6] += 0.2430833 * q; // iC4H8
  wdot[7] += 0.1925 * q;    // C6H6
  wdot[8] += 0.1575 * q;    // C6H5CH3
  wdot[9] += 0.4 * q;       // H
  wdot[11] -= q;            // OH
  wdot[13] += q;            // H2O
  wdot[18] += 0.6 * q;      // CH3
  // d()/d[POSF10325]
  dqdci = +k_f * sc[11];
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.8308333 * dqdci; // dwdot[C2H4]/d[POSF10325]
  J[2] += 0.05 * dqdci;      // dwdot[CH4]/d[POSF10325]
  J[4] += 0.4861667 * dqdci; // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1925 * dqdci;    // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += 0.4 * dqdci;       // dwdot[H]/d[POSF10325]
  J[11] -= dqdci;            // dwdot[OH]/d[POSF10325]
  J[13] += dqdci;            // dwdot[H2O]/d[POSF10325]
  J[18] += 0.6 * dqdci;      // dwdot[CH3]/d[POSF10325]
  // d()/d[OH]
  dqdci = +k_f * sc[0];
  J[429] -= dqdci;             // dwdot[POSF10325]/d[OH]
  J[430] += 2.8308333 * dqdci; // dwdot[C2H4]/d[OH]
  J[431] += 0.05 * dqdci;      // dwdot[CH4]/d[OH]
  J[433] += 0.4861667 * dqdci; // dwdot[C3H6]/d[OH]
  J[435] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[OH]
  J[436] += 0.1925 * dqdci;    // dwdot[C6H6]/d[OH]
  J[437] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[OH]
  J[438] += 0.4 * dqdci;       // dwdot[H]/d[OH]
  J[440] -= dqdci;             // dwdot[OH]/d[OH]
  J[442] += dqdci;             // dwdot[H2O]/d[OH]
  J[447] += 0.6 * dqdci;       // dwdot[CH3]/d[OH]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.8308333 * dqdT; // dwdot[C2H4]/dT
  J[1484] += 0.05 * dqdT;      // dwdot[CH4]/dT
  J[1486] += 0.4861667 * dqdT; // dwdot[C3H6]/dT
  J[1488] += 0.2430833 * dqdT; // dwdot[iC4H8]/dT
  J[1489] += 0.1925 * dqdT;    // dwdot[C6H6]/dT
  J[1490] += 0.1575 * dqdT;    // dwdot[C6H5CH3]/dT
  J[1491] += 0.4 * dqdT;       // dwdot[H]/dT
  J[1493] -= dqdT;             // dwdot[OH]/dT
  J[1495] += dqdT;             // dwdot[H2O]/dT
  J[1500] += 0.6 * dqdT;       // dwdot[CH3]/dT

  // reaction 4: O2 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575 C6H5CH3
  // + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + HO2 + 0.243083 iC4H8 a
  // non-third-body and non-pressure-fall-off reaction forward
  phi_f = sc[0] * sc[15];
  k_f = 255000000 * exp(0.06 * tc[0] - 0.50321666580472 * (47532.6) * invT);
  dlnkfdT = 0.06 * invT + 0.50321666580472 * (47532.6) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.8308333 * q; // C2H4
  wdot[2] += 0.05 * q;      // CH4
  wdot[4] += 0.4861667 * q; // C3H6
  wdot[6] += 0.2430833 * q; // iC4H8
  wdot[7] += 0.1925 * q;    // C6H6
  wdot[8] += 0.1575 * q;    // C6H5CH3
  wdot[9] += 0.4 * q;       // H
  wdot[12] += q;            // HO2
  wdot[15] -= q;            // O2
  wdot[18] += 0.6 * q;      // CH3
  // d()/d[POSF10325]
  dqdci = +k_f * sc[15];
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.8308333 * dqdci; // dwdot[C2H4]/d[POSF10325]
  J[2] += 0.05 * dqdci;      // dwdot[CH4]/d[POSF10325]
  J[4] += 0.4861667 * dqdci; // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1925 * dqdci;    // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += 0.4 * dqdci;       // dwdot[H]/d[POSF10325]
  J[12] += dqdci;            // dwdot[HO2]/d[POSF10325]
  J[15] -= dqdci;            // dwdot[O2]/d[POSF10325]
  J[18] += 0.6 * dqdci;      // dwdot[CH3]/d[POSF10325]
  // d()/d[O2]
  dqdci = +k_f * sc[0];
  J[585] -= dqdci;             // dwdot[POSF10325]/d[O2]
  J[586] += 2.8308333 * dqdci; // dwdot[C2H4]/d[O2]
  J[587] += 0.05 * dqdci;      // dwdot[CH4]/d[O2]
  J[589] += 0.4861667 * dqdci; // dwdot[C3H6]/d[O2]
  J[591] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[O2]
  J[592] += 0.1925 * dqdci;    // dwdot[C6H6]/d[O2]
  J[593] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[O2]
  J[594] += 0.4 * dqdci;       // dwdot[H]/d[O2]
  J[597] += dqdci;             // dwdot[HO2]/d[O2]
  J[600] -= dqdci;             // dwdot[O2]/d[O2]
  J[603] += 0.6 * dqdci;       // dwdot[CH3]/d[O2]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.8308333 * dqdT; // dwdot[C2H4]/dT
  J[1484] += 0.05 * dqdT;      // dwdot[CH4]/dT
  J[1486] += 0.4861667 * dqdT; // dwdot[C3H6]/dT
  J[1488] += 0.2430833 * dqdT; // dwdot[iC4H8]/dT
  J[1489] += 0.1925 * dqdT;    // dwdot[C6H6]/dT
  J[1490] += 0.1575 * dqdT;    // dwdot[C6H5CH3]/dT
  J[1491] += 0.4 * dqdT;       // dwdot[H]/dT
  J[1494] += dqdT;             // dwdot[HO2]/dT
  J[1497] -= dqdT;             // dwdot[O2]/dT
  J[1500] += 0.6 * dqdT;       // dwdot[CH3]/dT

  // reaction 5: HO2 + POSF10325 => 2.83083 C2H4 + 0.486167 C3H6 + 0.1575
  // C6H5CH3 + 0.1925 C6H6 + 0.6 CH3 + 0.05 CH4 + 0.4 H + H2O2 + 0.243083 iC4H8
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[0] * sc[12];
  k_f = 0.0233 * exp(2.94 * tc[0] - 0.50321666580472 * (14810) * invT);
  dlnkfdT = 2.94 * invT + 0.50321666580472 * (14810) * invT2;
  // rate of progress
  q = k_f * phi_f;
  dqdT = dlnkfdT * k_f * phi_f;
  // update wdot
  wdot[0] -= q;             // POSF10325
  wdot[1] += 2.8308333 * q; // C2H4
  wdot[2] += 0.05 * q;      // CH4
  wdot[4] += 0.4861667 * q; // C3H6
  wdot[6] += 0.2430833 * q; // iC4H8
  wdot[7] += 0.1925 * q;    // C6H6
  wdot[8] += 0.1575 * q;    // C6H5CH3
  wdot[9] += 0.4 * q;       // H
  wdot[12] -= q;            // HO2
  wdot[14] += q;            // H2O2
  wdot[18] += 0.6 * q;      // CH3
  // d()/d[POSF10325]
  dqdci = +k_f * sc[12];
  J[0] -= dqdci;             // dwdot[POSF10325]/d[POSF10325]
  J[1] += 2.8308333 * dqdci; // dwdot[C2H4]/d[POSF10325]
  J[2] += 0.05 * dqdci;      // dwdot[CH4]/d[POSF10325]
  J[4] += 0.4861667 * dqdci; // dwdot[C3H6]/d[POSF10325]
  J[6] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[POSF10325]
  J[7] += 0.1925 * dqdci;    // dwdot[C6H6]/d[POSF10325]
  J[8] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[POSF10325]
  J[9] += 0.4 * dqdci;       // dwdot[H]/d[POSF10325]
  J[12] -= dqdci;            // dwdot[HO2]/d[POSF10325]
  J[14] += dqdci;            // dwdot[H2O2]/d[POSF10325]
  J[18] += 0.6 * dqdci;      // dwdot[CH3]/d[POSF10325]
  // d()/d[HO2]
  dqdci = +k_f * sc[0];
  J[468] -= dqdci;             // dwdot[POSF10325]/d[HO2]
  J[469] += 2.8308333 * dqdci; // dwdot[C2H4]/d[HO2]
  J[470] += 0.05 * dqdci;      // dwdot[CH4]/d[HO2]
  J[472] += 0.4861667 * dqdci; // dwdot[C3H6]/d[HO2]
  J[474] += 0.2430833 * dqdci; // dwdot[iC4H8]/d[HO2]
  J[475] += 0.1925 * dqdci;    // dwdot[C6H6]/d[HO2]
  J[476] += 0.1575 * dqdci;    // dwdot[C6H5CH3]/d[HO2]
  J[477] += 0.4 * dqdci;       // dwdot[H]/d[HO2]
  J[480] -= dqdci;             // dwdot[HO2]/d[HO2]
  J[482] += dqdci;             // dwdot[H2O2]/d[HO2]
  J[486] += 0.6 * dqdci;       // dwdot[CH3]/d[HO2]
  // d()/dT
  J[1482] -= dqdT;             // dwdot[POSF10325]/dT
  J[1483] += 2.8308333 * dqdT; // dwdot[C2H4]/dT
  J[1484] += 0.05 * dqdT;      // dwdot[CH4]/dT
  J[1486] += 0.4861667 * dqdT; // dwdot[C3H6]/dT
  J[1488] += 0.2430833 * dqdT; // dwdot[iC4H8]/dT
  J[1489] += 0.1925 * dqdT;    // dwdot[C6H6]/dT
  J[1490] += 0.1575 * dqdT;    // dwdot[C6H5CH3]/dT
  J[1491] += 0.4 * dqdT;       // dwdot[H]/dT
  J[1494] -= dqdT;             // dwdot[HO2]/dT
  J[1496] += dqdT;             // dwdot[H2O2]/dT
  J[1500] += 0.6 * dqdT;       // dwdot[CH3]/dT

  // reaction 6: H + O2 <=> O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[15];
  k_f = 26440000000 * exp(-0.6707 * tc[0] - 0.50321666580472 * (17041) * invT);
  dlnkfdT = -0.6707 * invT + 0.50321666580472 * (17041) * invT2;
  // reverse
  phi_r = sc[10] * sc[11];
  Kc = exp(g_RT[9] - g_RT[10] - g_RT[11] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[15]) + (h_RT[10] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[10] += q; // O
  wdot[11] += q; // OH
  wdot[15] -= q; // O2
  // d()/d[H]
  dqdci = +k_f * sc[15];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[361] += dqdci; // dwdot[O]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  J[366] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[O]
  dqdci = -k_r * sc[11];
  J[399] -= dqdci; // dwdot[H]/d[O]
  J[400] += dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[405] -= dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[10];
  J[438] -= dqdci; // dwdot[H]/d[OH]
  J[439] += dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[444] -= dqdci; // dwdot[O2]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[9];
  J[594] -= dqdci; // dwdot[H]/d[O2]
  J[595] += dqdci; // dwdot[O]/d[O2]
  J[596] += dqdci; // dwdot[OH]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1492] += dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT

  // reaction 7: H2 + O <=> H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[10];
  k_f = 0.04589 * exp(2.7 * tc[0] - 0.50321666580472 * (6260) * invT);
  dlnkfdT = 2.7 * invT + 0.50321666580472 * (6260) * invT2;
  // reverse
  phi_r = sc[9] * sc[11];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[10] - g_RT[11]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[10]) + (h_RT[9] + h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  // d()/d[H2]
  dqdci = +k_f * sc[10];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[127] -= dqdci; // dwdot[O]/d[H2]
  J[128] += dqdci; // dwdot[OH]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[11];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[3];
  J[393] -= dqdci; // dwdot[H2]/d[O]
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[9];
  J[432] -= dqdci; // dwdot[H2]/d[OH]
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT

  // reaction 8: H2 + OH <=> H + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[11];
  k_f = 173.4 * exp(1.51 * tc[0] - 0.50321666580472 * (3430) * invT);
  dlnkfdT = 1.51 * invT + 0.50321666580472 * (3430) * invT2;
  // reverse
  phi_r = sc[9] * sc[13];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[11] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[11]) + (h_RT[9] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  // d()/d[H2]
  dqdci = +k_f * sc[11];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[128] -= dqdci; // dwdot[OH]/d[H2]
  J[130] += dqdci; // dwdot[H2O]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[13];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[364] += dqdci; // dwdot[H2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[3];
  J[432] -= dqdci; // dwdot[H2]/d[OH]
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[9];
  J[510] -= dqdci; // dwdot[H2]/d[H2O]
  J[516] += dqdci; // dwdot[H]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT

  // reaction 9: 2 OH <=> H2O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[11] * sc[11]);
  k_f = 0.03973 * exp(2.4 * tc[0] - 0.50321666580472 * (-2110) * invT);
  dlnkfdT = 2.4 * invT + 0.50321666580472 * (-2110) * invT2;
  // reverse
  phi_r = sc[10] * sc[13];
  Kc = exp(-g_RT[10] + 2.000000 * g_RT[11] - g_RT[13]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[11]) + (h_RT[10] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q;     // O
  wdot[11] -= 2 * q; // OH
  wdot[13] += q;     // H2O
  // d()/d[O]
  dqdci = -k_r * sc[13];
  J[400] += dqdci;      // dwdot[O]/d[O]
  J[401] += -2 * dqdci; // dwdot[OH]/d[O]
  J[403] += dqdci;      // dwdot[H2O]/d[O]
  // d()/d[OH]
  dqdci = +k_f * 2.000000 * sc[11];
  J[439] += dqdci;      // dwdot[O]/d[OH]
  J[440] += -2 * dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci;      // dwdot[H2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[10];
  J[517] += dqdci;      // dwdot[O]/d[H2O]
  J[518] += -2 * dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci;      // dwdot[H2O]/d[H2O]
  // d()/dT
  J[1492] += dqdT;      // dwdot[O]/dT
  J[1493] += -2 * dqdT; // dwdot[OH]/dT
  J[1495] += dqdT;      // dwdot[H2O]/dT

  // reaction 16: H2 + O2 <=> H + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[15];
  k_f = 0.5916 * exp(2.433 * tc[0] - 0.50321666580472 * (53502) * invT);
  dlnkfdT = 2.433 * invT + 0.50321666580472 * (53502) * invT2;
  // reverse
  phi_r = sc[9] * sc[12];
  Kc = exp(g_RT[3] - g_RT[9] - g_RT[12] + g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[15]) + (h_RT[9] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[9] += q;  // H
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  // d()/d[H2]
  dqdci = +k_f * sc[15];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[129] += dqdci; // dwdot[HO2]/d[H2]
  J[132] -= dqdci; // dwdot[O2]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[12];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[363] += dqdci; // dwdot[HO2]/d[H]
  J[366] -= dqdci; // dwdot[O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[9];
  J[471] -= dqdci; // dwdot[H2]/d[HO2]
  J[477] += dqdci; // dwdot[H]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[3];
  J[588] -= dqdci; // dwdot[H2]/d[O2]
  J[594] += dqdci; // dwdot[H]/d[O2]
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT

  // reaction 18: H + HO2 <=> 2 OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[12];
  k_f = 74850000 * exp(0 * tc[0] - 0.50321666580472 * (295) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (295) * invT2;
  // reverse
  phi_r = (sc[11] * sc[11]);
  Kc = exp(g_RT[9] - 2.000000 * g_RT[11] + g_RT[12]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[12]) + (2.000000 * h_RT[11]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;      // H
  wdot[11] += 2 * q; // OH
  wdot[12] -= q;     // HO2
  // d()/d[H]
  dqdci = +k_f * sc[12];
  J[360] -= dqdci;     // dwdot[H]/d[H]
  J[362] += 2 * dqdci; // dwdot[OH]/d[H]
  J[363] -= dqdci;     // dwdot[HO2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * 2.000000 * sc[11];
  J[438] -= dqdci;     // dwdot[H]/d[OH]
  J[440] += 2 * dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci;     // dwdot[HO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[9];
  J[477] -= dqdci;     // dwdot[H]/d[HO2]
  J[479] += 2 * dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci;     // dwdot[HO2]/d[HO2]
  // d()/dT
  J[1491] -= dqdT;     // dwdot[H]/dT
  J[1493] += 2 * dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT;     // dwdot[HO2]/dT

  // reaction 19: HO2 + O <=> O2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[12];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[15];
  Kc = exp(g_RT[10] - g_RT[11] + g_RT[12] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[12]) + (h_RT[11] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[15] += q; // O2
  // d()/d[O]
  dqdci = +k_f * sc[12];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[402] -= dqdci; // dwdot[HO2]/d[O]
  J[405] += dqdci; // dwdot[O2]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[15];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[444] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[10];
  J[478] -= dqdci; // dwdot[O]/d[HO2]
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[11];
  J[595] -= dqdci; // dwdot[O]/d[O2]
  J[596] += dqdci; // dwdot[OH]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1497] += dqdT; // dwdot[O2]/dT

  // reaction 20: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 130000 * exp(0 * tc[0] - 0.50321666580472 * (-1630) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-1630) * invT2;
  // reverse
  phi_r = sc[14] * sc[15];
  Kc = exp(2.000000 * g_RT[12] - g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[14] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= 2 * q; // HO2
  wdot[14] += q;     // H2O2
  wdot[15] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[12];
  J[480] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[482] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[483] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[15];
  J[558] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[560] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[561] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[14];
  J[597] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[599] += dqdci;      // dwdot[H2O2]/d[O2]
  J[600] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[1494] += -2 * dqdT; // dwdot[HO2]/dT
  J[1496] += dqdT;      // dwdot[H2O2]/dT
  J[1497] += dqdT;      // dwdot[O2]/dT

  // reaction 21: 2 HO2 <=> H2O2 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[12] * sc[12]);
  k_f = 365800000 * exp(0 * tc[0] - 0.50321666580472 * (12000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (12000) * invT2;
  // reverse
  phi_r = sc[14] * sc[15];
  Kc = exp(2.000000 * g_RT[12] - g_RT[14] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[12]) + (h_RT[14] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= 2 * q; // HO2
  wdot[14] += q;     // H2O2
  wdot[15] += q;     // O2
  // d()/d[HO2]
  dqdci = +k_f * 2.000000 * sc[12];
  J[480] += -2 * dqdci; // dwdot[HO2]/d[HO2]
  J[482] += dqdci;      // dwdot[H2O2]/d[HO2]
  J[483] += dqdci;      // dwdot[O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[15];
  J[558] += -2 * dqdci; // dwdot[HO2]/d[H2O2]
  J[560] += dqdci;      // dwdot[H2O2]/d[H2O2]
  J[561] += dqdci;      // dwdot[O2]/d[H2O2]
  // d()/d[O2]
  dqdci = -k_r * sc[14];
  J[597] += -2 * dqdci; // dwdot[HO2]/d[O2]
  J[599] += dqdci;      // dwdot[H2O2]/d[O2]
  J[600] += dqdci;      // dwdot[O2]/d[O2]
  // d()/dT
  J[1494] += -2 * dqdT; // dwdot[HO2]/dT
  J[1496] += dqdT;      // dwdot[H2O2]/dT
  J[1497] += dqdT;      // dwdot[O2]/dT

  // reaction 22: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 1410000000000 * exp(-1.76 * tc[0] - 0.50321666580472 * (60) * invT);
  dlnkfdT = -1.76 * invT + 0.50321666580472 * (60) * invT2;
  // reverse
  phi_r = sc[13] * sc[15];
  Kc = exp(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[13] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[12] -= q; // HO2
  wdot[13] += q; // H2O
  wdot[15] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[444] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[479] -= dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[481] += dqdci; // dwdot[H2O]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[519] -= dqdci; // dwdot[HO2]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[522] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[13];
  J[596] -= dqdci; // dwdot[OH]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[598] += dqdci; // dwdot[H2O]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1497] += dqdT; // dwdot[O2]/dT

  // reaction 23: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 5.37e+64 * exp(-16.72 * tc[0] - 0.50321666580472 * (32900) * invT);
  dlnkfdT = -16.72 * invT + 0.50321666580472 * (32900) * invT2;
  // reverse
  phi_r = sc[13] * sc[15];
  Kc = exp(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[13] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[12] -= q; // HO2
  wdot[13] += q; // H2O
  wdot[15] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[444] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[479] -= dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[481] += dqdci; // dwdot[H2O]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[519] -= dqdci; // dwdot[HO2]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[522] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[13];
  J[596] -= dqdci; // dwdot[OH]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[598] += dqdci; // dwdot[H2O]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1497] += dqdT; // dwdot[O2]/dT

  // reaction 24: HO2 + OH <=> H2O + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[12];
  k_f = 2510000 * exp(2 * tc[0] - 0.50321666580472 * (40000) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (40000) * invT2;
  // reverse
  phi_r = sc[13] * sc[15];
  Kc = exp(g_RT[11] + g_RT[12] - g_RT[13] - g_RT[15]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[12]) + (h_RT[13] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[12] -= q; // HO2
  wdot[13] += q; // H2O
  wdot[15] += q; // O2
  // d()/d[OH]
  dqdci = +k_f * sc[12];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[444] += dqdci; // dwdot[O2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[11];
  J[479] -= dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[481] += dqdci; // dwdot[H2O]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[15];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[519] -= dqdci; // dwdot[HO2]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[522] += dqdci; // dwdot[O2]/d[H2O]
  // d()/d[O2]
  dqdci = -k_r * sc[13];
  J[596] -= dqdci; // dwdot[OH]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[598] += dqdci; // dwdot[H2O]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1497] += dqdT; // dwdot[O2]/dT

  // reaction 25: H + H2O2 <=> H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[14];
  k_f = 6.05 * exp(2 * tc[0] - 0.50321666580472 * (5200) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (5200) * invT2;
  // reverse
  phi_r = sc[3] * sc[12];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[12] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[14]) + (h_RT[3] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[12] += q; // HO2
  wdot[14] -= q; // H2O2
  // d()/d[H2]
  dqdci = -k_r * sc[12];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[129] += dqdci; // dwdot[HO2]/d[H2]
  J[131] -= dqdci; // dwdot[H2O2]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[363] += dqdci; // dwdot[HO2]/d[H]
  J[365] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[HO2]
  dqdci = -k_r * sc[3];
  J[471] += dqdci; // dwdot[H2]/d[HO2]
  J[477] -= dqdci; // dwdot[H]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[482] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[9];
  J[549] += dqdci; // dwdot[H2]/d[H2O2]
  J[555] -= dqdci; // dwdot[H]/d[H2O2]
  J[558] += dqdci; // dwdot[HO2]/d[H2O2]
  J[560] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1496] -= dqdT; // dwdot[H2O2]/dT

  // reaction 26: H + H2O2 <=> H2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[14];
  k_f = 24100000 * exp(0 * tc[0] - 0.50321666580472 * (3970) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3970) * invT2;
  // reverse
  phi_r = sc[11] * sc[13];
  Kc = exp(g_RT[9] - g_RT[11] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[14]) + (h_RT[11] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[11] += q; // OH
  wdot[13] += q; // H2O
  wdot[14] -= q; // H2O2
  // d()/d[H]
  dqdci = +k_f * sc[14];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  J[364] += dqdci; // dwdot[H2O]/d[H]
  J[365] -= dqdci; // dwdot[H2O2]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[13];
  J[438] -= dqdci; // dwdot[H]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[443] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[11];
  J[516] -= dqdci; // dwdot[H]/d[H2O]
  J[518] += dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[521] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[9];
  J[555] -= dqdci; // dwdot[H]/d[H2O2]
  J[557] += dqdci; // dwdot[OH]/d[H2O2]
  J[559] += dqdci; // dwdot[H2O]/d[H2O2]
  J[560] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1496] -= dqdT; // dwdot[H2O2]/dT

  // reaction 27: H2O2 + OH <=> H2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[14];
  k_f = 2.67e+35 * exp(-7 * tc[0] - 0.50321666580472 * (37600) * invT);
  dlnkfdT = -7 * invT + 0.50321666580472 * (37600) * invT2;
  // reverse
  phi_r = sc[12] * sc[13];
  Kc = exp(g_RT[11] - g_RT[12] - g_RT[13] + g_RT[14]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[14]) + (h_RT[12] + h_RT[13]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[12] += q; // HO2
  wdot[13] += q; // H2O
  wdot[14] -= q; // H2O2
  // d()/d[OH]
  dqdci = +k_f * sc[14];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[441] += dqdci; // dwdot[HO2]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[443] -= dqdci; // dwdot[H2O2]/d[OH]
  // d()/d[HO2]
  dqdci = -k_r * sc[13];
  J[479] -= dqdci; // dwdot[OH]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[481] += dqdci; // dwdot[H2O]/d[HO2]
  J[482] -= dqdci; // dwdot[H2O2]/d[HO2]
  // d()/d[H2O]
  dqdci = -k_r * sc[12];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[519] += dqdci; // dwdot[HO2]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[521] -= dqdci; // dwdot[H2O2]/d[H2O]
  // d()/d[H2O2]
  dqdci = +k_f * sc[11];
  J[557] -= dqdci; // dwdot[OH]/d[H2O2]
  J[558] += dqdci; // dwdot[HO2]/d[H2O2]
  J[559] += dqdci; // dwdot[H2O]/d[H2O2]
  J[560] -= dqdci; // dwdot[H2O2]/d[H2O2]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1496] -= dqdT; // dwdot[H2O2]/dT

  // reaction 29: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[22];
  k_f = 0.07046 * exp(2.053 * tc[0] - 0.50321666580472 * (-355.67) * invT);
  dlnkfdT = 2.053 * invT + 0.50321666580472 * (-355.67) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(-g_RT[9] + g_RT[11] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[22]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[22] -= q; // CO
  wdot[23] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[373] -= dqdci; // dwdot[CO]/d[H]
  J[374] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[451] -= dqdci; // dwdot[CO]/d[OH]
  J[452] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[11];
  J[867] += dqdci; // dwdot[H]/d[CO]
  J[869] -= dqdci; // dwdot[OH]/d[CO]
  J[880] -= dqdci; // dwdot[CO]/d[CO]
  J[881] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[9];
  J[906] += dqdci; // dwdot[H]/d[CO2]
  J[908] -= dqdci; // dwdot[OH]/d[CO2]
  J[919] -= dqdci; // dwdot[CO]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 30: CO + OH <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[22];
  k_f = 5757000 * exp(-0.664 * tc[0] - 0.50321666580472 * (331.83) * invT);
  dlnkfdT = -0.664 * invT + 0.50321666580472 * (331.83) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(-g_RT[9] + g_RT[11] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[22]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[22] -= q; // CO
  wdot[23] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[373] -= dqdci; // dwdot[CO]/d[H]
  J[374] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[22];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[451] -= dqdci; // dwdot[CO]/d[OH]
  J[452] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[CO]
  dqdci = +k_f * sc[11];
  J[867] += dqdci; // dwdot[H]/d[CO]
  J[869] -= dqdci; // dwdot[OH]/d[CO]
  J[880] -= dqdci; // dwdot[CO]/d[CO]
  J[881] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[9];
  J[906] += dqdci; // dwdot[H]/d[CO2]
  J[908] -= dqdci; // dwdot[OH]/d[CO2]
  J[919] -= dqdci; // dwdot[CO]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 31: CO + O2 <=> CO2 + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[22];
  k_f = 1119000 * exp(0 * tc[0] - 0.50321666580472 * (47700) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (47700) * invT2;
  // reverse
  phi_r = sc[10] * sc[23];
  Kc = exp(-g_RT[10] + g_RT[15] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[22]) + (h_RT[10] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // O
  wdot[15] -= q; // O2
  wdot[22] -= q; // CO
  wdot[23] += q; // CO2
  // d()/d[O]
  dqdci = -k_r * sc[23];
  J[400] += dqdci; // dwdot[O]/d[O]
  J[405] -= dqdci; // dwdot[O2]/d[O]
  J[412] -= dqdci; // dwdot[CO]/d[O]
  J[413] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[22];
  J[595] += dqdci; // dwdot[O]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[607] -= dqdci; // dwdot[CO]/d[O2]
  J[608] += dqdci; // dwdot[CO2]/d[O2]
  // d()/d[CO]
  dqdci = +k_f * sc[15];
  J[868] += dqdci; // dwdot[O]/d[CO]
  J[873] -= dqdci; // dwdot[O2]/d[CO]
  J[880] -= dqdci; // dwdot[CO]/d[CO]
  J[881] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[10];
  J[907] += dqdci; // dwdot[O]/d[CO2]
  J[912] -= dqdci; // dwdot[O2]/d[CO2]
  J[919] -= dqdci; // dwdot[CO]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1492] += dqdT; // dwdot[O]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 32: CO + HO2 <=> CO2 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[22];
  k_f = 0.157 * exp(2.18 * tc[0] - 0.50321666580472 * (17942.61) * invT);
  dlnkfdT = 2.18 * invT + 0.50321666580472 * (17942.61) * invT2;
  // reverse
  phi_r = sc[11] * sc[23];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[22] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[22]) + (h_RT[11] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[22] -= q; // CO
  wdot[23] += q; // CO2
  // d()/d[OH]
  dqdci = -k_r * sc[23];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[451] -= dqdci; // dwdot[CO]/d[OH]
  J[452] += dqdci; // dwdot[CO2]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[22];
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[490] -= dqdci; // dwdot[CO]/d[HO2]
  J[491] += dqdci; // dwdot[CO2]/d[HO2]
  // d()/d[CO]
  dqdci = +k_f * sc[12];
  J[869] += dqdci; // dwdot[OH]/d[CO]
  J[870] -= dqdci; // dwdot[HO2]/d[CO]
  J[880] -= dqdci; // dwdot[CO]/d[CO]
  J[881] += dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = -k_r * sc[11];
  J[908] += dqdci; // dwdot[OH]/d[CO2]
  J[909] -= dqdci; // dwdot[HO2]/d[CO2]
  J[919] -= dqdci; // dwdot[CO]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1504] -= dqdT; // dwdot[CO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 33: H + HCO <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[19];
  k_f = 120000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[22];
  Kc = exp(-g_RT[3] + g_RT[9] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[19]) + (h_RT[3] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[136] -= dqdci; // dwdot[HCO]/d[H2]
  J[139] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[19];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[370] -= dqdci; // dwdot[HCO]/d[H]
  J[373] += dqdci; // dwdot[CO]/d[H]
  // d()/d[HCO]
  dqdci = +k_f * sc[9];
  J[744] += dqdci; // dwdot[H2]/d[HCO]
  J[750] -= dqdci; // dwdot[H]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[3];
  J[861] += dqdci; // dwdot[H2]/d[CO]
  J[867] -= dqdci; // dwdot[H]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 34: HCO + O <=> CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[19];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[22];
  Kc = exp(g_RT[10] - g_RT[11] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[19]) + (h_RT[11] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[409] -= dqdci; // dwdot[HCO]/d[O]
  J[412] += dqdci; // dwdot[CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[22];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[448] -= dqdci; // dwdot[HCO]/d[OH]
  J[451] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[HCO]
  dqdci = +k_f * sc[10];
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[752] += dqdci; // dwdot[OH]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[11];
  J[868] -= dqdci; // dwdot[O]/d[CO]
  J[869] += dqdci; // dwdot[OH]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 35: HCO + O <=> CO2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[19];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[23];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[19] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[19]) + (h_RT[9] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[19] -= q; // HCO
  wdot[23] += q; // CO2
  // d()/d[H]
  dqdci = -k_r * sc[23];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[370] -= dqdci; // dwdot[HCO]/d[H]
  J[374] += dqdci; // dwdot[CO2]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[19];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[409] -= dqdci; // dwdot[HCO]/d[O]
  J[413] += dqdci; // dwdot[CO2]/d[O]
  // d()/d[HCO]
  dqdci = +k_f * sc[10];
  J[750] += dqdci; // dwdot[H]/d[HCO]
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[764] += dqdci; // dwdot[CO2]/d[HCO]
  // d()/d[CO2]
  dqdci = -k_r * sc[9];
  J[906] += dqdci; // dwdot[H]/d[CO2]
  J[907] -= dqdci; // dwdot[O]/d[CO2]
  J[916] -= dqdci; // dwdot[HCO]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT

  // reaction 36: HCO + OH <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[19];
  k_f = 30200000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[22];
  Kc = exp(g_RT[11] - g_RT[13] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[19]) + (h_RT[13] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[OH]
  dqdci = +k_f * sc[19];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[448] -= dqdci; // dwdot[HCO]/d[OH]
  J[451] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[526] -= dqdci; // dwdot[HCO]/d[H2O]
  J[529] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[HCO]
  dqdci = +k_f * sc[11];
  J[752] -= dqdci; // dwdot[OH]/d[HCO]
  J[754] += dqdci; // dwdot[H2O]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[13];
  J[869] -= dqdci; // dwdot[OH]/d[CO]
  J[871] += dqdci; // dwdot[H2O]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 39: HCO + O2 <=> CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[19];
  k_f = 12040 * exp(0.807 * tc[0] - 0.50321666580472 * (-727) * invT);
  dlnkfdT = 0.807 * invT + 0.50321666580472 * (-727) * invT2;
  // reverse
  phi_r = sc[12] * sc[22];
  Kc = exp(-g_RT[12] + g_RT[15] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[19]) + (h_RT[12] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[HO2]
  dqdci = -k_r * sc[22];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[487] -= dqdci; // dwdot[HCO]/d[HO2]
  J[490] += dqdci; // dwdot[CO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[19];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[604] -= dqdci; // dwdot[HCO]/d[O2]
  J[607] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[HCO]
  dqdci = +k_f * sc[15];
  J[753] += dqdci; // dwdot[HO2]/d[HCO]
  J[756] -= dqdci; // dwdot[O2]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[12];
  J[870] += dqdci; // dwdot[HO2]/d[CO]
  J[873] -= dqdci; // dwdot[O2]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 43: CH2 + O <=> H + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[16];
  k_f = 80000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[19];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[16] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[16]) + (h_RT[9] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[16] -= q; // CH2
  wdot[19] += q; // HCO
  // d()/d[H]
  dqdci = -k_r * sc[19];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[367] -= dqdci; // dwdot[CH2]/d[H]
  J[370] += dqdci; // dwdot[HCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[16];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[406] -= dqdci; // dwdot[CH2]/d[O]
  J[409] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH2]
  dqdci = +k_f * sc[10];
  J[633] += dqdci; // dwdot[H]/d[CH2]
  J[634] -= dqdci; // dwdot[O]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[643] += dqdci; // dwdot[HCO]/d[CH2]
  // d()/d[HCO]
  dqdci = -k_r * sc[9];
  J[750] += dqdci; // dwdot[H]/d[HCO]
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[757] -= dqdci; // dwdot[CH2]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT

  // reaction 44: CH2 + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[16];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[20];
  Kc = exp(-g_RT[9] + g_RT[11] + g_RT[16] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[16]) + (h_RT[9] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[16] -= q; // CH2
  wdot[20] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[20];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[367] -= dqdci; // dwdot[CH2]/d[H]
  J[371] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[16];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[445] -= dqdci; // dwdot[CH2]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2]
  dqdci = +k_f * sc[11];
  J[633] += dqdci; // dwdot[H]/d[CH2]
  J[635] -= dqdci; // dwdot[OH]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[644] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[9];
  J[789] += dqdci; // dwdot[H]/d[CH2O]
  J[791] -= dqdci; // dwdot[OH]/d[CH2O]
  J[796] -= dqdci; // dwdot[CH2]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 45: CH2 + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[16];
  k_f = 0.5 * exp(2 * tc[0] - 0.50321666580472 * (7230) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (7230) * invT2;
  // reverse
  phi_r = sc[9] * sc[18];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[16] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[16]) + (h_RT[9] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[9] += q;  // H
  wdot[16] -= q; // CH2
  wdot[18] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[16];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[133] -= dqdci; // dwdot[CH2]/d[H2]
  J[135] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[367] -= dqdci; // dwdot[CH2]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[3];
  J[627] -= dqdci; // dwdot[H2]/d[CH2]
  J[633] += dqdci; // dwdot[H]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[642] += dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = -k_r * sc[9];
  J[705] -= dqdci; // dwdot[H2]/d[CH3]
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[718] -= dqdci; // dwdot[CH2]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 46: CH2 + O2 <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[16];
  k_f = 10600000 * exp(0 * tc[0] - 0.50321666580472 * (1500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1500) * invT2;
  // reverse
  phi_r = sc[11] * sc[19];
  Kc = exp(-g_RT[11] + g_RT[15] + g_RT[16] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[16]) + (h_RT[11] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[15] -= q; // O2
  wdot[16] -= q; // CH2
  wdot[19] += q; // HCO
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[444] -= dqdci; // dwdot[O2]/d[OH]
  J[445] -= dqdci; // dwdot[CH2]/d[OH]
  J[448] += dqdci; // dwdot[HCO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[596] += dqdci; // dwdot[OH]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[601] -= dqdci; // dwdot[CH2]/d[O2]
  J[604] += dqdci; // dwdot[HCO]/d[O2]
  // d()/d[CH2]
  dqdci = +k_f * sc[15];
  J[635] += dqdci; // dwdot[OH]/d[CH2]
  J[639] -= dqdci; // dwdot[O2]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[643] += dqdci; // dwdot[HCO]/d[CH2]
  // d()/d[HCO]
  dqdci = -k_r * sc[11];
  J[752] += dqdci; // dwdot[OH]/d[HCO]
  J[756] -= dqdci; // dwdot[O2]/d[HCO]
  J[757] -= dqdci; // dwdot[CH2]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT

  // reaction 47: CH2 + O2 <=> CO2 + 2 H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[16];
  k_f = 2640000 * exp(0 * tc[0] - 0.50321666580472 * (1500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1500) * invT2;
  // reverse
  phi_r = (sc[9] * sc[9]) * sc[23];
  Kc = refC * exp(-2.000000 * g_RT[9] + g_RT[15] + g_RT[16] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[16]) + (2.000000 * h_RT[9] + h_RT[23]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += 2 * q; // H
  wdot[15] -= q;    // O2
  wdot[16] -= q;    // CH2
  wdot[23] += q;    // CO2
  // d()/d[H]
  dqdci = -k_r * 2.000000 * sc[9] * sc[23];
  J[360] += 2 * dqdci; // dwdot[H]/d[H]
  J[366] -= dqdci;     // dwdot[O2]/d[H]
  J[367] -= dqdci;     // dwdot[CH2]/d[H]
  J[374] += dqdci;     // dwdot[CO2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[16];
  J[594] += 2 * dqdci; // dwdot[H]/d[O2]
  J[600] -= dqdci;     // dwdot[O2]/d[O2]
  J[601] -= dqdci;     // dwdot[CH2]/d[O2]
  J[608] += dqdci;     // dwdot[CO2]/d[O2]
  // d()/d[CH2]
  dqdci = +k_f * sc[15];
  J[633] += 2 * dqdci; // dwdot[H]/d[CH2]
  J[639] -= dqdci;     // dwdot[O2]/d[CH2]
  J[640] -= dqdci;     // dwdot[CH2]/d[CH2]
  J[647] += dqdci;     // dwdot[CO2]/d[CH2]
  // d()/d[CO2]
  dqdci = -k_r * pow(sc[9], 2.000000);
  J[906] += 2 * dqdci; // dwdot[H]/d[CO2]
  J[912] -= dqdci;     // dwdot[O2]/d[CO2]
  J[913] -= dqdci;     // dwdot[CH2]/d[CO2]
  J[920] += dqdci;     // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1491] += 2 * dqdT; // dwdot[H]/dT
  J[1497] -= dqdT;     // dwdot[O2]/dT
  J[1498] -= dqdT;     // dwdot[CH2]/dT
  J[1505] += dqdT;     // dwdot[CO2]/dT

  // reaction 49: CH2* + N2 <=> CH2 + N2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[37];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (600) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (600) * invT2;
  // reverse
  phi_r = sc[16] * sc[37];
  Kc = exp(-g_RT[16] + g_RT[17] + g_RT[37] - g_RT[37]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[37]) + (h_RT[16] + h_RT[37]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // CH2
  wdot[17] -= q; // CH2*
  // d()/d[CH2]
  dqdci = -k_r * sc[37];
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[641] -= dqdci; // dwdot[CH2*]/d[CH2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[37];
  J[679] += dqdci; // dwdot[CH2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  // d()/d[N2]
  dqdci = +k_f * sc[17] - k_r * sc[16];
  J[1459] += dqdci; // dwdot[CH2]/d[N2]
  J[1460] -= dqdci; // dwdot[CH2*]/d[N2]
  // d()/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT

  // reaction 50: CH2* + O <=> CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[17];
  k_f = 15000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[22];
  Kc = exp(-g_RT[3] + g_RT[10] + g_RT[17] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[17]) + (h_RT[3] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[10] -= q; // O
  wdot[17] -= q; // CH2*
  wdot[22] += q; // CO
  // d()/d[H2]
  dqdci = -k_r * sc[22];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[127] -= dqdci; // dwdot[O]/d[H2]
  J[134] -= dqdci; // dwdot[CH2*]/d[H2]
  J[139] += dqdci; // dwdot[CO]/d[H2]
  // d()/d[O]
  dqdci = +k_f * sc[17];
  J[393] += dqdci; // dwdot[H2]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[407] -= dqdci; // dwdot[CH2*]/d[O]
  J[412] += dqdci; // dwdot[CO]/d[O]
  // d()/d[CH2*]
  dqdci = +k_f * sc[10];
  J[666] += dqdci; // dwdot[H2]/d[CH2*]
  J[673] -= dqdci; // dwdot[O]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[685] += dqdci; // dwdot[CO]/d[CH2*]
  // d()/d[CO]
  dqdci = -k_r * sc[3];
  J[861] += dqdci; // dwdot[H2]/d[CO]
  J[868] -= dqdci; // dwdot[O]/d[CO]
  J[875] -= dqdci; // dwdot[CH2*]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 51: CH2* + OH <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[17];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[20];
  Kc = exp(-g_RT[9] + g_RT[11] + g_RT[17] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[17]) + (h_RT[9] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[17] -= q; // CH2*
  wdot[20] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[20];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[368] -= dqdci; // dwdot[CH2*]/d[H]
  J[371] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[17];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[446] -= dqdci; // dwdot[CH2*]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[CH2*]
  dqdci = +k_f * sc[11];
  J[672] += dqdci; // dwdot[H]/d[CH2*]
  J[674] -= dqdci; // dwdot[OH]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[683] += dqdci; // dwdot[CH2O]/d[CH2*]
  // d()/d[CH2O]
  dqdci = -k_r * sc[9];
  J[789] += dqdci; // dwdot[H]/d[CH2O]
  J[791] -= dqdci; // dwdot[OH]/d[CH2O]
  J[797] -= dqdci; // dwdot[CH2*]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 52: CH2* + H2 <=> CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[17];
  k_f = 70000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[18];
  Kc = exp(g_RT[3] - g_RT[9] + g_RT[17] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[17]) + (h_RT[9] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[9] += q;  // H
  wdot[17] -= q; // CH2*
  wdot[18] += q; // CH3
  // d()/d[H2]
  dqdci = +k_f * sc[17];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[134] -= dqdci; // dwdot[CH2*]/d[H2]
  J[135] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = -k_r * sc[18];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[368] -= dqdci; // dwdot[CH2*]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2*]
  dqdci = +k_f * sc[3];
  J[666] -= dqdci; // dwdot[H2]/d[CH2*]
  J[672] += dqdci; // dwdot[H]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[681] += dqdci; // dwdot[CH3]/d[CH2*]
  // d()/d[CH3]
  dqdci = -k_r * sc[9];
  J[705] -= dqdci; // dwdot[H2]/d[CH3]
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[719] -= dqdci; // dwdot[CH2*]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 53: CH2* + O2 <=> CO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[17];
  k_f = 28000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[11] * sc[22];
  Kc = refC * exp(-g_RT[9] - g_RT[11] + g_RT[15] + g_RT[17] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[17]) + (h_RT[9] + h_RT[11] + h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] += q; // OH
  wdot[15] -= q; // O2
  wdot[17] -= q; // CH2*
  wdot[22] += q; // CO
  // d()/d[H]
  dqdci = -k_r * sc[11] * sc[22];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  J[366] -= dqdci; // dwdot[O2]/d[H]
  J[368] -= dqdci; // dwdot[CH2*]/d[H]
  J[373] += dqdci; // dwdot[CO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[9] * sc[22];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[444] -= dqdci; // dwdot[O2]/d[OH]
  J[446] -= dqdci; // dwdot[CH2*]/d[OH]
  J[451] += dqdci; // dwdot[CO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[594] += dqdci; // dwdot[H]/d[O2]
  J[596] += dqdci; // dwdot[OH]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[602] -= dqdci; // dwdot[CH2*]/d[O2]
  J[607] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[15];
  J[672] += dqdci; // dwdot[H]/d[CH2*]
  J[674] += dqdci; // dwdot[OH]/d[CH2*]
  J[678] -= dqdci; // dwdot[O2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[685] += dqdci; // dwdot[CO]/d[CH2*]
  // d()/d[CO]
  dqdci = -k_r * sc[9] * sc[11];
  J[867] += dqdci; // dwdot[H]/d[CO]
  J[869] += dqdci; // dwdot[OH]/d[CO]
  J[873] -= dqdci; // dwdot[O2]/d[CO]
  J[875] -= dqdci; // dwdot[CH2*]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 54: CH2* + O2 <=> CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[17];
  k_f = 12000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[22];
  Kc = exp(-g_RT[13] + g_RT[15] + g_RT[17] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[17]) + (h_RT[13] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[13] += q; // H2O
  wdot[15] -= q; // O2
  wdot[17] -= q; // CH2*
  wdot[22] += q; // CO
  // d()/d[H2O]
  dqdci = -k_r * sc[22];
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[522] -= dqdci; // dwdot[O2]/d[H2O]
  J[524] -= dqdci; // dwdot[CH2*]/d[H2O]
  J[529] += dqdci; // dwdot[CO]/d[H2O]
  // d()/d[O2]
  dqdci = +k_f * sc[17];
  J[598] += dqdci; // dwdot[H2O]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[602] -= dqdci; // dwdot[CH2*]/d[O2]
  J[607] += dqdci; // dwdot[CO]/d[O2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[15];
  J[676] += dqdci; // dwdot[H2O]/d[CH2*]
  J[678] -= dqdci; // dwdot[O2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[685] += dqdci; // dwdot[CO]/d[CH2*]
  // d()/d[CO]
  dqdci = -k_r * sc[13];
  J[871] += dqdci; // dwdot[H2O]/d[CO]
  J[873] -= dqdci; // dwdot[O2]/d[CO]
  J[875] -= dqdci; // dwdot[CH2*]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 55: CH2* + H2O <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[13] * sc[17];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[16];
  Kc = exp(g_RT[13] - g_RT[13] - g_RT[16] + g_RT[17]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[13] + h_RT[17]) + (h_RT[13] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // CH2
  wdot[17] -= q; // CH2*
  // d()/d[H2O]
  dqdci = +k_f * sc[17] - k_r * sc[16];
  J[523] += dqdci; // dwdot[CH2]/d[H2O]
  J[524] -= dqdci; // dwdot[CH2*]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[13];
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[641] -= dqdci; // dwdot[CH2*]/d[CH2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[13];
  J[679] += dqdci; // dwdot[CH2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  // d()/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT

  // reaction 56: CH2* + CO <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[22];
  k_f = 9000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[16] * sc[22];
  Kc = exp(-g_RT[16] + g_RT[17] + g_RT[22] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[22]) + (h_RT[16] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // CH2
  wdot[17] -= q; // CH2*
  // d()/d[CH2]
  dqdci = -k_r * sc[22];
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[641] -= dqdci; // dwdot[CH2*]/d[CH2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[22];
  J[679] += dqdci; // dwdot[CH2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  // d()/d[CO]
  dqdci = +k_f * sc[17] - k_r * sc[16];
  J[874] += dqdci; // dwdot[CH2]/d[CO]
  J[875] -= dqdci; // dwdot[CH2*]/d[CO]
  // d()/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT

  // reaction 57: CH2* + CO2 <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[23];
  k_f = 7000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[16] * sc[23];
  Kc = exp(-g_RT[16] + g_RT[17] + g_RT[23] - g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[23]) + (h_RT[16] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] += q; // CH2
  wdot[17] -= q; // CH2*
  // d()/d[CH2]
  dqdci = -k_r * sc[23];
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[641] -= dqdci; // dwdot[CH2*]/d[CH2]
  // d()/d[CH2*]
  dqdci = +k_f * sc[23];
  J[679] += dqdci; // dwdot[CH2]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  // d()/d[CO2]
  dqdci = +k_f * sc[17] - k_r * sc[16];
  J[913] += dqdci; // dwdot[CH2]/d[CO2]
  J[914] -= dqdci; // dwdot[CH2*]/d[CO2]
  // d()/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT

  // reaction 58: CH2* + CO2 <=> CH2O + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[17] * sc[23];
  k_f = 14000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[20] * sc[22];
  Kc = exp(g_RT[17] - g_RT[20] - g_RT[22] + g_RT[23]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[17] + h_RT[23]) + (h_RT[20] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[17] -= q; // CH2*
  wdot[20] += q; // CH2O
  wdot[22] += q; // CO
  wdot[23] -= q; // CO2
  // d()/d[CH2*]
  dqdci = +k_f * sc[23];
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[683] += dqdci; // dwdot[CH2O]/d[CH2*]
  J[685] += dqdci; // dwdot[CO]/d[CH2*]
  J[686] -= dqdci; // dwdot[CO2]/d[CH2*]
  // d()/d[CH2O]
  dqdci = -k_r * sc[22];
  J[797] -= dqdci; // dwdot[CH2*]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[802] += dqdci; // dwdot[CO]/d[CH2O]
  J[803] -= dqdci; // dwdot[CO2]/d[CH2O]
  // d()/d[CO]
  dqdci = -k_r * sc[20];
  J[875] -= dqdci; // dwdot[CH2*]/d[CO]
  J[878] += dqdci; // dwdot[CH2O]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[881] -= dqdci; // dwdot[CO2]/d[CO]
  // d()/d[CO2]
  dqdci = +k_f * sc[17];
  J[914] -= dqdci; // dwdot[CH2*]/d[CO2]
  J[917] += dqdci; // dwdot[CH2O]/d[CO2]
  J[919] += dqdci; // dwdot[CO]/d[CO2]
  J[920] -= dqdci; // dwdot[CO2]/d[CO2]
  // d()/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1505] -= dqdT; // dwdot[CO2]/dT

  // reaction 60: CH2O + H <=> H2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[20];
  k_f = 23000 * exp(1.05 * tc[0] - 0.50321666580472 * (3275) * invT);
  dlnkfdT = 1.05 * invT + 0.50321666580472 * (3275) * invT2;
  // reverse
  phi_r = sc[3] * sc[19];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[20]) + (h_RT[3] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[H2]
  dqdci = -k_r * sc[19];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[136] += dqdci; // dwdot[HCO]/d[H2]
  J[137] -= dqdci; // dwdot[CH2O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[20];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[370] += dqdci; // dwdot[HCO]/d[H]
  J[371] -= dqdci; // dwdot[CH2O]/d[H]
  // d()/d[HCO]
  dqdci = -k_r * sc[3];
  J[744] += dqdci; // dwdot[H2]/d[HCO]
  J[750] -= dqdci; // dwdot[H]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[9];
  J[783] += dqdci; // dwdot[H2]/d[CH2O]
  J[789] -= dqdci; // dwdot[H]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 61: CH2O + O <=> HCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[20];
  k_f = 39000000 * exp(0 * tc[0] - 0.50321666580472 * (3540) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (3540) * invT2;
  // reverse
  phi_r = sc[11] * sc[19];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[20]) + (h_RT[11] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[O]
  dqdci = +k_f * sc[20];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[409] += dqdci; // dwdot[HCO]/d[O]
  J[410] -= dqdci; // dwdot[CH2O]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[19];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[448] += dqdci; // dwdot[HCO]/d[OH]
  J[449] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[HCO]
  dqdci = -k_r * sc[11];
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[752] += dqdci; // dwdot[OH]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[10];
  J[790] -= dqdci; // dwdot[O]/d[CH2O]
  J[791] += dqdci; // dwdot[OH]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 62: CH2O + OH <=> H2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[20];
  k_f = 3430 * exp(1.18 * tc[0] - 0.50321666580472 * (-447) * invT);
  dlnkfdT = 1.18 * invT + 0.50321666580472 * (-447) * invT2;
  // reverse
  phi_r = sc[13] * sc[19];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[20]) + (h_RT[13] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[OH]
  dqdci = +k_f * sc[20];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[448] += dqdci; // dwdot[HCO]/d[OH]
  J[449] -= dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[19];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[526] += dqdci; // dwdot[HCO]/d[H2O]
  J[527] -= dqdci; // dwdot[CH2O]/d[H2O]
  // d()/d[HCO]
  dqdci = -k_r * sc[13];
  J[752] -= dqdci; // dwdot[OH]/d[HCO]
  J[754] += dqdci; // dwdot[H2O]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[11];
  J[791] -= dqdci; // dwdot[OH]/d[CH2O]
  J[793] += dqdci; // dwdot[H2O]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 63: CH2O + O2 <=> HCO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[20];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (40000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (40000) * invT2;
  // reverse
  phi_r = sc[12] * sc[19];
  Kc = exp(-g_RT[12] + g_RT[15] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[20]) + (h_RT[12] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[HO2]
  dqdci = -k_r * sc[19];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[487] += dqdci; // dwdot[HCO]/d[HO2]
  J[488] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[20];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[604] += dqdci; // dwdot[HCO]/d[O2]
  J[605] -= dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[12];
  J[753] += dqdci; // dwdot[HO2]/d[HCO]
  J[756] -= dqdci; // dwdot[O2]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[15];
  J[792] += dqdci; // dwdot[HO2]/d[CH2O]
  J[795] -= dqdci; // dwdot[O2]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 64: CH2O + HO2 <=> H2O2 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[20];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[14] * sc[19];
  Kc = exp(g_RT[12] - g_RT[14] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[20]) + (h_RT[14] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] -= q; // HO2
  wdot[14] += q; // H2O2
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[HO2]
  dqdci = +k_f * sc[20];
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[482] += dqdci; // dwdot[H2O2]/d[HO2]
  J[487] += dqdci; // dwdot[HCO]/d[HO2]
  J[488] -= dqdci; // dwdot[CH2O]/d[HO2]
  // d()/d[H2O2]
  dqdci = -k_r * sc[19];
  J[558] -= dqdci; // dwdot[HO2]/d[H2O2]
  J[560] += dqdci; // dwdot[H2O2]/d[H2O2]
  J[565] += dqdci; // dwdot[HCO]/d[H2O2]
  J[566] -= dqdci; // dwdot[CH2O]/d[H2O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[14];
  J[753] -= dqdci; // dwdot[HO2]/d[HCO]
  J[755] += dqdci; // dwdot[H2O2]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[12];
  J[792] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[794] += dqdci; // dwdot[H2O2]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1496] += dqdT; // dwdot[H2O2]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 66: CH3 + O <=> CH2O + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[18];
  k_f = 84300000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[20];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[18]) + (h_RT[9] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[18] -= q; // CH3
  wdot[20] += q; // CH2O
  // d()/d[H]
  dqdci = -k_r * sc[20];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[369] -= dqdci; // dwdot[CH3]/d[H]
  J[371] += dqdci; // dwdot[CH2O]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[18];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[408] -= dqdci; // dwdot[CH3]/d[O]
  J[410] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH3]
  dqdci = +k_f * sc[10];
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[722] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[9];
  J[789] += dqdci; // dwdot[H]/d[CH2O]
  J[790] -= dqdci; // dwdot[O]/d[CH2O]
  J[798] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 67: CH3 + OH <=> CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 56 * exp(1.6 * tc[0] - 0.50321666580472 * (5420) * invT);
  dlnkfdT = 1.6 * invT + 0.50321666580472 * (5420) * invT2;
  // reverse
  phi_r = sc[13] * sc[16];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[16] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[13] + h_RT[16]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[16] += q; // CH2
  wdot[18] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[445] += dqdci; // dwdot[CH2]/d[OH]
  J[447] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[16];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[523] += dqdci; // dwdot[CH2]/d[H2O]
  J[525] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2]
  dqdci = -k_r * sc[13];
  J[635] -= dqdci; // dwdot[OH]/d[CH2]
  J[637] += dqdci; // dwdot[H2O]/d[CH2]
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[642] -= dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[11];
  J[713] -= dqdci; // dwdot[OH]/d[CH3]
  J[715] += dqdci; // dwdot[H2O]/d[CH3]
  J[718] += dqdci; // dwdot[CH2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 68: CH3 + OH <=> CH2* + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[18];
  k_f = 25010000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[17];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[17] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[18]) + (h_RT[13] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[17] += q; // CH2*
  wdot[18] -= q; // CH3
  // d()/d[OH]
  dqdci = +k_f * sc[18];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[446] += dqdci; // dwdot[CH2*]/d[OH]
  J[447] -= dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[524] += dqdci; // dwdot[CH2*]/d[H2O]
  J[525] -= dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH2*]
  dqdci = -k_r * sc[13];
  J[674] -= dqdci; // dwdot[OH]/d[CH2*]
  J[676] += dqdci; // dwdot[H2O]/d[CH2*]
  J[680] += dqdci; // dwdot[CH2*]/d[CH2*]
  J[681] -= dqdci; // dwdot[CH3]/d[CH2*]
  // d()/d[CH3]
  dqdci = +k_f * sc[11];
  J[713] -= dqdci; // dwdot[OH]/d[CH3]
  J[715] += dqdci; // dwdot[H2O]/d[CH3]
  J[719] += dqdci; // dwdot[CH2*]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1499] += dqdT; // dwdot[CH2*]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 69: CH3 + O2 <=> CH3O + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[18];
  k_f = 30830000 * exp(0 * tc[0] - 0.50321666580472 * (28800) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (28800) * invT2;
  // reverse
  phi_r = sc[10] * sc[21];
  Kc = exp(-g_RT[10] + g_RT[15] + g_RT[18] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[18]) + (h_RT[10] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // O
  wdot[15] -= q; // O2
  wdot[18] -= q; // CH3
  wdot[21] += q; // CH3O
  // d()/d[O]
  dqdci = -k_r * sc[21];
  J[400] += dqdci; // dwdot[O]/d[O]
  J[405] -= dqdci; // dwdot[O2]/d[O]
  J[408] -= dqdci; // dwdot[CH3]/d[O]
  J[411] += dqdci; // dwdot[CH3O]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[595] += dqdci; // dwdot[O]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[603] -= dqdci; // dwdot[CH3]/d[O2]
  J[606] += dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[15];
  J[712] += dqdci; // dwdot[O]/d[CH3]
  J[717] -= dqdci; // dwdot[O2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[723] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[10];
  J[829] += dqdci; // dwdot[O]/d[CH3O]
  J[834] -= dqdci; // dwdot[O2]/d[CH3O]
  J[837] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[840] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1492] += dqdT; // dwdot[O]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1503] += dqdT; // dwdot[CH3O]/dT

  // reaction 70: CH3 + O2 <=> CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[18];
  k_f = 36000 * exp(0 * tc[0] - 0.50321666580472 * (8940) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8940) * invT2;
  // reverse
  phi_r = sc[11] * sc[20];
  Kc = exp(-g_RT[11] + g_RT[15] + g_RT[18] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[18]) + (h_RT[11] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[15] -= q; // O2
  wdot[18] -= q; // CH3
  wdot[20] += q; // CH2O
  // d()/d[OH]
  dqdci = -k_r * sc[20];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[444] -= dqdci; // dwdot[O2]/d[OH]
  J[447] -= dqdci; // dwdot[CH3]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[18];
  J[596] += dqdci; // dwdot[OH]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[603] -= dqdci; // dwdot[CH3]/d[O2]
  J[605] += dqdci; // dwdot[CH2O]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[15];
  J[713] += dqdci; // dwdot[OH]/d[CH3]
  J[717] -= dqdci; // dwdot[O2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[722] += dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[11];
  J[791] += dqdci; // dwdot[OH]/d[CH2O]
  J[795] -= dqdci; // dwdot[O2]/d[CH2O]
  J[798] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 71: CH3 + HO2 <=> CH4 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[18];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[2] * sc[15];
  Kc = exp(-g_RT[2] + g_RT[12] - g_RT[15] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[18]) + (h_RT[2] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[12] -= q; // HO2
  wdot[15] += q; // O2
  wdot[18] -= q; // CH3
  // d()/d[CH4]
  dqdci = -k_r * sc[15];
  J[80] += dqdci; // dwdot[CH4]/d[CH4]
  J[90] -= dqdci; // dwdot[HO2]/d[CH4]
  J[93] += dqdci; // dwdot[O2]/d[CH4]
  J[96] -= dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[470] += dqdci; // dwdot[CH4]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  J[486] -= dqdci; // dwdot[CH3]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[2];
  J[587] += dqdci; // dwdot[CH4]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  J[603] -= dqdci; // dwdot[CH3]/d[O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[12];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[714] -= dqdci; // dwdot[HO2]/d[CH3]
  J[717] += dqdci; // dwdot[O2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1497] += dqdT; // dwdot[O2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 72: CH3 + HO2 <=> CH3O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[18];
  k_f = 13400000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[21];
  Kc = exp(-g_RT[11] + g_RT[12] + g_RT[18] - g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[18]) + (h_RT[11] + h_RT[21]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[18] -= q; // CH3
  wdot[21] += q; // CH3O
  // d()/d[OH]
  dqdci = -k_r * sc[21];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[447] -= dqdci; // dwdot[CH3]/d[OH]
  J[450] += dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[18];
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[486] -= dqdci; // dwdot[CH3]/d[HO2]
  J[489] += dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[CH3]
  dqdci = +k_f * sc[12];
  J[713] += dqdci; // dwdot[OH]/d[CH3]
  J[714] -= dqdci; // dwdot[HO2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[723] += dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = -k_r * sc[11];
  J[830] += dqdci; // dwdot[OH]/d[CH3O]
  J[831] -= dqdci; // dwdot[HO2]/d[CH3O]
  J[837] -= dqdci; // dwdot[CH3]/d[CH3O]
  J[840] += dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1503] += dqdT; // dwdot[CH3O]/dT

  // reaction 73: CH3 + H2O2 <=> CH4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[18];
  k_f = 0.0245 * exp(2.47 * tc[0] - 0.50321666580472 * (5180) * invT);
  dlnkfdT = 2.47 * invT + 0.50321666580472 * (5180) * invT2;
  // reverse
  phi_r = sc[2] * sc[12];
  Kc = exp(-g_RT[2] - g_RT[12] + g_RT[14] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[18]) + (h_RT[2] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[12] += q; // HO2
  wdot[14] -= q; // H2O2
  wdot[18] -= q; // CH3
  // d()/d[CH4]
  dqdci = -k_r * sc[12];
  J[80] += dqdci; // dwdot[CH4]/d[CH4]
  J[90] += dqdci; // dwdot[HO2]/d[CH4]
  J[92] -= dqdci; // dwdot[H2O2]/d[CH4]
  J[96] -= dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[HO2]
  dqdci = -k_r * sc[2];
  J[470] += dqdci; // dwdot[CH4]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[482] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[486] -= dqdci; // dwdot[CH3]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[18];
  J[548] += dqdci; // dwdot[CH4]/d[H2O2]
  J[558] += dqdci; // dwdot[HO2]/d[H2O2]
  J[560] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[564] -= dqdci; // dwdot[CH3]/d[H2O2]
  // d()/d[CH3]
  dqdci = +k_f * sc[14];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[714] += dqdci; // dwdot[HO2]/d[CH3]
  J[716] -= dqdci; // dwdot[H2O2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1496] -= dqdT; // dwdot[H2O2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 74: CH3 + HCO <=> CH4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[19];
  k_f = 8480000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[2] * sc[22];
  Kc = exp(-g_RT[2] + g_RT[18] + g_RT[19] - g_RT[22]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[19]) + (h_RT[2] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[18] -= q; // CH3
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  // d()/d[CH4]
  dqdci = -k_r * sc[22];
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[97] -= dqdci;  // dwdot[HCO]/d[CH4]
  J[100] += dqdci; // dwdot[CO]/d[CH4]
  // d()/d[CH3]
  dqdci = +k_f * sc[19];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[721] -= dqdci; // dwdot[HCO]/d[CH3]
  J[724] += dqdci; // dwdot[CO]/d[CH3]
  // d()/d[HCO]
  dqdci = +k_f * sc[18];
  J[743] += dqdci; // dwdot[CH4]/d[HCO]
  J[759] -= dqdci; // dwdot[CH3]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[2];
  J[860] += dqdci; // dwdot[CH4]/d[CO]
  J[876] -= dqdci; // dwdot[CH3]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT

  // reaction 75: CH2O + CH3 <=> CH4 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[20];
  k_f = 0.00332 * exp(2.81 * tc[0] - 0.50321666580472 * (5860) * invT);
  dlnkfdT = 2.81 * invT + 0.50321666580472 * (5860) * invT2;
  // reverse
  phi_r = sc[2] * sc[19];
  Kc = exp(-g_RT[2] + g_RT[18] - g_RT[19] + g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[20]) + (h_RT[2] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[18] -= q; // CH3
  wdot[19] += q; // HCO
  wdot[20] -= q; // CH2O
  // d()/d[CH4]
  dqdci = -k_r * sc[19];
  J[80] += dqdci; // dwdot[CH4]/d[CH4]
  J[96] -= dqdci; // dwdot[CH3]/d[CH4]
  J[97] += dqdci; // dwdot[HCO]/d[CH4]
  J[98] -= dqdci; // dwdot[CH2O]/d[CH4]
  // d()/d[CH3]
  dqdci = +k_f * sc[20];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[721] += dqdci; // dwdot[HCO]/d[CH3]
  J[722] -= dqdci; // dwdot[CH2O]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[2];
  J[743] += dqdci; // dwdot[CH4]/d[HCO]
  J[759] -= dqdci; // dwdot[CH3]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] -= dqdci; // dwdot[CH2O]/d[HCO]
  // d()/d[CH2O]
  dqdci = +k_f * sc[18];
  J[782] += dqdci; // dwdot[CH4]/d[CH2O]
  J[798] -= dqdci; // dwdot[CH3]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] -= dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] -= dqdT; // dwdot[CH2O]/dT

  // reaction 76: CH2 + CH3 <=> C2H4 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[18];
  k_f = 40000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[9];
  Kc = exp(-g_RT[1] - g_RT[9] + g_RT[16] + g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[18]) + (h_RT[1] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[9] += q;  // H
  wdot[16] -= q; // CH2
  wdot[18] -= q; // CH3
  // d()/d[C2H4]
  dqdci = -k_r * sc[9];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[48] += dqdci; // dwdot[H]/d[C2H4]
  J[55] -= dqdci; // dwdot[CH2]/d[C2H4]
  J[57] -= dqdci; // dwdot[CH3]/d[C2H4]
  // d()/d[H]
  dqdci = -k_r * sc[1];
  J[352] += dqdci; // dwdot[C2H4]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[367] -= dqdci; // dwdot[CH2]/d[H]
  J[369] -= dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[18];
  J[625] += dqdci; // dwdot[C2H4]/d[CH2]
  J[633] += dqdci; // dwdot[H]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[642] -= dqdci; // dwdot[CH3]/d[CH2]
  // d()/d[CH3]
  dqdci = +k_f * sc[16];
  J[703] += dqdci; // dwdot[C2H4]/d[CH3]
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[718] -= dqdci; // dwdot[CH2]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT

  // reaction 78: 2 CH3 <=> C2H5 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = (sc[18] * sc[18]);
  k_f = 4990000 * exp(0.1 * tc[0] - 0.50321666580472 * (10600) * invT);
  dlnkfdT = 0.1 * invT + 0.50321666580472 * (10600) * invT2;
  // reverse
  phi_r = sc[9] * sc[26];
  Kc = exp(-g_RT[9] + 2.000000 * g_RT[18] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(2.000000 * h_RT[18]) + (h_RT[9] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;      // H
  wdot[18] -= 2 * q; // CH3
  wdot[26] += q;     // C2H5
  // d()/d[H]
  dqdci = -k_r * sc[26];
  J[360] += dqdci;      // dwdot[H]/d[H]
  J[369] += -2 * dqdci; // dwdot[CH3]/d[H]
  J[377] += dqdci;      // dwdot[C2H5]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * 2.000000 * sc[18];
  J[711] += dqdci;      // dwdot[H]/d[CH3]
  J[720] += -2 * dqdci; // dwdot[CH3]/d[CH3]
  J[728] += dqdci;      // dwdot[C2H5]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[9];
  J[1023] += dqdci;      // dwdot[H]/d[C2H5]
  J[1032] += -2 * dqdci; // dwdot[CH3]/d[C2H5]
  J[1040] += dqdci;      // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1491] += dqdT;      // dwdot[H]/dT
  J[1500] += -2 * dqdT; // dwdot[CH3]/dT
  J[1508] += dqdT;      // dwdot[C2H5]/dT

  // reaction 79: CH3 + HCCO <=> C2H4 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[28];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[22];
  Kc = exp(-g_RT[1] + g_RT[18] - g_RT[22] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[28]) + (h_RT[1] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[18] -= q; // CH3
  wdot[22] += q; // CO
  wdot[28] -= q; // HCCO
  // d()/d[C2H4]
  dqdci = -k_r * sc[22];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[57] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[61] += dqdci; // dwdot[CO]/d[C2H4]
  J[67] -= dqdci; // dwdot[HCCO]/d[C2H4]
  // d()/d[CH3]
  dqdci = +k_f * sc[28];
  J[703] += dqdci; // dwdot[C2H4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[724] += dqdci; // dwdot[CO]/d[CH3]
  J[730] -= dqdci; // dwdot[HCCO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[1];
  J[859] += dqdci; // dwdot[C2H4]/d[CO]
  J[876] -= dqdci; // dwdot[CH3]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[886] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[18];
  J[1093] += dqdci; // dwdot[C2H4]/d[HCCO]
  J[1110] -= dqdci; // dwdot[CH3]/d[HCCO]
  J[1114] += dqdci; // dwdot[CO]/d[HCCO]
  J[1120] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1510] -= dqdT; // dwdot[HCCO]/dT

  // reaction 80: CH3O + H <=> CH2O + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[20];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[20] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[3] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[20] += q; // CH2O
  wdot[21] -= q; // CH3O
  // d()/d[H2]
  dqdci = -k_r * sc[20];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[137] += dqdci; // dwdot[CH2O]/d[H2]
  J[138] -= dqdci; // dwdot[CH3O]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[371] += dqdci; // dwdot[CH2O]/d[H]
  J[372] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[CH2O]
  dqdci = -k_r * sc[3];
  J[783] += dqdci; // dwdot[H2]/d[CH2O]
  J[789] -= dqdci; // dwdot[H]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[801] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[9];
  J[822] += dqdci; // dwdot[H2]/d[CH3O]
  J[828] -= dqdci; // dwdot[H]/d[CH3O]
  J[839] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[840] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1503] -= dqdT; // dwdot[CH3O]/dT

  // reaction 81: CH3O + H <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 32000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(g_RT[9] - g_RT[11] - g_RT[18] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[11] += q; // OH
  wdot[18] += q; // CH3
  wdot[21] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  J[372] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[438] -= dqdci; // dwdot[H]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[447] += dqdci; // dwdot[CH3]/d[OH]
  J[450] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[11];
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[713] += dqdci; // dwdot[OH]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[723] -= dqdci; // dwdot[CH3O]/d[CH3]
  // d()/d[CH3O]
  dqdci = +k_f * sc[9];
  J[828] -= dqdci; // dwdot[H]/d[CH3O]
  J[830] += dqdci; // dwdot[OH]/d[CH3O]
  J[837] += dqdci; // dwdot[CH3]/d[CH3O]
  J[840] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1503] -= dqdT; // dwdot[CH3O]/dT

  // reaction 82: CH3O + H <=> CH2* + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[21];
  k_f = 16000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[17];
  Kc = exp(g_RT[9] - g_RT[13] - g_RT[17] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[21]) + (h_RT[13] + h_RT[17]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[13] += q; // H2O
  wdot[17] += q; // CH2*
  wdot[21] -= q; // CH3O
  // d()/d[H]
  dqdci = +k_f * sc[21];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[364] += dqdci; // dwdot[H2O]/d[H]
  J[368] += dqdci; // dwdot[CH2*]/d[H]
  J[372] -= dqdci; // dwdot[CH3O]/d[H]
  // d()/d[H2O]
  dqdci = -k_r * sc[17];
  J[516] -= dqdci; // dwdot[H]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[524] += dqdci; // dwdot[CH2*]/d[H2O]
  J[528] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2*]
  dqdci = -k_r * sc[13];
  J[672] -= dqdci; // dwdot[H]/d[CH2*]
  J[676] += dqdci; // dwdot[H2O]/d[CH2*]
  J[680] += dqdci; // dwdot[CH2*]/d[CH2*]
  J[684] -= dqdci; // dwdot[CH3O]/d[CH2*]
  // d()/d[CH3O]
  dqdci = +k_f * sc[9];
  J[828] -= dqdci; // dwdot[H]/d[CH3O]
  J[832] += dqdci; // dwdot[H2O]/d[CH3O]
  J[836] += dqdci; // dwdot[CH2*]/d[CH3O]
  J[840] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1499] += dqdT; // dwdot[CH2*]/dT
  J[1503] -= dqdT; // dwdot[CH3O]/dT

  // reaction 83: CH3O + OH <=> CH2O + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[21];
  k_f = 5000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[20];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[20] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[21]) + (h_RT[13] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[20] += q; // CH2O
  wdot[21] -= q; // CH3O
  // d()/d[OH]
  dqdci = +k_f * sc[21];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  J[450] -= dqdci; // dwdot[CH3O]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[20];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[527] += dqdci; // dwdot[CH2O]/d[H2O]
  J[528] -= dqdci; // dwdot[CH3O]/d[H2O]
  // d()/d[CH2O]
  dqdci = -k_r * sc[13];
  J[791] -= dqdci; // dwdot[OH]/d[CH2O]
  J[793] += dqdci; // dwdot[H2O]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[801] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[11];
  J[830] -= dqdci; // dwdot[OH]/d[CH3O]
  J[832] += dqdci; // dwdot[H2O]/d[CH3O]
  J[839] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[840] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1503] -= dqdT; // dwdot[CH3O]/dT

  // reaction 84: CH3O + O2 <=> CH2O + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[21];
  k_f = 4.28e-19 * exp(7.6 * tc[0] - 0.50321666580472 * (-3530) * invT);
  dlnkfdT = 7.6 * invT + 0.50321666580472 * (-3530) * invT2;
  // reverse
  phi_r = sc[12] * sc[20];
  Kc = exp(-g_RT[12] + g_RT[15] - g_RT[20] + g_RT[21]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[21]) + (h_RT[12] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[20] += q; // CH2O
  wdot[21] -= q; // CH3O
  // d()/d[HO2]
  dqdci = -k_r * sc[20];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[488] += dqdci; // dwdot[CH2O]/d[HO2]
  J[489] -= dqdci; // dwdot[CH3O]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[21];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[605] += dqdci; // dwdot[CH2O]/d[O2]
  J[606] -= dqdci; // dwdot[CH3O]/d[O2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[12];
  J[792] += dqdci; // dwdot[HO2]/d[CH2O]
  J[795] -= dqdci; // dwdot[O2]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[801] -= dqdci; // dwdot[CH3O]/d[CH2O]
  // d()/d[CH3O]
  dqdci = +k_f * sc[15];
  J[831] += dqdci; // dwdot[HO2]/d[CH3O]
  J[834] -= dqdci; // dwdot[O2]/d[CH3O]
  J[839] += dqdci; // dwdot[CH2O]/d[CH3O]
  J[840] -= dqdci; // dwdot[CH3O]/d[CH3O]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1503] -= dqdT; // dwdot[CH3O]/dT

  // reaction 85: CH4 + H <=> CH3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[9];
  k_f = 660 * exp(1.62 * tc[0] - 0.50321666580472 * (10840) * invT);
  dlnkfdT = 1.62 * invT + 0.50321666580472 * (10840) * invT2;
  // reverse
  phi_r = sc[3] * sc[18];
  Kc = exp(g_RT[2] - g_RT[3] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[9]) + (h_RT[3] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // CH4
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  // d()/d[CH4]
  dqdci = +k_f * sc[9];
  J[80] -= dqdci; // dwdot[CH4]/d[CH4]
  J[81] += dqdci; // dwdot[H2]/d[CH4]
  J[87] -= dqdci; // dwdot[H]/d[CH4]
  J[96] += dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[H2]
  dqdci = -k_r * sc[18];
  J[119] -= dqdci; // dwdot[CH4]/d[H2]
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[135] += dqdci; // dwdot[CH3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[2];
  J[353] -= dqdci; // dwdot[CH4]/d[H]
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[3];
  J[704] -= dqdci; // dwdot[CH4]/d[CH3]
  J[705] += dqdci; // dwdot[H2]/d[CH3]
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] -= dqdT; // dwdot[CH4]/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 86: CH4 + O <=> CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[10];
  k_f = 1020 * exp(1.5 * tc[0] - 0.50321666580472 * (8600) * invT);
  dlnkfdT = 1.5 * invT + 0.50321666580472 * (8600) * invT2;
  // reverse
  phi_r = sc[11] * sc[18];
  Kc = exp(g_RT[2] + g_RT[10] - g_RT[11] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[10]) + (h_RT[11] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // CH4
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[18] += q; // CH3
  // d()/d[CH4]
  dqdci = +k_f * sc[10];
  J[80] -= dqdci; // dwdot[CH4]/d[CH4]
  J[88] -= dqdci; // dwdot[O]/d[CH4]
  J[89] += dqdci; // dwdot[OH]/d[CH4]
  J[96] += dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[O]
  dqdci = +k_f * sc[2];
  J[392] -= dqdci; // dwdot[CH4]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[408] += dqdci; // dwdot[CH3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[18];
  J[431] -= dqdci; // dwdot[CH4]/d[OH]
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[447] += dqdci; // dwdot[CH3]/d[OH]
  // d()/d[CH3]
  dqdci = -k_r * sc[11];
  J[704] -= dqdci; // dwdot[CH4]/d[CH3]
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[713] += dqdci; // dwdot[OH]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] -= dqdT; // dwdot[CH4]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 87: CH4 + OH <=> CH3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[11];
  k_f = 100 * exp(1.6 * tc[0] - 0.50321666580472 * (3120) * invT);
  dlnkfdT = 1.6 * invT + 0.50321666580472 * (3120) * invT2;
  // reverse
  phi_r = sc[13] * sc[18];
  Kc = exp(g_RT[2] + g_RT[11] - g_RT[13] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[11]) + (h_RT[13] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // CH4
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[18] += q; // CH3
  // d()/d[CH4]
  dqdci = +k_f * sc[11];
  J[80] -= dqdci; // dwdot[CH4]/d[CH4]
  J[89] -= dqdci; // dwdot[OH]/d[CH4]
  J[91] += dqdci; // dwdot[H2O]/d[CH4]
  J[96] += dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[OH]
  dqdci = +k_f * sc[2];
  J[431] -= dqdci; // dwdot[CH4]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[447] += dqdci; // dwdot[CH3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[18];
  J[509] -= dqdci; // dwdot[CH4]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[525] += dqdci; // dwdot[CH3]/d[H2O]
  // d()/d[CH3]
  dqdci = -k_r * sc[13];
  J[704] -= dqdci; // dwdot[CH4]/d[CH3]
  J[713] -= dqdci; // dwdot[OH]/d[CH3]
  J[715] += dqdci; // dwdot[H2O]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] -= dqdT; // dwdot[CH4]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 88: CH2* + CH4 <=> 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[17];
  k_f = 16000000 * exp(0 * tc[0] - 0.50321666580472 * (-570) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (-570) * invT2;
  // reverse
  phi_r = (sc[18] * sc[18]);
  Kc = exp(g_RT[2] + g_RT[17] - 2.000000 * g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (2.000000 * h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;      // CH4
  wdot[17] -= q;     // CH2*
  wdot[18] += 2 * q; // CH3
  // d()/d[CH4]
  dqdci = +k_f * sc[17];
  J[80] -= dqdci;     // dwdot[CH4]/d[CH4]
  J[95] -= dqdci;     // dwdot[CH2*]/d[CH4]
  J[96] += 2 * dqdci; // dwdot[CH3]/d[CH4]
  // d()/d[CH2*]
  dqdci = +k_f * sc[2];
  J[665] -= dqdci;     // dwdot[CH4]/d[CH2*]
  J[680] -= dqdci;     // dwdot[CH2*]/d[CH2*]
  J[681] += 2 * dqdci; // dwdot[CH3]/d[CH2*]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[18];
  J[704] -= dqdci;     // dwdot[CH4]/d[CH3]
  J[719] -= dqdci;     // dwdot[CH2*]/d[CH3]
  J[720] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1484] -= dqdT;     // dwdot[CH4]/dT
  J[1499] -= dqdT;     // dwdot[CH2*]/dT
  J[1500] += 2 * dqdT; // dwdot[CH3]/dT

  // reaction 89: H + HCCO <=> CH2* + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[28];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[17] * sc[22];
  Kc = exp(g_RT[9] - g_RT[17] - g_RT[22] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[28]) + (h_RT[17] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[17] += q; // CH2*
  wdot[22] += q; // CO
  wdot[28] -= q; // HCCO
  // d()/d[H]
  dqdci = +k_f * sc[28];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[368] += dqdci; // dwdot[CH2*]/d[H]
  J[373] += dqdci; // dwdot[CO]/d[H]
  J[379] -= dqdci; // dwdot[HCCO]/d[H]
  // d()/d[CH2*]
  dqdci = -k_r * sc[22];
  J[672] -= dqdci; // dwdot[H]/d[CH2*]
  J[680] += dqdci; // dwdot[CH2*]/d[CH2*]
  J[685] += dqdci; // dwdot[CO]/d[CH2*]
  J[691] -= dqdci; // dwdot[HCCO]/d[CH2*]
  // d()/d[CO]
  dqdci = -k_r * sc[17];
  J[867] -= dqdci; // dwdot[H]/d[CO]
  J[875] += dqdci; // dwdot[CH2*]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[886] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[9];
  J[1101] -= dqdci; // dwdot[H]/d[HCCO]
  J[1109] += dqdci; // dwdot[CH2*]/d[HCCO]
  J[1114] += dqdci; // dwdot[CO]/d[HCCO]
  J[1120] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1499] += dqdT; // dwdot[CH2*]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1510] -= dqdT; // dwdot[HCCO]/dT

  // reaction 90: HCCO + O <=> 2 CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[28];
  k_f = 100000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * (sc[22] * sc[22]);
  Kc = refC * exp(-g_RT[9] + g_RT[10] - 2.000000 * g_RT[22] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[28]) + (h_RT[9] + 2.000000 * h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;      // H
  wdot[10] -= q;     // O
  wdot[22] += 2 * q; // CO
  wdot[28] -= q;     // HCCO
  // d()/d[H]
  dqdci = -k_r * pow(sc[22], 2.000000);
  J[360] += dqdci;     // dwdot[H]/d[H]
  J[361] -= dqdci;     // dwdot[O]/d[H]
  J[373] += 2 * dqdci; // dwdot[CO]/d[H]
  J[379] -= dqdci;     // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[28];
  J[399] += dqdci;     // dwdot[H]/d[O]
  J[400] -= dqdci;     // dwdot[O]/d[O]
  J[412] += 2 * dqdci; // dwdot[CO]/d[O]
  J[418] -= dqdci;     // dwdot[HCCO]/d[O]
  // d()/d[CO]
  dqdci = -k_r * sc[9] * 2.000000 * sc[22];
  J[867] += dqdci;     // dwdot[H]/d[CO]
  J[868] -= dqdci;     // dwdot[O]/d[CO]
  J[880] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[886] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[10];
  J[1101] += dqdci;     // dwdot[H]/d[HCCO]
  J[1102] -= dqdci;     // dwdot[O]/d[HCCO]
  J[1114] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[1120] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1491] += dqdT;     // dwdot[H]/dT
  J[1492] -= dqdT;     // dwdot[O]/dT
  J[1504] += 2 * dqdT; // dwdot[CO]/dT
  J[1510] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 91: HCCO + O2 <=> 2 CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[28];
  k_f = 1600000 * exp(0 * tc[0] - 0.50321666580472 * (854) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (854) * invT2;
  // reverse
  phi_r = sc[11] * (sc[22] * sc[22]);
  Kc = refC * exp(-g_RT[11] + g_RT[15] - 2.000000 * g_RT[22] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[28]) + (h_RT[11] + 2.000000 * h_RT[22]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q;     // OH
  wdot[15] -= q;     // O2
  wdot[22] += 2 * q; // CO
  wdot[28] -= q;     // HCCO
  // d()/d[OH]
  dqdci = -k_r * pow(sc[22], 2.000000);
  J[440] += dqdci;     // dwdot[OH]/d[OH]
  J[444] -= dqdci;     // dwdot[O2]/d[OH]
  J[451] += 2 * dqdci; // dwdot[CO]/d[OH]
  J[457] -= dqdci;     // dwdot[HCCO]/d[OH]
  // d()/d[O2]
  dqdci = +k_f * sc[28];
  J[596] += dqdci;     // dwdot[OH]/d[O2]
  J[600] -= dqdci;     // dwdot[O2]/d[O2]
  J[607] += 2 * dqdci; // dwdot[CO]/d[O2]
  J[613] -= dqdci;     // dwdot[HCCO]/d[O2]
  // d()/d[CO]
  dqdci = -k_r * sc[11] * 2.000000 * sc[22];
  J[869] += dqdci;     // dwdot[OH]/d[CO]
  J[873] -= dqdci;     // dwdot[O2]/d[CO]
  J[880] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[886] -= dqdci;     // dwdot[HCCO]/d[CO]
  // d()/d[HCCO]
  dqdci = +k_f * sc[15];
  J[1103] += dqdci;     // dwdot[OH]/d[HCCO]
  J[1107] -= dqdci;     // dwdot[O2]/d[HCCO]
  J[1114] += 2 * dqdci; // dwdot[CO]/d[HCCO]
  J[1120] -= dqdci;     // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1493] += dqdT;     // dwdot[OH]/dT
  J[1497] -= dqdT;     // dwdot[O2]/dT
  J[1504] += 2 * dqdT; // dwdot[CO]/dT
  J[1510] -= dqdT;     // dwdot[HCCO]/dT

  // reaction 92: CH2 + HCCO <=> C2H3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[16] * sc[28];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[22] * sc[25];
  Kc = exp(g_RT[16] - g_RT[22] - g_RT[25] + g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[16] + h_RT[28]) + (h_RT[22] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[16] -= q; // CH2
  wdot[22] += q; // CO
  wdot[25] += q; // C2H3
  wdot[28] -= q; // HCCO
  // d()/d[CH2]
  dqdci = +k_f * sc[28];
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[646] += dqdci; // dwdot[CO]/d[CH2]
  J[649] += dqdci; // dwdot[C2H3]/d[CH2]
  J[652] -= dqdci; // dwdot[HCCO]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[25];
  J[874] -= dqdci; // dwdot[CH2]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[883] += dqdci; // dwdot[C2H3]/d[CO]
  J[886] -= dqdci; // dwdot[HCCO]/d[CO]
  // d()/d[C2H3]
  dqdci = -k_r * sc[22];
  J[991] -= dqdci;  // dwdot[CH2]/d[C2H3]
  J[997] += dqdci;  // dwdot[CO]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1003] -= dqdci; // dwdot[HCCO]/d[C2H3]
  // d()/d[HCCO]
  dqdci = +k_f * sc[16];
  J[1108] -= dqdci; // dwdot[CH2]/d[HCCO]
  J[1114] += dqdci; // dwdot[CO]/d[HCCO]
  J[1117] += dqdci; // dwdot[C2H3]/d[HCCO]
  J[1120] -= dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT
  J[1510] -= dqdT; // dwdot[HCCO]/dT

  // reaction 94: C2H2 + O <=> CH2 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[24];
  k_f = 4.08 * exp(2 * tc[0] - 0.50321666580472 * (1900) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (1900) * invT2;
  // reverse
  phi_r = sc[16] * sc[22];
  Kc = exp(g_RT[10] - g_RT[16] - g_RT[22] + g_RT[24]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[24]) + (h_RT[16] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[16] += q; // CH2
  wdot[22] += q; // CO
  wdot[24] -= q; // C2H2
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[406] += dqdci; // dwdot[CH2]/d[O]
  J[412] += dqdci; // dwdot[CO]/d[O]
  J[414] -= dqdci; // dwdot[C2H2]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[22];
  J[634] -= dqdci; // dwdot[O]/d[CH2]
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[646] += dqdci; // dwdot[CO]/d[CH2]
  J[648] -= dqdci; // dwdot[C2H2]/d[CH2]
  // d()/d[CO]
  dqdci = -k_r * sc[16];
  J[868] -= dqdci; // dwdot[O]/d[CO]
  J[874] += dqdci; // dwdot[CH2]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[882] -= dqdci; // dwdot[C2H2]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[10];
  J[946] -= dqdci; // dwdot[O]/d[C2H2]
  J[952] += dqdci; // dwdot[CH2]/d[C2H2]
  J[958] += dqdci; // dwdot[CO]/d[C2H2]
  J[960] -= dqdci; // dwdot[C2H2]/d[C2H2]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1506] -= dqdT; // dwdot[C2H2]/dT

  // reaction 95: C2H2 + O <=> H + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[24];
  k_f = 16.32 * exp(2 * tc[0] - 0.50321666580472 * (1900) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (1900) * invT2;
  // reverse
  phi_r = sc[9] * sc[28];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[24] - g_RT[28]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[24]) + (h_RT[9] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[24] -= q; // C2H2
  wdot[28] += q; // HCCO
  // d()/d[H]
  dqdci = -k_r * sc[28];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[375] -= dqdci; // dwdot[C2H2]/d[H]
  J[379] += dqdci; // dwdot[HCCO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[24];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[414] -= dqdci; // dwdot[C2H2]/d[O]
  J[418] += dqdci; // dwdot[HCCO]/d[O]
  // d()/d[C2H2]
  dqdci = +k_f * sc[10];
  J[945] += dqdci; // dwdot[H]/d[C2H2]
  J[946] -= dqdci; // dwdot[O]/d[C2H2]
  J[960] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[964] += dqdci; // dwdot[HCCO]/d[C2H2]
  // d()/d[HCCO]
  dqdci = -k_r * sc[9];
  J[1101] += dqdci; // dwdot[H]/d[HCCO]
  J[1102] -= dqdci; // dwdot[O]/d[HCCO]
  J[1116] -= dqdci; // dwdot[C2H2]/d[HCCO]
  J[1120] += dqdci; // dwdot[HCCO]/d[HCCO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1506] -= dqdT; // dwdot[C2H2]/dT
  J[1510] += dqdT; // dwdot[HCCO]/dT

  // reaction 96: C2H2 + OH <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[24];
  k_f = 2.18e-10 * exp(4.5 * tc[0] - 0.50321666580472 * (-1000) * invT);
  dlnkfdT = 4.5 * invT + 0.50321666580472 * (-1000) * invT2;
  // reverse
  phi_r = sc[9] * sc[29];
  Kc = exp(-g_RT[9] + g_RT[11] + g_RT[24] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[24]) + (h_RT[9] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] -= q; // OH
  wdot[24] -= q; // C2H2
  wdot[29] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] -= dqdci; // dwdot[OH]/d[H]
  J[375] -= dqdci; // dwdot[C2H2]/d[H]
  J[380] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[OH]
  dqdci = +k_f * sc[24];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[453] -= dqdci; // dwdot[C2H2]/d[OH]
  J[458] += dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[C2H2]
  dqdci = +k_f * sc[11];
  J[945] += dqdci; // dwdot[H]/d[C2H2]
  J[947] -= dqdci; // dwdot[OH]/d[C2H2]
  J[960] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[965] += dqdci; // dwdot[CH2CO]/d[C2H2]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[9];
  J[1140] += dqdci; // dwdot[H]/d[CH2CO]
  J[1142] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[1155] -= dqdci; // dwdot[C2H2]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1506] -= dqdT; // dwdot[C2H2]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT

  // reaction 97: C2H2 + HCO <=> C2H3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[24];
  k_f = 10 * exp(2 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (6000) * invT2;
  // reverse
  phi_r = sc[22] * sc[25];
  Kc = exp(g_RT[19] - g_RT[22] + g_RT[24] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[24]) + (h_RT[22] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  wdot[24] -= q; // C2H2
  wdot[25] += q; // C2H3
  // d()/d[HCO]
  dqdci = +k_f * sc[24];
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  J[765] -= dqdci; // dwdot[C2H2]/d[HCO]
  J[766] += dqdci; // dwdot[C2H3]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[25];
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[882] -= dqdci; // dwdot[C2H2]/d[CO]
  J[883] += dqdci; // dwdot[C2H3]/d[CO]
  // d()/d[C2H2]
  dqdci = +k_f * sc[19];
  J[955] -= dqdci; // dwdot[HCO]/d[C2H2]
  J[958] += dqdci; // dwdot[CO]/d[C2H2]
  J[960] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[961] += dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = -k_r * sc[22];
  J[994] -= dqdci;  // dwdot[HCO]/d[C2H3]
  J[997] += dqdci;  // dwdot[CO]/d[C2H3]
  J[999] -= dqdci;  // dwdot[C2H2]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1506] -= dqdT; // dwdot[C2H2]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 98: C2H2 + CH3 <=> aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[24];
  k_f = 4.4e+43 * exp(-11.4 * tc[0] - 0.50321666580472 * (36700) * invT);
  dlnkfdT = -11.4 * invT + 0.50321666580472 * (36700) * invT2;
  // reverse
  phi_r = sc[31];
  Kc = refCinv * exp(g_RT[18] + g_RT[24] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[24]) + (h_RT[31]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] -= q; // CH3
  wdot[24] -= q; // C2H2
  wdot[31] += q; // aC3H5
  // d()/d[CH3]
  dqdci = +k_f * sc[24];
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[726] -= dqdci; // dwdot[C2H2]/d[CH3]
  J[733] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[C2H2]
  dqdci = +k_f * sc[18];
  J[954] -= dqdci; // dwdot[CH3]/d[C2H2]
  J[960] -= dqdci; // dwdot[C2H2]/d[C2H2]
  J[967] += dqdci; // dwdot[aC3H5]/d[C2H2]
  // d()/d[aC3H5]
  dqdci = -k_r;
  J[1227] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[1233] -= dqdci; // dwdot[C2H2]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1506] -= dqdT; // dwdot[C2H2]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 100: CH2CO + H <=> H2 + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[29];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[3] * sc[28];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[29]) + (h_RT[3] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[28] += q; // HCCO
  wdot[29] -= q; // CH2CO
  // d()/d[H2]
  dqdci = -k_r * sc[28];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[145] += dqdci; // dwdot[HCCO]/d[H2]
  J[146] -= dqdci; // dwdot[CH2CO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[379] += dqdci; // dwdot[HCCO]/d[H]
  J[380] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[HCCO]
  dqdci = -k_r * sc[3];
  J[1095] += dqdci; // dwdot[H2]/d[HCCO]
  J[1101] -= dqdci; // dwdot[H]/d[HCCO]
  J[1120] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1121] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[9];
  J[1134] += dqdci; // dwdot[H2]/d[CH2CO]
  J[1140] -= dqdci; // dwdot[H]/d[CH2CO]
  J[1159] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1510] += dqdT; // dwdot[HCCO]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 101: CH2CO + H <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[29];
  k_f = 1500 * exp(1.43 * tc[0] - 0.50321666580472 * (2690) * invT);
  dlnkfdT = 1.43 * invT + 0.50321666580472 * (2690) * invT2;
  // reverse
  phi_r = sc[18] * sc[22];
  Kc = exp(g_RT[9] - g_RT[18] - g_RT[22] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[29]) + (h_RT[18] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  wdot[22] += q; // CO
  wdot[29] -= q; // CH2CO
  // d()/d[H]
  dqdci = +k_f * sc[29];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  J[373] += dqdci; // dwdot[CO]/d[H]
  J[380] -= dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[22];
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[724] += dqdci; // dwdot[CO]/d[CH3]
  J[731] -= dqdci; // dwdot[CH2CO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[18];
  J[867] -= dqdci; // dwdot[H]/d[CO]
  J[876] += dqdci; // dwdot[CH3]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[887] -= dqdci; // dwdot[CH2CO]/d[CO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[9];
  J[1140] -= dqdci; // dwdot[H]/d[CH2CO]
  J[1149] += dqdci; // dwdot[CH3]/d[CH2CO]
  J[1153] += dqdci; // dwdot[CO]/d[CH2CO]
  J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 102: CH2CO + O <=> HCCO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[29];
  k_f = 10000000 * exp(0 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[11] * sc[28];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[29]) + (h_RT[11] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[28] += q; // HCCO
  wdot[29] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[29];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[418] += dqdci; // dwdot[HCCO]/d[O]
  J[419] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[28];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[457] += dqdci; // dwdot[HCCO]/d[OH]
  J[458] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[HCCO]
  dqdci = -k_r * sc[11];
  J[1102] -= dqdci; // dwdot[O]/d[HCCO]
  J[1103] += dqdci; // dwdot[OH]/d[HCCO]
  J[1120] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1121] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[10];
  J[1141] -= dqdci; // dwdot[O]/d[CH2CO]
  J[1142] += dqdci; // dwdot[OH]/d[CH2CO]
  J[1159] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1510] += dqdT; // dwdot[HCCO]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 103: CH2CO + O <=> CH2 + CO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[29];
  k_f = 1750000 * exp(0 * tc[0] - 0.50321666580472 * (1350) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1350) * invT2;
  // reverse
  phi_r = sc[16] * sc[23];
  Kc = exp(g_RT[10] - g_RT[16] - g_RT[23] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[29]) + (h_RT[16] + h_RT[23]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[16] += q; // CH2
  wdot[23] += q; // CO2
  wdot[29] -= q; // CH2CO
  // d()/d[O]
  dqdci = +k_f * sc[29];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[406] += dqdci; // dwdot[CH2]/d[O]
  J[413] += dqdci; // dwdot[CO2]/d[O]
  J[419] -= dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[23];
  J[634] -= dqdci; // dwdot[O]/d[CH2]
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[647] += dqdci; // dwdot[CO2]/d[CH2]
  J[653] -= dqdci; // dwdot[CH2CO]/d[CH2]
  // d()/d[CO2]
  dqdci = -k_r * sc[16];
  J[907] -= dqdci; // dwdot[O]/d[CO2]
  J[913] += dqdci; // dwdot[CH2]/d[CO2]
  J[920] += dqdci; // dwdot[CO2]/d[CO2]
  J[926] -= dqdci; // dwdot[CH2CO]/d[CO2]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[10];
  J[1141] -= dqdci; // dwdot[O]/d[CH2CO]
  J[1147] += dqdci; // dwdot[CH2]/d[CH2CO]
  J[1154] += dqdci; // dwdot[CO2]/d[CH2CO]
  J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1505] += dqdT; // dwdot[CO2]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 104: CH2CO + OH <=> H2O + HCCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[29];
  k_f = 7500000 * exp(0 * tc[0] - 0.50321666580472 * (2000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (2000) * invT2;
  // reverse
  phi_r = sc[13] * sc[28];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[28] + g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[29]) + (h_RT[13] + h_RT[28]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[28] += q; // HCCO
  wdot[29] -= q; // CH2CO
  // d()/d[OH]
  dqdci = +k_f * sc[29];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[457] += dqdci; // dwdot[HCCO]/d[OH]
  J[458] -= dqdci; // dwdot[CH2CO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[28];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[535] += dqdci; // dwdot[HCCO]/d[H2O]
  J[536] -= dqdci; // dwdot[CH2CO]/d[H2O]
  // d()/d[HCCO]
  dqdci = -k_r * sc[13];
  J[1103] -= dqdci; // dwdot[OH]/d[HCCO]
  J[1105] += dqdci; // dwdot[H2O]/d[HCCO]
  J[1120] += dqdci; // dwdot[HCCO]/d[HCCO]
  J[1121] -= dqdci; // dwdot[CH2CO]/d[HCCO]
  // d()/d[CH2CO]
  dqdci = +k_f * sc[11];
  J[1142] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[1144] += dqdci; // dwdot[H2O]/d[CH2CO]
  J[1159] += dqdci; // dwdot[HCCO]/d[CH2CO]
  J[1160] -= dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1510] += dqdT; // dwdot[HCCO]/dT
  J[1511] -= dqdT; // dwdot[CH2CO]/dT

  // reaction 106: C2H3 + H <=> C2H2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[25];
  k_f = 90000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[3] * sc[24];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[25]) + (h_RT[3] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[24] += q; // C2H2
  wdot[25] -= q; // C2H3
  // d()/d[H2]
  dqdci = -k_r * sc[24];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[141] += dqdci; // dwdot[C2H2]/d[H2]
  J[142] -= dqdci; // dwdot[C2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[25];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[375] += dqdci; // dwdot[C2H2]/d[H]
  J[376] -= dqdci; // dwdot[C2H3]/d[H]
  // d()/d[C2H2]
  dqdci = -k_r * sc[3];
  J[939] += dqdci; // dwdot[H2]/d[C2H2]
  J[945] -= dqdci; // dwdot[H]/d[C2H2]
  J[960] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[961] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[9];
  J[978] += dqdci;  // dwdot[H2]/d[C2H3]
  J[984] -= dqdci;  // dwdot[H]/d[C2H3]
  J[999] += dqdci;  // dwdot[C2H2]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1506] += dqdT; // dwdot[C2H2]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 107: C2H3 + O <=> CH2CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[25];
  k_f = 48000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[29];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[25] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[25]) + (h_RT[9] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[25] -= q; // C2H3
  wdot[29] += q; // CH2CO
  // d()/d[H]
  dqdci = -k_r * sc[29];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[376] -= dqdci; // dwdot[C2H3]/d[H]
  J[380] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[415] -= dqdci; // dwdot[C2H3]/d[O]
  J[419] += dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[10];
  J[984] += dqdci;  // dwdot[H]/d[C2H3]
  J[985] -= dqdci;  // dwdot[O]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1004] += dqdci; // dwdot[CH2CO]/d[C2H3]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[9];
  J[1140] += dqdci; // dwdot[H]/d[CH2CO]
  J[1141] -= dqdci; // dwdot[O]/d[CH2CO]
  J[1156] -= dqdci; // dwdot[C2H3]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT

  // reaction 108: C2H3 + O <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[25];
  k_f = 48000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[18] * sc[22];
  Kc = exp(g_RT[10] - g_RT[18] - g_RT[22] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[25]) + (h_RT[18] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[18] += q; // CH3
  wdot[22] += q; // CO
  wdot[25] -= q; // C2H3
  // d()/d[O]
  dqdci = +k_f * sc[25];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[408] += dqdci; // dwdot[CH3]/d[O]
  J[412] += dqdci; // dwdot[CO]/d[O]
  J[415] -= dqdci; // dwdot[C2H3]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[22];
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[724] += dqdci; // dwdot[CO]/d[CH3]
  J[727] -= dqdci; // dwdot[C2H3]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[18];
  J[868] -= dqdci; // dwdot[O]/d[CO]
  J[876] += dqdci; // dwdot[CH3]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[883] -= dqdci; // dwdot[C2H3]/d[CO]
  // d()/d[C2H3]
  dqdci = +k_f * sc[10];
  J[985] -= dqdci;  // dwdot[O]/d[C2H3]
  J[993] += dqdci;  // dwdot[CH3]/d[C2H3]
  J[997] += dqdci;  // dwdot[CO]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 109: C2H3 + OH <=> C2H2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[25];
  k_f = 30110000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[13] * sc[24];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[25]) + (h_RT[13] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[24] += q; // C2H2
  wdot[25] -= q; // C2H3
  // d()/d[OH]
  dqdci = +k_f * sc[25];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[453] += dqdci; // dwdot[C2H2]/d[OH]
  J[454] -= dqdci; // dwdot[C2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[24];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[531] += dqdci; // dwdot[C2H2]/d[H2O]
  J[532] -= dqdci; // dwdot[C2H3]/d[H2O]
  // d()/d[C2H2]
  dqdci = -k_r * sc[13];
  J[947] -= dqdci; // dwdot[OH]/d[C2H2]
  J[949] += dqdci; // dwdot[H2O]/d[C2H2]
  J[960] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[961] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[11];
  J[986] -= dqdci;  // dwdot[OH]/d[C2H3]
  J[988] += dqdci;  // dwdot[H2O]/d[C2H3]
  J[999] += dqdci;  // dwdot[C2H2]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1506] += dqdT; // dwdot[C2H2]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 110: C2H3 + O2 <=> C2H2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[25];
  k_f = 1.34 * exp(1.61 * tc[0] - 0.50321666580472 * (-383.4) * invT);
  dlnkfdT = 1.61 * invT + 0.50321666580472 * (-383.4) * invT2;
  // reverse
  phi_r = sc[12] * sc[24];
  Kc = exp(-g_RT[12] + g_RT[15] - g_RT[24] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[25]) + (h_RT[12] + h_RT[24]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[24] += q; // C2H2
  wdot[25] -= q; // C2H3
  // d()/d[HO2]
  dqdci = -k_r * sc[24];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[492] += dqdci; // dwdot[C2H2]/d[HO2]
  J[493] -= dqdci; // dwdot[C2H3]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[25];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[609] += dqdci; // dwdot[C2H2]/d[O2]
  J[610] -= dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[C2H2]
  dqdci = -k_r * sc[12];
  J[948] += dqdci; // dwdot[HO2]/d[C2H2]
  J[951] -= dqdci; // dwdot[O2]/d[C2H2]
  J[960] += dqdci; // dwdot[C2H2]/d[C2H2]
  J[961] -= dqdci; // dwdot[C2H3]/d[C2H2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[15];
  J[987] += dqdci;  // dwdot[HO2]/d[C2H3]
  J[990] -= dqdci;  // dwdot[O2]/d[C2H3]
  J[999] += dqdci;  // dwdot[C2H2]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1506] += dqdT; // dwdot[C2H2]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 111: C2H3 + O2 <=> CH2CHO + O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[25];
  k_f = 300000 * exp(0.29 * tc[0] - 0.50321666580472 * (11) * invT);
  dlnkfdT = 0.29 * invT + 0.50321666580472 * (11) * invT2;
  // reverse
  phi_r = sc[10] * sc[30];
  Kc = exp(-g_RT[10] + g_RT[15] + g_RT[25] - g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[25]) + (h_RT[10] + h_RT[30]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] += q; // O
  wdot[15] -= q; // O2
  wdot[25] -= q; // C2H3
  wdot[30] += q; // CH2CHO
  // d()/d[O]
  dqdci = -k_r * sc[30];
  J[400] += dqdci; // dwdot[O]/d[O]
  J[405] -= dqdci; // dwdot[O2]/d[O]
  J[415] -= dqdci; // dwdot[C2H3]/d[O]
  J[420] += dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[O2]
  dqdci = +k_f * sc[25];
  J[595] += dqdci; // dwdot[O]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[610] -= dqdci; // dwdot[C2H3]/d[O2]
  J[615] += dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[C2H3]
  dqdci = +k_f * sc[15];
  J[985] += dqdci;  // dwdot[O]/d[C2H3]
  J[990] -= dqdci;  // dwdot[O2]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1005] += dqdci; // dwdot[CH2CHO]/d[C2H3]
  // d()/d[CH2CHO]
  dqdci = -k_r * sc[10];
  J[1180] += dqdci; // dwdot[O]/d[CH2CHO]
  J[1185] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[1195] -= dqdci; // dwdot[C2H3]/d[CH2CHO]
  J[1200] += dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1492] += dqdT; // dwdot[O]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT
  J[1512] += dqdT; // dwdot[CH2CHO]/dT

  // reaction 112: C2H3 + O2 <=> CH2O + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[25];
  k_f = 46000000000 * exp(-1.39 * tc[0] - 0.50321666580472 * (1010) * invT);
  dlnkfdT = -1.39 * invT + 0.50321666580472 * (1010) * invT2;
  // reverse
  phi_r = sc[19] * sc[20];
  Kc = exp(g_RT[15] - g_RT[19] - g_RT[20] + g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[25]) + (h_RT[19] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[15] -= q; // O2
  wdot[19] += q; // HCO
  wdot[20] += q; // CH2O
  wdot[25] -= q; // C2H3
  // d()/d[O2]
  dqdci = +k_f * sc[25];
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[604] += dqdci; // dwdot[HCO]/d[O2]
  J[605] += dqdci; // dwdot[CH2O]/d[O2]
  J[610] -= dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[HCO]
  dqdci = -k_r * sc[20];
  J[756] -= dqdci; // dwdot[O2]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[761] += dqdci; // dwdot[CH2O]/d[HCO]
  J[766] -= dqdci; // dwdot[C2H3]/d[HCO]
  // d()/d[CH2O]
  dqdci = -k_r * sc[19];
  J[795] -= dqdci; // dwdot[O2]/d[CH2O]
  J[799] += dqdci; // dwdot[HCO]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[805] -= dqdci; // dwdot[C2H3]/d[CH2O]
  // d()/d[C2H3]
  dqdci = +k_f * sc[15];
  J[990] -= dqdci;  // dwdot[O2]/d[C2H3]
  J[994] += dqdci;  // dwdot[HCO]/d[C2H3]
  J[995] += dqdci;  // dwdot[CH2O]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT

  // reaction 114: C2H3 + CH3 <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[25];
  k_f = 1.5e+18 * exp(-2.83 * tc[0] - 0.50321666580472 * (18618) * invT);
  dlnkfdT = -2.83 * invT + 0.50321666580472 * (18618) * invT2;
  // reverse
  phi_r = sc[9] * sc[31];
  Kc = exp(-g_RT[9] + g_RT[18] + g_RT[25] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[25]) + (h_RT[9] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[18] -= q; // CH3
  wdot[25] -= q; // C2H3
  wdot[31] += q; // aC3H5
  // d()/d[H]
  dqdci = -k_r * sc[31];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[369] -= dqdci; // dwdot[CH3]/d[H]
  J[376] -= dqdci; // dwdot[C2H3]/d[H]
  J[382] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[CH3]
  dqdci = +k_f * sc[25];
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[727] -= dqdci; // dwdot[C2H3]/d[CH3]
  J[733] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[C2H3]
  dqdci = +k_f * sc[18];
  J[984] += dqdci;  // dwdot[H]/d[C2H3]
  J[993] -= dqdci;  // dwdot[CH3]/d[C2H3]
  J[1000] -= dqdci; // dwdot[C2H3]/d[C2H3]
  J[1006] += dqdci; // dwdot[aC3H5]/d[C2H3]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[9];
  J[1218] += dqdci; // dwdot[H]/d[aC3H5]
  J[1227] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[1234] -= dqdci; // dwdot[C2H3]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1507] -= dqdT; // dwdot[C2H3]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 115: CH2CHO <=> CH3 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[30];
  k_f = 1.2e+37 * exp(-7.456 * tc[0] - 0.50321666580472 * (46100) * invT);
  dlnkfdT = -7.456 * invT + 0.50321666580472 * (46100) * invT2;
  // reverse
  phi_r = sc[18] * sc[22];
  Kc = refC * exp(-g_RT[18] - g_RT[22] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[30]) + (h_RT[18] + h_RT[22]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[18] += q; // CH3
  wdot[22] += q; // CO
  wdot[30] -= q; // CH2CHO
  // d()/d[CH3]
  dqdci = -k_r * sc[22];
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[724] += dqdci; // dwdot[CO]/d[CH3]
  J[732] -= dqdci; // dwdot[CH2CHO]/d[CH3]
  // d()/d[CO]
  dqdci = -k_r * sc[18];
  J[876] += dqdci; // dwdot[CH3]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[888] -= dqdci; // dwdot[CH2CHO]/d[CO]
  // d()/d[CH2CHO]
  dqdci = +k_f;
  J[1188] += dqdci; // dwdot[CH3]/d[CH2CHO]
  J[1192] += dqdci; // dwdot[CO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 116: CH2CHO + H <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[30];
  k_f = 90000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[18] * sc[19];
  Kc = exp(g_RT[9] - g_RT[18] - g_RT[19] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[30]) + (h_RT[18] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  wdot[19] += q; // HCO
  wdot[30] -= q; // CH2CHO
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  J[370] += dqdci; // dwdot[HCO]/d[H]
  J[381] -= dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[19];
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[721] += dqdci; // dwdot[HCO]/d[CH3]
  J[732] -= dqdci; // dwdot[CH2CHO]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[18];
  J[750] -= dqdci; // dwdot[H]/d[HCO]
  J[759] += dqdci; // dwdot[CH3]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[771] -= dqdci; // dwdot[CH2CHO]/d[HCO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[9];
  J[1179] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[1188] += dqdci; // dwdot[CH3]/d[CH2CHO]
  J[1189] += dqdci; // dwdot[HCO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 117: CH2CHO + H <=> CH2CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[30];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (4000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (4000) * invT2;
  // reverse
  phi_r = sc[3] * sc[29];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[29] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[30]) + (h_RT[3] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[29] += q; // CH2CO
  wdot[30] -= q; // CH2CHO
  // d()/d[H2]
  dqdci = -k_r * sc[29];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[146] += dqdci; // dwdot[CH2CO]/d[H2]
  J[147] -= dqdci; // dwdot[CH2CHO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[30];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[380] += dqdci; // dwdot[CH2CO]/d[H]
  J[381] -= dqdci; // dwdot[CH2CHO]/d[H]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[3];
  J[1134] += dqdci; // dwdot[H2]/d[CH2CO]
  J[1140] -= dqdci; // dwdot[H]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[1161] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[9];
  J[1173] += dqdci; // dwdot[H2]/d[CH2CHO]
  J[1179] -= dqdci; // dwdot[H]/d[CH2CHO]
  J[1199] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 118: CH2CHO + O <=> CH2CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[30];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (4000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (4000) * invT2;
  // reverse
  phi_r = sc[11] * sc[29];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[29] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[30]) + (h_RT[11] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[29] += q; // CH2CO
  wdot[30] -= q; // CH2CHO
  // d()/d[O]
  dqdci = +k_f * sc[30];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[419] += dqdci; // dwdot[CH2CO]/d[O]
  J[420] -= dqdci; // dwdot[CH2CHO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[29];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[458] += dqdci; // dwdot[CH2CO]/d[OH]
  J[459] -= dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[11];
  J[1141] -= dqdci; // dwdot[O]/d[CH2CO]
  J[1142] += dqdci; // dwdot[OH]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[1161] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[10];
  J[1180] -= dqdci; // dwdot[O]/d[CH2CHO]
  J[1181] += dqdci; // dwdot[OH]/d[CH2CHO]
  J[1199] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 119: CH2CHO + OH <=> CH2CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[30];
  k_f = 10000000 * exp(0 * tc[0] - 0.50321666580472 * (2000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (2000) * invT2;
  // reverse
  phi_r = sc[13] * sc[29];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[29] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[30]) + (h_RT[13] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[29] += q; // CH2CO
  wdot[30] -= q; // CH2CHO
  // d()/d[OH]
  dqdci = +k_f * sc[30];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[458] += dqdci; // dwdot[CH2CO]/d[OH]
  J[459] -= dqdci; // dwdot[CH2CHO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[29];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[536] += dqdci; // dwdot[CH2CO]/d[H2O]
  J[537] -= dqdci; // dwdot[CH2CHO]/d[H2O]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[13];
  J[1142] -= dqdci; // dwdot[OH]/d[CH2CO]
  J[1144] += dqdci; // dwdot[H2O]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[1161] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[11];
  J[1181] -= dqdci; // dwdot[OH]/d[CH2CHO]
  J[1183] += dqdci; // dwdot[H2O]/d[CH2CHO]
  J[1199] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 120: CH2CHO + O2 <=> CH2CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[30];
  k_f = 140000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[12] * sc[29];
  Kc = exp(-g_RT[12] + g_RT[15] - g_RT[29] + g_RT[30]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[30]) + (h_RT[12] + h_RT[29]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[29] += q; // CH2CO
  wdot[30] -= q; // CH2CHO
  // d()/d[HO2]
  dqdci = -k_r * sc[29];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[497] += dqdci; // dwdot[CH2CO]/d[HO2]
  J[498] -= dqdci; // dwdot[CH2CHO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[30];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[614] += dqdci; // dwdot[CH2CO]/d[O2]
  J[615] -= dqdci; // dwdot[CH2CHO]/d[O2]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[12];
  J[1143] += dqdci; // dwdot[HO2]/d[CH2CO]
  J[1146] -= dqdci; // dwdot[O2]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  J[1161] -= dqdci; // dwdot[CH2CHO]/d[CH2CO]
  // d()/d[CH2CHO]
  dqdci = +k_f * sc[15];
  J[1182] += dqdci; // dwdot[HO2]/d[CH2CHO]
  J[1185] -= dqdci; // dwdot[O2]/d[CH2CHO]
  J[1199] += dqdci; // dwdot[CH2CO]/d[CH2CHO]
  J[1200] -= dqdci; // dwdot[CH2CHO]/d[CH2CHO]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT
  J[1512] -= dqdT; // dwdot[CH2CHO]/dT

  // reaction 122: C2H4 + H <=> C2H3 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[9];
  k_f = 50.7 * exp(1.9 * tc[0] - 0.50321666580472 * (12950) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (12950) * invT2;
  // reverse
  phi_r = sc[3] * sc[25];
  Kc = exp(g_RT[1] - g_RT[3] + g_RT[9] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[9]) + (h_RT[3] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[25] += q; // C2H3
  // d()/d[C2H4]
  dqdci = +k_f * sc[9];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[42] += dqdci; // dwdot[H2]/d[C2H4]
  J[48] -= dqdci; // dwdot[H]/d[C2H4]
  J[64] += dqdci; // dwdot[C2H3]/d[C2H4]
  // d()/d[H2]
  dqdci = -k_r * sc[25];
  J[118] -= dqdci; // dwdot[C2H4]/d[H2]
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[142] += dqdci; // dwdot[C2H3]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[1];
  J[352] -= dqdci; // dwdot[C2H4]/d[H]
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[376] += dqdci; // dwdot[C2H3]/d[H]
  // d()/d[C2H3]
  dqdci = -k_r * sc[3];
  J[976] -= dqdci;  // dwdot[C2H4]/d[C2H3]
  J[978] += dqdci;  // dwdot[H2]/d[C2H3]
  J[984] -= dqdci;  // dwdot[H]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 123: C2H4 + O <=> C2H3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 15.1 * exp(1.9 * tc[0] - 0.50321666580472 * (3740) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (3740) * invT2;
  // reverse
  phi_r = sc[11] * sc[25];
  Kc = exp(g_RT[1] + g_RT[10] - g_RT[11] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[11] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[25] += q; // C2H3
  // d()/d[C2H4]
  dqdci = +k_f * sc[10];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[49] -= dqdci; // dwdot[O]/d[C2H4]
  J[50] += dqdci; // dwdot[OH]/d[C2H4]
  J[64] += dqdci; // dwdot[C2H3]/d[C2H4]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[391] -= dqdci; // dwdot[C2H4]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[415] += dqdci; // dwdot[C2H3]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[25];
  J[430] -= dqdci; // dwdot[C2H4]/d[OH]
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[454] += dqdci; // dwdot[C2H3]/d[OH]
  // d()/d[C2H3]
  dqdci = -k_r * sc[11];
  J[976] -= dqdci;  // dwdot[C2H4]/d[C2H3]
  J[985] -= dqdci;  // dwdot[O]/d[C2H3]
  J[986] += dqdci;  // dwdot[OH]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 124: C2H4 + O <=> CH3 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 19.2 * exp(1.83 * tc[0] - 0.50321666580472 * (220) * invT);
  dlnkfdT = 1.83 * invT + 0.50321666580472 * (220) * invT2;
  // reverse
  phi_r = sc[18] * sc[19];
  Kc = exp(g_RT[1] + g_RT[10] - g_RT[18] - g_RT[19]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[18] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[10] -= q; // O
  wdot[18] += q; // CH3
  wdot[19] += q; // HCO
  // d()/d[C2H4]
  dqdci = +k_f * sc[10];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[49] -= dqdci; // dwdot[O]/d[C2H4]
  J[57] += dqdci; // dwdot[CH3]/d[C2H4]
  J[58] += dqdci; // dwdot[HCO]/d[C2H4]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[391] -= dqdci; // dwdot[C2H4]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[408] += dqdci; // dwdot[CH3]/d[O]
  J[409] += dqdci; // dwdot[HCO]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[19];
  J[703] -= dqdci; // dwdot[C2H4]/d[CH3]
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[721] += dqdci; // dwdot[HCO]/d[CH3]
  // d()/d[HCO]
  dqdci = -k_r * sc[18];
  J[742] -= dqdci; // dwdot[C2H4]/d[HCO]
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[759] += dqdci; // dwdot[CH3]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT

  // reaction 125: C2H4 + O <=> CH2 + CH2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[10];
  k_f = 0.384 * exp(1.83 * tc[0] - 0.50321666580472 * (220) * invT);
  dlnkfdT = 1.83 * invT + 0.50321666580472 * (220) * invT2;
  // reverse
  phi_r = sc[16] * sc[20];
  Kc = exp(g_RT[1] + g_RT[10] - g_RT[16] - g_RT[20]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[10]) + (h_RT[16] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[10] -= q; // O
  wdot[16] += q; // CH2
  wdot[20] += q; // CH2O
  // d()/d[C2H4]
  dqdci = +k_f * sc[10];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[49] -= dqdci; // dwdot[O]/d[C2H4]
  J[55] += dqdci; // dwdot[CH2]/d[C2H4]
  J[59] += dqdci; // dwdot[CH2O]/d[C2H4]
  // d()/d[O]
  dqdci = +k_f * sc[1];
  J[391] -= dqdci; // dwdot[C2H4]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[406] += dqdci; // dwdot[CH2]/d[O]
  J[410] += dqdci; // dwdot[CH2O]/d[O]
  // d()/d[CH2]
  dqdci = -k_r * sc[20];
  J[625] -= dqdci; // dwdot[C2H4]/d[CH2]
  J[634] -= dqdci; // dwdot[O]/d[CH2]
  J[640] += dqdci; // dwdot[CH2]/d[CH2]
  J[644] += dqdci; // dwdot[CH2O]/d[CH2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[16];
  J[781] -= dqdci; // dwdot[C2H4]/d[CH2O]
  J[790] -= dqdci; // dwdot[O]/d[CH2O]
  J[796] += dqdci; // dwdot[CH2]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1498] += dqdT; // dwdot[CH2]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT

  // reaction 126: C2H4 + OH <=> C2H3 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[11];
  k_f = 3.6 * exp(2 * tc[0] - 0.50321666580472 * (2500) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (2500) * invT2;
  // reverse
  phi_r = sc[13] * sc[25];
  Kc = exp(g_RT[1] + g_RT[11] - g_RT[13] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[11]) + (h_RT[13] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[25] += q; // C2H3
  // d()/d[C2H4]
  dqdci = +k_f * sc[11];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[50] -= dqdci; // dwdot[OH]/d[C2H4]
  J[52] += dqdci; // dwdot[H2O]/d[C2H4]
  J[64] += dqdci; // dwdot[C2H3]/d[C2H4]
  // d()/d[OH]
  dqdci = +k_f * sc[1];
  J[430] -= dqdci; // dwdot[C2H4]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[454] += dqdci; // dwdot[C2H3]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[25];
  J[508] -= dqdci; // dwdot[C2H4]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[532] += dqdci; // dwdot[C2H3]/d[H2O]
  // d()/d[C2H3]
  dqdci = -k_r * sc[13];
  J[976] -= dqdci;  // dwdot[C2H4]/d[C2H3]
  J[986] -= dqdci;  // dwdot[OH]/d[C2H3]
  J[988] += dqdci;  // dwdot[H2O]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 127: C2H4 + HCO <=> C2H5 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[19];
  k_f = 10 * exp(2 * tc[0] - 0.50321666580472 * (8000) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (8000) * invT2;
  // reverse
  phi_r = sc[22] * sc[26];
  Kc = exp(g_RT[1] + g_RT[19] - g_RT[22] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[19]) + (h_RT[22] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  wdot[26] += q; // C2H5
  // d()/d[C2H4]
  dqdci = +k_f * sc[19];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[58] -= dqdci; // dwdot[HCO]/d[C2H4]
  J[61] += dqdci; // dwdot[CO]/d[C2H4]
  J[65] += dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[HCO]
  dqdci = +k_f * sc[1];
  J[742] -= dqdci; // dwdot[C2H4]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  J[767] += dqdci; // dwdot[C2H5]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[26];
  J[859] -= dqdci; // dwdot[C2H4]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[884] += dqdci; // dwdot[C2H5]/d[CO]
  // d()/d[C2H5]
  dqdci = -k_r * sc[22];
  J[1015] -= dqdci; // dwdot[C2H4]/d[C2H5]
  J[1033] -= dqdci; // dwdot[HCO]/d[C2H5]
  J[1036] += dqdci; // dwdot[CO]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT

  // reaction 128: C2H4 + CH2 <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[16];
  k_f = 20000000 * exp(0 * tc[0] - 0.50321666580472 * (6000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (6000) * invT2;
  // reverse
  phi_r = sc[9] * sc[31];
  Kc = exp(g_RT[1] - g_RT[9] + g_RT[16] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[16]) + (h_RT[9] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[9] += q;  // H
  wdot[16] -= q; // CH2
  wdot[31] += q; // aC3H5
  // d()/d[C2H4]
  dqdci = +k_f * sc[16];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[48] += dqdci; // dwdot[H]/d[C2H4]
  J[55] -= dqdci; // dwdot[CH2]/d[C2H4]
  J[70] += dqdci; // dwdot[aC3H5]/d[C2H4]
  // d()/d[H]
  dqdci = -k_r * sc[31];
  J[352] -= dqdci; // dwdot[C2H4]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[367] -= dqdci; // dwdot[CH2]/d[H]
  J[382] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[CH2]
  dqdci = +k_f * sc[1];
  J[625] -= dqdci; // dwdot[C2H4]/d[CH2]
  J[633] += dqdci; // dwdot[H]/d[CH2]
  J[640] -= dqdci; // dwdot[CH2]/d[CH2]
  J[655] += dqdci; // dwdot[aC3H5]/d[CH2]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[9];
  J[1210] -= dqdci; // dwdot[C2H4]/d[aC3H5]
  J[1218] += dqdci; // dwdot[H]/d[aC3H5]
  J[1225] -= dqdci; // dwdot[CH2]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1498] -= dqdT; // dwdot[CH2]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 129: C2H4 + CH2* <=> H + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[17];
  k_f = 50000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[31];
  Kc = exp(g_RT[1] - g_RT[9] + g_RT[17] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[17]) + (h_RT[9] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[9] += q;  // H
  wdot[17] -= q; // CH2*
  wdot[31] += q; // aC3H5
  // d()/d[C2H4]
  dqdci = +k_f * sc[17];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[48] += dqdci; // dwdot[H]/d[C2H4]
  J[56] -= dqdci; // dwdot[CH2*]/d[C2H4]
  J[70] += dqdci; // dwdot[aC3H5]/d[C2H4]
  // d()/d[H]
  dqdci = -k_r * sc[31];
  J[352] -= dqdci; // dwdot[C2H4]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[368] -= dqdci; // dwdot[CH2*]/d[H]
  J[382] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[CH2*]
  dqdci = +k_f * sc[1];
  J[664] -= dqdci; // dwdot[C2H4]/d[CH2*]
  J[672] += dqdci; // dwdot[H]/d[CH2*]
  J[680] -= dqdci; // dwdot[CH2*]/d[CH2*]
  J[694] += dqdci; // dwdot[aC3H5]/d[CH2*]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[9];
  J[1210] -= dqdci; // dwdot[C2H4]/d[aC3H5]
  J[1218] += dqdci; // dwdot[H]/d[aC3H5]
  J[1226] -= dqdci; // dwdot[CH2*]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1499] -= dqdT; // dwdot[CH2*]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 130: C2H4 + CH3 <=> C2H3 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[18];
  k_f = 0.227 * exp(2 * tc[0] - 0.50321666580472 * (9200) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (9200) * invT2;
  // reverse
  phi_r = sc[2] * sc[25];
  Kc = exp(g_RT[1] - g_RT[2] + g_RT[18] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[18]) + (h_RT[2] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[2] += q;  // CH4
  wdot[18] -= q; // CH3
  wdot[25] += q; // C2H3
  // d()/d[C2H4]
  dqdci = +k_f * sc[18];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[41] += dqdci; // dwdot[CH4]/d[C2H4]
  J[57] -= dqdci; // dwdot[CH3]/d[C2H4]
  J[64] += dqdci; // dwdot[C2H3]/d[C2H4]
  // d()/d[CH4]
  dqdci = -k_r * sc[25];
  J[79] -= dqdci;  // dwdot[C2H4]/d[CH4]
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[103] += dqdci; // dwdot[C2H3]/d[CH4]
  // d()/d[CH3]
  dqdci = +k_f * sc[1];
  J[703] -= dqdci; // dwdot[C2H4]/d[CH3]
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[727] += dqdci; // dwdot[C2H3]/d[CH3]
  // d()/d[C2H3]
  dqdci = -k_r * sc[2];
  J[976] -= dqdci;  // dwdot[C2H4]/d[C2H3]
  J[977] += dqdci;  // dwdot[CH4]/d[C2H3]
  J[993] -= dqdci;  // dwdot[CH3]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 131: C2H4 + O2 <=> C2H3 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[1] * sc[15];
  k_f = 42200000 * exp(0 * tc[0] - 0.50321666580472 * (60800) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (60800) * invT2;
  // reverse
  phi_r = sc[12] * sc[25];
  Kc = exp(g_RT[1] - g_RT[12] + g_RT[15] - g_RT[25]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[1] + h_RT[15]) + (h_RT[12] + h_RT[25]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] -= q;  // C2H4
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[25] += q; // C2H3
  // d()/d[C2H4]
  dqdci = +k_f * sc[15];
  J[40] -= dqdci; // dwdot[C2H4]/d[C2H4]
  J[51] += dqdci; // dwdot[HO2]/d[C2H4]
  J[54] -= dqdci; // dwdot[O2]/d[C2H4]
  J[64] += dqdci; // dwdot[C2H3]/d[C2H4]
  // d()/d[HO2]
  dqdci = -k_r * sc[25];
  J[469] -= dqdci; // dwdot[C2H4]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[493] += dqdci; // dwdot[C2H3]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[1];
  J[586] -= dqdci; // dwdot[C2H4]/d[O2]
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[610] += dqdci; // dwdot[C2H3]/d[O2]
  // d()/d[C2H3]
  dqdci = -k_r * sc[12];
  J[976] -= dqdci;  // dwdot[C2H4]/d[C2H3]
  J[987] += dqdci;  // dwdot[HO2]/d[C2H3]
  J[990] -= dqdci;  // dwdot[O2]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  // d()/dT
  J[1483] -= dqdT; // dwdot[C2H4]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT

  // reaction 133: C2H5 + H <=> C2H4 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[26];
  k_f = 2000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[3];
  Kc = exp(-g_RT[1] - g_RT[3] + g_RT[9] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[26]) + (h_RT[1] + h_RT[3]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[26] -= q; // C2H5
  // d()/d[C2H4]
  dqdci = -k_r * sc[3];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[42] += dqdci; // dwdot[H2]/d[C2H4]
  J[48] -= dqdci; // dwdot[H]/d[C2H4]
  J[65] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[H2]
  dqdci = -k_r * sc[1];
  J[118] += dqdci; // dwdot[C2H4]/d[H2]
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[143] -= dqdci; // dwdot[C2H5]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[26];
  J[352] += dqdci; // dwdot[C2H4]/d[H]
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[377] -= dqdci; // dwdot[C2H5]/d[H]
  // d()/d[C2H5]
  dqdci = +k_f * sc[9];
  J[1015] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[1017] += dqdci; // dwdot[H2]/d[C2H5]
  J[1023] -= dqdci; // dwdot[H]/d[C2H5]
  J[1040] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT

  // reaction 134: C2H5 + O <=> CH2O + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[26];
  k_f = 16040000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[18] * sc[20];
  Kc = exp(g_RT[10] - g_RT[18] - g_RT[20] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[26]) + (h_RT[18] + h_RT[20]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[18] += q; // CH3
  wdot[20] += q; // CH2O
  wdot[26] -= q; // C2H5
  // d()/d[O]
  dqdci = +k_f * sc[26];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[408] += dqdci; // dwdot[CH3]/d[O]
  J[410] += dqdci; // dwdot[CH2O]/d[O]
  J[416] -= dqdci; // dwdot[C2H5]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[20];
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[722] += dqdci; // dwdot[CH2O]/d[CH3]
  J[728] -= dqdci; // dwdot[C2H5]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[18];
  J[790] -= dqdci; // dwdot[O]/d[CH2O]
  J[798] += dqdci; // dwdot[CH3]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[806] -= dqdci; // dwdot[C2H5]/d[CH2O]
  // d()/d[C2H5]
  dqdci = +k_f * sc[10];
  J[1024] -= dqdci; // dwdot[O]/d[C2H5]
  J[1032] += dqdci; // dwdot[CH3]/d[C2H5]
  J[1034] += dqdci; // dwdot[CH2O]/d[C2H5]
  J[1040] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT

  // reaction 135: C2H5 + O2 <=> C2H4 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[26];
  k_f = 20000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[1] * sc[12];
  Kc = exp(-g_RT[1] - g_RT[12] + g_RT[15] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[26]) + (h_RT[1] + h_RT[12]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[26] -= q; // C2H5
  // d()/d[C2H4]
  dqdci = -k_r * sc[12];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[51] += dqdci; // dwdot[HO2]/d[C2H4]
  J[54] -= dqdci; // dwdot[O2]/d[C2H4]
  J[65] -= dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[HO2]
  dqdci = -k_r * sc[1];
  J[469] += dqdci; // dwdot[C2H4]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[494] -= dqdci; // dwdot[C2H5]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[26];
  J[586] += dqdci; // dwdot[C2H4]/d[O2]
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[611] -= dqdci; // dwdot[C2H5]/d[O2]
  // d()/d[C2H5]
  dqdci = +k_f * sc[15];
  J[1015] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[1026] += dqdci; // dwdot[HO2]/d[C2H5]
  J[1029] -= dqdci; // dwdot[O2]/d[C2H5]
  J[1040] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT

  // reaction 136: C2H5 + HO2 <=> CH2O + CH3 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[26];
  k_f = 24000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[18] * sc[20];
  Kc = refC * exp(-g_RT[11] + g_RT[12] - g_RT[18] - g_RT[20] + g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[26]) + (h_RT[11] + h_RT[18] + h_RT[20]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[18] += q; // CH3
  wdot[20] += q; // CH2O
  wdot[26] -= q; // C2H5
  // d()/d[OH]
  dqdci = -k_r * sc[18] * sc[20];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[447] += dqdci; // dwdot[CH3]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  J[455] -= dqdci; // dwdot[C2H5]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[26];
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[486] += dqdci; // dwdot[CH3]/d[HO2]
  J[488] += dqdci; // dwdot[CH2O]/d[HO2]
  J[494] -= dqdci; // dwdot[C2H5]/d[HO2]
  // d()/d[CH3]
  dqdci = -k_r * sc[11] * sc[20];
  J[713] += dqdci; // dwdot[OH]/d[CH3]
  J[714] -= dqdci; // dwdot[HO2]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[722] += dqdci; // dwdot[CH2O]/d[CH3]
  J[728] -= dqdci; // dwdot[C2H5]/d[CH3]
  // d()/d[CH2O]
  dqdci = -k_r * sc[11] * sc[18];
  J[791] += dqdci; // dwdot[OH]/d[CH2O]
  J[792] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[798] += dqdci; // dwdot[CH3]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[806] -= dqdci; // dwdot[C2H5]/d[CH2O]
  // d()/d[C2H5]
  dqdci = +k_f * sc[12];
  J[1025] += dqdci; // dwdot[OH]/d[C2H5]
  J[1026] -= dqdci; // dwdot[HO2]/d[C2H5]
  J[1032] += dqdci; // dwdot[CH3]/d[C2H5]
  J[1034] += dqdci; // dwdot[CH2O]/d[C2H5]
  J[1040] -= dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1508] -= dqdT; // dwdot[C2H5]/dT

  // reaction 138: C2H6 + H <=> C2H5 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[27];
  k_f = 115 * exp(1.9 * tc[0] - 0.50321666580472 * (7530) * invT);
  dlnkfdT = 1.9 * invT + 0.50321666580472 * (7530) * invT2;
  // reverse
  phi_r = sc[3] * sc[26];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[27]) + (h_RT[3] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[26] += q; // C2H5
  wdot[27] -= q; // C2H6
  // d()/d[H2]
  dqdci = -k_r * sc[26];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[143] += dqdci; // dwdot[C2H5]/d[H2]
  J[144] -= dqdci; // dwdot[C2H6]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[27];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[377] += dqdci; // dwdot[C2H5]/d[H]
  J[378] -= dqdci; // dwdot[C2H6]/d[H]
  // d()/d[C2H5]
  dqdci = -k_r * sc[3];
  J[1017] += dqdci; // dwdot[H2]/d[C2H5]
  J[1023] -= dqdci; // dwdot[H]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1041] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[9];
  J[1056] += dqdci; // dwdot[H2]/d[C2H6]
  J[1062] -= dqdci; // dwdot[H]/d[C2H6]
  J[1079] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1080] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT
  J[1509] -= dqdT; // dwdot[C2H6]/dT

  // reaction 139: C2H6 + O <=> C2H5 + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[27];
  k_f = 89.8 * exp(1.92 * tc[0] - 0.50321666580472 * (5690) * invT);
  dlnkfdT = 1.92 * invT + 0.50321666580472 * (5690) * invT2;
  // reverse
  phi_r = sc[11] * sc[26];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[27]) + (h_RT[11] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[26] += q; // C2H5
  wdot[27] -= q; // C2H6
  // d()/d[O]
  dqdci = +k_f * sc[27];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[416] += dqdci; // dwdot[C2H5]/d[O]
  J[417] -= dqdci; // dwdot[C2H6]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[26];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[455] += dqdci; // dwdot[C2H5]/d[OH]
  J[456] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[C2H5]
  dqdci = -k_r * sc[11];
  J[1024] -= dqdci; // dwdot[O]/d[C2H5]
  J[1025] += dqdci; // dwdot[OH]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1041] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[10];
  J[1063] -= dqdci; // dwdot[O]/d[C2H6]
  J[1064] += dqdci; // dwdot[OH]/d[C2H6]
  J[1079] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1080] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT
  J[1509] -= dqdT; // dwdot[C2H6]/dT

  // reaction 140: C2H6 + OH <=> C2H5 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[27];
  k_f = 3.54 * exp(2.12 * tc[0] - 0.50321666580472 * (870) * invT);
  dlnkfdT = 2.12 * invT + 0.50321666580472 * (870) * invT2;
  // reverse
  phi_r = sc[13] * sc[26];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[27]) + (h_RT[13] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[26] += q; // C2H5
  wdot[27] -= q; // C2H6
  // d()/d[OH]
  dqdci = +k_f * sc[27];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[455] += dqdci; // dwdot[C2H5]/d[OH]
  J[456] -= dqdci; // dwdot[C2H6]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[26];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[533] += dqdci; // dwdot[C2H5]/d[H2O]
  J[534] -= dqdci; // dwdot[C2H6]/d[H2O]
  // d()/d[C2H5]
  dqdci = -k_r * sc[13];
  J[1025] -= dqdci; // dwdot[OH]/d[C2H5]
  J[1027] += dqdci; // dwdot[H2O]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1041] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[11];
  J[1064] -= dqdci; // dwdot[OH]/d[C2H6]
  J[1066] += dqdci; // dwdot[H2O]/d[C2H6]
  J[1079] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1080] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT
  J[1509] -= dqdT; // dwdot[C2H6]/dT

  // reaction 141: C2H6 + CH3 <=> C2H5 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[27];
  k_f = 6.14 * exp(1.74 * tc[0] - 0.50321666580472 * (10450) * invT);
  dlnkfdT = 1.74 * invT + 0.50321666580472 * (10450) * invT2;
  // reverse
  phi_r = sc[2] * sc[26];
  Kc = exp(-g_RT[2] + g_RT[18] - g_RT[26] + g_RT[27]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[27]) + (h_RT[2] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[18] -= q; // CH3
  wdot[26] += q; // C2H5
  wdot[27] -= q; // C2H6
  // d()/d[CH4]
  dqdci = -k_r * sc[26];
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[104] += dqdci; // dwdot[C2H5]/d[CH4]
  J[105] -= dqdci; // dwdot[C2H6]/d[CH4]
  // d()/d[CH3]
  dqdci = +k_f * sc[27];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[728] += dqdci; // dwdot[C2H5]/d[CH3]
  J[729] -= dqdci; // dwdot[C2H6]/d[CH3]
  // d()/d[C2H5]
  dqdci = -k_r * sc[2];
  J[1016] += dqdci; // dwdot[CH4]/d[C2H5]
  J[1032] -= dqdci; // dwdot[CH3]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  J[1041] -= dqdci; // dwdot[C2H6]/d[C2H5]
  // d()/d[C2H6]
  dqdci = +k_f * sc[18];
  J[1055] += dqdci; // dwdot[CH4]/d[C2H6]
  J[1071] -= dqdci; // dwdot[CH3]/d[C2H6]
  J[1079] += dqdci; // dwdot[C2H5]/d[C2H6]
  J[1080] -= dqdci; // dwdot[C2H6]/d[C2H6]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT
  J[1509] -= dqdT; // dwdot[C2H6]/dT

  // reaction 143: HO2 + aC3H5 <=> C3H6 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[31];
  k_f = 2660000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[4] * sc[15];
  Kc = exp(-g_RT[4] + g_RT[12] - g_RT[15] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[31]) + (h_RT[4] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[12] -= q; // HO2
  wdot[15] += q; // O2
  wdot[31] -= q; // aC3H5
  // d()/d[C3H6]
  dqdci = -k_r * sc[15];
  J[160] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[168] -= dqdci; // dwdot[HO2]/d[C3H6]
  J[171] += dqdci; // dwdot[O2]/d[C3H6]
  J[187] -= dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[HO2]
  dqdci = +k_f * sc[31];
  J[472] += dqdci; // dwdot[C3H6]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  J[499] -= dqdci; // dwdot[aC3H5]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[4];
  J[589] += dqdci; // dwdot[C3H6]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  J[616] -= dqdci; // dwdot[aC3H5]/d[O2]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[12];
  J[1213] += dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1221] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[1224] += dqdci; // dwdot[O2]/d[aC3H5]
  J[1240] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1497] += dqdT; // dwdot[O2]/dT
  J[1513] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 144: HO2 + aC3H5 <=> C2H3 + CH2O + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[31];
  k_f = 6600000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[11] * sc[20] * sc[25];
  Kc = refC * exp(-g_RT[11] + g_RT[12] - g_RT[20] - g_RT[25] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[31]) + (h_RT[11] + h_RT[20] + h_RT[25]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[20] += q; // CH2O
  wdot[25] += q; // C2H3
  wdot[31] -= q; // aC3H5
  // d()/d[OH]
  dqdci = -k_r * sc[20] * sc[25];
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[449] += dqdci; // dwdot[CH2O]/d[OH]
  J[454] += dqdci; // dwdot[C2H3]/d[OH]
  J[460] -= dqdci; // dwdot[aC3H5]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[31];
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[488] += dqdci; // dwdot[CH2O]/d[HO2]
  J[493] += dqdci; // dwdot[C2H3]/d[HO2]
  J[499] -= dqdci; // dwdot[aC3H5]/d[HO2]
  // d()/d[CH2O]
  dqdci = -k_r * sc[11] * sc[25];
  J[791] += dqdci; // dwdot[OH]/d[CH2O]
  J[792] -= dqdci; // dwdot[HO2]/d[CH2O]
  J[800] += dqdci; // dwdot[CH2O]/d[CH2O]
  J[805] += dqdci; // dwdot[C2H3]/d[CH2O]
  J[811] -= dqdci; // dwdot[aC3H5]/d[CH2O]
  // d()/d[C2H3]
  dqdci = -k_r * sc[11] * sc[20];
  J[986] += dqdci;  // dwdot[OH]/d[C2H3]
  J[987] -= dqdci;  // dwdot[HO2]/d[C2H3]
  J[995] += dqdci;  // dwdot[CH2O]/d[C2H3]
  J[1000] += dqdci; // dwdot[C2H3]/d[C2H3]
  J[1006] -= dqdci; // dwdot[aC3H5]/d[C2H3]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[12];
  J[1220] += dqdci; // dwdot[OH]/d[aC3H5]
  J[1221] -= dqdci; // dwdot[HO2]/d[aC3H5]
  J[1229] += dqdci; // dwdot[CH2O]/d[aC3H5]
  J[1234] += dqdci; // dwdot[C2H3]/d[aC3H5]
  J[1240] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1502] += dqdT; // dwdot[CH2O]/dT
  J[1507] += dqdT; // dwdot[C2H3]/dT
  J[1513] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 145: HCO + aC3H5 <=> C3H6 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[31];
  k_f = 60000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[4] * sc[22];
  Kc = exp(-g_RT[4] + g_RT[19] - g_RT[22] + g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[31]) + (h_RT[4] + h_RT[22]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[19] -= q; // HCO
  wdot[22] += q; // CO
  wdot[31] -= q; // aC3H5
  // d()/d[C3H6]
  dqdci = -k_r * sc[22];
  J[160] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[175] -= dqdci; // dwdot[HCO]/d[C3H6]
  J[178] += dqdci; // dwdot[CO]/d[C3H6]
  J[187] -= dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[HCO]
  dqdci = +k_f * sc[31];
  J[745] += dqdci; // dwdot[C3H6]/d[HCO]
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[763] += dqdci; // dwdot[CO]/d[HCO]
  J[772] -= dqdci; // dwdot[aC3H5]/d[HCO]
  // d()/d[CO]
  dqdci = -k_r * sc[4];
  J[862] += dqdci; // dwdot[C3H6]/d[CO]
  J[877] -= dqdci; // dwdot[HCO]/d[CO]
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[889] -= dqdci; // dwdot[aC3H5]/d[CO]
  // d()/d[aC3H5]
  dqdci = +k_f * sc[19];
  J[1213] += dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1228] -= dqdci; // dwdot[HCO]/d[aC3H5]
  J[1231] += dqdci; // dwdot[CO]/d[aC3H5]
  J[1240] -= dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1513] -= dqdT; // dwdot[aC3H5]/dT

  // reaction 147: C3H6 + H <=> C2H4 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 3.3e+18 * exp(-3.04 * tc[0] - 0.50321666580472 * (15610) * invT);
  dlnkfdT = -3.04 * invT + 0.50321666580472 * (15610) * invT2;
  // reverse
  phi_r = sc[1] * sc[18];
  Kc = exp(-g_RT[1] + g_RT[4] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[1] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[4] -= q;  // C3H6
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  // d()/d[C2H4]
  dqdci = -k_r * sc[18];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[43] -= dqdci; // dwdot[C3H6]/d[C2H4]
  J[48] -= dqdci; // dwdot[H]/d[C2H4]
  J[57] += dqdci; // dwdot[CH3]/d[C2H4]
  // d()/d[C3H6]
  dqdci = +k_f * sc[9];
  J[157] += dqdci; // dwdot[C2H4]/d[C3H6]
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[165] -= dqdci; // dwdot[H]/d[C3H6]
  J[174] += dqdci; // dwdot[CH3]/d[C3H6]
  // d()/d[H]
  dqdci = +k_f * sc[4];
  J[352] += dqdci; // dwdot[C2H4]/d[H]
  J[355] -= dqdci; // dwdot[C3H6]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[1];
  J[703] += dqdci; // dwdot[C2H4]/d[CH3]
  J[706] -= dqdci; // dwdot[C3H6]/d[CH3]
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 148: C3H6 + H <=> H2 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[9];
  k_f = 0.173 * exp(2.5 * tc[0] - 0.50321666580472 * (2490) * invT);
  dlnkfdT = 2.5 * invT + 0.50321666580472 * (2490) * invT2;
  // reverse
  phi_r = sc[3] * sc[31];
  Kc = exp(-g_RT[3] + g_RT[4] + g_RT[9] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[9]) + (h_RT[3] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[4] -= q;  // C3H6
  wdot[9] -= q;  // H
  wdot[31] += q; // aC3H5
  // d()/d[H2]
  dqdci = -k_r * sc[31];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[121] -= dqdci; // dwdot[C3H6]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[148] += dqdci; // dwdot[aC3H5]/d[H2]
  // d()/d[C3H6]
  dqdci = +k_f * sc[9];
  J[159] += dqdci; // dwdot[H2]/d[C3H6]
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[165] -= dqdci; // dwdot[H]/d[C3H6]
  J[187] += dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[H]
  dqdci = +k_f * sc[4];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[355] -= dqdci; // dwdot[C3H6]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[382] += dqdci; // dwdot[aC3H5]/d[H]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[3];
  J[1212] += dqdci; // dwdot[H2]/d[aC3H5]
  J[1213] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1218] -= dqdci; // dwdot[H]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 149: C3H6 + O <=> CH2CO + CH3 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 80 * exp(1.65 * tc[0] - 0.50321666580472 * (327) * invT);
  dlnkfdT = 1.65 * invT + 0.50321666580472 * (327) * invT2;
  // reverse
  phi_r = sc[9] * sc[18] * sc[29];
  Kc = refC * exp(g_RT[4] - g_RT[9] + g_RT[10] - g_RT[18] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT =
    invT * (-(h_RT[4] + h_RT[10]) + (h_RT[9] + h_RT[18] + h_RT[29]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // C3H6
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[18] += q; // CH3
  wdot[29] += q; // CH2CO
  // d()/d[C3H6]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[165] += dqdci; // dwdot[H]/d[C3H6]
  J[166] -= dqdci; // dwdot[O]/d[C3H6]
  J[174] += dqdci; // dwdot[CH3]/d[C3H6]
  J[185] += dqdci; // dwdot[CH2CO]/d[C3H6]
  // d()/d[H]
  dqdci = -k_r * sc[18] * sc[29];
  J[355] -= dqdci; // dwdot[C3H6]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  J[380] += dqdci; // dwdot[CH2CO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[4];
  J[394] -= dqdci; // dwdot[C3H6]/d[O]
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[408] += dqdci; // dwdot[CH3]/d[O]
  J[419] += dqdci; // dwdot[CH2CO]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * sc[9] * sc[29];
  J[706] -= dqdci; // dwdot[C3H6]/d[CH3]
  J[711] += dqdci; // dwdot[H]/d[CH3]
  J[712] -= dqdci; // dwdot[O]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[731] += dqdci; // dwdot[CH2CO]/d[CH3]
  // d()/d[CH2CO]
  dqdci = -k_r * sc[9] * sc[18];
  J[1135] -= dqdci; // dwdot[C3H6]/d[CH2CO]
  J[1140] += dqdci; // dwdot[H]/d[CH2CO]
  J[1141] -= dqdci; // dwdot[O]/d[CH2CO]
  J[1149] += dqdci; // dwdot[CH3]/d[CH2CO]
  J[1160] += dqdci; // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1511] += dqdT; // dwdot[CH2CO]/dT

  // reaction 150: C3H6 + O <=> C2H5 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 35 * exp(1.65 * tc[0] - 0.50321666580472 * (-972) * invT);
  dlnkfdT = 1.65 * invT + 0.50321666580472 * (-972) * invT2;
  // reverse
  phi_r = sc[19] * sc[26];
  Kc = exp(g_RT[4] + g_RT[10] - g_RT[19] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[19] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // C3H6
  wdot[10] -= q; // O
  wdot[19] += q; // HCO
  wdot[26] += q; // C2H5
  // d()/d[C3H6]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[166] -= dqdci; // dwdot[O]/d[C3H6]
  J[175] += dqdci; // dwdot[HCO]/d[C3H6]
  J[182] += dqdci; // dwdot[C2H5]/d[C3H6]
  // d()/d[O]
  dqdci = +k_f * sc[4];
  J[394] -= dqdci; // dwdot[C3H6]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[409] += dqdci; // dwdot[HCO]/d[O]
  J[416] += dqdci; // dwdot[C2H5]/d[O]
  // d()/d[HCO]
  dqdci = -k_r * sc[26];
  J[745] -= dqdci; // dwdot[C3H6]/d[HCO]
  J[751] -= dqdci; // dwdot[O]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[767] += dqdci; // dwdot[C2H5]/d[HCO]
  // d()/d[C2H5]
  dqdci = -k_r * sc[19];
  J[1018] -= dqdci; // dwdot[C3H6]/d[C2H5]
  J[1024] -= dqdci; // dwdot[O]/d[C2H5]
  J[1033] += dqdci; // dwdot[HCO]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT

  // reaction 151: C3H6 + O <=> OH + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[10];
  k_f = 180000 * exp(0.7 * tc[0] - 0.50321666580472 * (5880) * invT);
  dlnkfdT = 0.7 * invT + 0.50321666580472 * (5880) * invT2;
  // reverse
  phi_r = sc[11] * sc[31];
  Kc = exp(g_RT[4] + g_RT[10] - g_RT[11] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[10]) + (h_RT[11] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // C3H6
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[31] += q; // aC3H5
  // d()/d[C3H6]
  dqdci = +k_f * sc[10];
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[166] -= dqdci; // dwdot[O]/d[C3H6]
  J[167] += dqdci; // dwdot[OH]/d[C3H6]
  J[187] += dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[O]
  dqdci = +k_f * sc[4];
  J[394] -= dqdci; // dwdot[C3H6]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[421] += dqdci; // dwdot[aC3H5]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[31];
  J[433] -= dqdci; // dwdot[C3H6]/d[OH]
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[460] += dqdci; // dwdot[aC3H5]/d[OH]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[11];
  J[1213] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1219] -= dqdci; // dwdot[O]/d[aC3H5]
  J[1220] += dqdci; // dwdot[OH]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 152: C3H6 + OH <=> H2O + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[11];
  k_f = 3.1 * exp(2 * tc[0] - 0.50321666580472 * (-298) * invT);
  dlnkfdT = 2 * invT + 0.50321666580472 * (-298) * invT2;
  // reverse
  phi_r = sc[13] * sc[31];
  Kc = exp(g_RT[4] + g_RT[11] - g_RT[13] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[11]) + (h_RT[13] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] -= q;  // C3H6
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[31] += q; // aC3H5
  // d()/d[C3H6]
  dqdci = +k_f * sc[11];
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[167] -= dqdci; // dwdot[OH]/d[C3H6]
  J[169] += dqdci; // dwdot[H2O]/d[C3H6]
  J[187] += dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[OH]
  dqdci = +k_f * sc[4];
  J[433] -= dqdci; // dwdot[C3H6]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[460] += dqdci; // dwdot[aC3H5]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[31];
  J[511] -= dqdci; // dwdot[C3H6]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[538] += dqdci; // dwdot[aC3H5]/d[H2O]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[13];
  J[1213] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1220] -= dqdci; // dwdot[OH]/d[aC3H5]
  J[1222] += dqdci; // dwdot[H2O]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 153: C3H6 + CH3 <=> CH4 + aC3H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[4] * sc[18];
  k_f = 2.2e-06 * exp(3.5 * tc[0] - 0.50321666580472 * (5675) * invT);
  dlnkfdT = 3.5 * invT + 0.50321666580472 * (5675) * invT2;
  // reverse
  phi_r = sc[2] * sc[31];
  Kc = exp(-g_RT[2] + g_RT[4] + g_RT[18] - g_RT[31]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[4] + h_RT[18]) + (h_RT[2] + h_RT[31]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[4] -= q;  // C3H6
  wdot[18] -= q; // CH3
  wdot[31] += q; // aC3H5
  // d()/d[CH4]
  dqdci = -k_r * sc[31];
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[82] -= dqdci;  // dwdot[C3H6]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[109] += dqdci; // dwdot[aC3H5]/d[CH4]
  // d()/d[C3H6]
  dqdci = +k_f * sc[18];
  J[158] += dqdci; // dwdot[CH4]/d[C3H6]
  J[160] -= dqdci; // dwdot[C3H6]/d[C3H6]
  J[174] -= dqdci; // dwdot[CH3]/d[C3H6]
  J[187] += dqdci; // dwdot[aC3H5]/d[C3H6]
  // d()/d[CH3]
  dqdci = +k_f * sc[4];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[706] -= dqdci; // dwdot[C3H6]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[733] += dqdci; // dwdot[aC3H5]/d[CH3]
  // d()/d[aC3H5]
  dqdci = -k_r * sc[2];
  J[1211] += dqdci; // dwdot[CH4]/d[aC3H5]
  J[1213] -= dqdci; // dwdot[C3H6]/d[aC3H5]
  J[1227] -= dqdci; // dwdot[CH3]/d[aC3H5]
  J[1240] += dqdci; // dwdot[aC3H5]/d[aC3H5]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1486] -= dqdT; // dwdot[C3H6]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1513] += dqdT; // dwdot[aC3H5]/dT

  // reaction 154: C4H81 + H <=> C2H4 + C2H5
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 1.6e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[1] * sc[26];
  Kc = exp(-g_RT[1] + g_RT[5] + g_RT[9] - g_RT[26]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[1] + h_RT[26]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[1] += q;  // C2H4
  wdot[5] -= q;  // C4H81
  wdot[9] -= q;  // H
  wdot[26] += q; // C2H5
  // d()/d[C2H4]
  dqdci = -k_r * sc[26];
  J[40] += dqdci; // dwdot[C2H4]/d[C2H4]
  J[44] -= dqdci; // dwdot[C4H81]/d[C2H4]
  J[48] -= dqdci; // dwdot[H]/d[C2H4]
  J[65] += dqdci; // dwdot[C2H5]/d[C2H4]
  // d()/d[C4H81]
  dqdci = +k_f * sc[9];
  J[196] += dqdci; // dwdot[C2H4]/d[C4H81]
  J[200] -= dqdci; // dwdot[C4H81]/d[C4H81]
  J[204] -= dqdci; // dwdot[H]/d[C4H81]
  J[221] += dqdci; // dwdot[C2H5]/d[C4H81]
  // d()/d[H]
  dqdci = +k_f * sc[5];
  J[352] += dqdci; // dwdot[C2H4]/d[H]
  J[356] -= dqdci; // dwdot[C4H81]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[377] += dqdci; // dwdot[C2H5]/d[H]
  // d()/d[C2H5]
  dqdci = -k_r * sc[1];
  J[1015] += dqdci; // dwdot[C2H4]/d[C2H5]
  J[1019] -= dqdci; // dwdot[C4H81]/d[C2H5]
  J[1023] -= dqdci; // dwdot[H]/d[C2H5]
  J[1040] += dqdci; // dwdot[C2H5]/d[C2H5]
  // d()/dT
  J[1483] += dqdT; // dwdot[C2H4]/dT
  J[1487] -= dqdT; // dwdot[C4H81]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1508] += dqdT; // dwdot[C2H5]/dT

  // reaction 155: C4H81 + H <=> C3H6 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[5] * sc[9];
  k_f = 3.2e+16 * exp(-2.39 * tc[0] - 0.50321666580472 * (11180) * invT);
  dlnkfdT = -2.39 * invT + 0.50321666580472 * (11180) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(-g_RT[4] + g_RT[5] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[5] + h_RT[9]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[5] -= q;  // C4H81
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  // d()/d[C3H6]
  dqdci = -k_r * sc[18];
  J[160] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[161] -= dqdci; // dwdot[C4H81]/d[C3H6]
  J[165] -= dqdci; // dwdot[H]/d[C3H6]
  J[174] += dqdci; // dwdot[CH3]/d[C3H6]
  // d()/d[C4H81]
  dqdci = +k_f * sc[9];
  J[199] += dqdci; // dwdot[C3H6]/d[C4H81]
  J[200] -= dqdci; // dwdot[C4H81]/d[C4H81]
  J[204] -= dqdci; // dwdot[H]/d[C4H81]
  J[213] += dqdci; // dwdot[CH3]/d[C4H81]
  // d()/d[H]
  dqdci = +k_f * sc[5];
  J[355] += dqdci; // dwdot[C3H6]/d[H]
  J[356] -= dqdci; // dwdot[C4H81]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[706] += dqdci; // dwdot[C3H6]/d[CH3]
  J[707] -= dqdci; // dwdot[C4H81]/d[CH3]
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1487] -= dqdT; // dwdot[C4H81]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 156: H + iC4H8 <=> C3H6 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[9];
  k_f = 3.3e+18 * exp(-3.04 * tc[0] - 0.50321666580472 * (15610) * invT);
  dlnkfdT = -3.04 * invT + 0.50321666580472 * (15610) * invT2;
  // reverse
  phi_r = sc[4] * sc[18];
  Kc = exp(-g_RT[4] + g_RT[6] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[9]) + (h_RT[4] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[4] += q;  // C3H6
  wdot[6] -= q;  // iC4H8
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  // d()/d[C3H6]
  dqdci = -k_r * sc[18];
  J[160] += dqdci; // dwdot[C3H6]/d[C3H6]
  J[162] -= dqdci; // dwdot[iC4H8]/d[C3H6]
  J[165] -= dqdci; // dwdot[H]/d[C3H6]
  J[174] += dqdci; // dwdot[CH3]/d[C3H6]
  // d()/d[iC4H8]
  dqdci = +k_f * sc[9];
  J[238] += dqdci; // dwdot[C3H6]/d[iC4H8]
  J[240] -= dqdci; // dwdot[iC4H8]/d[iC4H8]
  J[243] -= dqdci; // dwdot[H]/d[iC4H8]
  J[252] += dqdci; // dwdot[CH3]/d[iC4H8]
  // d()/d[H]
  dqdci = +k_f * sc[6];
  J[355] += dqdci; // dwdot[C3H6]/d[H]
  J[357] -= dqdci; // dwdot[iC4H8]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[4];
  J[706] += dqdci; // dwdot[C3H6]/d[CH3]
  J[708] -= dqdci; // dwdot[iC4H8]/d[CH3]
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1486] += dqdT; // dwdot[C3H6]/dT
  J[1488] -= dqdT; // dwdot[iC4H8]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 157: O + iC4H8 <=> CH2CO + 2 CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[6] * sc[10];
  k_f = 120 * exp(1.65 * tc[0] - 0.50321666580472 * (327) * invT);
  dlnkfdT = 1.65 * invT + 0.50321666580472 * (327) * invT2;
  // reverse
  phi_r = (sc[18] * sc[18]) * sc[29];
  Kc = refC * exp(g_RT[6] + g_RT[10] - 2.000000 * g_RT[18] - g_RT[29]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (2.000000 * h_RT[18] + h_RT[29]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[6] -= q;      // iC4H8
  wdot[10] -= q;     // O
  wdot[18] += 2 * q; // CH3
  wdot[29] += q;     // CH2CO
  // d()/d[iC4H8]
  dqdci = +k_f * sc[10];
  J[240] -= dqdci;     // dwdot[iC4H8]/d[iC4H8]
  J[244] -= dqdci;     // dwdot[O]/d[iC4H8]
  J[252] += 2 * dqdci; // dwdot[CH3]/d[iC4H8]
  J[263] += dqdci;     // dwdot[CH2CO]/d[iC4H8]
  // d()/d[O]
  dqdci = +k_f * sc[6];
  J[396] -= dqdci;     // dwdot[iC4H8]/d[O]
  J[400] -= dqdci;     // dwdot[O]/d[O]
  J[408] += 2 * dqdci; // dwdot[CH3]/d[O]
  J[419] += dqdci;     // dwdot[CH2CO]/d[O]
  // d()/d[CH3]
  dqdci = -k_r * 2.000000 * sc[18] * sc[29];
  J[708] -= dqdci;     // dwdot[iC4H8]/d[CH3]
  J[712] -= dqdci;     // dwdot[O]/d[CH3]
  J[720] += 2 * dqdci; // dwdot[CH3]/d[CH3]
  J[731] += dqdci;     // dwdot[CH2CO]/d[CH3]
  // d()/d[CH2CO]
  dqdci = -k_r * pow(sc[18], 2.000000);
  J[1137] -= dqdci;     // dwdot[iC4H8]/d[CH2CO]
  J[1141] -= dqdci;     // dwdot[O]/d[CH2CO]
  J[1149] += 2 * dqdci; // dwdot[CH3]/d[CH2CO]
  J[1160] += dqdci;     // dwdot[CH2CO]/d[CH2CO]
  // d()/dT
  J[1488] -= dqdT;     // dwdot[iC4H8]/dT
  J[1492] -= dqdT;     // dwdot[O]/dT
  J[1500] += 2 * dqdT; // dwdot[CH3]/dT
  J[1511] += dqdT;     // dwdot[CH2CO]/dT

  // reaction 158: C6H5 + CH3 <=> C6H5CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[32];
  k_f = 13800000 * exp(0 * tc[0] - 0.50321666580472 * (46) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (46) * invT2;
  // reverse
  phi_r = sc[8];
  Kc = refCinv * exp(-g_RT[8] + g_RT[18] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[32]) + (h_RT[8]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] += q;  // C6H5CH3
  wdot[18] -= q; // CH3
  wdot[32] -= q; // C6H5
  // d()/d[C6H5CH3]
  dqdci = -k_r;
  J[320] += dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[330] -= dqdci; // dwdot[CH3]/d[C6H5CH3]
  J[344] -= dqdci; // dwdot[C6H5]/d[C6H5CH3]
  // d()/d[CH3]
  dqdci = +k_f * sc[32];
  J[710] += dqdci; // dwdot[C6H5CH3]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[734] -= dqdci; // dwdot[C6H5]/d[CH3]
  // d()/d[C6H5]
  dqdci = +k_f * sc[18];
  J[1256] += dqdci; // dwdot[C6H5CH3]/d[C6H5]
  J[1266] -= dqdci; // dwdot[CH3]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  // d()/dT
  J[1490] += dqdT; // dwdot[C6H5CH3]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT

  // reaction 159: C6H5CH3 + O2 <=> C6H5CH2 + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[15];
  k_f = 300000000 * exp(0 * tc[0] - 0.50321666580472 * (42992) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (42992) * invT2;
  // reverse
  phi_r = sc[12] * sc[33];
  Kc = exp(g_RT[8] - g_RT[12] + g_RT[15] - g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[15]) + (h_RT[12] + h_RT[33]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // C6H5CH3
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[33] += q; // C6H5CH2
  // d()/d[C6H5CH3]
  dqdci = +k_f * sc[15];
  J[320] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[324] += dqdci; // dwdot[HO2]/d[C6H5CH3]
  J[327] -= dqdci; // dwdot[O2]/d[C6H5CH3]
  J[345] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH3]
  // d()/d[HO2]
  dqdci = -k_r * sc[33];
  J[476] -= dqdci; // dwdot[C6H5CH3]/d[HO2]
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[501] += dqdci; // dwdot[C6H5CH2]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[8];
  J[593] -= dqdci; // dwdot[C6H5CH3]/d[O2]
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[618] += dqdci; // dwdot[C6H5CH2]/d[O2]
  // d()/d[C6H5CH2]
  dqdci = -k_r * sc[12];
  J[1295] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH2]
  J[1299] += dqdci; // dwdot[HO2]/d[C6H5CH2]
  J[1302] -= dqdci; // dwdot[O2]/d[C6H5CH2]
  J[1320] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  // d()/dT
  J[1490] -= dqdT; // dwdot[C6H5CH3]/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1515] += dqdT; // dwdot[C6H5CH2]/dT

  // reaction 160: C6H5CH3 + OH <=> C6H5CH2 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[11];
  k_f = 16200000 * exp(0 * tc[0] - 0.50321666580472 * (2770) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (2770) * invT2;
  // reverse
  phi_r = sc[13] * sc[33];
  Kc = exp(g_RT[8] + g_RT[11] - g_RT[13] - g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[11]) + (h_RT[13] + h_RT[33]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[8] -= q;  // C6H5CH3
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[33] += q; // C6H5CH2
  // d()/d[C6H5CH3]
  dqdci = +k_f * sc[11];
  J[320] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[323] -= dqdci; // dwdot[OH]/d[C6H5CH3]
  J[325] += dqdci; // dwdot[H2O]/d[C6H5CH3]
  J[345] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH3]
  // d()/d[OH]
  dqdci = +k_f * sc[8];
  J[437] -= dqdci; // dwdot[C6H5CH3]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[462] += dqdci; // dwdot[C6H5CH2]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[33];
  J[515] -= dqdci; // dwdot[C6H5CH3]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[540] += dqdci; // dwdot[C6H5CH2]/d[H2O]
  // d()/d[C6H5CH2]
  dqdci = -k_r * sc[13];
  J[1295] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH2]
  J[1298] -= dqdci; // dwdot[OH]/d[C6H5CH2]
  J[1300] += dqdci; // dwdot[H2O]/d[C6H5CH2]
  J[1320] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  // d()/dT
  J[1490] -= dqdT; // dwdot[C6H5CH3]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1515] += dqdT; // dwdot[C6H5CH2]/dT

  // reaction 161: C6H5CH3 + H <=> C6H5CH2 + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[9];
  k_f = 125900000 * exp(0 * tc[0] - 0.50321666580472 * (8359) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8359) * invT2;
  // reverse
  phi_r = sc[3] * sc[33];
  Kc = exp(-g_RT[3] + g_RT[8] + g_RT[9] - g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[9]) + (h_RT[3] + h_RT[33]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[8] -= q;  // C6H5CH3
  wdot[9] -= q;  // H
  wdot[33] += q; // C6H5CH2
  // d()/d[H2]
  dqdci = -k_r * sc[33];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[125] -= dqdci; // dwdot[C6H5CH3]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[150] += dqdci; // dwdot[C6H5CH2]/d[H2]
  // d()/d[C6H5CH3]
  dqdci = +k_f * sc[9];
  J[315] += dqdci; // dwdot[H2]/d[C6H5CH3]
  J[320] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[321] -= dqdci; // dwdot[H]/d[C6H5CH3]
  J[345] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH3]
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[359] -= dqdci; // dwdot[C6H5CH3]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[384] += dqdci; // dwdot[C6H5CH2]/d[H]
  // d()/d[C6H5CH2]
  dqdci = -k_r * sc[3];
  J[1290] += dqdci; // dwdot[H2]/d[C6H5CH2]
  J[1295] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH2]
  J[1296] -= dqdci; // dwdot[H]/d[C6H5CH2]
  J[1320] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1490] -= dqdT; // dwdot[C6H5CH3]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1515] += dqdT; // dwdot[C6H5CH2]/dT

  // reaction 162: C6H5CH3 + H <=> C6H6 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[9];
  k_f = 1.93 * exp(2.17 * tc[0] - 0.50321666580472 * (4163) * invT);
  dlnkfdT = 2.17 * invT + 0.50321666580472 * (4163) * invT2;
  // reverse
  phi_r = sc[7] * sc[18];
  Kc = exp(-g_RT[7] + g_RT[8] + g_RT[9] - g_RT[18]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[9]) + (h_RT[7] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[7] += q;  // C6H6
  wdot[8] -= q;  // C6H5CH3
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  // d()/d[C6H6]
  dqdci = -k_r * sc[18];
  J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
  J[281] -= dqdci; // dwdot[C6H5CH3]/d[C6H6]
  J[282] -= dqdci; // dwdot[H]/d[C6H6]
  J[291] += dqdci; // dwdot[CH3]/d[C6H6]
  // d()/d[C6H5CH3]
  dqdci = +k_f * sc[9];
  J[319] += dqdci; // dwdot[C6H6]/d[C6H5CH3]
  J[320] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[321] -= dqdci; // dwdot[H]/d[C6H5CH3]
  J[330] += dqdci; // dwdot[CH3]/d[C6H5CH3]
  // d()/d[H]
  dqdci = +k_f * sc[8];
  J[358] += dqdci; // dwdot[C6H6]/d[H]
  J[359] -= dqdci; // dwdot[C6H5CH3]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[7];
  J[709] += dqdci; // dwdot[C6H6]/d[CH3]
  J[710] -= dqdci; // dwdot[C6H5CH3]/d[CH3]
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  // d()/dT
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1490] -= dqdT; // dwdot[C6H5CH3]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT

  // reaction 163: C6H5CH3 + CH3 <=> C6H5CH2 + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[8] * sc[18];
  k_f = 316000 * exp(0 * tc[0] - 0.50321666580472 * (9500) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (9500) * invT2;
  // reverse
  phi_r = sc[2] * sc[33];
  Kc = exp(-g_RT[2] + g_RT[8] + g_RT[18] - g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[8] + h_RT[18]) + (h_RT[2] + h_RT[33]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[8] -= q;  // C6H5CH3
  wdot[18] -= q; // CH3
  wdot[33] += q; // C6H5CH2
  // d()/d[CH4]
  dqdci = -k_r * sc[33];
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[86] -= dqdci;  // dwdot[C6H5CH3]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[111] += dqdci; // dwdot[C6H5CH2]/d[CH4]
  // d()/d[C6H5CH3]
  dqdci = +k_f * sc[18];
  J[314] += dqdci; // dwdot[CH4]/d[C6H5CH3]
  J[320] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH3]
  J[330] -= dqdci; // dwdot[CH3]/d[C6H5CH3]
  J[345] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH3]
  // d()/d[CH3]
  dqdci = +k_f * sc[8];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[710] -= dqdci; // dwdot[C6H5CH3]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[735] += dqdci; // dwdot[C6H5CH2]/d[CH3]
  // d()/d[C6H5CH2]
  dqdci = -k_r * sc[2];
  J[1289] += dqdci; // dwdot[CH4]/d[C6H5CH2]
  J[1295] -= dqdci; // dwdot[C6H5CH3]/d[C6H5CH2]
  J[1305] -= dqdci; // dwdot[CH3]/d[C6H5CH2]
  J[1320] += dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1490] -= dqdT; // dwdot[C6H5CH3]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1515] += dqdT; // dwdot[C6H5CH2]/dT

  // reaction 165: C6H5CH2 + H <=> C6H5 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[33];
  k_f = 1.5e+60 * exp(-13.94 * tc[0] - 0.50321666580472 * (64580) * invT);
  dlnkfdT = -13.94 * invT + 0.50321666580472 * (64580) * invT2;
  // reverse
  phi_r = sc[18] * sc[32];
  Kc = exp(g_RT[9] - g_RT[18] - g_RT[32] + g_RT[33]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[33]) + (h_RT[18] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] -= q;  // H
  wdot[18] += q; // CH3
  wdot[32] += q; // C6H5
  wdot[33] -= q; // C6H5CH2
  // d()/d[H]
  dqdci = +k_f * sc[33];
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[369] += dqdci; // dwdot[CH3]/d[H]
  J[383] += dqdci; // dwdot[C6H5]/d[H]
  J[384] -= dqdci; // dwdot[C6H5CH2]/d[H]
  // d()/d[CH3]
  dqdci = -k_r * sc[32];
  J[711] -= dqdci; // dwdot[H]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[734] += dqdci; // dwdot[C6H5]/d[CH3]
  J[735] -= dqdci; // dwdot[C6H5CH2]/d[CH3]
  // d()/d[C6H5]
  dqdci = -k_r * sc[18];
  J[1257] -= dqdci; // dwdot[H]/d[C6H5]
  J[1266] += dqdci; // dwdot[CH3]/d[C6H5]
  J[1280] += dqdci; // dwdot[C6H5]/d[C6H5]
  J[1281] -= dqdci; // dwdot[C6H5CH2]/d[C6H5]
  // d()/d[C6H5CH2]
  dqdci = +k_f * sc[9];
  J[1296] -= dqdci; // dwdot[H]/d[C6H5CH2]
  J[1305] += dqdci; // dwdot[CH3]/d[C6H5CH2]
  J[1319] += dqdci; // dwdot[C6H5]/d[C6H5CH2]
  J[1320] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  // d()/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1514] += dqdT; // dwdot[C6H5]/dT
  J[1515] -= dqdT; // dwdot[C6H5CH2]/dT

  // reaction 166: C6H5CH2 + O <=> C6H5CHO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[33];
  k_f = 400000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[36];
  Kc = exp(-g_RT[9] + g_RT[10] + g_RT[33] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[33]) + (h_RT[9] + h_RT[36]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[10] -= q; // O
  wdot[33] -= q; // C6H5CH2
  wdot[36] += q; // C6H5CHO
  // d()/d[H]
  dqdci = -k_r * sc[36];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[361] -= dqdci; // dwdot[O]/d[H]
  J[384] -= dqdci; // dwdot[C6H5CH2]/d[H]
  J[387] += dqdci; // dwdot[C6H5CHO]/d[H]
  // d()/d[O]
  dqdci = +k_f * sc[33];
  J[399] += dqdci; // dwdot[H]/d[O]
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[423] -= dqdci; // dwdot[C6H5CH2]/d[O]
  J[426] += dqdci; // dwdot[C6H5CHO]/d[O]
  // d()/d[C6H5CH2]
  dqdci = +k_f * sc[10];
  J[1296] += dqdci; // dwdot[H]/d[C6H5CH2]
  J[1297] -= dqdci; // dwdot[O]/d[C6H5CH2]
  J[1320] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  J[1323] += dqdci; // dwdot[C6H5CHO]/d[C6H5CH2]
  // d()/d[C6H5CHO]
  dqdci = -k_r * sc[9];
  J[1413] += dqdci; // dwdot[H]/d[C6H5CHO]
  J[1414] -= dqdci; // dwdot[O]/d[C6H5CHO]
  J[1437] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CHO]
  J[1440] += dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1515] -= dqdT; // dwdot[C6H5CH2]/dT
  J[1518] += dqdT; // dwdot[C6H5CHO]/dT

  // reaction 167: C6H5CH2 + HO2 <=> C6H5CHO + H + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[33];
  k_f = 5000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[9] * sc[11] * sc[36];
  Kc = refC * exp(-g_RT[9] - g_RT[11] + g_RT[12] + g_RT[33] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[33]) + (h_RT[9] + h_RT[11] + h_RT[36]) -
                    1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[11] += q; // OH
  wdot[12] -= q; // HO2
  wdot[33] -= q; // C6H5CH2
  wdot[36] += q; // C6H5CHO
  // d()/d[H]
  dqdci = -k_r * sc[11] * sc[36];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[362] += dqdci; // dwdot[OH]/d[H]
  J[363] -= dqdci; // dwdot[HO2]/d[H]
  J[384] -= dqdci; // dwdot[C6H5CH2]/d[H]
  J[387] += dqdci; // dwdot[C6H5CHO]/d[H]
  // d()/d[OH]
  dqdci = -k_r * sc[9] * sc[36];
  J[438] += dqdci; // dwdot[H]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[441] -= dqdci; // dwdot[HO2]/d[OH]
  J[462] -= dqdci; // dwdot[C6H5CH2]/d[OH]
  J[465] += dqdci; // dwdot[C6H5CHO]/d[OH]
  // d()/d[HO2]
  dqdci = +k_f * sc[33];
  J[477] += dqdci; // dwdot[H]/d[HO2]
  J[479] += dqdci; // dwdot[OH]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[501] -= dqdci; // dwdot[C6H5CH2]/d[HO2]
  J[504] += dqdci; // dwdot[C6H5CHO]/d[HO2]
  // d()/d[C6H5CH2]
  dqdci = +k_f * sc[12];
  J[1296] += dqdci; // dwdot[H]/d[C6H5CH2]
  J[1298] += dqdci; // dwdot[OH]/d[C6H5CH2]
  J[1299] -= dqdci; // dwdot[HO2]/d[C6H5CH2]
  J[1320] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CH2]
  J[1323] += dqdci; // dwdot[C6H5CHO]/d[C6H5CH2]
  // d()/d[C6H5CHO]
  dqdci = -k_r * sc[9] * sc[11];
  J[1413] += dqdci; // dwdot[H]/d[C6H5CHO]
  J[1415] += dqdci; // dwdot[OH]/d[C6H5CHO]
  J[1416] -= dqdci; // dwdot[HO2]/d[C6H5CHO]
  J[1437] -= dqdci; // dwdot[C6H5CH2]/d[C6H5CHO]
  J[1440] += dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1515] -= dqdT; // dwdot[C6H5CH2]/dT
  J[1518] += dqdT; // dwdot[C6H5CHO]/dT

  // reaction 168: C6H5 + HCO <=> C6H5CHO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[19] * sc[32];
  k_f = 10000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[36];
  Kc = refCinv * exp(g_RT[19] + g_RT[32] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[19] + h_RT[32]) + (h_RT[36]) + 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[19] -= q; // HCO
  wdot[32] -= q; // C6H5
  wdot[36] += q; // C6H5CHO
  // d()/d[HCO]
  dqdci = +k_f * sc[32];
  J[760] -= dqdci; // dwdot[HCO]/d[HCO]
  J[773] -= dqdci; // dwdot[C6H5]/d[HCO]
  J[777] += dqdci; // dwdot[C6H5CHO]/d[HCO]
  // d()/d[C6H5]
  dqdci = +k_f * sc[19];
  J[1267] -= dqdci; // dwdot[HCO]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  J[1284] += dqdci; // dwdot[C6H5CHO]/d[C6H5]
  // d()/d[C6H5CHO]
  dqdci = -k_r;
  J[1423] -= dqdci; // dwdot[HCO]/d[C6H5CHO]
  J[1436] -= dqdci; // dwdot[C6H5]/d[C6H5CHO]
  J[1440] += dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1501] -= dqdT; // dwdot[HCO]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT
  J[1518] += dqdT; // dwdot[C6H5CHO]/dT

  // reaction 169: C6H5CHO <=> C6H5CO + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[36];
  k_f = 3.98e+15 * exp(0 * tc[0] - 0.50321666580472 * (86900) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (86900) * invT2;
  // reverse
  phi_r = sc[9] * sc[35];
  Kc = refC * exp(-g_RT[9] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[36]) + (h_RT[9] + h_RT[35]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[H]
  dqdci = -k_r * sc[35];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[386] += dqdci; // dwdot[C6H5CO]/d[H]
  J[387] -= dqdci; // dwdot[C6H5CHO]/d[H]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[9];
  J[1374] += dqdci; // dwdot[H]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f;
  J[1413] += dqdci; // dwdot[H]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 170: C6H5CHO + O2 <=> C6H5CO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[36];
  k_f = 10200000 * exp(0 * tc[0] - 0.50321666580472 * (38950) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (38950) * invT2;
  // reverse
  phi_r = sc[12] * sc[35];
  Kc = exp(-g_RT[12] + g_RT[15] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[36]) + (h_RT[12] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[15] -= q; // O2
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[HO2]
  dqdci = -k_r * sc[35];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[483] -= dqdci; // dwdot[O2]/d[HO2]
  J[503] += dqdci; // dwdot[C6H5CO]/d[HO2]
  J[504] -= dqdci; // dwdot[C6H5CHO]/d[HO2]
  // d()/d[O2]
  dqdci = +k_f * sc[36];
  J[597] += dqdci; // dwdot[HO2]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[620] += dqdci; // dwdot[C6H5CO]/d[O2]
  J[621] -= dqdci; // dwdot[C6H5CHO]/d[O2]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[12];
  J[1377] += dqdci; // dwdot[HO2]/d[C6H5CO]
  J[1380] -= dqdci; // dwdot[O2]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[15];
  J[1416] += dqdci; // dwdot[HO2]/d[C6H5CHO]
  J[1419] -= dqdci; // dwdot[O2]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 171: C6H5CHO + OH <=> C6H5CO + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[11] * sc[36];
  k_f = 23500 * exp(0.73 * tc[0] - 0.50321666580472 * (-1110) * invT);
  dlnkfdT = 0.73 * invT + 0.50321666580472 * (-1110) * invT2;
  // reverse
  phi_r = sc[13] * sc[35];
  Kc = exp(g_RT[11] - g_RT[13] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[11] + h_RT[36]) + (h_RT[13] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[OH]
  dqdci = +k_f * sc[36];
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[464] += dqdci; // dwdot[C6H5CO]/d[OH]
  J[465] -= dqdci; // dwdot[C6H5CHO]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[35];
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[542] += dqdci; // dwdot[C6H5CO]/d[H2O]
  J[543] -= dqdci; // dwdot[C6H5CHO]/d[H2O]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[13];
  J[1376] -= dqdci; // dwdot[OH]/d[C6H5CO]
  J[1378] += dqdci; // dwdot[H2O]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[11];
  J[1415] -= dqdci; // dwdot[OH]/d[C6H5CHO]
  J[1417] += dqdci; // dwdot[H2O]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 172: C6H5CHO + H <=> C6H5CO + H2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[36];
  k_f = 4100 * exp(1.16 * tc[0] - 0.50321666580472 * (2400) * invT);
  dlnkfdT = 1.16 * invT + 0.50321666580472 * (2400) * invT2;
  // reverse
  phi_r = sc[3] * sc[35];
  Kc = exp(-g_RT[3] + g_RT[9] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[36]) + (h_RT[3] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] += q;  // H2
  wdot[9] -= q;  // H
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[H2]
  dqdci = -k_r * sc[35];
  J[120] += dqdci; // dwdot[H2]/d[H2]
  J[126] -= dqdci; // dwdot[H]/d[H2]
  J[152] += dqdci; // dwdot[C6H5CO]/d[H2]
  J[153] -= dqdci; // dwdot[C6H5CHO]/d[H2]
  // d()/d[H]
  dqdci = +k_f * sc[36];
  J[354] += dqdci; // dwdot[H2]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[386] += dqdci; // dwdot[C6H5CO]/d[H]
  J[387] -= dqdci; // dwdot[C6H5CHO]/d[H]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[3];
  J[1368] += dqdci; // dwdot[H2]/d[C6H5CO]
  J[1374] -= dqdci; // dwdot[H]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[9];
  J[1407] += dqdci; // dwdot[H2]/d[C6H5CHO]
  J[1413] -= dqdci; // dwdot[H]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1485] += dqdT; // dwdot[H2]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 173: C6H5CHO + H <=> C6H6 + HCO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[9] * sc[36];
  k_f = 1.93 * exp(2.17 * tc[0] - 0.50321666580472 * (4163) * invT);
  dlnkfdT = 2.17 * invT + 0.50321666580472 * (4163) * invT2;
  // reverse
  phi_r = sc[7] * sc[19];
  Kc = exp(-g_RT[7] + g_RT[9] - g_RT[19] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[9] + h_RT[36]) + (h_RT[7] + h_RT[19]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[7] += q;  // C6H6
  wdot[9] -= q;  // H
  wdot[19] += q; // HCO
  wdot[36] -= q; // C6H5CHO
  // d()/d[C6H6]
  dqdci = -k_r * sc[19];
  J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
  J[282] -= dqdci; // dwdot[H]/d[C6H6]
  J[292] += dqdci; // dwdot[HCO]/d[C6H6]
  J[309] -= dqdci; // dwdot[C6H5CHO]/d[C6H6]
  // d()/d[H]
  dqdci = +k_f * sc[36];
  J[358] += dqdci; // dwdot[C6H6]/d[H]
  J[360] -= dqdci; // dwdot[H]/d[H]
  J[370] += dqdci; // dwdot[HCO]/d[H]
  J[387] -= dqdci; // dwdot[C6H5CHO]/d[H]
  // d()/d[HCO]
  dqdci = -k_r * sc[7];
  J[748] += dqdci; // dwdot[C6H6]/d[HCO]
  J[750] -= dqdci; // dwdot[H]/d[HCO]
  J[760] += dqdci; // dwdot[HCO]/d[HCO]
  J[777] -= dqdci; // dwdot[C6H5CHO]/d[HCO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[9];
  J[1411] += dqdci; // dwdot[C6H6]/d[C6H5CHO]
  J[1413] -= dqdci; // dwdot[H]/d[C6H5CHO]
  J[1423] += dqdci; // dwdot[HCO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1491] -= dqdT; // dwdot[H]/dT
  J[1501] += dqdT; // dwdot[HCO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 174: C6H5CHO + O <=> C6H5CO + OH
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[36];
  k_f = 5800000 * exp(0 * tc[0] - 0.50321666580472 * (1800) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (1800) * invT2;
  // reverse
  phi_r = sc[11] * sc[35];
  Kc = exp(g_RT[10] - g_RT[11] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[36]) + (h_RT[11] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q; // O
  wdot[11] += q; // OH
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[O]
  dqdci = +k_f * sc[36];
  J[400] -= dqdci; // dwdot[O]/d[O]
  J[401] += dqdci; // dwdot[OH]/d[O]
  J[425] += dqdci; // dwdot[C6H5CO]/d[O]
  J[426] -= dqdci; // dwdot[C6H5CHO]/d[O]
  // d()/d[OH]
  dqdci = -k_r * sc[35];
  J[439] -= dqdci; // dwdot[O]/d[OH]
  J[440] += dqdci; // dwdot[OH]/d[OH]
  J[464] += dqdci; // dwdot[C6H5CO]/d[OH]
  J[465] -= dqdci; // dwdot[C6H5CHO]/d[OH]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[11];
  J[1375] -= dqdci; // dwdot[O]/d[C6H5CO]
  J[1376] += dqdci; // dwdot[OH]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[10];
  J[1414] -= dqdci; // dwdot[O]/d[C6H5CHO]
  J[1415] += dqdci; // dwdot[OH]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1492] -= dqdT; // dwdot[O]/dT
  J[1493] += dqdT; // dwdot[OH]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 175: C6H5CHO + CH3 <=> C6H5CO + CH4
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[18] * sc[36];
  k_f = 2e-12 * exp(5.6 * tc[0] - 0.50321666580472 * (2460) * invT);
  dlnkfdT = 5.6 * invT + 0.50321666580472 * (2460) * invT2;
  // reverse
  phi_r = sc[2] * sc[35];
  Kc = exp(-g_RT[2] + g_RT[18] - g_RT[35] + g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[18] + h_RT[36]) + (h_RT[2] + h_RT[35]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] += q;  // CH4
  wdot[18] -= q; // CH3
  wdot[35] += q; // C6H5CO
  wdot[36] -= q; // C6H5CHO
  // d()/d[CH4]
  dqdci = -k_r * sc[35];
  J[80] += dqdci;  // dwdot[CH4]/d[CH4]
  J[96] -= dqdci;  // dwdot[CH3]/d[CH4]
  J[113] += dqdci; // dwdot[C6H5CO]/d[CH4]
  J[114] -= dqdci; // dwdot[C6H5CHO]/d[CH4]
  // d()/d[CH3]
  dqdci = +k_f * sc[36];
  J[704] += dqdci; // dwdot[CH4]/d[CH3]
  J[720] -= dqdci; // dwdot[CH3]/d[CH3]
  J[737] += dqdci; // dwdot[C6H5CO]/d[CH3]
  J[738] -= dqdci; // dwdot[C6H5CHO]/d[CH3]
  // d()/d[C6H5CO]
  dqdci = -k_r * sc[2];
  J[1367] += dqdci; // dwdot[CH4]/d[C6H5CO]
  J[1383] -= dqdci; // dwdot[CH3]/d[C6H5CO]
  J[1400] += dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = +k_f * sc[18];
  J[1406] += dqdci; // dwdot[CH4]/d[C6H5CHO]
  J[1422] -= dqdci; // dwdot[CH3]/d[C6H5CHO]
  J[1439] += dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] -= dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1484] += dqdT; // dwdot[CH4]/dT
  J[1500] -= dqdT; // dwdot[CH3]/dT
  J[1517] += dqdT; // dwdot[C6H5CO]/dT
  J[1518] -= dqdT; // dwdot[C6H5CHO]/dT

  // reaction 176: C6H5CO + H2O2 <=> C6H5CHO + HO2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[14] * sc[35];
  k_f = 180000 * exp(0 * tc[0] - 0.50321666580472 * (8226) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8226) * invT2;
  // reverse
  phi_r = sc[12] * sc[36];
  Kc = exp(-g_RT[12] + g_RT[14] + g_RT[35] - g_RT[36]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[14] + h_RT[35]) + (h_RT[12] + h_RT[36]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[12] += q; // HO2
  wdot[14] -= q; // H2O2
  wdot[35] -= q; // C6H5CO
  wdot[36] += q; // C6H5CHO
  // d()/d[HO2]
  dqdci = -k_r * sc[36];
  J[480] += dqdci; // dwdot[HO2]/d[HO2]
  J[482] -= dqdci; // dwdot[H2O2]/d[HO2]
  J[503] -= dqdci; // dwdot[C6H5CO]/d[HO2]
  J[504] += dqdci; // dwdot[C6H5CHO]/d[HO2]
  // d()/d[H2O2]
  dqdci = +k_f * sc[35];
  J[558] += dqdci; // dwdot[HO2]/d[H2O2]
  J[560] -= dqdci; // dwdot[H2O2]/d[H2O2]
  J[581] -= dqdci; // dwdot[C6H5CO]/d[H2O2]
  J[582] += dqdci; // dwdot[C6H5CHO]/d[H2O2]
  // d()/d[C6H5CO]
  dqdci = +k_f * sc[14];
  J[1377] += dqdci; // dwdot[HO2]/d[C6H5CO]
  J[1379] -= dqdci; // dwdot[H2O2]/d[C6H5CO]
  J[1400] -= dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  J[1401] += dqdci; // dwdot[C6H5CHO]/d[C6H5CO]
  // d()/d[C6H5CHO]
  dqdci = -k_r * sc[12];
  J[1416] += dqdci; // dwdot[HO2]/d[C6H5CHO]
  J[1418] -= dqdci; // dwdot[H2O2]/d[C6H5CHO]
  J[1439] -= dqdci; // dwdot[C6H5CO]/d[C6H5CHO]
  J[1440] += dqdci; // dwdot[C6H5CHO]/d[C6H5CHO]
  // d()/dT
  J[1494] += dqdT; // dwdot[HO2]/dT
  J[1496] -= dqdT; // dwdot[H2O2]/dT
  J[1517] -= dqdT; // dwdot[C6H5CO]/dT
  J[1518] += dqdT; // dwdot[C6H5CHO]/dT

  // reaction 177: C6H5CO <=> C6H5 + CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[35];
  k_f = 527000000000000 * exp(0 * tc[0] - 0.50321666580472 * (29013) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (29013) * invT2;
  // reverse
  phi_r = sc[22] * sc[32];
  Kc = refC * exp(-g_RT[22] - g_RT[32] + g_RT[35]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[35]) + (h_RT[22] + h_RT[32]) - 1.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[22] += q; // CO
  wdot[32] += q; // C6H5
  wdot[35] -= q; // C6H5CO
  // d()/d[CO]
  dqdci = -k_r * sc[32];
  J[880] += dqdci; // dwdot[CO]/d[CO]
  J[890] += dqdci; // dwdot[C6H5]/d[CO]
  J[893] -= dqdci; // dwdot[C6H5CO]/d[CO]
  // d()/d[C6H5]
  dqdci = -k_r * sc[22];
  J[1270] += dqdci; // dwdot[CO]/d[C6H5]
  J[1280] += dqdci; // dwdot[C6H5]/d[C6H5]
  J[1283] -= dqdci; // dwdot[C6H5CO]/d[C6H5]
  // d()/d[C6H5CO]
  dqdci = +k_f;
  J[1387] += dqdci; // dwdot[CO]/d[C6H5CO]
  J[1397] += dqdci; // dwdot[C6H5]/d[C6H5CO]
  J[1400] -= dqdci; // dwdot[C6H5CO]/d[C6H5CO]
  // d()/dT
  J[1504] += dqdT; // dwdot[CO]/dT
  J[1514] += dqdT; // dwdot[C6H5]/dT
  J[1517] -= dqdT; // dwdot[C6H5CO]/dT

  // reaction 179: C6H6 + OH <=> C6H5 + H2O
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[7] * sc[11];
  k_f = 0.3985 * exp(2.286 * tc[0] - 0.50321666580472 * (1058) * invT);
  dlnkfdT = 2.286 * invT + 0.50321666580472 * (1058) * invT2;
  // reverse
  phi_r = sc[13] * sc[32];
  Kc = exp(g_RT[7] + g_RT[11] - g_RT[13] - g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[7] + h_RT[11]) + (h_RT[13] + h_RT[32]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[7] -= q;  // C6H6
  wdot[11] -= q; // OH
  wdot[13] += q; // H2O
  wdot[32] += q; // C6H5
  // d()/d[C6H6]
  dqdci = +k_f * sc[11];
  J[280] -= dqdci; // dwdot[C6H6]/d[C6H6]
  J[284] -= dqdci; // dwdot[OH]/d[C6H6]
  J[286] += dqdci; // dwdot[H2O]/d[C6H6]
  J[305] += dqdci; // dwdot[C6H5]/d[C6H6]
  // d()/d[OH]
  dqdci = +k_f * sc[7];
  J[436] -= dqdci; // dwdot[C6H6]/d[OH]
  J[440] -= dqdci; // dwdot[OH]/d[OH]
  J[442] += dqdci; // dwdot[H2O]/d[OH]
  J[461] += dqdci; // dwdot[C6H5]/d[OH]
  // d()/d[H2O]
  dqdci = -k_r * sc[32];
  J[514] -= dqdci; // dwdot[C6H6]/d[H2O]
  J[518] -= dqdci; // dwdot[OH]/d[H2O]
  J[520] += dqdci; // dwdot[H2O]/d[H2O]
  J[539] += dqdci; // dwdot[C6H5]/d[H2O]
  // d()/d[C6H5]
  dqdci = -k_r * sc[13];
  J[1255] -= dqdci; // dwdot[C6H6]/d[C6H5]
  J[1259] -= dqdci; // dwdot[OH]/d[C6H5]
  J[1261] += dqdci; // dwdot[H2O]/d[C6H5]
  J[1280] += dqdci; // dwdot[C6H5]/d[C6H5]
  // d()/dT
  J[1489] -= dqdT; // dwdot[C6H6]/dT
  J[1493] -= dqdT; // dwdot[OH]/dT
  J[1495] += dqdT; // dwdot[H2O]/dT
  J[1514] += dqdT; // dwdot[C6H5]/dT

  // reaction 180: C6H5 + H2 <=> C6H6 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[3] * sc[32];
  k_f = 0.05707 * exp(2.43 * tc[0] - 0.50321666580472 * (6273) * invT);
  dlnkfdT = 2.43 * invT + 0.50321666580472 * (6273) * invT2;
  // reverse
  phi_r = sc[7] * sc[9];
  Kc = exp(g_RT[3] - g_RT[7] - g_RT[9] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[3] + h_RT[32]) + (h_RT[7] + h_RT[9]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[3] -= q;  // H2
  wdot[7] += q;  // C6H6
  wdot[9] += q;  // H
  wdot[32] -= q; // C6H5
  // d()/d[H2]
  dqdci = +k_f * sc[32];
  J[120] -= dqdci; // dwdot[H2]/d[H2]
  J[124] += dqdci; // dwdot[C6H6]/d[H2]
  J[126] += dqdci; // dwdot[H]/d[H2]
  J[149] -= dqdci; // dwdot[C6H5]/d[H2]
  // d()/d[C6H6]
  dqdci = -k_r * sc[9];
  J[276] -= dqdci; // dwdot[H2]/d[C6H6]
  J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
  J[282] += dqdci; // dwdot[H]/d[C6H6]
  J[305] -= dqdci; // dwdot[C6H5]/d[C6H6]
  // d()/d[H]
  dqdci = -k_r * sc[7];
  J[354] -= dqdci; // dwdot[H2]/d[H]
  J[358] += dqdci; // dwdot[C6H6]/d[H]
  J[360] += dqdci; // dwdot[H]/d[H]
  J[383] -= dqdci; // dwdot[C6H5]/d[H]
  // d()/d[C6H5]
  dqdci = +k_f * sc[3];
  J[1251] -= dqdci; // dwdot[H2]/d[C6H5]
  J[1255] += dqdci; // dwdot[C6H6]/d[C6H5]
  J[1257] += dqdci; // dwdot[H]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  // d()/dT
  J[1485] -= dqdT; // dwdot[H2]/dT
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT

  // reaction 181: C6H5 + O2 <=> C6H4O2 + H
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[15] * sc[32];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (8980) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (8980) * invT2;
  // reverse
  phi_r = sc[9] * sc[34];
  Kc = exp(-g_RT[9] + g_RT[15] + g_RT[32] - g_RT[34]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[15] + h_RT[32]) + (h_RT[9] + h_RT[34]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[9] += q;  // H
  wdot[15] -= q; // O2
  wdot[32] -= q; // C6H5
  wdot[34] += q; // C6H4O2
  // d()/d[H]
  dqdci = -k_r * sc[34];
  J[360] += dqdci; // dwdot[H]/d[H]
  J[366] -= dqdci; // dwdot[O2]/d[H]
  J[383] -= dqdci; // dwdot[C6H5]/d[H]
  J[385] += dqdci; // dwdot[C6H4O2]/d[H]
  // d()/d[O2]
  dqdci = +k_f * sc[32];
  J[594] += dqdci; // dwdot[H]/d[O2]
  J[600] -= dqdci; // dwdot[O2]/d[O2]
  J[617] -= dqdci; // dwdot[C6H5]/d[O2]
  J[619] += dqdci; // dwdot[C6H4O2]/d[O2]
  // d()/d[C6H5]
  dqdci = +k_f * sc[15];
  J[1257] += dqdci; // dwdot[H]/d[C6H5]
  J[1263] -= dqdci; // dwdot[O2]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  J[1282] += dqdci; // dwdot[C6H4O2]/d[C6H5]
  // d()/d[C6H4O2]
  dqdci = -k_r * sc[9];
  J[1335] += dqdci; // dwdot[H]/d[C6H4O2]
  J[1341] -= dqdci; // dwdot[O2]/d[C6H4O2]
  J[1358] -= dqdci; // dwdot[C6H5]/d[C6H4O2]
  J[1360] += dqdci; // dwdot[C6H4O2]/d[C6H4O2]
  // d()/dT
  J[1491] += dqdT; // dwdot[H]/dT
  J[1497] -= dqdT; // dwdot[O2]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT
  J[1516] += dqdT; // dwdot[C6H4O2]/dT

  // reaction 182: C6H5 + HO2 <=> C6H6 + O2
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[12] * sc[32];
  k_f = 1000000 * exp(0 * tc[0] - 0.50321666580472 * (0) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (0) * invT2;
  // reverse
  phi_r = sc[7] * sc[15];
  Kc = exp(-g_RT[7] + g_RT[12] - g_RT[15] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[12] + h_RT[32]) + (h_RT[7] + h_RT[15]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[7] += q;  // C6H6
  wdot[12] -= q; // HO2
  wdot[15] += q; // O2
  wdot[32] -= q; // C6H5
  // d()/d[C6H6]
  dqdci = -k_r * sc[15];
  J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
  J[285] -= dqdci; // dwdot[HO2]/d[C6H6]
  J[288] += dqdci; // dwdot[O2]/d[C6H6]
  J[305] -= dqdci; // dwdot[C6H5]/d[C6H6]
  // d()/d[HO2]
  dqdci = +k_f * sc[32];
  J[475] += dqdci; // dwdot[C6H6]/d[HO2]
  J[480] -= dqdci; // dwdot[HO2]/d[HO2]
  J[483] += dqdci; // dwdot[O2]/d[HO2]
  J[500] -= dqdci; // dwdot[C6H5]/d[HO2]
  // d()/d[O2]
  dqdci = -k_r * sc[7];
  J[592] += dqdci; // dwdot[C6H6]/d[O2]
  J[597] -= dqdci; // dwdot[HO2]/d[O2]
  J[600] += dqdci; // dwdot[O2]/d[O2]
  J[617] -= dqdci; // dwdot[C6H5]/d[O2]
  // d()/d[C6H5]
  dqdci = +k_f * sc[12];
  J[1255] += dqdci; // dwdot[C6H6]/d[C6H5]
  J[1260] -= dqdci; // dwdot[HO2]/d[C6H5]
  J[1263] += dqdci; // dwdot[O2]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  // d()/dT
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1494] -= dqdT; // dwdot[HO2]/dT
  J[1497] += dqdT; // dwdot[O2]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT

  // reaction 183: C6H5 + CH4 <=> C6H6 + CH3
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[2] * sc[32];
  k_f = 3.89e-09 * exp(4.57 * tc[0] - 0.50321666580472 * (5256) * invT);
  dlnkfdT = 4.57 * invT + 0.50321666580472 * (5256) * invT2;
  // reverse
  phi_r = sc[7] * sc[18];
  Kc = exp(g_RT[2] - g_RT[7] - g_RT[18] + g_RT[32]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[2] + h_RT[32]) + (h_RT[7] + h_RT[18]));
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[2] -= q;  // CH4
  wdot[7] += q;  // C6H6
  wdot[18] += q; // CH3
  wdot[32] -= q; // C6H5
  // d()/d[CH4]
  dqdci = +k_f * sc[32];
  J[80] -= dqdci;  // dwdot[CH4]/d[CH4]
  J[85] += dqdci;  // dwdot[C6H6]/d[CH4]
  J[96] += dqdci;  // dwdot[CH3]/d[CH4]
  J[110] -= dqdci; // dwdot[C6H5]/d[CH4]
  // d()/d[C6H6]
  dqdci = -k_r * sc[18];
  J[275] -= dqdci; // dwdot[CH4]/d[C6H6]
  J[280] += dqdci; // dwdot[C6H6]/d[C6H6]
  J[291] += dqdci; // dwdot[CH3]/d[C6H6]
  J[305] -= dqdci; // dwdot[C6H5]/d[C6H6]
  // d()/d[CH3]
  dqdci = -k_r * sc[7];
  J[704] -= dqdci; // dwdot[CH4]/d[CH3]
  J[709] += dqdci; // dwdot[C6H6]/d[CH3]
  J[720] += dqdci; // dwdot[CH3]/d[CH3]
  J[734] -= dqdci; // dwdot[C6H5]/d[CH3]
  // d()/d[C6H5]
  dqdci = +k_f * sc[2];
  J[1250] -= dqdci; // dwdot[CH4]/d[C6H5]
  J[1255] += dqdci; // dwdot[C6H6]/d[C6H5]
  J[1266] += dqdci; // dwdot[CH3]/d[C6H5]
  J[1280] -= dqdci; // dwdot[C6H5]/d[C6H5]
  // d()/dT
  J[1484] -= dqdT; // dwdot[CH4]/dT
  J[1489] += dqdT; // dwdot[C6H6]/dT
  J[1500] += dqdT; // dwdot[CH3]/dT
  J[1514] -= dqdT; // dwdot[C6H5]/dT

  // reaction 184: C6H4O2 + O <=> C2H2 + CH2CO + 2 CO
  // a non-third-body and non-pressure-fall-off reaction
  // forward
  phi_f = sc[10] * sc[34];
  k_f = 30000000 * exp(0 * tc[0] - 0.50321666580472 * (5000) * invT);
  dlnkfdT = 0 * invT + 0.50321666580472 * (5000) * invT2;
  // reverse
  phi_r = (sc[22] * sc[22]) * sc[24] * sc[29];
  Kc = (refC * refC) *
       exp(g_RT[10] - 2.000000 * g_RT[22] - g_RT[24] - g_RT[29] + g_RT[34]);
  k_r = k_f / Kc;
  dlnKcdT = invT * (-(h_RT[10] + h_RT[34]) +
                    (2.000000 * h_RT[22] + h_RT[24] + h_RT[29]) - 2.000000);
  dkrdT = (dlnkfdT - dlnKcdT) * k_r;
  // rate of progress
  q = k_f * phi_f - k_r * phi_r;
  dqdT = (dlnkfdT * k_f * phi_f - dkrdT * phi_r);
  // update wdot
  wdot[10] -= q;     // O
  wdot[22] += 2 * q; // CO
  wdot[24] += q;     // C2H2
  wdot[29] += q;     // CH2CO
  wdot[34] -= q;     // C6H4O2
  // d()/d[O]
  dqdci = +k_f * sc[34];
  J[400] -= dqdci;     // dwdot[O]/d[O]
  J[412] += 2 * dqdci; // dwdot[CO]/d[O]
  J[414] += dqdci;     // dwdot[C2H2]/d[O]
  J[419] += dqdci;     // dwdot[CH2CO]/d[O]
  J[424] -= dqdci;     // dwdot[C6H4O2]/d[O]
  // d()/d[CO]
  dqdci = -k_r * 2.000000 * sc[22] * sc[24] * sc[29];
  J[868] -= dqdci;     // dwdot[O]/d[CO]
  J[880] += 2 * dqdci; // dwdot[CO]/d[CO]
  J[882] += dqdci;     // dwdot[C2H2]/d[CO]
  J[887] += dqdci;     // dwdot[CH2CO]/d[CO]
  J[892] -= dqdci;     // dwdot[C6H4O2]/d[CO]
  // d()/d[C2H2]
  dqdci = -k_r * pow(sc[22], 2.000000) * sc[29];
  J[946] -= dqdci;     // dwdot[O]/d[C2H2]
  J[958] += 2 * dqdci; // dwdot[CO]/d[C2H2]
  J[960] += dqdci;     // dwdot[C2H2]/d[C2H2]
  J[965] += dqdci;     // dwdot[CH2CO]/d[C2H2]
  J[970] -= dqdci;     // dwdot[C6H4O2]/d[C2H2]
  // d()/d[CH2CO]
  dqdci = -k_r * pow(sc[22], 2.000000) * sc[24];
  J[1141] -= dqdci;     // dwdot[O]/d[CH2CO]
  J[1153] += 2 * dqdci; // dwdot[CO]/d[CH2CO]
  J[1155] += dqdci;     // dwdot[C2H2]/d[CH2CO]
  J[1160] += dqdci;     // dwdot[CH2CO]/d[CH2CO]
  J[1165] -= dqdci;     // dwdot[C6H4O2]/d[CH2CO]
  // d()/d[C6H4O2]
  dqdci = +k_f * sc[10];
  J[1336] -= dqdci;     // dwdot[O]/d[C6H4O2]
  J[1348] += 2 * dqdci; // dwdot[CO]/d[C6H4O2]
  J[1350] += dqdci;     // dwdot[C2H2]/d[C6H4O2]
  J[1355] += dqdci;     // dwdot[CH2CO]/d[C6H4O2]
  J[1360] -= dqdci;     // dwdot[C6H4O2]/d[C6H4O2]
  // d()/dT
  J[1492] -= dqdT;     // dwdot[O]/dT
  J[1504] += 2 * dqdT; // dwdot[CO]/dT
  J[1506] += dqdT;     // dwdot[C2H2]/dT
  J[1511] += dqdT;     // dwdot[CH2CO]/dT
  J[1516] -= dqdT;     // dwdot[C6H4O2]/dT

  amrex::Real c_R[38], dcRdT[38], e_RT[38];
  amrex::Real* eh_RT;
  if (consP) {
    cp_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    eh_RT = &h_RT[0];
  } else {
    cv_R(c_R, tc);
    dcvpRdT(dcRdT, tc);
    speciesInternalEnergy(e_RT, tc);
    eh_RT = &e_RT[0];
  }

  amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT = 0.0, dehmixdT = 0.0;
  for (int k = 0; k < 38; ++k) {
    cmix += c_R[k] * sc[k];
    dcmixdT += dcRdT[k] * sc[k];
    ehmix += eh_RT[k] * wdot[k];
    dehmixdT += invT * (c_R[k] - eh_RT[k]) * wdot[k] + eh_RT[k] * J[1482 + k];
  }

  amrex::Real cmixinv = 1.0 / cmix;
  amrex::Real tmp1 = ehmix * cmixinv;
  amrex::Real tmp3 = cmixinv * T;
  amrex::Real tmp2 = tmp1 * tmp3;
  amrex::Real dehmixdc;
  // dTdot/d[X]
  for (int k = 0; k < 38; ++k) {
    dehmixdc = 0.0;
    for (int m = 0; m < 38; ++m) {
      dehmixdc += eh_RT[m] * J[k * 39 + m];
    }
    J[k * 39 + 38] = tmp2 * c_R[k] - tmp3 * dehmixdc;
  }
  // dTdot/dT
  J[1520] = -tmp1 + tmp2 * dcmixdT - tmp3 * dehmixdT;
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
DWDOT(amrex::Real* J, amrex::Real* sc, amrex::Real* Tp, const int* consP)
{
  amrex::Real c[38];

  for (int k = 0; k < 38; k++) {
    c[k] = 1.e6 * sc[k];
  }

  aJacobian(J, c, *Tp, *consP);

  // dwdot[k]/dT
  // dTdot/d[X]
  for (int k = 0; k < 38; k++) {
    J[1482 + k] *= 1.e-6;
    J[k * 39 + 38] *= 1.e6;
  }

  return;
}

// Transport function declarations

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENIMC(int* LENIMC)
{
  *LENIMC = 154;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetLENRMC(int* LENRMC)
{
  *LENRMC = 28766;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNO(int* NO)
{
  *NO = 4;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKK(int* KK)
{
  *KK = 38;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLITE(int* NLITE)
{
  *NLITE = 2;
}

// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPATM(amrex::Real* PATM)
{
  *PATM = 0.1013250000000000E+07;
}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetWT(amrex::Real* WT)
{
  WT[0] = 1.54297000E+02;
  WT[1] = 2.80540000E+01;
  WT[2] = 1.60430000E+01;
  WT[3] = 2.01600000E+00;
  WT[4] = 4.20810000E+01;
  WT[5] = 5.61080000E+01;
  WT[6] = 5.61080000E+01;
  WT[7] = 7.81140000E+01;
  WT[8] = 9.21410000E+01;
  WT[9] = 1.00800000E+00;
  WT[10] = 1.59990000E+01;
  WT[11] = 1.70070000E+01;
  WT[12] = 3.30060000E+01;
  WT[13] = 1.80150000E+01;
  WT[14] = 3.40140000E+01;
  WT[15] = 3.19980000E+01;
  WT[16] = 1.40270000E+01;
  WT[17] = 1.40270000E+01;
  WT[18] = 1.50350000E+01;
  WT[19] = 2.90180000E+01;
  WT[20] = 3.00260000E+01;
  WT[21] = 3.10340000E+01;
  WT[22] = 2.80100000E+01;
  WT[23] = 4.40090000E+01;
  WT[24] = 2.60380000E+01;
  WT[25] = 2.70460000E+01;
  WT[26] = 2.90620000E+01;
  WT[27] = 3.00700000E+01;
  WT[28] = 4.10290000E+01;
  WT[29] = 4.20370000E+01;
  WT[30] = 4.30450000E+01;
  WT[31] = 4.10730000E+01;
  WT[32] = 7.71060000E+01;
  WT[33] = 9.11330000E+01;
  WT[34] = 1.08096000E+02;
  WT[35] = 1.05116000E+02;
  WT[36] = 1.06124000E+02;
  WT[37] = 2.80140000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetEPS(amrex::Real* EPS)
{
  EPS[0] = 7.50460000E+02;
  EPS[1] = 2.80800000E+02;
  EPS[2] = 1.41400000E+02;
  EPS[3] = 3.80000000E+01;
  EPS[4] = 2.66800000E+02;
  EPS[5] = 3.57000000E+02;
  EPS[6] = 3.57000000E+02;
  EPS[7] = 4.64800000E+02;
  EPS[8] = 4.95300000E+02;
  EPS[9] = 1.45000000E+02;
  EPS[10] = 8.00000000E+01;
  EPS[11] = 8.00000000E+01;
  EPS[12] = 1.07400000E+02;
  EPS[13] = 5.72400000E+02;
  EPS[14] = 1.07400000E+02;
  EPS[15] = 1.07400000E+02;
  EPS[16] = 1.44000000E+02;
  EPS[17] = 1.44000000E+02;
  EPS[18] = 1.44000000E+02;
  EPS[19] = 4.98000000E+02;
  EPS[20] = 4.98000000E+02;
  EPS[21] = 4.17000000E+02;
  EPS[22] = 9.81000000E+01;
  EPS[23] = 2.44000000E+02;
  EPS[24] = 2.09000000E+02;
  EPS[25] = 2.09000000E+02;
  EPS[26] = 2.52300000E+02;
  EPS[27] = 2.52300000E+02;
  EPS[28] = 1.50000000E+02;
  EPS[29] = 4.36000000E+02;
  EPS[30] = 4.36000000E+02;
  EPS[31] = 2.66800000E+02;
  EPS[32] = 4.64800000E+02;
  EPS[33] = 4.95300000E+02;
  EPS[34] = 4.85000000E+02;
  EPS[35] = 5.93000000E+02;
  EPS[36] = 5.93000000E+02;
  EPS[37] = 9.75300000E+01;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetSIG(amrex::Real* SIG)
{
  SIG[0] = 6.83400000E+00;
  SIG[1] = 3.97100000E+00;
  SIG[2] = 3.74600000E+00;
  SIG[3] = 2.92000000E+00;
  SIG[4] = 4.98200000E+00;
  SIG[5] = 5.17600000E+00;
  SIG[6] = 5.17600000E+00;
  SIG[7] = 5.29000000E+00;
  SIG[8] = 5.68000000E+00;
  SIG[9] = 2.05000000E+00;
  SIG[10] = 2.75000000E+00;
  SIG[11] = 2.75000000E+00;
  SIG[12] = 3.45800000E+00;
  SIG[13] = 2.60500000E+00;
  SIG[14] = 3.45800000E+00;
  SIG[15] = 3.45800000E+00;
  SIG[16] = 3.80000000E+00;
  SIG[17] = 3.80000000E+00;
  SIG[18] = 3.80000000E+00;
  SIG[19] = 3.59000000E+00;
  SIG[20] = 3.59000000E+00;
  SIG[21] = 3.69000000E+00;
  SIG[22] = 3.65000000E+00;
  SIG[23] = 3.76300000E+00;
  SIG[24] = 4.10000000E+00;
  SIG[25] = 4.10000000E+00;
  SIG[26] = 4.30200000E+00;
  SIG[27] = 4.30200000E+00;
  SIG[28] = 2.50000000E+00;
  SIG[29] = 3.97000000E+00;
  SIG[30] = 3.97000000E+00;
  SIG[31] = 4.98200000E+00;
  SIG[32] = 5.29000000E+00;
  SIG[33] = 5.68000000E+00;
  SIG[34] = 5.42500000E+00;
  SIG[35] = 5.50000000E+00;
  SIG[36] = 5.47000000E+00;
  SIG[37] = 3.62100000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetDIP(amrex::Real* DIP)
{
  DIP[0] = 0.00000000E+00;
  DIP[1] = 0.00000000E+00;
  DIP[2] = 0.00000000E+00;
  DIP[3] = 0.00000000E+00;
  DIP[4] = 0.00000000E+00;
  DIP[5] = 0.00000000E+00;
  DIP[6] = 0.00000000E+00;
  DIP[7] = 0.00000000E+00;
  DIP[8] = 4.30000000E-01;
  DIP[9] = 0.00000000E+00;
  DIP[10] = 0.00000000E+00;
  DIP[11] = 0.00000000E+00;
  DIP[12] = 0.00000000E+00;
  DIP[13] = 1.84400000E+00;
  DIP[14] = 0.00000000E+00;
  DIP[15] = 0.00000000E+00;
  DIP[16] = 0.00000000E+00;
  DIP[17] = 0.00000000E+00;
  DIP[18] = 0.00000000E+00;
  DIP[19] = 0.00000000E+00;
  DIP[20] = 0.00000000E+00;
  DIP[21] = 1.70000000E+00;
  DIP[22] = 0.00000000E+00;
  DIP[23] = 0.00000000E+00;
  DIP[24] = 0.00000000E+00;
  DIP[25] = 0.00000000E+00;
  DIP[26] = 0.00000000E+00;
  DIP[27] = 0.00000000E+00;
  DIP[28] = 0.00000000E+00;
  DIP[29] = 0.00000000E+00;
  DIP[30] = 0.00000000E+00;
  DIP[31] = 0.00000000E+00;
  DIP[32] = 0.00000000E+00;
  DIP[33] = 4.30000000E-01;
  DIP[34] = 4.00000000E-01;
  DIP[35] = 2.80000000E+00;
  DIP[36] = 2.80000000E+00;
  DIP[37] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetPOL(amrex::Real* POL)
{
  POL[0] = 0.00000000E+00;
  POL[1] = 0.00000000E+00;
  POL[2] = 2.60000000E+00;
  POL[3] = 7.90000000E-01;
  POL[4] = 0.00000000E+00;
  POL[5] = 0.00000000E+00;
  POL[6] = 0.00000000E+00;
  POL[7] = 1.03200000E+01;
  POL[8] = 1.23000000E+01;
  POL[9] = 0.00000000E+00;
  POL[10] = 0.00000000E+00;
  POL[11] = 0.00000000E+00;
  POL[12] = 0.00000000E+00;
  POL[13] = 0.00000000E+00;
  POL[14] = 0.00000000E+00;
  POL[15] = 1.60000000E+00;
  POL[16] = 0.00000000E+00;
  POL[17] = 0.00000000E+00;
  POL[18] = 0.00000000E+00;
  POL[19] = 0.00000000E+00;
  POL[20] = 0.00000000E+00;
  POL[21] = 0.00000000E+00;
  POL[22] = 1.95000000E+00;
  POL[23] = 2.65000000E+00;
  POL[24] = 0.00000000E+00;
  POL[25] = 0.00000000E+00;
  POL[26] = 0.00000000E+00;
  POL[27] = 0.00000000E+00;
  POL[28] = 0.00000000E+00;
  POL[29] = 0.00000000E+00;
  POL[30] = 0.00000000E+00;
  POL[31] = 0.00000000E+00;
  POL[32] = 1.03200000E+01;
  POL[33] = 1.23000000E+01;
  POL[34] = 0.00000000E+00;
  POL[35] = 0.00000000E+00;
  POL[36] = 0.00000000E+00;
  POL[37] = 1.76000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetZROT(amrex::Real* ZROT)
{
  ZROT[0] = 1.00000000E+00;
  ZROT[1] = 1.50000000E+00;
  ZROT[2] = 1.30000000E+01;
  ZROT[3] = 2.80000000E+02;
  ZROT[4] = 1.00000000E+00;
  ZROT[5] = 1.00000000E+00;
  ZROT[6] = 1.00000000E+00;
  ZROT[7] = 0.00000000E+00;
  ZROT[8] = 1.00000000E+00;
  ZROT[9] = 0.00000000E+00;
  ZROT[10] = 0.00000000E+00;
  ZROT[11] = 0.00000000E+00;
  ZROT[12] = 1.00000000E+00;
  ZROT[13] = 4.00000000E+00;
  ZROT[14] = 3.80000000E+00;
  ZROT[15] = 3.80000000E+00;
  ZROT[16] = 0.00000000E+00;
  ZROT[17] = 0.00000000E+00;
  ZROT[18] = 0.00000000E+00;
  ZROT[19] = 0.00000000E+00;
  ZROT[20] = 2.00000000E+00;
  ZROT[21] = 2.00000000E+00;
  ZROT[22] = 1.80000000E+00;
  ZROT[23] = 2.10000000E+00;
  ZROT[24] = 2.50000000E+00;
  ZROT[25] = 1.00000000E+00;
  ZROT[26] = 1.50000000E+00;
  ZROT[27] = 1.50000000E+00;
  ZROT[28] = 1.00000000E+00;
  ZROT[29] = 2.00000000E+00;
  ZROT[30] = 2.00000000E+00;
  ZROT[31] = 1.00000000E+00;
  ZROT[32] = 0.00000000E+00;
  ZROT[33] = 1.00000000E+00;
  ZROT[34] = 1.00000000E+00;
  ZROT[35] = 1.00000000E+00;
  ZROT[36] = 1.00000000E+00;
  ZROT[37] = 4.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetNLIN(int* NLIN)
{
  NLIN[0] = 2;
  NLIN[1] = 2;
  NLIN[2] = 2;
  NLIN[3] = 1;
  NLIN[4] = 2;
  NLIN[5] = 2;
  NLIN[6] = 2;
  NLIN[7] = 2;
  NLIN[8] = 2;
  NLIN[9] = 0;
  NLIN[10] = 0;
  NLIN[11] = 1;
  NLIN[12] = 2;
  NLIN[13] = 2;
  NLIN[14] = 2;
  NLIN[15] = 1;
  NLIN[16] = 1;
  NLIN[17] = 1;
  NLIN[18] = 1;
  NLIN[19] = 2;
  NLIN[20] = 2;
  NLIN[21] = 2;
  NLIN[22] = 1;
  NLIN[23] = 1;
  NLIN[24] = 1;
  NLIN[25] = 2;
  NLIN[26] = 2;
  NLIN[27] = 2;
  NLIN[28] = 2;
  NLIN[29] = 2;
  NLIN[30] = 2;
  NLIN[31] = 2;
  NLIN[32] = 2;
  NLIN[33] = 2;
  NLIN[34] = 2;
  NLIN[35] = 2;
  NLIN[36] = 2;
  NLIN[37] = 1;
}

// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFETA(amrex::Real* COFETA)
{
  COFETA[0] = -5.76517051E+00;
  COFETA[1] = -3.81424366E+00;
  COFETA[2] = 7.79210562E-01;
  COFETA[3] = -4.18663923E-02;
  COFETA[4] = -2.51875502E+01;
  COFETA[5] = 5.39462369E+00;
  COFETA[6] = -5.98138230E-01;
  COFETA[7] = 2.51804055E-02;
  COFETA[8] = -2.06126891E+01;
  COFETA[9] = 3.84393583E+00;
  COFETA[10] = -4.28537568E-01;
  COFETA[11] = 1.91606442E-02;
  COFETA[12] = -1.31948640E+01;
  COFETA[13] = 7.13375532E-01;
  COFETA[14] = -6.91693169E-03;
  COFETA[15] = 1.93435281E-04;
  COFETA[16] = -2.54246427E+01;
  COFETA[17] = 5.43493970E+00;
  COFETA[18] = -6.08780006E-01;
  COFETA[19] = 2.58703548E-02;
  COFETA[20] = -2.42881054E+01;
  COFETA[21] = 4.69827062E+00;
  COFETA[22] = -4.74869870E-01;
  COFETA[23] = 1.84558126E-02;
  COFETA[24] = -2.42881054E+01;
  COFETA[25] = 4.69827062E+00;
  COFETA[26] = -4.74869870E-01;
  COFETA[27] = 1.84558126E-02;
  COFETA[28] = -1.99898116E+01;
  COFETA[29] = 2.65011868E+00;
  COFETA[30] = -1.58246338E-01;
  COFETA[31] = 2.62515703E-03;
  COFETA[32] = -1.84113126E+01;
  COFETA[33] = 1.89161215E+00;
  COFETA[34] = -4.53115546E-02;
  COFETA[35] = -2.86479654E-03;
  COFETA[36] = -2.09881640E+01;
  COFETA[37] = 3.91611377E+00;
  COFETA[38] = -4.37492034E-01;
  COFETA[39] = 1.95307207E-02;
  COFETA[40] = -1.54356810E+01;
  COFETA[41] = 2.08135184E+00;
  COFETA[42] = -1.96793511E-01;
  COFETA[43] = 8.98559151E-03;
  COFETA[44] = -1.54051316E+01;
  COFETA[45] = 2.08135184E+00;
  COFETA[46] = -1.96793511E-01;
  COFETA[47] = 8.98559151E-03;
  COFETA[48] = -1.75718406E+01;
  COFETA[49] = 2.87339876E+00;
  COFETA[50] = -3.01594840E-01;
  COFETA[51] = 1.36117827E-02;
  COFETA[52] = -9.44156381E+00;
  COFETA[53] = -1.87312959E+00;
  COFETA[54] = 4.94429813E-01;
  COFETA[55] = -2.77214701E-02;
  COFETA[56] = -1.75567991E+01;
  COFETA[57] = 2.87339876E+00;
  COFETA[58] = -3.01594840E-01;
  COFETA[59] = 1.36117827E-02;
  COFETA[60] = -1.75873485E+01;
  COFETA[61] = 2.87339876E+00;
  COFETA[62] = -3.01594840E-01;
  COFETA[63] = 1.36117827E-02;
  COFETA[64] = -2.08523043E+01;
  COFETA[65] = 3.89654771E+00;
  COFETA[66] = -4.35070015E-01;
  COFETA[67] = 1.94308440E-02;
  COFETA[68] = -2.08523043E+01;
  COFETA[69] = 3.89654771E+00;
  COFETA[70] = -4.35070015E-01;
  COFETA[71] = 1.94308440E-02;
  COFETA[72] = -2.08176059E+01;
  COFETA[73] = 3.89654771E+00;
  COFETA[74] = -4.35070015E-01;
  COFETA[75] = 1.94308440E-02;
  COFETA[76] = -1.79528315E+01;
  COFETA[77] = 1.83483028E+00;
  COFETA[78] = -3.66603851E-02;
  COFETA[79] = -3.29280649E-03;
  COFETA[80] = -1.79357578E+01;
  COFETA[81] = 1.83483028E+00;
  COFETA[82] = -3.66603851E-02;
  COFETA[83] = -3.29280649E-03;
  COFETA[84] = -1.85670547E+01;
  COFETA[85] = 2.22281297E+00;
  COFETA[86] = -1.06273726E-01;
  COFETA[87] = 5.58772435E-04;
  COFETA[88] = -1.69911897E+01;
  COFETA[89] = 2.57204548E+00;
  COFETA[90] = -2.61583457E-01;
  COFETA[91] = 1.18388136E-02;
  COFETA[92] = -2.43569969E+01;
  COFETA[93] = 5.30450440E+00;
  COFETA[94] = -5.98408766E-01;
  COFETA[95] = 2.56942167E-02;
  COFETA[96] = -2.37915288E+01;
  COFETA[97] = 4.99578986E+00;
  COFETA[98] = -5.67197720E-01;
  COFETA[99] = 2.47107941E-02;
  COFETA[100] = -2.37725377E+01;
  COFETA[101] = 4.99578986E+00;
  COFETA[102] = -5.67197720E-01;
  COFETA[103] = 2.47107941E-02;
  COFETA[104] = -2.49843020E+01;
  COFETA[105] = 5.34071737E+00;
  COFETA[106] = -6.00457680E-01;
  COFETA[107] = 2.56711459E-02;
  COFETA[108] = -2.49672537E+01;
  COFETA[109] = 5.34071737E+00;
  COFETA[110] = -6.00457680E-01;
  COFETA[111] = 2.56711459E-02;
  COFETA[112] = -1.97711432E+01;
  COFETA[113] = 4.00113669E+00;
  COFETA[114] = -4.47733091E-01;
  COFETA[115] = 1.99397571E-02;
  COFETA[116] = -2.10122478E+01;
  COFETA[117] = 3.26201855E+00;
  COFETA[118] = -2.50940224E-01;
  COFETA[119] = 7.18845481E-03;
  COFETA[120] = -2.10003999E+01;
  COFETA[121] = 3.26201855E+00;
  COFETA[122] = -2.50940224E-01;
  COFETA[123] = 7.18845481E-03;
  COFETA[124] = -2.54367654E+01;
  COFETA[125] = 5.43493970E+00;
  COFETA[126] = -6.08780006E-01;
  COFETA[127] = 2.58703548E-02;
  COFETA[128] = -1.99963057E+01;
  COFETA[129] = 2.65011868E+00;
  COFETA[130] = -1.58246338E-01;
  COFETA[131] = 2.62515703E-03;
  COFETA[132] = -1.84168126E+01;
  COFETA[133] = 1.89161215E+00;
  COFETA[134] = -4.53115546E-02;
  COFETA[135] = -2.86479654E-03;
  COFETA[136] = -1.87958979E+01;
  COFETA[137] = 2.14929144E+00;
  COFETA[138] = -8.37047773E-02;
  COFETA[139] = -9.96840003E-04;
  COFETA[140] = -1.25020844E+01;
  COFETA[141] = -6.80130371E-01;
  COFETA[142] = 3.24383958E-01;
  COFETA[143] = -2.02552391E-02;
  COFETA[144] = -1.24637672E+01;
  COFETA[145] = -6.89346292E-01;
  COFETA[146] = 3.25588359E-01;
  COFETA[147] = -2.03061123E-02;
  COFETA[148] = -1.69423299E+01;
  COFETA[149] = 2.55981081E+00;
  COFETA[150] = -2.60025577E-01;
  COFETA[151] = 1.17727861E-02;
}

// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFLAM(amrex::Real* COFLAM)
{
  COFLAM[0] = -9.63151298E+00;
  COFLAM[1] = 3.24476714E+00;
  COFLAM[2] = 2.52977014E-02;
  COFLAM[3] = -1.52356991E-02;
  COFLAM[4] = -1.26523640E+01;
  COFLAM[5] = 5.47039531E+00;
  COFLAM[6] = -3.69443848E-01;
  COFLAM[7] = 5.90119328E-03;
  COFLAM[8] = 1.91308833E+01;
  COFLAM[9] = -7.59563795E+00;
  COFLAM[10] = 1.42815753E+00;
  COFLAM[11] = -7.60027900E-02;
  COFLAM[12] = 6.08450430E+00;
  COFLAM[13] = 9.61338021E-01;
  COFLAM[14] = -9.90911790E-02;
  COFLAM[15] = 8.10858485E-03;
  COFLAM[16] = -1.71758532E+01;
  COFLAM[17] = 7.40990692E+00;
  COFLAM[18] = -6.59674196E-01;
  COFLAM[19] = 2.03027418E-02;
  COFLAM[20] = -1.19383425E+01;
  COFLAM[21] = 4.71205675E+00;
  COFLAM[22] = -2.15234139E-01;
  COFLAM[23] = -3.33902919E-03;
  COFLAM[24] = -9.34625050E+00;
  COFLAM[25] = 3.69368969E+00;
  COFLAM[26] = -8.37145910E-02;
  COFLAM[27] = -8.93319568E-03;
  COFLAM[28] = -3.54949252E+01;
  COFLAM[29] = 1.45498161E+01;
  COFLAM[30] = -1.59630227E+00;
  COFLAM[31] = 6.11965115E-02;
  COFLAM[32] = -3.19276375E+01;
  COFLAM[33] = 1.30163530E+01;
  COFLAM[34] = -1.38206614E+00;
  COFLAM[35] = 5.14094046E-02;
  COFLAM[36] = -1.43828332E+00;
  COFLAM[37] = 3.91611377E+00;
  COFLAM[38] = -4.37492034E-01;
  COFLAM[39] = 1.95307207E-02;
  COFLAM[40] = 1.34964169E+00;
  COFLAM[41] = 2.08135184E+00;
  COFLAM[42] = -1.96793511E-01;
  COFLAM[43] = 8.98559151E-03;
  COFLAM[44] = 1.28235553E+01;
  COFLAM[45] = -2.63985843E+00;
  COFLAM[46] = 4.43519549E-01;
  COFLAM[47] = -1.88459536E-02;
  COFLAM[48] = -2.09194260E+00;
  COFLAM[49] = 2.77054870E+00;
  COFLAM[50] = -2.27105425E-01;
  COFLAM[51] = 8.94685646E-03;
  COFLAM[52] = 2.24416936E+01;
  COFLAM[53] = -8.53989671E+00;
  COFLAM[54] = 1.46385517E+00;
  COFLAM[55] = -7.26205600E-02;
  COFLAM[56] = 7.96699700E-01;
  COFLAM[57] = 1.35345295E+00;
  COFLAM[58] = 1.36285239E-02;
  COFLAM[59] = -4.14873266E-03;
  COFLAM[60] = 5.09352262E-01;
  COFLAM[61] = 1.78392818E+00;
  COFLAM[62] = -1.04956495E-01;
  COFLAM[63] = 3.26692736E-03;
  COFLAM[64] = 1.23753156E+01;
  COFLAM[65] = -3.48860770E+00;
  COFLAM[66] = 6.78013191E-01;
  COFLAM[67] = -3.44803176E-02;
  COFLAM[68] = 2.10875651E+01;
  COFLAM[69] = -7.47740787E+00;
  COFLAM[70] = 1.27728923E+00;
  COFLAM[71] = -6.41079731E-02;
  COFLAM[72] = 1.53921466E+01;
  COFLAM[73] = -5.27169028E+00;
  COFLAM[74] = 1.00160194E+00;
  COFLAM[75] = -5.23734417E-02;
  COFLAM[76] = 1.23075476E+01;
  COFLAM[77] = -4.94360063E+00;
  COFLAM[78] = 1.04449434E+00;
  COFLAM[79] = -5.83499273E-02;
  COFLAM[80] = 1.24055238E+01;
  COFLAM[81] = -5.56754078E+00;
  COFLAM[82] = 1.21602293E+00;
  COFLAM[83] = -6.95547077E-02;
  COFLAM[84] = -9.05591101E+00;
  COFLAM[85] = 3.87502958E+00;
  COFLAM[86] = -1.45104142E-01;
  COFLAM[87] = -4.55428171E-03;
  COFLAM[88] = 1.40689773E+01;
  COFLAM[89] = -4.14107702E+00;
  COFLAM[90] = 7.49261263E-01;
  COFLAM[91] = -3.76161368E-02;
  COFLAM[92] = -1.01400736E+01;
  COFLAM[93] = 5.32836913E+00;
  COFLAM[94] = -4.85735138E-01;
  COFLAM[95] = 1.62359499E-02;
  COFLAM[96] = -9.38817504E+00;
  COFLAM[97] = 5.33511470E+00;
  COFLAM[98] = -5.20159641E-01;
  COFLAM[99] = 1.98472581E-02;
  COFLAM[100] = -8.14513871E+00;
  COFLAM[101] = 4.11306464E+00;
  COFLAM[102] = -2.52719267E-01;
  COFLAM[103] = 3.33625806E-03;
  COFLAM[104] = -6.33135119E+00;
  COFLAM[105] = 2.83698267E+00;
  COFLAM[106] = -5.38350545E-03;
  COFLAM[107] = -1.08482140E-02;
  COFLAM[108] = -7.84991127E+00;
  COFLAM[109] = 3.28196776E+00;
  COFLAM[110] = -3.80863328E-02;
  COFLAM[111] = -1.05011192E-02;
  COFLAM[112] = -6.93246557E+00;
  COFLAM[113] = 4.83118187E+00;
  COFLAM[114] = -4.63161589E-01;
  COFLAM[115] = 1.72326065E-02;
  COFLAM[116] = -6.45878901E+00;
  COFLAM[117] = 3.12492521E+00;
  COFLAM[118] = -9.44164101E-02;
  COFLAM[119] = -4.82904785E-03;
  COFLAM[120] = -4.25827316E+00;
  COFLAM[121] = 1.98827676E+00;
  COFLAM[122] = 9.45782129E-02;
  COFLAM[123] = -1.46776424E-02;
  COFLAM[124] = -2.30691451E+01;
  COFLAM[125] = 1.01497277E+01;
  COFLAM[126] = -1.07670903E+00;
  COFLAM[127] = 4.09685804E-02;
  COFLAM[128] = -3.31506105E+01;
  COFLAM[129] = 1.35830965E+01;
  COFLAM[130] = -1.46639474E+00;
  COFLAM[131] = 5.53153793E-02;
  COFLAM[132] = -2.84489681E+01;
  COFLAM[133] = 1.17373521E+01;
  COFLAM[134] = -1.22674467E+00;
  COFLAM[135] = 4.50832208E-02;
  COFLAM[136] = -2.23299789E+01;
  COFLAM[137] = 9.26228315E+00;
  COFLAM[138] = -8.93419258E-01;
  COFLAM[139] = 2.98290184E-02;
  COFLAM[140] = -2.59656936E+01;
  COFLAM[141] = 1.06895634E+01;
  COFLAM[142] = -1.08565276E+00;
  COFLAM[143] = 3.87053110E-02;
  COFLAM[144] = -2.53605363E+01;
  COFLAM[145] = 1.03018515E+01;
  COFLAM[146] = -1.01241981E+00;
  COFLAM[147] = 3.45820007E-02;
  COFLAM[148] = 1.41568021E+01;
  COFLAM[149] = -4.07747795E+00;
  COFLAM[150] = 7.27142774E-01;
  COFLAM[151] = -3.59639988E-02;
}

// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFD(amrex::Real* COFD)
{
  COFD[0] = -1.16844925E+01;
  COFD[1] = -3.51338651E-01;
  COFD[2] = 4.18965096E-01;
  COFD[3] = -2.44439566E-02;
  COFD[4] = -2.01128657E+01;
  COFD[5] = 4.03521820E+00;
  COFD[6] = -2.27351571E-01;
  COFD[7] = 6.54679104E-03;
  COFD[8] = -2.24344575E+01;
  COFD[9] = 5.44861323E+00;
  COFD[10] = -4.56851884E-01;
  COFD[11] = 1.83755196E-02;
  COFD[12] = -1.86544834E+01;
  COFD[13] = 4.78011373E+00;
  COFD[14] = -4.08086755E-01;
  COFD[15] = 1.78170841E-02;
  COFD[16] = -2.07529307E+01;
  COFD[17] = 4.18296248E+00;
  COFD[18] = -2.50265559E-01;
  COFD[19] = 7.68960245E-03;
  COFD[20] = -1.88479621E+01;
  COFD[21] = 3.18774233E+00;
  COFD[22] = -9.83598334E-02;
  COFD[23] = 1.95423787E-04;
  COFD[24] = -1.88479621E+01;
  COFD[25] = 3.18774233E+00;
  COFD[26] = -9.83598334E-02;
  COFD[27] = 1.95423787E-04;
  COFD[28] = -1.66624866E+01;
  COFD[29] = 2.10188310E+00;
  COFD[30] = 6.29285630E-02;
  COFD[31] = -7.58433417E-03;
  COFD[32] = -1.62114897E+01;
  COFD[33] = 1.83871754E+00;
  COFD[34] = 1.01665592E-01;
  COFD[35] = -9.43632713E-03;
  COFD[36] = -2.07047429E+01;
  COFD[37] = 5.41939345E+00;
  COFD[38] = -4.51598216E-01;
  COFD[39] = 1.80871188E-02;
  COFD[40] = -2.19579772E+01;
  COFD[41] = 5.55550693E+00;
  COFD[42] = -4.95036815E-01;
  COFD[43] = 2.10348077E-02;
  COFD[44] = -2.19855758E+01;
  COFD[45] = 5.55550693E+00;
  COFD[46] = -4.95036815E-01;
  COFD[47] = 2.10348077E-02;
  COFD[48] = -2.29202583E+01;
  COFD[49] = 5.66019632E+00;
  COFD[50] = -4.98519062E-01;
  COFD[51] = 2.07717456E-02;
  COFD[52] = -1.35355833E+01;
  COFD[53] = 1.16298665E+00;
  COFD[54] = 2.00499179E-01;
  COFD[55] = -1.41443081E-02;
  COFD[56] = -2.29326161E+01;
  COFD[57] = 5.66019632E+00;
  COFD[58] = -4.98519062E-01;
  COFD[59] = 2.07717456E-02;
  COFD[60] = -2.29074484E+01;
  COFD[61] = 5.66019632E+00;
  COFD[62] = -4.98519062E-01;
  COFD[63] = 2.07717456E-02;
  COFD[64] = -2.23541050E+01;
  COFD[65] = 5.42819099E+00;
  COFD[66] = -4.53154458E-01;
  COFD[67] = 1.81718118E-02;
  COFD[68] = -2.23541050E+01;
  COFD[69] = 5.42819099E+00;
  COFD[70] = -4.53154458E-01;
  COFD[71] = 1.81718118E-02;
  COFD[72] = -2.23858181E+01;
  COFD[73] = 5.42819099E+00;
  COFD[74] = -4.53154458E-01;
  COFD[75] = 1.81718118E-02;
  COFD[76] = -1.53745563E+01;
  COFD[77] = 1.81926944E+00;
  COFD[78] = 1.04524470E-01;
  COFD[79] = -9.57238731E-03;
  COFD[80] = -1.53888881E+01;
  COFD[81] = 1.81926944E+00;
  COFD[82] = 1.04524470E-01;
  COFD[83] = -9.57238731E-03;
  COFD[84] = -1.70318617E+01;
  COFD[85] = 2.56660287E+00;
  COFD[86] = -5.68591858E-03;
  COFD[87] = -4.29178686E-03;
  COFD[88] = -2.28776999E+01;
  COFD[89] = 5.69138158E+00;
  COFD[90] = -5.06633648E-01;
  COFD[91] = 2.12931319E-02;
  COFD[92] = -2.09413482E+01;
  COFD[93] = 4.38745064E+00;
  COFD[94] = -2.82842345E-01;
  COFD[95] = 9.34276534E-03;
  COFD[96] = -2.16777478E+01;
  COFD[97] = 4.83556703E+00;
  COFD[98] = -3.52989658E-01;
  COFD[99] = 1.28754048E-02;
  COFD[100] = -2.16939518E+01;
  COFD[101] = 4.83556703E+00;
  COFD[102] = -3.52989658E-01;
  COFD[103] = 1.28754048E-02;
  COFD[104] = -2.07726910E+01;
  COFD[105] = 4.33115158E+00;
  COFD[106] = -2.73597405E-01;
  COFD[107] = 8.86609067E-03;
  COFD[108] = -2.07869981E+01;
  COFD[109] = 4.33115158E+00;
  COFD[110] = -2.73597405E-01;
  COFD[111] = 8.86609067E-03;
  COFD[112] = -2.24920429E+01;
  COFD[113] = 5.38330711E+00;
  COFD[114] = -4.44993404E-01;
  COFD[115] = 1.77214781E-02;
  COFD[116] = -1.67929329E+01;
  COFD[117] = 2.37403742E+00;
  COFD[118] = 2.27831735E-02;
  COFD[119] = -5.65998246E-03;
  COFD[120] = -1.68022203E+01;
  COFD[121] = 2.37403742E+00;
  COFD[122] = 2.27831735E-02;
  COFD[123] = -5.65998246E-03;
  COFD[124] = -2.07433811E+01;
  COFD[125] = 4.18296248E+00;
  COFD[126] = -2.50265559E-01;
  COFD[127] = 7.68960245E-03;
  COFD[128] = -1.66581658E+01;
  COFD[129] = 2.10188310E+00;
  COFD[130] = 6.29285630E-02;
  COFD[131] = -7.58433417E-03;
  COFD[132] = -1.62080390E+01;
  COFD[133] = 1.83871754E+00;
  COFD[134] = 1.01665592E-01;
  COFD[135] = -9.43632713E-03;
  COFD[136] = -1.63843388E+01;
  COFD[137] = 1.91607379E+00;
  COFD[138] = 9.02572596E-02;
  COFD[139] = -8.89131446E-03;
  COFD[140] = -1.43253468E+01;
  COFD[141] = 9.71501322E-01;
  COFD[142] = 2.28347261E-01;
  COFD[143] = -1.54668718E-02;
  COFD[144] = -1.43233091E+01;
  COFD[145] = 9.71501322E-01;
  COFD[146] = 2.28347261E-01;
  COFD[147] = -1.54668718E-02;
  COFD[148] = -2.28682313E+01;
  COFD[149] = 5.69189836E+00;
  COFD[150] = -5.06933519E-01;
  COFD[151] = 2.13157429E-02;
  COFD[152] = -2.01128657E+01;
  COFD[153] = 4.03521820E+00;
  COFD[154] = -2.27351571E-01;
  COFD[155] = 6.54679104E-03;
  COFD[156] = -2.20832108E+01;
  COFD[157] = 5.67429332E+00;
  COFD[158] = -5.01428627E-01;
  COFD[159] = 2.09430310E-02;
  COFD[160] = -2.01746374E+01;
  COFD[161] = 5.18752792E+00;
  COFD[162] = -4.56420882E-01;
  COFD[163] = 1.97290922E-02;
  COFD[164] = -1.45043014E+01;
  COFD[165] = 3.51381994E+00;
  COFD[166] = -2.47834726E-01;
  COFD[167] = 1.10260243E-02;
  COFD[168] = -2.23941923E+01;
  COFD[169] = 5.68590868E+00;
  COFD[170] = -5.05139526E-01;
  COFD[171] = 2.11955596E-02;
  COFD[172] = -2.23748047E+01;
  COFD[173] = 5.51756348E+00;
  COFD[174] = -4.69056798E-01;
  COFD[175] = 1.90397065E-02;
  COFD[176] = -2.23748047E+01;
  COFD[177] = 5.51756348E+00;
  COFD[178] = -4.69056798E-01;
  COFD[179] = 1.90397065E-02;
  COFD[180] = -2.19183049E+01;
  COFD[181] = 5.17721278E+00;
  COFD[182] = -4.09361247E-01;
  COFD[183] = 1.58111824E-02;
  COFD[184] = -2.17793139E+01;
  COFD[185] = 5.04538353E+00;
  COFD[186] = -3.87823400E-01;
  COFD[187] = 1.46940044E-02;
  COFD[188] = -1.85868360E+01;
  COFD[189] = 5.21572400E+00;
  COFD[190] = -4.59650395E-01;
  COFD[191] = 1.98517826E-02;
  COFD[192] = -1.78637627E+01;
  COFD[193] = 4.47021072E+00;
  COFD[194] = -3.70025595E-01;
  COFD[195] = 1.62538396E-02;
  COFD[196] = -1.78830003E+01;
  COFD[197] = 4.47021072E+00;
  COFD[198] = -3.70025595E-01;
  COFD[199] = 1.62538396E-02;
  COFD[200] = -1.93532167E+01;
  COFD[201] = 4.86360045E+00;
  COFD[202] = -4.18551819E-01;
  COFD[203] = 1.82573693E-02;
  COFD[204] = -2.02044023E+01;
  COFD[205] = 4.78127419E+00;
  COFD[206] = -3.44267376E-01;
  COFD[207] = 1.24291470E-02;
  COFD[208] = -1.93600713E+01;
  COFD[209] = 4.86360045E+00;
  COFD[210] = -4.18551819E-01;
  COFD[211] = 1.82573693E-02;
  COFD[212] = -1.93460318E+01;
  COFD[213] = 4.86360045E+00;
  COFD[214] = -4.18551819E-01;
  COFD[215] = 1.82573693E-02;
  COFD[216] = -2.02073270E+01;
  COFD[217] = 5.20876767E+00;
  COFD[218] = -4.58879580E-01;
  COFD[219] = 1.98237644E-02;
  COFD[220] = -2.02073270E+01;
  COFD[221] = 5.20876767E+00;
  COFD[222] = -4.58879580E-01;
  COFD[223] = 1.98237644E-02;
  COFD[224] = -2.02301896E+01;
  COFD[225] = 5.20876767E+00;
  COFD[226] = -4.58879580E-01;
  COFD[227] = 1.98237644E-02;
  COFD[228] = -2.10669085E+01;
  COFD[229] = 5.03492891E+00;
  COFD[230] = -3.86111565E-01;
  COFD[231] = 1.46052779E-02;
  COFD[232] = -2.10752283E+01;
  COFD[233] = 5.03492891E+00;
  COFD[234] = -3.86111565E-01;
  COFD[235] = 1.46052779E-02;
  COFD[236] = -2.16470142E+01;
  COFD[237] = 5.34265837E+00;
  COFD[238] = -4.37551690E-01;
  COFD[239] = 1.73102478E-02;
  COFD[240] = -1.89936680E+01;
  COFD[241] = 4.72753945E+00;
  COFD[242] = -4.01493640E-01;
  COFD[243] = 1.75397624E-02;
  COFD[244] = -2.20202236E+01;
  COFD[245] = 5.68165022E+00;
  COFD[246] = -5.08040840E-01;
  COFD[247] = 2.14639936E-02;
  COFD[248] = -2.15473205E+01;
  COFD[249] = 5.55006147E+00;
  COFD[250] = -4.95086405E-01;
  COFD[251] = 2.10681449E-02;
  COFD[252] = -2.15570798E+01;
  COFD[253] = 5.55006147E+00;
  COFD[254] = -4.95086405E-01;
  COFD[255] = 2.10681449E-02;
  COFD[256] = -2.21205763E+01;
  COFD[257] = 5.69323725E+00;
  COFD[258] = -5.08380916E-01;
  COFD[259] = 2.14308925E-02;
  COFD[260] = -2.21288773E+01;
  COFD[261] = 5.69323725E+00;
  COFD[262] = -5.08380916E-01;
  COFD[263] = 2.14308925E-02;
  COFD[264] = -2.02540359E+01;
  COFD[265] = 5.24940351E+00;
  COFD[266] = -4.63385597E-01;
  COFD[267] = 1.99879279E-02;
  COFD[268] = -2.17016847E+01;
  COFD[269] = 5.28764175E+00;
  COFD[270] = -4.27810070E-01;
  COFD[271] = 1.67809866E-02;
  COFD[272] = -2.17063932E+01;
  COFD[273] = 5.28764175E+00;
  COFD[274] = -4.27810070E-01;
  COFD[275] = 1.67809866E-02;
  COFD[276] = -2.23893079E+01;
  COFD[277] = 5.68590868E+00;
  COFD[278] = -5.05139526E-01;
  COFD[279] = 2.11955596E-02;
  COFD[280] = -2.19165807E+01;
  COFD[281] = 5.17721278E+00;
  COFD[282] = -4.09361247E-01;
  COFD[283] = 1.58111824E-02;
  COFD[284] = -2.17780247E+01;
  COFD[285] = 5.04538353E+00;
  COFD[286] = -3.87823400E-01;
  COFD[287] = 1.46940044E-02;
  COFD[288] = -2.18146912E+01;
  COFD[289] = 5.08498386E+00;
  COFD[290] = -3.94332839E-01;
  COFD[291] = 1.50323135E-02;
  COFD[292] = -2.11044544E+01;
  COFD[293] = 4.68831946E+00;
  COFD[294] = -3.29557184E-01;
  COFD[295] = 1.16828987E-02;
  COFD[296] = -2.10991106E+01;
  COFD[297] = 4.68831946E+00;
  COFD[298] = -3.29557184E-01;
  COFD[299] = 1.16828987E-02;
  COFD[300] = -1.89643038E+01;
  COFD[301] = 4.71971336E+00;
  COFD[302] = -4.00532200E-01;
  COFD[303] = 1.75002259E-02;
  COFD[304] = -2.24344575E+01;
  COFD[305] = 5.44861323E+00;
  COFD[306] = -4.56851884E-01;
  COFD[307] = 1.83755196E-02;
  COFD[308] = -2.01746374E+01;
  COFD[309] = 5.18752792E+00;
  COFD[310] = -4.56420882E-01;
  COFD[311] = 1.97290922E-02;
  COFD[312] = -1.76544730E+01;
  COFD[313] = 4.36576238E+00;
  COFD[314] = -3.57898073E-01;
  COFD[315] = 1.57885011E-02;
  COFD[316] = -1.27083576E+01;
  COFD[317] = 2.87459148E+00;
  COFD[318] = -1.65223696E-01;
  COFD[319] = 7.46063713E-03;
  COFD[320] = -2.02995898E+01;
  COFD[321] = 5.12359638E+00;
  COFD[322] = -4.48937013E-01;
  COFD[323] = 1.94374301E-02;
  COFD[324] = -2.13487597E+01;
  COFD[325] = 5.44643202E+00;
  COFD[326] = -4.85418136E-01;
  COFD[327] = 2.08008162E-02;
  COFD[328] = -2.13487597E+01;
  COFD[329] = 5.44643202E+00;
  COFD[330] = -4.85418136E-01;
  COFD[331] = 2.08008162E-02;
  COFD[332] = -2.20518548E+01;
  COFD[333] = 5.63089326E+00;
  COFD[334] = -5.02322236E-01;
  COFD[335] = 2.12495172E-02;
  COFD[336] = -2.23543562E+01;
  COFD[337] = 5.69488668E+00;
  COFD[338] = -5.09023967E-01;
  COFD[339] = 2.14766424E-02;
  COFD[340] = -1.61460819E+01;
  COFD[341] = 4.39110473E+00;
  COFD[342] = -3.60927677E-01;
  COFD[343] = 1.59089389E-02;
  COFD[344] = -1.53237314E+01;
  COFD[345] = 3.59610534E+00;
  COFD[346] = -2.58710306E-01;
  COFD[347] = 1.15071603E-02;
  COFD[348] = -1.53387938E+01;
  COFD[349] = 3.59610534E+00;
  COFD[350] = -2.58710306E-01;
  COFD[351] = 1.15071603E-02;
  COFD[352] = -1.67650078E+01;
  COFD[353] = 4.01208621E+00;
  COFD[354] = -3.13312434E-01;
  COFD[355] = 1.39091843E-02;
  COFD[356] = -2.12223679E+01;
  COFD[357] = 5.48825752E+00;
  COFD[358] = -4.63970990E-01;
  COFD[359] = 1.87656606E-02;
  COFD[360] = -1.67698779E+01;
  COFD[361] = 4.01208621E+00;
  COFD[362] = -3.13312434E-01;
  COFD[363] = 1.39091843E-02;
  COFD[364] = -1.67598823E+01;
  COFD[365] = 4.01208621E+00;
  COFD[366] = -3.13312434E-01;
  COFD[367] = 1.39091843E-02;
  COFD[368] = -1.76883631E+01;
  COFD[369] = 4.38487586E+00;
  COFD[370] = -3.60203069E-01;
  COFD[371] = 1.58810844E-02;
  COFD[372] = -1.76883631E+01;
  COFD[373] = 4.38487586E+00;
  COFD[374] = -3.60203069E-01;
  COFD[375] = 1.58810844E-02;
  COFD[376] = -1.77065754E+01;
  COFD[377] = 4.38487586E+00;
  COFD[378] = -3.60203069E-01;
  COFD[379] = 1.58810844E-02;
  COFD[380] = -2.17155906E+01;
  COFD[381] = 5.69435598E+00;
  COFD[382] = -5.08783498E-01;
  COFD[383] = 2.14590577E-02;
  COFD[384] = -2.17216027E+01;
  COFD[385] = 5.69435598E+00;
  COFD[386] = -5.08783498E-01;
  COFD[387] = 2.14590577E-02;
  COFD[388] = -2.14591332E+01;
  COFD[389] = 5.59915682E+00;
  COFD[390] = -4.98717002E-01;
  COFD[391] = 2.11131339E-02;
  COFD[392] = -1.63702696E+01;
  COFD[393] = 3.84846517E+00;
  COFD[394] = -2.91538177E-01;
  COFD[395] = 1.29387536E-02;
  COFD[396] = -1.96317425E+01;
  COFD[397] = 4.98944710E+00;
  COFD[398] = -4.32451630E-01;
  COFD[399] = 1.87578787E-02;
  COFD[400] = -1.91621370E+01;
  COFD[401] = 4.83086729E+00;
  COFD[402] = -4.14410137E-01;
  COFD[403] = 1.80814444E-02;
  COFD[404] = -1.91692924E+01;
  COFD[405] = 4.83086729E+00;
  COFD[406] = -4.14410137E-01;
  COFD[407] = 1.80814444E-02;
  COFD[408] = -1.98438106E+01;
  COFD[409] = 5.03924528E+00;
  COFD[410] = -4.38609208E-01;
  COFD[411] = 1.90135187E-02;
  COFD[412] = -1.98498080E+01;
  COFD[413] = 5.03924528E+00;
  COFD[414] = -4.38609208E-01;
  COFD[415] = 1.90135187E-02;
  COFD[416] = -1.76359486E+01;
  COFD[417] = 4.42235405E+00;
  COFD[418] = -3.64582283E-01;
  COFD[419] = 1.60504051E-02;
  COFD[420] = -2.14447475E+01;
  COFD[421] = 5.55893881E+00;
  COFD[422] = -4.94493221E-01;
  COFD[423] = 2.09699115E-02;
  COFD[424] = -2.14479922E+01;
  COFD[425] = 5.55893881E+00;
  COFD[426] = -4.94493221E-01;
  COFD[427] = 2.09699115E-02;
  COFD[428] = -2.02962143E+01;
  COFD[429] = 5.12359638E+00;
  COFD[430] = -4.48937013E-01;
  COFD[431] = 1.94374301E-02;
  COFD[432] = -2.20507423E+01;
  COFD[433] = 5.63089326E+00;
  COFD[434] = -5.02322236E-01;
  COFD[435] = 2.12495172E-02;
  COFD[436] = -2.23535367E+01;
  COFD[437] = 5.69488668E+00;
  COFD[438] = -5.09023967E-01;
  COFD[439] = 2.14766424E-02;
  COFD[440] = -2.22672958E+01;
  COFD[441] = 5.68432710E+00;
  COFD[442] = -5.08339155E-01;
  COFD[443] = 2.14750328E-02;
  COFD[444] = -2.23513141E+01;
  COFD[445] = 5.60983713E+00;
  COFD[446] = -4.87290178E-01;
  COFD[447] = 2.00898110E-02;
  COFD[448] = -2.23454823E+01;
  COFD[449] = 5.60943735E+00;
  COFD[450] = -4.87194619E-01;
  COFD[451] = 2.00838675E-02;
  COFD[452] = -1.63433143E+01;
  COFD[453] = 3.84128639E+00;
  COFD[454] = -2.90612980E-01;
  COFD[455] = 1.28987807E-02;
  COFD[456] = -1.86544834E+01;
  COFD[457] = 4.78011373E+00;
  COFD[458] = -4.08086755E-01;
  COFD[459] = 1.78170841E-02;
  COFD[460] = -1.45043014E+01;
  COFD[461] = 3.51381994E+00;
  COFD[462] = -2.47834726E-01;
  COFD[463] = 1.10260243E-02;
  COFD[464] = -1.27083576E+01;
  COFD[465] = 2.87459148E+00;
  COFD[466] = -1.65223696E-01;
  COFD[467] = 7.46063713E-03;
  COFD[468] = -9.51827423E+00;
  COFD[469] = 1.82928178E+00;
  COFD[470] = -2.12530402E-02;
  COFD[471] = 8.34657365E-04;
  COFD[472] = -1.45861460E+01;
  COFD[473] = 3.43473113E+00;
  COFD[474] = -2.37339370E-01;
  COFD[475] = 1.05604455E-02;
  COFD[476] = -1.56460706E+01;
  COFD[477] = 3.81943128E+00;
  COFD[478] = -2.87771691E-01;
  COFD[479] = 1.27749736E-02;
  COFD[480] = -1.56460706E+01;
  COFD[481] = 3.81943128E+00;
  COFD[482] = -2.87771691E-01;
  COFD[483] = 1.27749736E-02;
  COFD[484] = -1.67638657E+01;
  COFD[485] = 4.23438112E+00;
  COFD[486] = -3.41960482E-01;
  COFD[487] = 1.51448513E-02;
  COFD[488] = -1.70288042E+01;
  COFD[489] = 4.29307212E+00;
  COFD[490] = -3.48883870E-01;
  COFD[491] = 1.54152521E-02;
  COFD[492] = -1.16679996E+01;
  COFD[493] = 2.88762398E+00;
  COFD[494] = -1.66834773E-01;
  COFD[495] = 7.52675135E-03;
  COFD[496] = -1.13159319E+01;
  COFD[497] = 2.46955006E+00;
  COFD[498] = -1.11801689E-01;
  COFD[499] = 5.11017313E-03;
  COFD[500] = -1.13192593E+01;
  COFD[501] = 2.46955006E+00;
  COFD[502] = -1.11801689E-01;
  COFD[503] = 5.11017313E-03;
  COFD[504] = -1.21709594E+01;
  COFD[505] = 2.69803790E+00;
  COFD[506] = -1.42519695E-01;
  COFD[507] = 6.48827766E-03;
  COFD[508] = -1.75664018E+01;
  COFD[509] = 4.80598394E+00;
  COFD[510] = -4.11304675E-01;
  COFD[511] = 1.79513369E-02;
  COFD[512] = -1.21718131E+01;
  COFD[513] = 2.69803790E+00;
  COFD[514] = -1.42519695E-01;
  COFD[515] = 6.48827766E-03;
  COFD[516] = -1.21700535E+01;
  COFD[517] = 2.69803790E+00;
  COFD[518] = -1.42519695E-01;
  COFD[519] = 6.48827766E-03;
  COFD[520] = -1.27433094E+01;
  COFD[521] = 2.88402293E+00;
  COFD[522] = -1.66388166E-01;
  COFD[523] = 7.50834254E-03;
  COFD[524] = -1.27433094E+01;
  COFD[525] = 2.88402293E+00;
  COFD[526] = -1.66388166E-01;
  COFD[527] = 7.50834254E-03;
  COFD[528] = -1.27475397E+01;
  COFD[529] = 2.88402293E+00;
  COFD[530] = -1.66388166E-01;
  COFD[531] = 7.50834254E-03;
  COFD[532] = -1.64585058E+01;
  COFD[533] = 4.29628861E+00;
  COFD[534] = -3.49256998E-01;
  COFD[535] = 1.54295050E-02;
  COFD[536] = -1.64595974E+01;
  COFD[537] = 4.29628861E+00;
  COFD[538] = -3.49256998E-01;
  COFD[539] = 1.54295050E-02;
  COFD[540] = -1.63084558E+01;
  COFD[541] = 4.23041457E+00;
  COFD[542] = -3.41506069E-01;
  COFD[543] = 1.51277748E-02;
  COFD[544] = -1.20052385E+01;
  COFD[545] = 2.61184524E+00;
  COFD[546] = -1.30879019E-01;
  COFD[547] = 5.96386844E-03;
  COFD[548] = -1.40330550E+01;
  COFD[549] = 3.35503739E+00;
  COFD[550] = -2.27359469E-01;
  COFD[551] = 1.01440614E-02;
  COFD[552] = -1.37136431E+01;
  COFD[553] = 3.20349997E+00;
  COFD[554] = -2.07715287E-01;
  COFD[555] = 9.29248687E-03;
  COFD[556] = -1.37149841E+01;
  COFD[557] = 3.20349997E+00;
  COFD[558] = -2.07715287E-01;
  COFD[559] = 9.29248687E-03;
  COFD[560] = -1.42398684E+01;
  COFD[561] = 3.37676928E+00;
  COFD[562] = -2.29956366E-01;
  COFD[563] = 1.02466877E-02;
  COFD[564] = -1.42409569E+01;
  COFD[565] = 3.37676928E+00;
  COFD[566] = -2.29956366E-01;
  COFD[567] = 1.02466877E-02;
  COFD[568] = -1.24284561E+01;
  COFD[569] = 2.91029437E+00;
  COFD[570] = -1.69730876E-01;
  COFD[571] = 7.65007851E-03;
  COFD[572] = -1.61742677E+01;
  COFD[573] = 4.14977976E+00;
  COFD[574] = -3.31246316E-01;
  COFD[575] = 1.46912151E-02;
  COFD[576] = -1.61748038E+01;
  COFD[577] = 4.14977976E+00;
  COFD[578] = -3.31246316E-01;
  COFD[579] = 1.46912151E-02;
  COFD[580] = -1.45855854E+01;
  COFD[581] = 3.43473113E+00;
  COFD[582] = -2.37339370E-01;
  COFD[583] = 1.05604455E-02;
  COFD[584] = -1.67637013E+01;
  COFD[585] = 4.23438112E+00;
  COFD[586] = -3.41960482E-01;
  COFD[587] = 1.51448513E-02;
  COFD[588] = -1.70286858E+01;
  COFD[589] = 4.29307212E+00;
  COFD[590] = -3.48883870E-01;
  COFD[591] = 1.54152521E-02;
  COFD[592] = -1.69170116E+01;
  COFD[593] = 4.27491595E+00;
  COFD[594] = -3.46769444E-01;
  COFD[595] = 1.53340556E-02;
  COFD[596] = -1.77631828E+01;
  COFD[597] = 4.56490155E+00;
  COFD[598] = -3.81720940E-01;
  COFD[599] = 1.67371139E-02;
  COFD[600] = -1.77602273E+01;
  COFD[601] = 4.56633722E+00;
  COFD[602] = -3.81897627E-01;
  COFD[603] = 1.67443941E-02;
  COFD[604] = -1.19789474E+01;
  COFD[605] = 2.60483862E+00;
  COFD[606] = -1.29915699E-01;
  COFD[607] = 5.91970664E-03;
  COFD[608] = -2.07529307E+01;
  COFD[609] = 4.18296248E+00;
  COFD[610] = -2.50265559E-01;
  COFD[611] = 7.68960245E-03;
  COFD[612] = -2.23941923E+01;
  COFD[613] = 5.68590868E+00;
  COFD[614] = -5.05139526E-01;
  COFD[615] = 2.11955596E-02;
  COFD[616] = -2.02995898E+01;
  COFD[617] = 5.12359638E+00;
  COFD[618] = -4.48937013E-01;
  COFD[619] = 1.94374301E-02;
  COFD[620] = -1.45861460E+01;
  COFD[621] = 3.43473113E+00;
  COFD[622] = -2.37339370E-01;
  COFD[623] = 1.05604455E-02;
  COFD[624] = -2.26890645E+01;
  COFD[625] = 5.69249677E+00;
  COFD[626] = -5.08089098E-01;
  COFD[627] = 2.14101429E-02;
  COFD[628] = -2.27884550E+01;
  COFD[629] = 5.57284636E+00;
  COFD[630] = -4.79130811E-01;
  COFD[631] = 1.95974238E-02;
  COFD[632] = -2.27884550E+01;
  COFD[633] = 5.57284636E+00;
  COFD[634] = -4.79130811E-01;
  COFD[635] = 1.95974238E-02;
  COFD[636] = -2.24351825E+01;
  COFD[637] = 5.27173739E+00;
  COFD[638] = -4.24993108E-01;
  COFD[639] = 1.66278277E-02;
  COFD[640] = -2.23180578E+01;
  COFD[641] = 5.15021335E+00;
  COFD[642] = -4.04967594E-01;
  COFD[643] = 1.55836845E-02;
  COFD[644] = -1.87261461E+01;
  COFD[645] = 5.15558102E+00;
  COFD[646] = -4.52695157E-01;
  COFD[647] = 1.95845411E-02;
  COFD[648] = -1.80809344E+01;
  COFD[649] = 4.42754431E+00;
  COFD[650] = -3.65168891E-01;
  COFD[651] = 1.60721247E-02;
  COFD[652] = -1.81028806E+01;
  COFD[653] = 4.42754431E+00;
  COFD[654] = -3.65168891E-01;
  COFD[655] = 1.60721247E-02;
  COFD[656] = -1.94985834E+01;
  COFD[657] = 4.78691752E+00;
  COFD[658] = -4.08931679E-01;
  COFD[659] = 1.78522598E-02;
  COFD[660] = -2.07521282E+01;
  COFD[661] = 4.88534159E+00;
  COFD[662] = -3.61152228E-01;
  COFD[663] = 1.32980658E-02;
  COFD[664] = -1.95069572E+01;
  COFD[665] = 4.78691752E+00;
  COFD[666] = -4.08931679E-01;
  COFD[667] = 1.78522598E-02;
  COFD[668] = -1.94898331E+01;
  COFD[669] = 4.78691752E+00;
  COFD[670] = -4.08931679E-01;
  COFD[671] = 1.78522598E-02;
  COFD[672] = -2.03295194E+01;
  COFD[673] = 5.14674817E+00;
  COFD[674] = -4.51657353E-01;
  COFD[675] = 1.95439167E-02;
  COFD[676] = -2.03295194E+01;
  COFD[677] = 5.14674817E+00;
  COFD[678] = -4.51657353E-01;
  COFD[679] = 1.95439167E-02;
  COFD[680] = -2.03553148E+01;
  COFD[681] = 5.14674817E+00;
  COFD[682] = -4.51657353E-01;
  COFD[683] = 1.95439167E-02;
  COFD[684] = -2.15981635E+01;
  COFD[685] = 5.13764355E+00;
  COFD[686] = -4.02929800E-01;
  COFD[687] = 1.54783512E-02;
  COFD[688] = -2.16081982E+01;
  COFD[689] = 5.13764355E+00;
  COFD[690] = -4.02929800E-01;
  COFD[691] = 1.54783512E-02;
  COFD[692] = -2.20530476E+01;
  COFD[693] = 5.39090922E+00;
  COFD[694] = -4.46575132E-01;
  COFD[695] = 1.78143343E-02;
  COFD[696] = -1.91514785E+01;
  COFD[697] = 4.66259871E+00;
  COFD[698] = -3.93595174E-01;
  COFD[699] = 1.72187360E-02;
  COFD[700] = -2.21901703E+01;
  COFD[701] = 5.61881236E+00;
  COFD[702] = -5.00953746E-01;
  COFD[703] = 2.11978962E-02;
  COFD[704] = -2.17862916E+01;
  COFD[705] = 5.53130752E+00;
  COFD[706] = -4.94179498E-01;
  COFD[707] = 2.10910504E-02;
  COFD[708] = -2.17979381E+01;
  COFD[709] = 5.53130752E+00;
  COFD[710] = -4.94179498E-01;
  COFD[711] = 2.10910504E-02;
  COFD[712] = -2.23222254E+01;
  COFD[713] = 5.66009032E+00;
  COFD[714] = -5.05604700E-01;
  COFD[715] = 2.13722200E-02;
  COFD[716] = -2.23322391E+01;
  COFD[717] = 5.66009032E+00;
  COFD[718] = -5.05604700E-01;
  COFD[719] = 2.13722200E-02;
  COFD[720] = -2.04947148E+01;
  COFD[721] = 5.19650040E+00;
  COFD[722] = -4.57450963E-01;
  COFD[723] = 1.97683350E-02;
  COFD[724] = -2.21473397E+01;
  COFD[725] = 5.35014259E+00;
  COFD[726] = -4.38890577E-01;
  COFD[727] = 1.73833153E-02;
  COFD[728] = -2.21532317E+01;
  COFD[729] = 5.35014259E+00;
  COFD[730] = -4.38890577E-01;
  COFD[731] = 1.73833153E-02;
  COFD[732] = -2.26829664E+01;
  COFD[733] = 5.69249677E+00;
  COFD[734] = -5.08089098E-01;
  COFD[735] = 2.14101429E-02;
  COFD[736] = -2.24328992E+01;
  COFD[737] = 5.27173739E+00;
  COFD[738] = -4.24993108E-01;
  COFD[739] = 1.66278277E-02;
  COFD[740] = -2.23163269E+01;
  COFD[741] = 5.15021335E+00;
  COFD[742] = -4.04967594E-01;
  COFD[743] = 1.55836845E-02;
  COFD[744] = -2.23747801E+01;
  COFD[745] = 5.19438622E+00;
  COFD[746] = -4.12172112E-01;
  COFD[747] = 1.59571201E-02;
  COFD[748] = -2.17101296E+01;
  COFD[749] = 4.81780589E+00;
  COFD[750] = -3.50110556E-01;
  COFD[751] = 1.27273027E-02;
  COFD[752] = -2.17057568E+01;
  COFD[753] = 4.81780589E+00;
  COFD[754] = -3.50110556E-01;
  COFD[755] = 1.27273027E-02;
  COFD[756] = -1.91247158E+01;
  COFD[757] = 4.65550267E+00;
  COFD[758] = -3.92738922E-01;
  COFD[759] = 1.71842694E-02;
  COFD[760] = -1.88479621E+01;
  COFD[761] = 3.18774233E+00;
  COFD[762] = -9.83598334E-02;
  COFD[763] = 1.95423787E-04;
  COFD[764] = -2.23748047E+01;
  COFD[765] = 5.51756348E+00;
  COFD[766] = -4.69056798E-01;
  COFD[767] = 1.90397065E-02;
  COFD[768] = -2.13487597E+01;
  COFD[769] = 5.44643202E+00;
  COFD[770] = -4.85418136E-01;
  COFD[771] = 2.08008162E-02;
  COFD[772] = -1.56460706E+01;
  COFD[773] = 3.81943128E+00;
  COFD[774] = -2.87771691E-01;
  COFD[775] = 1.27749736E-02;
  COFD[776] = -2.27884550E+01;
  COFD[777] = 5.57284636E+00;
  COFD[778] = -4.79130811E-01;
  COFD[779] = 1.95974238E-02;
  COFD[780] = -2.23806473E+01;
  COFD[781] = 5.22444608E+00;
  COFD[782] = -4.17097812E-01;
  COFD[783] = 1.62130505E-02;
  COFD[784] = -2.23806473E+01;
  COFD[785] = 5.22444608E+00;
  COFD[786] = -4.17097812E-01;
  COFD[787] = 1.62130505E-02;
  COFD[788] = -2.15188919E+01;
  COFD[789] = 4.69860566E+00;
  COFD[790] = -3.31165149E-01;
  COFD[791] = 1.17637934E-02;
  COFD[792] = -2.12178608E+01;
  COFD[793] = 4.49622526E+00;
  COFD[794] = -2.99709315E-01;
  COFD[795] = 1.01863435E-02;
  COFD[796] = -1.97546550E+01;
  COFD[797] = 5.47874728E+00;
  COFD[798] = -4.89200555E-01;
  COFD[799] = 2.09491311E-02;
  COFD[800] = -1.91621005E+01;
  COFD[801] = 4.78226937E+00;
  COFD[802] = -4.08355493E-01;
  COFD[803] = 1.78283223E-02;
  COFD[804] = -1.91857087E+01;
  COFD[805] = 4.78226937E+00;
  COFD[806] = -4.08355493E-01;
  COFD[807] = 1.78283223E-02;
  COFD[808] = -2.06284754E+01;
  COFD[809] = 5.14418905E+00;
  COFD[810] = -4.51357139E-01;
  COFD[811] = 1.95321862E-02;
  COFD[812] = -1.93590864E+01;
  COFD[813] = 4.12502887E+00;
  COFD[814] = -2.41264310E-01;
  COFD[815] = 7.24019972E-03;
  COFD[816] = -2.06378929E+01;
  COFD[817] = 5.14418905E+00;
  COFD[818] = -4.51357139E-01;
  COFD[819] = 1.95321862E-02;
  COFD[820] = -2.06186553E+01;
  COFD[821] = 5.14418905E+00;
  COFD[822] = -4.51357139E-01;
  COFD[823] = 1.95321862E-02;
  COFD[824] = -2.13778747E+01;
  COFD[825] = 5.47055637E+00;
  COFD[826] = -4.88260653E-01;
  COFD[827] = 2.09131292E-02;
  COFD[828] = -2.13778747E+01;
  COFD[829] = 5.47055637E+00;
  COFD[830] = -4.88260653E-01;
  COFD[831] = 2.09131292E-02;
  COFD[832] = -2.14054381E+01;
  COFD[833] = 5.47055637E+00;
  COFD[834] = -4.88260653E-01;
  COFD[835] = 2.09131292E-02;
  COFD[836] = -2.04535340E+01;
  COFD[837] = 4.47828781E+00;
  COFD[838] = -2.96932971E-01;
  COFD[839] = 1.00475283E-02;
  COFD[840] = -2.04647218E+01;
  COFD[841] = 4.47828781E+00;
  COFD[842] = -2.96932971E-01;
  COFD[843] = 1.00475283E-02;
  COFD[844] = -2.13747954E+01;
  COFD[845] = 4.93111364E+00;
  COFD[846] = -3.68722688E-01;
  COFD[847] = 1.36923642E-02;
  COFD[848] = -2.02366896E+01;
  COFD[849] = 5.00680692E+00;
  COFD[850] = -4.34505439E-01;
  COFD[851] = 1.88390238E-02;
  COFD[852] = -2.25669651E+01;
  COFD[853] = 5.61865117E+00;
  COFD[854] = -4.89351458E-01;
  COFD[855] = 2.02170344E-02;
  COFD[856] = -2.24925911E+01;
  COFD[857] = 5.68755039E+00;
  COFD[858] = -5.05543176E-01;
  COFD[859] = 2.12210786E-02;
  COFD[860] = -2.25054841E+01;
  COFD[861] = 5.68755039E+00;
  COFD[862] = -5.05543176E-01;
  COFD[863] = 2.12210786E-02;
  COFD[864] = -2.25515905E+01;
  COFD[865] = 5.60262902E+00;
  COFD[866] = -4.85703373E-01;
  COFD[867] = 1.99941087E-02;
  COFD[868] = -2.25627559E+01;
  COFD[869] = 5.60262902E+00;
  COFD[870] = -4.85703373E-01;
  COFD[871] = 1.99941087E-02;
  COFD[872] = -2.15502927E+01;
  COFD[873] = 5.50469943E+00;
  COFD[874] = -4.91737636E-01;
  COFD[875] = 2.10256273E-02;
  COFD[876] = -2.13850876E+01;
  COFD[877] = 4.85021590E+00;
  COFD[878] = -3.55384572E-01;
  COFD[879] = 1.29992338E-02;
  COFD[880] = -2.13918265E+01;
  COFD[881] = 4.85021590E+00;
  COFD[882] = -3.55384572E-01;
  COFD[883] = 1.29992338E-02;
  COFD[884] = -2.27814918E+01;
  COFD[885] = 5.57284636E+00;
  COFD[886] = -4.79130811E-01;
  COFD[887] = 1.95974238E-02;
  COFD[888] = -2.15161670E+01;
  COFD[889] = 4.69860566E+00;
  COFD[890] = -3.31165149E-01;
  COFD[891] = 1.17637934E-02;
  COFD[892] = -2.12157721E+01;
  COFD[893] = 4.49622526E+00;
  COFD[894] = -2.99709315E-01;
  COFD[895] = 1.01863435E-02;
  COFD[896] = -2.13391665E+01;
  COFD[897] = 4.56548085E+00;
  COFD[898] = -3.10439119E-01;
  COFD[899] = 1.07232827E-02;
  COFD[900] = -2.02802996E+01;
  COFD[901] = 4.02278006E+00;
  COFD[902] = -2.25422702E-01;
  COFD[903] = 6.45074291E-03;
  COFD[904] = -2.02763272E+01;
  COFD[905] = 4.02278006E+00;
  COFD[906] = -2.25422702E-01;
  COFD[907] = 6.45074291E-03;
  COFD[908] = -2.02103746E+01;
  COFD[909] = 4.99994553E+00;
  COFD[910] = -4.33691748E-01;
  COFD[911] = 1.88067893E-02;
  COFD[912] = -1.88479621E+01;
  COFD[913] = 3.18774233E+00;
  COFD[914] = -9.83598334E-02;
  COFD[915] = 1.95423787E-04;
  COFD[916] = -2.23748047E+01;
  COFD[917] = 5.51756348E+00;
  COFD[918] = -4.69056798E-01;
  COFD[919] = 1.90397065E-02;
  COFD[920] = -2.13487597E+01;
  COFD[921] = 5.44643202E+00;
  COFD[922] = -4.85418136E-01;
  COFD[923] = 2.08008162E-02;
  COFD[924] = -1.56460706E+01;
  COFD[925] = 3.81943128E+00;
  COFD[926] = -2.87771691E-01;
  COFD[927] = 1.27749736E-02;
  COFD[928] = -2.27884550E+01;
  COFD[929] = 5.57284636E+00;
  COFD[930] = -4.79130811E-01;
  COFD[931] = 1.95974238E-02;
  COFD[932] = -2.23806473E+01;
  COFD[933] = 5.22444608E+00;
  COFD[934] = -4.17097812E-01;
  COFD[935] = 1.62130505E-02;
  COFD[936] = -2.23806473E+01;
  COFD[937] = 5.22444608E+00;
  COFD[938] = -4.17097812E-01;
  COFD[939] = 1.62130505E-02;
  COFD[940] = -2.15188919E+01;
  COFD[941] = 4.69860566E+00;
  COFD[942] = -3.31165149E-01;
  COFD[943] = 1.17637934E-02;
  COFD[944] = -2.12178608E+01;
  COFD[945] = 4.49622526E+00;
  COFD[946] = -2.99709315E-01;
  COFD[947] = 1.01863435E-02;
  COFD[948] = -1.97546550E+01;
  COFD[949] = 5.47874728E+00;
  COFD[950] = -4.89200555E-01;
  COFD[951] = 2.09491311E-02;
  COFD[952] = -1.91621005E+01;
  COFD[953] = 4.78226937E+00;
  COFD[954] = -4.08355493E-01;
  COFD[955] = 1.78283223E-02;
  COFD[956] = -1.91857087E+01;
  COFD[957] = 4.78226937E+00;
  COFD[958] = -4.08355493E-01;
  COFD[959] = 1.78283223E-02;
  COFD[960] = -2.06284754E+01;
  COFD[961] = 5.14418905E+00;
  COFD[962] = -4.51357139E-01;
  COFD[963] = 1.95321862E-02;
  COFD[964] = -1.93590864E+01;
  COFD[965] = 4.12502887E+00;
  COFD[966] = -2.41264310E-01;
  COFD[967] = 7.24019972E-03;
  COFD[968] = -2.06378929E+01;
  COFD[969] = 5.14418905E+00;
  COFD[970] = -4.51357139E-01;
  COFD[971] = 1.95321862E-02;
  COFD[972] = -2.06186553E+01;
  COFD[973] = 5.14418905E+00;
  COFD[974] = -4.51357139E-01;
  COFD[975] = 1.95321862E-02;
  COFD[976] = -2.13778747E+01;
  COFD[977] = 5.47055637E+00;
  COFD[978] = -4.88260653E-01;
  COFD[979] = 2.09131292E-02;
  COFD[980] = -2.13778747E+01;
  COFD[981] = 5.47055637E+00;
  COFD[982] = -4.88260653E-01;
  COFD[983] = 2.09131292E-02;
  COFD[984] = -2.14054381E+01;
  COFD[985] = 5.47055637E+00;
  COFD[986] = -4.88260653E-01;
  COFD[987] = 2.09131292E-02;
  COFD[988] = -2.04535340E+01;
  COFD[989] = 4.47828781E+00;
  COFD[990] = -2.96932971E-01;
  COFD[991] = 1.00475283E-02;
  COFD[992] = -2.04647218E+01;
  COFD[993] = 4.47828781E+00;
  COFD[994] = -2.96932971E-01;
  COFD[995] = 1.00475283E-02;
  COFD[996] = -2.13747954E+01;
  COFD[997] = 4.93111364E+00;
  COFD[998] = -3.68722688E-01;
  COFD[999] = 1.36923642E-02;
  COFD[1000] = -2.02366896E+01;
  COFD[1001] = 5.00680692E+00;
  COFD[1002] = -4.34505439E-01;
  COFD[1003] = 1.88390238E-02;
  COFD[1004] = -2.25669651E+01;
  COFD[1005] = 5.61865117E+00;
  COFD[1006] = -4.89351458E-01;
  COFD[1007] = 2.02170344E-02;
  COFD[1008] = -2.24925911E+01;
  COFD[1009] = 5.68755039E+00;
  COFD[1010] = -5.05543176E-01;
  COFD[1011] = 2.12210786E-02;
  COFD[1012] = -2.25054841E+01;
  COFD[1013] = 5.68755039E+00;
  COFD[1014] = -5.05543176E-01;
  COFD[1015] = 2.12210786E-02;
  COFD[1016] = -2.25515905E+01;
  COFD[1017] = 5.60262902E+00;
  COFD[1018] = -4.85703373E-01;
  COFD[1019] = 1.99941087E-02;
  COFD[1020] = -2.25627559E+01;
  COFD[1021] = 5.60262902E+00;
  COFD[1022] = -4.85703373E-01;
  COFD[1023] = 1.99941087E-02;
  COFD[1024] = -2.15502927E+01;
  COFD[1025] = 5.50469943E+00;
  COFD[1026] = -4.91737636E-01;
  COFD[1027] = 2.10256273E-02;
  COFD[1028] = -2.13850876E+01;
  COFD[1029] = 4.85021590E+00;
  COFD[1030] = -3.55384572E-01;
  COFD[1031] = 1.29992338E-02;
  COFD[1032] = -2.13918265E+01;
  COFD[1033] = 4.85021590E+00;
  COFD[1034] = -3.55384572E-01;
  COFD[1035] = 1.29992338E-02;
  COFD[1036] = -2.27814918E+01;
  COFD[1037] = 5.57284636E+00;
  COFD[1038] = -4.79130811E-01;
  COFD[1039] = 1.95974238E-02;
  COFD[1040] = -2.15161670E+01;
  COFD[1041] = 4.69860566E+00;
  COFD[1042] = -3.31165149E-01;
  COFD[1043] = 1.17637934E-02;
  COFD[1044] = -2.12157721E+01;
  COFD[1045] = 4.49622526E+00;
  COFD[1046] = -2.99709315E-01;
  COFD[1047] = 1.01863435E-02;
  COFD[1048] = -2.13391665E+01;
  COFD[1049] = 4.56548085E+00;
  COFD[1050] = -3.10439119E-01;
  COFD[1051] = 1.07232827E-02;
  COFD[1052] = -2.02802996E+01;
  COFD[1053] = 4.02278006E+00;
  COFD[1054] = -2.25422702E-01;
  COFD[1055] = 6.45074291E-03;
  COFD[1056] = -2.02763272E+01;
  COFD[1057] = 4.02278006E+00;
  COFD[1058] = -2.25422702E-01;
  COFD[1059] = 6.45074291E-03;
  COFD[1060] = -2.02103746E+01;
  COFD[1061] = 4.99994553E+00;
  COFD[1062] = -4.33691748E-01;
  COFD[1063] = 1.88067893E-02;
  COFD[1064] = -1.66624866E+01;
  COFD[1065] = 2.10188310E+00;
  COFD[1066] = 6.29285630E-02;
  COFD[1067] = -7.58433417E-03;
  COFD[1068] = -2.19183049E+01;
  COFD[1069] = 5.17721278E+00;
  COFD[1070] = -4.09361247E-01;
  COFD[1071] = 1.58111824E-02;
  COFD[1072] = -2.20518548E+01;
  COFD[1073] = 5.63089326E+00;
  COFD[1074] = -5.02322236E-01;
  COFD[1075] = 2.12495172E-02;
  COFD[1076] = -1.67638657E+01;
  COFD[1077] = 4.23438112E+00;
  COFD[1078] = -3.41960482E-01;
  COFD[1079] = 1.51448513E-02;
  COFD[1080] = -2.24351825E+01;
  COFD[1081] = 5.27173739E+00;
  COFD[1082] = -4.24993108E-01;
  COFD[1083] = 1.66278277E-02;
  COFD[1084] = -2.15188919E+01;
  COFD[1085] = 4.69860566E+00;
  COFD[1086] = -3.31165149E-01;
  COFD[1087] = 1.17637934E-02;
  COFD[1088] = -2.15188919E+01;
  COFD[1089] = 4.69860566E+00;
  COFD[1090] = -3.31165149E-01;
  COFD[1091] = 1.17637934E-02;
  COFD[1092] = -2.01870724E+01;
  COFD[1093] = 3.96877257E+00;
  COFD[1094] = -2.17074262E-01;
  COFD[1095] = 6.03645472E-03;
  COFD[1096] = -1.98230918E+01;
  COFD[1097] = 3.73909583E+00;
  COFD[1098] = -1.82169813E-01;
  COFD[1099] = 4.31948941E-03;
  COFD[1100] = -2.04322329E+01;
  COFD[1101] = 5.66158593E+00;
  COFD[1102] = -5.05773626E-01;
  COFD[1103] = 2.13785785E-02;
  COFD[1104] = -2.01487086E+01;
  COFD[1105] = 5.10503848E+00;
  COFD[1106] = -4.46750415E-01;
  COFD[1107] = 1.93516000E-02;
  COFD[1108] = -2.01739312E+01;
  COFD[1109] = 5.10503848E+00;
  COFD[1110] = -4.46750415E-01;
  COFD[1111] = 1.93516000E-02;
  COFD[1112] = -2.15747345E+01;
  COFD[1113] = 5.43079567E+00;
  COFD[1114] = -4.83552836E-01;
  COFD[1115] = 2.07260684E-02;
  COFD[1116] = -1.59888179E+01;
  COFD[1117] = 2.47370894E+00;
  COFD[1118] = 8.07041879E-03;
  COFD[1119] = -4.95386032E-03;
  COFD[1120] = -2.15852608E+01;
  COFD[1121] = 5.43079567E+00;
  COFD[1122] = -4.83552836E-01;
  COFD[1123] = 2.07260684E-02;
  COFD[1124] = -2.15637829E+01;
  COFD[1125] = 5.43079567E+00;
  COFD[1126] = -4.83552836E-01;
  COFD[1127] = 2.07260684E-02;
  COFD[1128] = -2.20751193E+01;
  COFD[1129] = 5.65330302E+00;
  COFD[1130] = -5.04845334E-01;
  COFD[1131] = 2.13439933E-02;
  COFD[1132] = -2.20751193E+01;
  COFD[1133] = 5.65330302E+00;
  COFD[1134] = -5.04845334E-01;
  COFD[1135] = 2.13439933E-02;
  COFD[1136] = -2.21043775E+01;
  COFD[1137] = 5.65330302E+00;
  COFD[1138] = -5.04845334E-01;
  COFD[1139] = 2.13439933E-02;
  COFD[1140] = -1.90172568E+01;
  COFD[1141] = 3.72149607E+00;
  COFD[1142] = -1.79511931E-01;
  COFD[1143] = 4.18922349E-03;
  COFD[1144] = -1.90296479E+01;
  COFD[1145] = 3.72149607E+00;
  COFD[1146] = -1.79511931E-01;
  COFD[1147] = 4.18922349E-03;
  COFD[1148] = -1.98228628E+01;
  COFD[1149] = 4.08893368E+00;
  COFD[1150] = -2.35668448E-01;
  COFD[1151] = 6.96126626E-03;
  COFD[1152] = -2.11756832E+01;
  COFD[1153] = 5.29627079E+00;
  COFD[1154] = -4.67442678E-01;
  COFD[1155] = 2.00794720E-02;
  COFD[1156] = -2.23512852E+01;
  COFD[1157] = 5.37620790E+00;
  COFD[1158] = -4.43667096E-01;
  COFD[1159] = 1.76474144E-02;
  COFD[1160] = -2.24978681E+01;
  COFD[1161] = 5.55193120E+00;
  COFD[1162] = -4.75304459E-01;
  COFD[1163] = 1.93851412E-02;
  COFD[1164] = -2.25120434E+01;
  COFD[1165] = 5.55193120E+00;
  COFD[1166] = -4.75304459E-01;
  COFD[1167] = 1.93851412E-02;
  COFD[1168] = -2.22756471E+01;
  COFD[1169] = 5.34099743E+00;
  COFD[1170] = -4.37253581E-01;
  COFD[1171] = 1.72939556E-02;
  COFD[1172] = -2.22880148E+01;
  COFD[1173] = 5.34099743E+00;
  COFD[1174] = -4.37253581E-01;
  COFD[1175] = 1.72939556E-02;
  COFD[1176] = -2.23052517E+01;
  COFD[1177] = 5.69443795E+00;
  COFD[1178] = -5.09197045E-01;
  COFD[1179] = 2.14937695E-02;
  COFD[1180] = -2.01021317E+01;
  COFD[1181] = 4.14878039E+00;
  COFD[1182] = -2.44951700E-01;
  COFD[1183] = 7.42419188E-03;
  COFD[1184] = -2.01098025E+01;
  COFD[1185] = 4.14878039E+00;
  COFD[1186] = -2.44951700E-01;
  COFD[1187] = 7.42419188E-03;
  COFD[1188] = -2.24272707E+01;
  COFD[1189] = 5.27173739E+00;
  COFD[1190] = -4.24993108E-01;
  COFD[1191] = 1.66278277E-02;
  COFD[1192] = -2.01838148E+01;
  COFD[1193] = 3.96877257E+00;
  COFD[1194] = -2.17074262E-01;
  COFD[1195] = 6.03645472E-03;
  COFD[1196] = -1.98205608E+01;
  COFD[1197] = 3.73909583E+00;
  COFD[1198] = -1.82169813E-01;
  COFD[1199] = 4.31948941E-03;
  COFD[1200] = -1.99913814E+01;
  COFD[1201] = 3.82498414E+00;
  COFD[1202] = -1.95150268E-01;
  COFD[1203] = 4.95640374E-03;
  COFD[1204] = -1.80980053E+01;
  COFD[1205] = 2.91109153E+00;
  COFD[1206] = -5.68349076E-02;
  COFD[1207] = -1.82442613E-03;
  COFD[1208] = -1.80882652E+01;
  COFD[1209] = 2.90814696E+00;
  COFD[1210] = -5.63962193E-02;
  COFD[1211] = -1.84563394E-03;
  COFD[1212] = -2.11576985E+01;
  COFD[1213] = 5.29321023E+00;
  COFD[1214] = -4.67199772E-01;
  COFD[1215] = 2.00753335E-02;
  COFD[1216] = -1.62114897E+01;
  COFD[1217] = 1.83871754E+00;
  COFD[1218] = 1.01665592E-01;
  COFD[1219] = -9.43632713E-03;
  COFD[1220] = -2.17793139E+01;
  COFD[1221] = 5.04538353E+00;
  COFD[1222] = -3.87823400E-01;
  COFD[1223] = 1.46940044E-02;
  COFD[1224] = -2.23543562E+01;
  COFD[1225] = 5.69488668E+00;
  COFD[1226] = -5.09023967E-01;
  COFD[1227] = 2.14766424E-02;
  COFD[1228] = -1.70288042E+01;
  COFD[1229] = 4.29307212E+00;
  COFD[1230] = -3.48883870E-01;
  COFD[1231] = 1.54152521E-02;
  COFD[1232] = -2.23180578E+01;
  COFD[1233] = 5.15021335E+00;
  COFD[1234] = -4.04967594E-01;
  COFD[1235] = 1.55836845E-02;
  COFD[1236] = -2.12178608E+01;
  COFD[1237] = 4.49622526E+00;
  COFD[1238] = -2.99709315E-01;
  COFD[1239] = 1.01863435E-02;
  COFD[1240] = -2.12178608E+01;
  COFD[1241] = 4.49622526E+00;
  COFD[1242] = -2.99709315E-01;
  COFD[1243] = 1.01863435E-02;
  COFD[1244] = -1.98230918E+01;
  COFD[1245] = 3.73909583E+00;
  COFD[1246] = -1.82169813E-01;
  COFD[1247] = 4.31948941E-03;
  COFD[1248] = -1.93902460E+01;
  COFD[1249] = 3.47969939E+00;
  COFD[1250] = -1.43018049E-01;
  COFD[1251] = 2.39998168E-03;
  COFD[1252] = -2.06647608E+01;
  COFD[1253] = 5.69261801E+00;
  COFD[1254] = -5.07767233E-01;
  COFD[1255] = 2.13823707E-02;
  COFD[1256] = -2.04893098E+01;
  COFD[1257] = 5.18525677E+00;
  COFD[1258] = -4.56162395E-01;
  COFD[1259] = 1.97193601E-02;
  COFD[1260] = -2.05152202E+01;
  COFD[1261] = 5.18525677E+00;
  COFD[1262] = -4.56162395E-01;
  COFD[1263] = 1.97193601E-02;
  COFD[1264] = -2.18929562E+01;
  COFD[1265] = 5.49891346E+00;
  COFD[1266] = -4.91131042E-01;
  COFD[1267] = 2.10049926E-02;
  COFD[1268] = -1.70134429E+01;
  COFD[1269] = 2.91843695E+00;
  COFD[1270] = -5.89884416E-02;
  COFD[1271] = -1.68173262E-03;
  COFD[1272] = -2.19039865E+01;
  COFD[1273] = 5.49891346E+00;
  COFD[1274] = -4.91131042E-01;
  COFD[1275] = 2.10049926E-02;
  COFD[1276] = -2.18850448E+01;
  COFD[1277] = 5.49999263E+00;
  COFD[1278] = -4.91244709E-01;
  COFD[1279] = 2.10088865E-02;
  COFD[1280] = -2.23173549E+01;
  COFD[1281] = 5.69237157E+00;
  COFD[1282] = -5.07995132E-01;
  COFD[1283] = 2.14028776E-02;
  COFD[1284] = -2.23173549E+01;
  COFD[1285] = 5.69237157E+00;
  COFD[1286] = -5.07995132E-01;
  COFD[1287] = 2.14028776E-02;
  COFD[1288] = -2.23473285E+01;
  COFD[1289] = 5.69237157E+00;
  COFD[1290] = -5.07995132E-01;
  COFD[1291] = 2.14028776E-02;
  COFD[1292] = -1.85852264E+01;
  COFD[1293] = 3.46378404E+00;
  COFD[1294] = -1.40474146E-01;
  COFD[1295] = 2.27022462E-03;
  COFD[1296] = -1.85981574E+01;
  COFD[1297] = 3.46378404E+00;
  COFD[1298] = -1.40474146E-01;
  COFD[1299] = 2.27022462E-03;
  COFD[1300] = -1.98437652E+01;
  COFD[1301] = 4.05800213E+00;
  COFD[1302] = -2.31751315E-01;
  COFD[1303] = 6.79738213E-03;
  COFD[1304] = -2.15659786E+01;
  COFD[1305] = 5.39680817E+00;
  COFD[1306] = -4.79577329E-01;
  COFD[1307] = 2.05705656E-02;
  COFD[1308] = -2.23522570E+01;
  COFD[1309] = 5.30065654E+00;
  COFD[1310] = -4.30166563E-01;
  COFD[1311] = 1.69104623E-02;
  COFD[1312] = -2.24813989E+01;
  COFD[1313] = 5.47470966E+00;
  COFD[1314] = -4.61584053E-01;
  COFD[1315] = 1.86360608E-02;
  COFD[1316] = -2.24961433E+01;
  COFD[1317] = 5.47470966E+00;
  COFD[1318] = -4.61584053E-01;
  COFD[1319] = 1.86360608E-02;
  COFD[1320] = -2.22505019E+01;
  COFD[1321] = 5.25947501E+00;
  COFD[1322] = -4.22909606E-01;
  COFD[1323] = 1.65170757E-02;
  COFD[1324] = -2.22634091E+01;
  COFD[1325] = 5.25947501E+00;
  COFD[1326] = -4.22909606E-01;
  COFD[1327] = 1.65170757E-02;
  COFD[1328] = -2.24745026E+01;
  COFD[1329] = 5.68907624E+00;
  COFD[1330] = -5.05936774E-01;
  COFD[1331] = 2.12463420E-02;
  COFD[1332] = -1.98542956E+01;
  COFD[1333] = 3.96995758E+00;
  COFD[1334] = -2.17256365E-01;
  COFD[1335] = 6.04546397E-03;
  COFD[1336] = -1.98624014E+01;
  COFD[1337] = 3.96995758E+00;
  COFD[1338] = -2.17256365E-01;
  COFD[1339] = 6.04546397E-03;
  COFD[1340] = -2.23097042E+01;
  COFD[1341] = 5.15021335E+00;
  COFD[1342] = -4.04967594E-01;
  COFD[1343] = 1.55836845E-02;
  COFD[1344] = -1.98195667E+01;
  COFD[1345] = 3.73909583E+00;
  COFD[1346] = -1.82169813E-01;
  COFD[1347] = 4.31948941E-03;
  COFD[1348] = -1.93874884E+01;
  COFD[1349] = 3.47969939E+00;
  COFD[1350] = -1.43018049E-01;
  COFD[1351] = 2.39998168E-03;
  COFD[1352] = -1.95537554E+01;
  COFD[1353] = 3.56166089E+00;
  COFD[1354] = -1.55467108E-01;
  COFD[1355] = 3.01301978E-03;
  COFD[1356] = -1.79692197E+01;
  COFD[1357] = 2.80443246E+00;
  COFD[1358] = -4.16236607E-02;
  COFD[1359] = -2.53531363E-03;
  COFD[1360] = -1.79653066E+01;
  COFD[1361] = 2.80412614E+00;
  COFD[1362] = -4.15831299E-02;
  COFD[1363] = -2.53708557E-03;
  COFD[1364] = -2.15369258E+01;
  COFD[1365] = 5.38903449E+00;
  COFD[1366] = -4.78680194E-01;
  COFD[1367] = 2.05361478E-02;
  COFD[1368] = -2.07047429E+01;
  COFD[1369] = 5.41939345E+00;
  COFD[1370] = -4.51598216E-01;
  COFD[1371] = 1.80871188E-02;
  COFD[1372] = -1.85868360E+01;
  COFD[1373] = 5.21572400E+00;
  COFD[1374] = -4.59650395E-01;
  COFD[1375] = 1.98517826E-02;
  COFD[1376] = -1.61460819E+01;
  COFD[1377] = 4.39110473E+00;
  COFD[1378] = -3.60927677E-01;
  COFD[1379] = 1.59089389E-02;
  COFD[1380] = -1.16679996E+01;
  COFD[1381] = 2.88762398E+00;
  COFD[1382] = -1.66834773E-01;
  COFD[1383] = 7.52675135E-03;
  COFD[1384] = -1.87261461E+01;
  COFD[1385] = 5.15558102E+00;
  COFD[1386] = -4.52695157E-01;
  COFD[1387] = 1.95845411E-02;
  COFD[1388] = -1.97546550E+01;
  COFD[1389] = 5.47874728E+00;
  COFD[1390] = -4.89200555E-01;
  COFD[1391] = 2.09491311E-02;
  COFD[1392] = -1.97546550E+01;
  COFD[1393] = 5.47874728E+00;
  COFD[1394] = -4.89200555E-01;
  COFD[1395] = 2.09491311E-02;
  COFD[1396] = -2.04322329E+01;
  COFD[1397] = 5.66158593E+00;
  COFD[1398] = -5.05773626E-01;
  COFD[1399] = 2.13785785E-02;
  COFD[1400] = -2.06647608E+01;
  COFD[1401] = 5.69261801E+00;
  COFD[1402] = -5.07767233E-01;
  COFD[1403] = 2.13823707E-02;
  COFD[1404] = -1.52071280E+01;
  COFD[1405] = 4.41515409E+00;
  COFD[1406] = -3.63772276E-01;
  COFD[1407] = 1.60206346E-02;
  COFD[1408] = -1.37356112E+01;
  COFD[1409] = 3.62819746E+00;
  COFD[1410] = -2.62918091E-01;
  COFD[1411] = 1.16919984E-02;
  COFD[1412] = -1.37373708E+01;
  COFD[1413] = 3.62819746E+00;
  COFD[1414] = -2.62918091E-01;
  COFD[1415] = 1.16919984E-02;
  COFD[1416] = -1.51424727E+01;
  COFD[1417] = 4.05657097E+00;
  COFD[1418] = -3.19177419E-01;
  COFD[1419] = 1.41680711E-02;
  COFD[1420] = -1.96317242E+01;
  COFD[1421] = 5.63663290E+00;
  COFD[1422] = -4.93938369E-01;
  COFD[1423] = 2.05093528E-02;
  COFD[1424] = -1.51429120E+01;
  COFD[1425] = 4.05657097E+00;
  COFD[1426] = -3.19177419E-01;
  COFD[1427] = 1.41680711E-02;
  COFD[1428] = -1.51420062E+01;
  COFD[1429] = 4.05657097E+00;
  COFD[1430] = -3.19177419E-01;
  COFD[1431] = 1.41680711E-02;
  COFD[1432] = -1.62105007E+01;
  COFD[1433] = 4.40841144E+00;
  COFD[1434] = -3.62971037E-01;
  COFD[1435] = 1.59889839E-02;
  COFD[1436] = -1.62105007E+01;
  COFD[1437] = 4.40841144E+00;
  COFD[1438] = -3.62971037E-01;
  COFD[1439] = 1.59889839E-02;
  COFD[1440] = -1.62127531E+01;
  COFD[1441] = 4.40841144E+00;
  COFD[1442] = -3.62971037E-01;
  COFD[1443] = 1.59889839E-02;
  COFD[1444] = -2.00273452E+01;
  COFD[1445] = 5.69255533E+00;
  COFD[1446] = -5.07549153E-01;
  COFD[1447] = 2.13642831E-02;
  COFD[1448] = -2.00279091E+01;
  COFD[1449] = 5.69255533E+00;
  COFD[1450] = -5.07549153E-01;
  COFD[1451] = 2.13642831E-02;
  COFD[1452] = -1.95934977E+01;
  COFD[1453] = 5.55710535E+00;
  COFD[1454] = -4.95001691E-01;
  COFD[1455] = 2.10232540E-02;
  COFD[1456] = -1.47597092E+01;
  COFD[1457] = 3.88067557E+00;
  COFD[1458] = -2.95711582E-01;
  COFD[1459] = 1.31200360E-02;
  COFD[1460] = -1.79759686E+01;
  COFD[1461] = 5.02355235E+00;
  COFD[1462] = -4.36606539E-01;
  COFD[1463] = 1.89276102E-02;
  COFD[1464] = -1.76220505E+01;
  COFD[1465] = 4.87139509E+00;
  COFD[1466] = -4.19530454E-01;
  COFD[1467] = 1.82985749E-02;
  COFD[1468] = -1.76227455E+01;
  COFD[1469] = 4.87139509E+00;
  COFD[1470] = -4.19530454E-01;
  COFD[1471] = 1.82985749E-02;
  COFD[1472] = -1.83055308E+01;
  COFD[1473] = 5.08177078E+00;
  COFD[1474] = -4.43938558E-01;
  COFD[1475] = 1.92378766E-02;
  COFD[1476] = -1.83060930E+01;
  COFD[1477] = 5.08177078E+00;
  COFD[1478] = -4.43938558E-01;
  COFD[1479] = 1.92378766E-02;
  COFD[1480] = -1.58348835E+01;
  COFD[1481] = 4.44355128E+00;
  COFD[1482] = -3.66995830E-01;
  COFD[1483] = 1.61406807E-02;
  COFD[1484] = -1.97836160E+01;
  COFD[1485] = 5.57919683E+00;
  COFD[1486] = -4.96414281E-01;
  COFD[1487] = 2.10244573E-02;
  COFD[1488] = -1.97838903E+01;
  COFD[1489] = 5.57919683E+00;
  COFD[1490] = -4.96414281E-01;
  COFD[1491] = 2.10244573E-02;
  COFD[1492] = -1.87258592E+01;
  COFD[1493] = 5.15558102E+00;
  COFD[1494] = -4.52695157E-01;
  COFD[1495] = 1.95845411E-02;
  COFD[1496] = -2.04321497E+01;
  COFD[1497] = 5.66158593E+00;
  COFD[1498] = -5.05773626E-01;
  COFD[1499] = 2.13785785E-02;
  COFD[1500] = -2.06647010E+01;
  COFD[1501] = 5.69261801E+00;
  COFD[1502] = -5.07767233E-01;
  COFD[1503] = 2.13823707E-02;
  COFD[1504] = -2.05841384E+01;
  COFD[1505] = 5.69454982E+00;
  COFD[1506] = -5.08864150E-01;
  COFD[1507] = 2.14648697E-02;
  COFD[1508] = -2.06235536E+01;
  COFD[1509] = 5.62294739E+00;
  COFD[1510] = -4.90494097E-01;
  COFD[1511] = 2.02906896E-02;
  COFD[1512] = -2.06156359E+01;
  COFD[1513] = 5.62294739E+00;
  COFD[1514] = -4.90494097E-01;
  COFD[1515] = 2.02906896E-02;
  COFD[1516] = -1.47294273E+01;
  COFD[1517] = 3.87307263E+00;
  COFD[1518] = -2.94724304E-01;
  COFD[1519] = 1.30770565E-02;
  COFD[1520] = -2.19579772E+01;
  COFD[1521] = 5.55550693E+00;
  COFD[1522] = -4.95036815E-01;
  COFD[1523] = 2.10348077E-02;
  COFD[1524] = -1.78637627E+01;
  COFD[1525] = 4.47021072E+00;
  COFD[1526] = -3.70025595E-01;
  COFD[1527] = 1.62538396E-02;
  COFD[1528] = -1.53237314E+01;
  COFD[1529] = 3.59610534E+00;
  COFD[1530] = -2.58710306E-01;
  COFD[1531] = 1.15071603E-02;
  COFD[1532] = -1.13159319E+01;
  COFD[1533] = 2.46955006E+00;
  COFD[1534] = -1.11801689E-01;
  COFD[1535] = 5.11017313E-03;
  COFD[1536] = -1.80809344E+01;
  COFD[1537] = 4.42754431E+00;
  COFD[1538] = -3.65168891E-01;
  COFD[1539] = 1.60721247E-02;
  COFD[1540] = -1.91621005E+01;
  COFD[1541] = 4.78226937E+00;
  COFD[1542] = -4.08355493E-01;
  COFD[1543] = 1.78283223E-02;
  COFD[1544] = -1.91621005E+01;
  COFD[1545] = 4.78226937E+00;
  COFD[1546] = -4.08355493E-01;
  COFD[1547] = 1.78283223E-02;
  COFD[1548] = -2.01487086E+01;
  COFD[1549] = 5.10503848E+00;
  COFD[1550] = -4.46750415E-01;
  COFD[1551] = 1.93516000E-02;
  COFD[1552] = -2.04893098E+01;
  COFD[1553] = 5.18525677E+00;
  COFD[1554] = -4.56162395E-01;
  COFD[1555] = 1.97193601E-02;
  COFD[1556] = -1.37356112E+01;
  COFD[1557] = 3.62819746E+00;
  COFD[1558] = -2.62918091E-01;
  COFD[1559] = 1.16919984E-02;
  COFD[1560] = -1.34442643E+01;
  COFD[1561] = 3.01416179E+00;
  COFD[1562] = -1.83357978E-01;
  COFD[1563] = 8.24716177E-03;
  COFD[1564] = -1.34593057E+01;
  COFD[1565] = 3.01416179E+00;
  COFD[1566] = -1.83357978E-01;
  COFD[1567] = 8.24716177E-03;
  COFD[1568] = -1.45610582E+01;
  COFD[1569] = 3.28622734E+00;
  COFD[1570] = -2.18520178E-01;
  COFD[1571] = 9.76433153E-03;
  COFD[1572] = -1.97147887E+01;
  COFD[1573] = 5.29861493E+00;
  COFD[1574] = -4.67634852E-01;
  COFD[1575] = 2.00831648E-02;
  COFD[1576] = -1.45659193E+01;
  COFD[1577] = 3.28622734E+00;
  COFD[1578] = -2.18520178E-01;
  COFD[1579] = 9.76433153E-03;
  COFD[1580] = -1.45559421E+01;
  COFD[1581] = 3.28622734E+00;
  COFD[1582] = -2.18520178E-01;
  COFD[1583] = 9.76433153E-03;
  COFD[1584] = -1.53665935E+01;
  COFD[1585] = 3.61939742E+00;
  COFD[1586] = -2.61762703E-01;
  COFD[1587] = 1.16411562E-02;
  COFD[1588] = -1.53665935E+01;
  COFD[1589] = 3.61939742E+00;
  COFD[1590] = -2.61762703E-01;
  COFD[1591] = 1.16411562E-02;
  COFD[1592] = -1.53847821E+01;
  COFD[1593] = 3.61939742E+00;
  COFD[1594] = -2.61762703E-01;
  COFD[1595] = 1.16411562E-02;
  COFD[1596] = -1.97979307E+01;
  COFD[1597] = 5.19127685E+00;
  COFD[1598] = -4.56847065E-01;
  COFD[1599] = 1.97451148E-02;
  COFD[1600] = -1.98039321E+01;
  COFD[1601] = 5.19127685E+00;
  COFD[1602] = -4.56847065E-01;
  COFD[1603] = 1.97451148E-02;
  COFD[1604] = -1.91626530E+01;
  COFD[1605] = 4.95262571E+00;
  COFD[1606] = -4.28180895E-01;
  COFD[1607] = 1.85935195E-02;
  COFD[1608] = -1.43454806E+01;
  COFD[1609] = 3.19216881E+00;
  COFD[1610] = -2.06254938E-01;
  COFD[1611] = 9.22957499E-03;
  COFD[1612] = -1.74837527E+01;
  COFD[1613] = 4.33650732E+00;
  COFD[1614] = -3.54275787E-01;
  COFD[1615] = 1.56386717E-02;
  COFD[1616] = -1.70182310E+01;
  COFD[1617] = 4.16343140E+00;
  COFD[1618] = -3.33016502E-01;
  COFD[1619] = 1.47680825E-02;
  COFD[1620] = -1.70253741E+01;
  COFD[1621] = 4.16343140E+00;
  COFD[1622] = -3.33016502E-01;
  COFD[1623] = 1.47680825E-02;
  COFD[1624] = -1.76887118E+01;
  COFD[1625] = 4.37623052E+00;
  COFD[1626] = -3.59174763E-01;
  COFD[1627] = 1.58404575E-02;
  COFD[1628] = -1.76946985E+01;
  COFD[1629] = 4.37623052E+00;
  COFD[1630] = -3.59174763E-01;
  COFD[1631] = 1.58404575E-02;
  COFD[1632] = -1.52781013E+01;
  COFD[1633] = 3.67230169E+00;
  COFD[1634] = -2.68717936E-01;
  COFD[1635] = 1.19476518E-02;
  COFD[1636] = -1.94388557E+01;
  COFD[1637] = 5.00201576E+00;
  COFD[1638] = -4.33936868E-01;
  COFD[1639] = 1.88164818E-02;
  COFD[1640] = -1.94420940E+01;
  COFD[1641] = 5.00201576E+00;
  COFD[1642] = -4.33936868E-01;
  COFD[1643] = 1.88164818E-02;
  COFD[1644] = -1.80775656E+01;
  COFD[1645] = 4.42754431E+00;
  COFD[1646] = -3.65168891E-01;
  COFD[1647] = 1.60721247E-02;
  COFD[1648] = -2.01475986E+01;
  COFD[1649] = 5.10503848E+00;
  COFD[1650] = -4.46750415E-01;
  COFD[1651] = 1.93516000E-02;
  COFD[1652] = -2.04884923E+01;
  COFD[1653] = 5.18525677E+00;
  COFD[1654] = -4.56162395E-01;
  COFD[1655] = 1.97193601E-02;
  COFD[1656] = -2.03636660E+01;
  COFD[1657] = 5.15948257E+00;
  COFD[1658] = -4.53158628E-01;
  COFD[1659] = 1.96029316E-02;
  COFD[1660] = -2.09877624E+01;
  COFD[1661] = 5.35648475E+00;
  COFD[1662] = -4.74711461E-01;
  COFD[1663] = 2.03738220E-02;
  COFD[1664] = -2.09811042E+01;
  COFD[1665] = 5.35648475E+00;
  COFD[1666] = -4.74711461E-01;
  COFD[1667] = 2.03738220E-02;
  COFD[1668] = -1.43226682E+01;
  COFD[1669] = 3.18712931E+00;
  COFD[1670] = -2.05618739E-01;
  COFD[1671] = 9.20280853E-03;
  COFD[1672] = -2.19855758E+01;
  COFD[1673] = 5.55550693E+00;
  COFD[1674] = -4.95036815E-01;
  COFD[1675] = 2.10348077E-02;
  COFD[1676] = -1.78830003E+01;
  COFD[1677] = 4.47021072E+00;
  COFD[1678] = -3.70025595E-01;
  COFD[1679] = 1.62538396E-02;
  COFD[1680] = -1.53387938E+01;
  COFD[1681] = 3.59610534E+00;
  COFD[1682] = -2.58710306E-01;
  COFD[1683] = 1.15071603E-02;
  COFD[1684] = -1.13192593E+01;
  COFD[1685] = 2.46955006E+00;
  COFD[1686] = -1.11801689E-01;
  COFD[1687] = 5.11017313E-03;
  COFD[1688] = -1.81028806E+01;
  COFD[1689] = 4.42754431E+00;
  COFD[1690] = -3.65168891E-01;
  COFD[1691] = 1.60721247E-02;
  COFD[1692] = -1.91857087E+01;
  COFD[1693] = 4.78226937E+00;
  COFD[1694] = -4.08355493E-01;
  COFD[1695] = 1.78283223E-02;
  COFD[1696] = -1.91857087E+01;
  COFD[1697] = 4.78226937E+00;
  COFD[1698] = -4.08355493E-01;
  COFD[1699] = 1.78283223E-02;
  COFD[1700] = -2.01739312E+01;
  COFD[1701] = 5.10503848E+00;
  COFD[1702] = -4.46750415E-01;
  COFD[1703] = 1.93516000E-02;
  COFD[1704] = -2.05152202E+01;
  COFD[1705] = 5.18525677E+00;
  COFD[1706] = -4.56162395E-01;
  COFD[1707] = 1.97193601E-02;
  COFD[1708] = -1.37373708E+01;
  COFD[1709] = 3.62819746E+00;
  COFD[1710] = -2.62918091E-01;
  COFD[1711] = 1.16919984E-02;
  COFD[1712] = -1.34593057E+01;
  COFD[1713] = 3.01416179E+00;
  COFD[1714] = -1.83357978E-01;
  COFD[1715] = 8.24716177E-03;
  COFD[1716] = -1.34748137E+01;
  COFD[1717] = 3.01416179E+00;
  COFD[1718] = -1.83357978E-01;
  COFD[1719] = 8.24716177E-03;
  COFD[1720] = -1.45814272E+01;
  COFD[1721] = 3.28622734E+00;
  COFD[1722] = -2.18520178E-01;
  COFD[1723] = 9.76433153E-03;
  COFD[1724] = -1.97307360E+01;
  COFD[1725] = 5.29861493E+00;
  COFD[1726] = -4.67634852E-01;
  COFD[1727] = 2.00831648E-02;
  COFD[1728] = -1.45864915E+01;
  COFD[1729] = 3.28622734E+00;
  COFD[1730] = -2.18520178E-01;
  COFD[1731] = 9.76433153E-03;
  COFD[1732] = -1.45760996E+01;
  COFD[1733] = 3.28622734E+00;
  COFD[1734] = -2.18520178E-01;
  COFD[1735] = 9.76433153E-03;
  COFD[1736] = -1.53806331E+01;
  COFD[1737] = 3.61939742E+00;
  COFD[1738] = -2.61762703E-01;
  COFD[1739] = 1.16411562E-02;
  COFD[1740] = -1.53806331E+01;
  COFD[1741] = 3.61939742E+00;
  COFD[1742] = -2.61762703E-01;
  COFD[1743] = 1.16411562E-02;
  COFD[1744] = -1.53993494E+01;
  COFD[1745] = 3.61939742E+00;
  COFD[1746] = -2.61762703E-01;
  COFD[1747] = 1.16411562E-02;
  COFD[1748] = -1.98174079E+01;
  COFD[1749] = 5.19127685E+00;
  COFD[1750] = -4.56847065E-01;
  COFD[1751] = 1.97451148E-02;
  COFD[1752] = -1.98236492E+01;
  COFD[1753] = 5.19127685E+00;
  COFD[1754] = -4.56847065E-01;
  COFD[1755] = 1.97451148E-02;
  COFD[1756] = -1.91825997E+01;
  COFD[1757] = 4.95262571E+00;
  COFD[1758] = -4.28180895E-01;
  COFD[1759] = 1.85935195E-02;
  COFD[1760] = -1.43647070E+01;
  COFD[1761] = 3.19216881E+00;
  COFD[1762] = -2.06254938E-01;
  COFD[1763] = 9.22957499E-03;
  COFD[1764] = -1.75059730E+01;
  COFD[1765] = 4.33650732E+00;
  COFD[1766] = -3.54275787E-01;
  COFD[1767] = 1.56386717E-02;
  COFD[1768] = -1.70369324E+01;
  COFD[1769] = 4.16343140E+00;
  COFD[1770] = -3.33016502E-01;
  COFD[1771] = 1.47680825E-02;
  COFD[1772] = -1.70443498E+01;
  COFD[1773] = 4.16343140E+00;
  COFD[1774] = -3.33016502E-01;
  COFD[1775] = 1.47680825E-02;
  COFD[1776] = -1.77081997E+01;
  COFD[1777] = 4.37623052E+00;
  COFD[1778] = -3.59174763E-01;
  COFD[1779] = 1.58404575E-02;
  COFD[1780] = -1.77144258E+01;
  COFD[1781] = 4.37623052E+00;
  COFD[1782] = -3.59174763E-01;
  COFD[1783] = 1.58404575E-02;
  COFD[1784] = -1.52998901E+01;
  COFD[1785] = 3.67230169E+00;
  COFD[1786] = -2.68717936E-01;
  COFD[1787] = 1.19476518E-02;
  COFD[1788] = -1.94607954E+01;
  COFD[1789] = 5.00201576E+00;
  COFD[1790] = -4.33936868E-01;
  COFD[1791] = 1.88164818E-02;
  COFD[1792] = -1.94641794E+01;
  COFD[1793] = 5.00201576E+00;
  COFD[1794] = -4.33936868E-01;
  COFD[1795] = 1.88164818E-02;
  COFD[1796] = -1.80993612E+01;
  COFD[1797] = 4.42754431E+00;
  COFD[1798] = -3.65168891E-01;
  COFD[1799] = 1.60721247E-02;
  COFD[1800] = -2.01727639E+01;
  COFD[1801] = 5.10503848E+00;
  COFD[1802] = -4.46750415E-01;
  COFD[1803] = 1.93516000E-02;
  COFD[1804] = -2.05143592E+01;
  COFD[1805] = 5.18525677E+00;
  COFD[1806] = -4.56162395E-01;
  COFD[1807] = 1.97193601E-02;
  COFD[1808] = -2.03901704E+01;
  COFD[1809] = 5.15948257E+00;
  COFD[1810] = -4.53158628E-01;
  COFD[1811] = 1.96029316E-02;
  COFD[1812] = -2.10141677E+01;
  COFD[1813] = 5.35648475E+00;
  COFD[1814] = -4.74711461E-01;
  COFD[1815] = 2.03738220E-02;
  COFD[1816] = -2.10075435E+01;
  COFD[1817] = 5.35648475E+00;
  COFD[1818] = -4.74711461E-01;
  COFD[1819] = 2.03738220E-02;
  COFD[1820] = -1.43418956E+01;
  COFD[1821] = 3.18712931E+00;
  COFD[1822] = -2.05618739E-01;
  COFD[1823] = 9.20280853E-03;
  COFD[1824] = -2.29202583E+01;
  COFD[1825] = 5.66019632E+00;
  COFD[1826] = -4.98519062E-01;
  COFD[1827] = 2.07717456E-02;
  COFD[1828] = -1.93532167E+01;
  COFD[1829] = 4.86360045E+00;
  COFD[1830] = -4.18551819E-01;
  COFD[1831] = 1.82573693E-02;
  COFD[1832] = -1.67650078E+01;
  COFD[1833] = 4.01208621E+00;
  COFD[1834] = -3.13312434E-01;
  COFD[1835] = 1.39091843E-02;
  COFD[1836] = -1.21709594E+01;
  COFD[1837] = 2.69803790E+00;
  COFD[1838] = -1.42519695E-01;
  COFD[1839] = 6.48827766E-03;
  COFD[1840] = -1.94985834E+01;
  COFD[1841] = 4.78691752E+00;
  COFD[1842] = -4.08931679E-01;
  COFD[1843] = 1.78522598E-02;
  COFD[1844] = -2.06284754E+01;
  COFD[1845] = 5.14418905E+00;
  COFD[1846] = -4.51357139E-01;
  COFD[1847] = 1.95321862E-02;
  COFD[1848] = -2.06284754E+01;
  COFD[1849] = 5.14418905E+00;
  COFD[1850] = -4.51357139E-01;
  COFD[1851] = 1.95321862E-02;
  COFD[1852] = -2.15747345E+01;
  COFD[1853] = 5.43079567E+00;
  COFD[1854] = -4.83552836E-01;
  COFD[1855] = 2.07260684E-02;
  COFD[1856] = -2.18929562E+01;
  COFD[1857] = 5.49891346E+00;
  COFD[1858] = -4.91131042E-01;
  COFD[1859] = 2.10049926E-02;
  COFD[1860] = -1.51424727E+01;
  COFD[1861] = 4.05657097E+00;
  COFD[1862] = -3.19177419E-01;
  COFD[1863] = 1.41680711E-02;
  COFD[1864] = -1.45610582E+01;
  COFD[1865] = 3.28622734E+00;
  COFD[1866] = -2.18520178E-01;
  COFD[1867] = 9.76433153E-03;
  COFD[1868] = -1.45814272E+01;
  COFD[1869] = 3.28622734E+00;
  COFD[1870] = -2.18520178E-01;
  COFD[1871] = 9.76433153E-03;
  COFD[1872] = -1.58756391E+01;
  COFD[1873] = 3.62102412E+00;
  COFD[1874] = -2.61976270E-01;
  COFD[1875] = 1.16505537E-02;
  COFD[1876] = -2.09606261E+01;
  COFD[1877] = 5.55840997E+00;
  COFD[1878] = -4.94530689E-01;
  COFD[1879] = 2.09759812E-02;
  COFD[1880] = -1.58831032E+01;
  COFD[1881] = 3.62102412E+00;
  COFD[1882] = -2.61976270E-01;
  COFD[1883] = 1.16505537E-02;
  COFD[1884] = -1.58678250E+01;
  COFD[1885] = 3.62102412E+00;
  COFD[1886] = -2.61976270E-01;
  COFD[1887] = 1.16505537E-02;
  COFD[1888] = -1.68174730E+01;
  COFD[1889] = 4.04449801E+00;
  COFD[1890] = -3.17589152E-01;
  COFD[1891] = 1.40981153E-02;
  COFD[1892] = -1.68174730E+01;
  COFD[1893] = 4.04449801E+00;
  COFD[1894] = -3.17589152E-01;
  COFD[1895] = 1.40981153E-02;
  COFD[1896] = -1.68415687E+01;
  COFD[1897] = 4.04449801E+00;
  COFD[1898] = -3.17589152E-01;
  COFD[1899] = 1.40981153E-02;
  COFD[1900] = -2.11620529E+01;
  COFD[1901] = 5.50365749E+00;
  COFD[1902] = -4.91628924E-01;
  COFD[1903] = 2.10219562E-02;
  COFD[1904] = -2.11710660E+01;
  COFD[1905] = 5.50365749E+00;
  COFD[1906] = -4.91628924E-01;
  COFD[1907] = 2.10219562E-02;
  COFD[1908] = -2.05681987E+01;
  COFD[1909] = 5.28793741E+00;
  COFD[1910] = -4.66860688E-01;
  COFD[1911] = 2.00751059E-02;
  COFD[1912] = -1.55613976E+01;
  COFD[1913] = 3.49518380E+00;
  COFD[1914] = -2.45369513E-01;
  COFD[1915] = 1.09169682E-02;
  COFD[1916] = -1.88562057E+01;
  COFD[1917] = 4.66413466E+00;
  COFD[1918] = -3.93781062E-01;
  COFD[1919] = 1.72262444E-02;
  COFD[1920] = -1.82753389E+01;
  COFD[1921] = 4.46974656E+00;
  COFD[1922] = -3.69978112E-01;
  COFD[1923] = 1.62523234E-02;
  COFD[1924] = -1.82858660E+01;
  COFD[1925] = 4.46974656E+00;
  COFD[1926] = -3.69978112E-01;
  COFD[1927] = 1.62523234E-02;
  COFD[1928] = -1.90176990E+01;
  COFD[1929] = 4.70564669E+00;
  COFD[1930] = -3.98805713E-01;
  COFD[1931] = 1.74292853E-02;
  COFD[1932] = -1.90266923E+01;
  COFD[1933] = 4.70564669E+00;
  COFD[1934] = -3.98805713E-01;
  COFD[1935] = 1.74292853E-02;
  COFD[1936] = -1.68992145E+01;
  COFD[1937] = 4.10789126E+00;
  COFD[1938] = -3.25818537E-01;
  COFD[1939] = 1.44557050E-02;
  COFD[1940] = -2.08541961E+01;
  COFD[1941] = 5.33208815E+00;
  COFD[1942] = -4.71670417E-01;
  COFD[1943] = 2.02463769E-02;
  COFD[1944] = -2.08593726E+01;
  COFD[1945] = 5.33208815E+00;
  COFD[1946] = -4.71670417E-01;
  COFD[1947] = 2.02463769E-02;
  COFD[1948] = -1.94932184E+01;
  COFD[1949] = 4.78691752E+00;
  COFD[1950] = -4.08931679E-01;
  COFD[1951] = 1.78522598E-02;
  COFD[1952] = -2.15727968E+01;
  COFD[1953] = 5.43079567E+00;
  COFD[1954] = -4.83552836E-01;
  COFD[1955] = 2.07260684E-02;
  COFD[1956] = -2.18914998E+01;
  COFD[1957] = 5.49891346E+00;
  COFD[1958] = -4.91131042E-01;
  COFD[1959] = 2.10049926E-02;
  COFD[1960] = -2.18037694E+01;
  COFD[1961] = 5.48356010E+00;
  COFD[1962] = -4.89669525E-01;
  COFD[1963] = 2.09631481E-02;
  COFD[1964] = -2.22289423E+01;
  COFD[1965] = 5.58963154E+00;
  COFD[1966] = -4.97619507E-01;
  COFD[1967] = 2.10709149E-02;
  COFD[1968] = -2.22233693E+01;
  COFD[1969] = 5.58963154E+00;
  COFD[1970] = -4.97619507E-01;
  COFD[1971] = 2.10709149E-02;
  COFD[1972] = -1.55312775E+01;
  COFD[1973] = 3.48668120E+00;
  COFD[1974] = -2.44246396E-01;
  COFD[1975] = 1.08673594E-02;
  COFD[1976] = -1.35355833E+01;
  COFD[1977] = 1.16298665E+00;
  COFD[1978] = 2.00499179E-01;
  COFD[1979] = -1.41443081E-02;
  COFD[1980] = -2.02044023E+01;
  COFD[1981] = 4.78127419E+00;
  COFD[1982] = -3.44267376E-01;
  COFD[1983] = 1.24291470E-02;
  COFD[1984] = -2.12223679E+01;
  COFD[1985] = 5.48825752E+00;
  COFD[1986] = -4.63970990E-01;
  COFD[1987] = 1.87656606E-02;
  COFD[1988] = -1.75664018E+01;
  COFD[1989] = 4.80598394E+00;
  COFD[1990] = -4.11304675E-01;
  COFD[1991] = 1.79513369E-02;
  COFD[1992] = -2.07521282E+01;
  COFD[1993] = 4.88534159E+00;
  COFD[1994] = -3.61152228E-01;
  COFD[1995] = 1.32980658E-02;
  COFD[1996] = -1.93590864E+01;
  COFD[1997] = 4.12502887E+00;
  COFD[1998] = -2.41264310E-01;
  COFD[1999] = 7.24019972E-03;
  COFD[2000] = -1.93590864E+01;
  COFD[2001] = 4.12502887E+00;
  COFD[2002] = -2.41264310E-01;
  COFD[2003] = 7.24019972E-03;
  COFD[2004] = -1.59888179E+01;
  COFD[2005] = 2.47370894E+00;
  COFD[2006] = 8.07041879E-03;
  COFD[2007] = -4.95386032E-03;
  COFD[2008] = -1.70134429E+01;
  COFD[2009] = 2.91843695E+00;
  COFD[2010] = -5.89884416E-02;
  COFD[2011] = -1.68173262E-03;
  COFD[2012] = -1.96317242E+01;
  COFD[2013] = 5.63663290E+00;
  COFD[2014] = -4.93938369E-01;
  COFD[2015] = 2.05093528E-02;
  COFD[2016] = -1.97147887E+01;
  COFD[2017] = 5.29861493E+00;
  COFD[2018] = -4.67634852E-01;
  COFD[2019] = 2.00831648E-02;
  COFD[2020] = -1.97307360E+01;
  COFD[2021] = 5.29861493E+00;
  COFD[2022] = -4.67634852E-01;
  COFD[2023] = 2.00831648E-02;
  COFD[2024] = -2.09606261E+01;
  COFD[2025] = 5.55840997E+00;
  COFD[2026] = -4.94530689E-01;
  COFD[2027] = 2.09759812E-02;
  COFD[2028] = -1.05068822E+01;
  COFD[2029] = 2.93638849E-01;
  COFD[2030] = 3.37092435E-01;
  COFD[2031] = -2.06916216E-02;
  COFD[2032] = -2.09658856E+01;
  COFD[2033] = 5.55840997E+00;
  COFD[2034] = -4.94530689E-01;
  COFD[2035] = 2.09759812E-02;
  COFD[2036] = -2.14461605E+01;
  COFD[2037] = 5.68173055E+00;
  COFD[2038] = -5.03970351E-01;
  COFD[2039] = 2.11185916E-02;
  COFD[2040] = -2.13279783E+01;
  COFD[2041] = 5.64044249E+00;
  COFD[2042] = -4.94776828E-01;
  COFD[2043] = 2.05601004E-02;
  COFD[2044] = -2.13279783E+01;
  COFD[2045] = 5.64044249E+00;
  COFD[2046] = -4.94776828E-01;
  COFD[2047] = 2.05601004E-02;
  COFD[2048] = -2.13471897E+01;
  COFD[2049] = 5.64044249E+00;
  COFD[2050] = -4.94776828E-01;
  COFD[2051] = 2.05601004E-02;
  COFD[2052] = -1.63811326E+01;
  COFD[2053] = 2.95527779E+00;
  COFD[2054] = -6.34245505E-02;
  COFD[2055] = -1.50573641E-03;
  COFD[2056] = -1.63876036E+01;
  COFD[2057] = 2.95527779E+00;
  COFD[2058] = -6.34245505E-02;
  COFD[2059] = -1.50573641E-03;
  COFD[2060] = -1.51566210E+01;
  COFD[2061] = 2.35540530E+00;
  COFD[2062] = 2.53680281E-02;
  COFD[2063] = -5.70416965E-03;
  COFD[2064] = -2.14468808E+01;
  COFD[2065] = 5.69385548E+00;
  COFD[2066] = -5.08602616E-01;
  COFD[2067] = 2.14463817E-02;
  COFD[2068] = -2.00192136E+01;
  COFD[2069] = 4.67238423E+00;
  COFD[2070] = -3.27066971E-01;
  COFD[2071] = 1.15576503E-02;
  COFD[2072] = -2.11726491E+01;
  COFD[2073] = 5.31392395E+00;
  COFD[2074] = -4.32538469E-01;
  COFD[2075] = 1.70400084E-02;
  COFD[2076] = -2.11803284E+01;
  COFD[2077] = 5.31392395E+00;
  COFD[2078] = -4.32538469E-01;
  COFD[2079] = 1.70400084E-02;
  COFD[2080] = -2.06643856E+01;
  COFD[2081] = 4.97931576E+00;
  COFD[2082] = -3.76842377E-01;
  COFD[2083] = 1.41198571E-02;
  COFD[2084] = -2.06708409E+01;
  COFD[2085] = 4.97931576E+00;
  COFD[2086] = -3.76842377E-01;
  COFD[2087] = 1.41198571E-02;
  COFD[2088] = -2.11054327E+01;
  COFD[2089] = 5.62361194E+00;
  COFD[2090] = -4.90650400E-01;
  COFD[2091] = 2.03003839E-02;
  COFD[2092] = -1.75302200E+01;
  COFD[2093] = 3.42123632E+00;
  COFD[2094] = -1.34010328E-01;
  COFD[2095] = 1.95240829E-03;
  COFD[2096] = -1.75337449E+01;
  COFD[2097] = 3.42123632E+00;
  COFD[2098] = -1.34010328E-01;
  COFD[2099] = 1.95240829E-03;
  COFD[2100] = -2.07484632E+01;
  COFD[2101] = 4.88534159E+00;
  COFD[2102] = -3.61152228E-01;
  COFD[2103] = 1.32980658E-02;
  COFD[2104] = -1.59875944E+01;
  COFD[2105] = 2.47370894E+00;
  COFD[2106] = 8.07041879E-03;
  COFD[2107] = -4.95386032E-03;
  COFD[2108] = -1.70125393E+01;
  COFD[2109] = 2.91843695E+00;
  COFD[2110] = -5.89884416E-02;
  COFD[2111] = -1.68173262E-03;
  COFD[2112] = -1.71308777E+01;
  COFD[2113] = 2.99815774E+00;
  COFD[2114] = -7.09653692E-02;
  COFD[2115] = -1.09836431E-03;
  COFD[2116] = -1.40691464E+01;
  COFD[2117] = 1.58343247E+00;
  COFD[2118] = 1.35669474E-01;
  COFD[2119] = -1.08901989E-02;
  COFD[2120] = -1.40437576E+01;
  COFD[2121] = 1.57446474E+00;
  COFD[2122] = 1.37000821E-01;
  COFD[2123] = -1.09532629E-02;
  COFD[2124] = -2.14057861E+01;
  COFD[2125] = 5.68934332E+00;
  COFD[2126] = -5.08839059E-01;
  COFD[2127] = 2.14906650E-02;
  COFD[2128] = -2.29326161E+01;
  COFD[2129] = 5.66019632E+00;
  COFD[2130] = -4.98519062E-01;
  COFD[2131] = 2.07717456E-02;
  COFD[2132] = -1.93600713E+01;
  COFD[2133] = 4.86360045E+00;
  COFD[2134] = -4.18551819E-01;
  COFD[2135] = 1.82573693E-02;
  COFD[2136] = -1.67698779E+01;
  COFD[2137] = 4.01208621E+00;
  COFD[2138] = -3.13312434E-01;
  COFD[2139] = 1.39091843E-02;
  COFD[2140] = -1.21718131E+01;
  COFD[2141] = 2.69803790E+00;
  COFD[2142] = -1.42519695E-01;
  COFD[2143] = 6.48827766E-03;
  COFD[2144] = -1.95069572E+01;
  COFD[2145] = 4.78691752E+00;
  COFD[2146] = -4.08931679E-01;
  COFD[2147] = 1.78522598E-02;
  COFD[2148] = -2.06378929E+01;
  COFD[2149] = 5.14418905E+00;
  COFD[2150] = -4.51357139E-01;
  COFD[2151] = 1.95321862E-02;
  COFD[2152] = -2.06378929E+01;
  COFD[2153] = 5.14418905E+00;
  COFD[2154] = -4.51357139E-01;
  COFD[2155] = 1.95321862E-02;
  COFD[2156] = -2.15852608E+01;
  COFD[2157] = 5.43079567E+00;
  COFD[2158] = -4.83552836E-01;
  COFD[2159] = 2.07260684E-02;
  COFD[2160] = -2.19039865E+01;
  COFD[2161] = 5.49891346E+00;
  COFD[2162] = -4.91131042E-01;
  COFD[2163] = 2.10049926E-02;
  COFD[2164] = -1.51429120E+01;
  COFD[2165] = 4.05657097E+00;
  COFD[2166] = -3.19177419E-01;
  COFD[2167] = 1.41680711E-02;
  COFD[2168] = -1.45659193E+01;
  COFD[2169] = 3.28622734E+00;
  COFD[2170] = -2.18520178E-01;
  COFD[2171] = 9.76433153E-03;
  COFD[2172] = -1.45864915E+01;
  COFD[2173] = 3.28622734E+00;
  COFD[2174] = -2.18520178E-01;
  COFD[2175] = 9.76433153E-03;
  COFD[2176] = -1.58831032E+01;
  COFD[2177] = 3.62102412E+00;
  COFD[2178] = -2.61976270E-01;
  COFD[2179] = 1.16505537E-02;
  COFD[2180] = -2.09658856E+01;
  COFD[2181] = 5.55840997E+00;
  COFD[2182] = -4.94530689E-01;
  COFD[2183] = 2.09759812E-02;
  COFD[2184] = -1.58906805E+01;
  COFD[2185] = 3.62102412E+00;
  COFD[2186] = -2.61976270E-01;
  COFD[2187] = 1.16505537E-02;
  COFD[2188] = -1.58751725E+01;
  COFD[2189] = 3.62102412E+00;
  COFD[2190] = -2.61976270E-01;
  COFD[2191] = 1.16505537E-02;
  COFD[2192] = -1.68219118E+01;
  COFD[2193] = 4.04449801E+00;
  COFD[2194] = -3.17589152E-01;
  COFD[2195] = 1.40981153E-02;
  COFD[2196] = -1.68219118E+01;
  COFD[2197] = 4.04449801E+00;
  COFD[2198] = -3.17589152E-01;
  COFD[2199] = 1.40981153E-02;
  COFD[2200] = -1.68462277E+01;
  COFD[2201] = 4.04449801E+00;
  COFD[2202] = -3.17589152E-01;
  COFD[2203] = 1.40981153E-02;
  COFD[2204] = -2.11690338E+01;
  COFD[2205] = 5.50365749E+00;
  COFD[2206] = -4.91628924E-01;
  COFD[2207] = 2.10219562E-02;
  COFD[2208] = -2.11781748E+01;
  COFD[2209] = 5.50365749E+00;
  COFD[2210] = -4.91628924E-01;
  COFD[2211] = 2.10219562E-02;
  COFD[2212] = -2.05754313E+01;
  COFD[2213] = 5.28793741E+00;
  COFD[2214] = -4.66860688E-01;
  COFD[2215] = 2.00751059E-02;
  COFD[2216] = -1.55682463E+01;
  COFD[2217] = 3.49518380E+00;
  COFD[2218] = -2.45369513E-01;
  COFD[2219] = 1.09169682E-02;
  COFD[2220] = -1.88647454E+01;
  COFD[2221] = 4.66413466E+00;
  COFD[2222] = -3.93781062E-01;
  COFD[2223] = 1.72262444E-02;
  COFD[2224] = -1.82819164E+01;
  COFD[2225] = 4.46974656E+00;
  COFD[2226] = -3.69978112E-01;
  COFD[2227] = 1.62523234E-02;
  COFD[2228] = -1.82925844E+01;
  COFD[2229] = 4.46974656E+00;
  COFD[2230] = -3.69978112E-01;
  COFD[2231] = 1.62523234E-02;
  COFD[2232] = -1.90246855E+01;
  COFD[2233] = 4.70564669E+00;
  COFD[2234] = -3.98805713E-01;
  COFD[2235] = 1.74292853E-02;
  COFD[2236] = -1.90338066E+01;
  COFD[2237] = 4.70564669E+00;
  COFD[2238] = -3.98805713E-01;
  COFD[2239] = 1.74292853E-02;
  COFD[2240] = -1.69074943E+01;
  COFD[2241] = 4.10789126E+00;
  COFD[2242] = -3.25818537E-01;
  COFD[2243] = 1.44557050E-02;
  COFD[2244] = -2.08625661E+01;
  COFD[2245] = 5.33208815E+00;
  COFD[2246] = -4.71670417E-01;
  COFD[2247] = 2.02463769E-02;
  COFD[2248] = -2.08678305E+01;
  COFD[2249] = 5.33208815E+00;
  COFD[2250] = -4.71670417E-01;
  COFD[2251] = 2.02463769E-02;
  COFD[2252] = -1.95015021E+01;
  COFD[2253] = 4.78691752E+00;
  COFD[2254] = -4.08931679E-01;
  COFD[2255] = 1.78522598E-02;
  COFD[2256] = -2.15832819E+01;
  COFD[2257] = 5.43079567E+00;
  COFD[2258] = -4.83552836E-01;
  COFD[2259] = 2.07260684E-02;
  COFD[2260] = -2.19024976E+01;
  COFD[2261] = 5.49891346E+00;
  COFD[2262] = -4.91131042E-01;
  COFD[2263] = 2.10049926E-02;
  COFD[2264] = -2.18152516E+01;
  COFD[2265] = 5.48356010E+00;
  COFD[2266] = -4.89669525E-01;
  COFD[2267] = 2.09631481E-02;
  COFD[2268] = -2.22403480E+01;
  COFD[2269] = 5.58963154E+00;
  COFD[2270] = -4.97619507E-01;
  COFD[2271] = 2.10709149E-02;
  COFD[2272] = -2.22348012E+01;
  COFD[2273] = 5.58963154E+00;
  COFD[2274] = -4.97619507E-01;
  COFD[2275] = 2.10709149E-02;
  COFD[2276] = -1.55381268E+01;
  COFD[2277] = 3.48668120E+00;
  COFD[2278] = -2.44246396E-01;
  COFD[2279] = 1.08673594E-02;
  COFD[2280] = -2.29074484E+01;
  COFD[2281] = 5.66019632E+00;
  COFD[2282] = -4.98519062E-01;
  COFD[2283] = 2.07717456E-02;
  COFD[2284] = -1.93460318E+01;
  COFD[2285] = 4.86360045E+00;
  COFD[2286] = -4.18551819E-01;
  COFD[2287] = 1.82573693E-02;
  COFD[2288] = -1.67598823E+01;
  COFD[2289] = 4.01208621E+00;
  COFD[2290] = -3.13312434E-01;
  COFD[2291] = 1.39091843E-02;
  COFD[2292] = -1.21700535E+01;
  COFD[2293] = 2.69803790E+00;
  COFD[2294] = -1.42519695E-01;
  COFD[2295] = 6.48827766E-03;
  COFD[2296] = -1.94898331E+01;
  COFD[2297] = 4.78691752E+00;
  COFD[2298] = -4.08931679E-01;
  COFD[2299] = 1.78522598E-02;
  COFD[2300] = -2.06186553E+01;
  COFD[2301] = 5.14418905E+00;
  COFD[2302] = -4.51357139E-01;
  COFD[2303] = 1.95321862E-02;
  COFD[2304] = -2.06186553E+01;
  COFD[2305] = 5.14418905E+00;
  COFD[2306] = -4.51357139E-01;
  COFD[2307] = 1.95321862E-02;
  COFD[2308] = -2.15637829E+01;
  COFD[2309] = 5.43079567E+00;
  COFD[2310] = -4.83552836E-01;
  COFD[2311] = 2.07260684E-02;
  COFD[2312] = -2.18850448E+01;
  COFD[2313] = 5.49999263E+00;
  COFD[2314] = -4.91244709E-01;
  COFD[2315] = 2.10088865E-02;
  COFD[2316] = -1.51420062E+01;
  COFD[2317] = 4.05657097E+00;
  COFD[2318] = -3.19177419E-01;
  COFD[2319] = 1.41680711E-02;
  COFD[2320] = -1.45559421E+01;
  COFD[2321] = 3.28622734E+00;
  COFD[2322] = -2.18520178E-01;
  COFD[2323] = 9.76433153E-03;
  COFD[2324] = -1.45760996E+01;
  COFD[2325] = 3.28622734E+00;
  COFD[2326] = -2.18520178E-01;
  COFD[2327] = 9.76433153E-03;
  COFD[2328] = -1.58678250E+01;
  COFD[2329] = 3.62102412E+00;
  COFD[2330] = -2.61976270E-01;
  COFD[2331] = 1.16505537E-02;
  COFD[2332] = -2.14461605E+01;
  COFD[2333] = 5.68173055E+00;
  COFD[2334] = -5.03970351E-01;
  COFD[2335] = 2.11185916E-02;
  COFD[2336] = -1.58751725E+01;
  COFD[2337] = 3.62102412E+00;
  COFD[2338] = -2.61976270E-01;
  COFD[2339] = 1.16505537E-02;
  COFD[2340] = -1.58601311E+01;
  COFD[2341] = 3.62102412E+00;
  COFD[2342] = -2.61976270E-01;
  COFD[2343] = 1.16505537E-02;
  COFD[2344] = -1.68127974E+01;
  COFD[2345] = 4.04449801E+00;
  COFD[2346] = -3.17589152E-01;
  COFD[2347] = 1.40981153E-02;
  COFD[2348] = -1.68127974E+01;
  COFD[2349] = 4.04449801E+00;
  COFD[2350] = -3.17589152E-01;
  COFD[2351] = 1.40981153E-02;
  COFD[2352] = -1.68366634E+01;
  COFD[2353] = 4.04449801E+00;
  COFD[2354] = -3.17589152E-01;
  COFD[2355] = 1.40981153E-02;
  COFD[2356] = -2.11547376E+01;
  COFD[2357] = 5.50365749E+00;
  COFD[2358] = -4.91628924E-01;
  COFD[2359] = 2.10219562E-02;
  COFD[2360] = -2.11636186E+01;
  COFD[2361] = 5.50365749E+00;
  COFD[2362] = -4.91628924E-01;
  COFD[2363] = 2.10219562E-02;
  COFD[2364] = -2.08558213E+01;
  COFD[2365] = 5.38711151E+00;
  COFD[2366] = -4.78457810E-01;
  COFD[2367] = 2.05275949E-02;
  COFD[2368] = -1.55542187E+01;
  COFD[2369] = 3.49518380E+00;
  COFD[2370] = -2.45369513E-01;
  COFD[2371] = 1.09169682E-02;
  COFD[2372] = -1.88472851E+01;
  COFD[2373] = 4.66413466E+00;
  COFD[2374] = -3.93781062E-01;
  COFD[2375] = 1.72262444E-02;
  COFD[2376] = -1.82684406E+01;
  COFD[2377] = 4.46974656E+00;
  COFD[2378] = -3.69978112E-01;
  COFD[2379] = 1.62523234E-02;
  COFD[2380] = -1.82788220E+01;
  COFD[2381] = 4.46974656E+00;
  COFD[2382] = -3.69978112E-01;
  COFD[2383] = 1.62523234E-02;
  COFD[2384] = -1.90103778E+01;
  COFD[2385] = 4.70564669E+00;
  COFD[2386] = -3.98805713E-01;
  COFD[2387] = 1.74292853E-02;
  COFD[2388] = -1.90192393E+01;
  COFD[2389] = 4.70564669E+00;
  COFD[2390] = -3.98805713E-01;
  COFD[2391] = 1.74292853E-02;
  COFD[2392] = -1.68905609E+01;
  COFD[2393] = 4.10789126E+00;
  COFD[2394] = -3.25818537E-01;
  COFD[2395] = 1.44557050E-02;
  COFD[2396] = -2.08454498E+01;
  COFD[2397] = 5.33208815E+00;
  COFD[2398] = -4.71670417E-01;
  COFD[2399] = 2.02463769E-02;
  COFD[2400] = -2.08505361E+01;
  COFD[2401] = 5.33208815E+00;
  COFD[2402] = -4.71670417E-01;
  COFD[2403] = 2.02463769E-02;
  COFD[2404] = -1.94845606E+01;
  COFD[2405] = 4.78691752E+00;
  COFD[2406] = -4.08931679E-01;
  COFD[2407] = 1.78522598E-02;
  COFD[2408] = -2.15618870E+01;
  COFD[2409] = 5.43079567E+00;
  COFD[2410] = -4.83552836E-01;
  COFD[2411] = 2.07260684E-02;
  COFD[2412] = -2.18836213E+01;
  COFD[2413] = 5.49999263E+00;
  COFD[2414] = -4.91244709E-01;
  COFD[2415] = 2.10088865E-02;
  COFD[2416] = -2.17946894E+01;
  COFD[2417] = 5.48430987E+00;
  COFD[2418] = -4.89732736E-01;
  COFD[2419] = 2.09644889E-02;
  COFD[2420] = -2.24207370E+01;
  COFD[2421] = 5.65610774E+00;
  COFD[2422] = -5.05160267E-01;
  COFD[2423] = 2.13557545E-02;
  COFD[2424] = -2.24183026E+01;
  COFD[2425] = 5.65712639E+00;
  COFD[2426] = -5.05274259E-01;
  COFD[2427] = 2.13599929E-02;
  COFD[2428] = -1.55240981E+01;
  COFD[2429] = 3.48668120E+00;
  COFD[2430] = -2.44246396E-01;
  COFD[2431] = 1.08673594E-02;
  COFD[2432] = -2.23541050E+01;
  COFD[2433] = 5.42819099E+00;
  COFD[2434] = -4.53154458E-01;
  COFD[2435] = 1.81718118E-02;
  COFD[2436] = -2.02073270E+01;
  COFD[2437] = 5.20876767E+00;
  COFD[2438] = -4.58879580E-01;
  COFD[2439] = 1.98237644E-02;
  COFD[2440] = -1.76883631E+01;
  COFD[2441] = 4.38487586E+00;
  COFD[2442] = -3.60203069E-01;
  COFD[2443] = 1.58810844E-02;
  COFD[2444] = -1.27433094E+01;
  COFD[2445] = 2.88402293E+00;
  COFD[2446] = -1.66388166E-01;
  COFD[2447] = 7.50834254E-03;
  COFD[2448] = -2.03295194E+01;
  COFD[2449] = 5.14674817E+00;
  COFD[2450] = -4.51657353E-01;
  COFD[2451] = 1.95439167E-02;
  COFD[2452] = -2.13778747E+01;
  COFD[2453] = 5.47055637E+00;
  COFD[2454] = -4.88260653E-01;
  COFD[2455] = 2.09131292E-02;
  COFD[2456] = -2.13778747E+01;
  COFD[2457] = 5.47055637E+00;
  COFD[2458] = -4.88260653E-01;
  COFD[2459] = 2.09131292E-02;
  COFD[2460] = -2.20751193E+01;
  COFD[2461] = 5.65330302E+00;
  COFD[2462] = -5.04845334E-01;
  COFD[2463] = 2.13439933E-02;
  COFD[2464] = -2.23173549E+01;
  COFD[2465] = 5.69237157E+00;
  COFD[2466] = -5.07995132E-01;
  COFD[2467] = 2.14028776E-02;
  COFD[2468] = -1.62105007E+01;
  COFD[2469] = 4.40841144E+00;
  COFD[2470] = -3.62971037E-01;
  COFD[2471] = 1.59889839E-02;
  COFD[2472] = -1.53665935E+01;
  COFD[2473] = 3.61939742E+00;
  COFD[2474] = -2.61762703E-01;
  COFD[2475] = 1.16411562E-02;
  COFD[2476] = -1.53806331E+01;
  COFD[2477] = 3.61939742E+00;
  COFD[2478] = -2.61762703E-01;
  COFD[2479] = 1.16411562E-02;
  COFD[2480] = -1.68174730E+01;
  COFD[2481] = 4.04449801E+00;
  COFD[2482] = -3.17589152E-01;
  COFD[2483] = 1.40981153E-02;
  COFD[2484] = -2.13279783E+01;
  COFD[2485] = 5.64044249E+00;
  COFD[2486] = -4.94776828E-01;
  COFD[2487] = 2.05601004E-02;
  COFD[2488] = -1.68219118E+01;
  COFD[2489] = 4.04449801E+00;
  COFD[2490] = -3.17589152E-01;
  COFD[2491] = 1.40981153E-02;
  COFD[2492] = -1.68127974E+01;
  COFD[2493] = 4.04449801E+00;
  COFD[2494] = -3.17589152E-01;
  COFD[2495] = 1.40981153E-02;
  COFD[2496] = -1.77192789E+01;
  COFD[2497] = 4.40172596E+00;
  COFD[2498] = -3.62177480E-01;
  COFD[2499] = 1.59576827E-02;
  COFD[2500] = -1.77192789E+01;
  COFD[2501] = 4.40172596E+00;
  COFD[2502] = -3.62177480E-01;
  COFD[2503] = 1.59576827E-02;
  COFD[2504] = -1.77363271E+01;
  COFD[2505] = 4.40172596E+00;
  COFD[2506] = -3.62177480E-01;
  COFD[2507] = 1.59576827E-02;
  COFD[2508] = -2.16982577E+01;
  COFD[2509] = 5.69261296E+00;
  COFD[2510] = -5.07823503E-01;
  COFD[2511] = 2.13871491E-02;
  COFD[2512] = -2.17037577E+01;
  COFD[2513] = 5.69261296E+00;
  COFD[2514] = -5.07823503E-01;
  COFD[2515] = 2.13871491E-02;
  COFD[2516] = -2.12623193E+01;
  COFD[2517] = 5.55557033E+00;
  COFD[2518] = -4.95039071E-01;
  COFD[2519] = 2.10346605E-02;
  COFD[2520] = -1.64025436E+01;
  COFD[2521] = 3.87164513E+00;
  COFD[2522] = -2.94538860E-01;
  COFD[2523] = 1.30689798E-02;
  COFD[2524] = -1.96567945E+01;
  COFD[2525] = 5.01045367E+00;
  COFD[2526] = -4.34933108E-01;
  COFD[2527] = 1.88557496E-02;
  COFD[2528] = -1.92123133E+01;
  COFD[2529] = 4.86010656E+00;
  COFD[2530] = -4.18107415E-01;
  COFD[2531] = 1.82383933E-02;
  COFD[2532] = -1.92188805E+01;
  COFD[2533] = 4.86010656E+00;
  COFD[2534] = -4.18107415E-01;
  COFD[2535] = 1.82383933E-02;
  COFD[2536] = -1.98982793E+01;
  COFD[2537] = 5.07066407E+00;
  COFD[2538] = -4.42559638E-01;
  COFD[2539] = 1.91803969E-02;
  COFD[2540] = -1.99037656E+01;
  COFD[2541] = 5.07066407E+00;
  COFD[2542] = -4.42559638E-01;
  COFD[2543] = 1.91803969E-02;
  COFD[2544] = -1.76496830E+01;
  COFD[2545] = 4.43761042E+00;
  COFD[2546] = -3.66314590E-01;
  COFD[2547] = 1.61149468E-02;
  COFD[2548] = -2.14493801E+01;
  COFD[2549] = 5.56935393E+00;
  COFD[2550] = -4.95277587E-01;
  COFD[2551] = 2.09806619E-02;
  COFD[2552] = -2.14523182E+01;
  COFD[2553] = 5.56935393E+00;
  COFD[2554] = -4.95277587E-01;
  COFD[2555] = 2.09806619E-02;
  COFD[2556] = -2.03264610E+01;
  COFD[2557] = 5.14674817E+00;
  COFD[2558] = -4.51657353E-01;
  COFD[2559] = 1.95439167E-02;
  COFD[2560] = -2.20741252E+01;
  COFD[2561] = 5.65330302E+00;
  COFD[2562] = -5.04845334E-01;
  COFD[2563] = 2.13439933E-02;
  COFD[2564] = -2.23166248E+01;
  COFD[2565] = 5.69237157E+00;
  COFD[2566] = -5.07995132E-01;
  COFD[2567] = 2.14028776E-02;
  COFD[2568] = -2.22589939E+01;
  COFD[2569] = 5.69469463E+00;
  COFD[2570] = -5.09164437E-01;
  COFD[2571] = 2.14896167E-02;
  COFD[2572] = -2.22999494E+01;
  COFD[2573] = 5.62615904E+00;
  COFD[2574] = -4.91244328E-01;
  COFD[2575] = 2.03370903E-02;
  COFD[2576] = -2.22940468E+01;
  COFD[2577] = 5.62615904E+00;
  COFD[2578] = -4.91244328E-01;
  COFD[2579] = 2.03370903E-02;
  COFD[2580] = -1.63747424E+01;
  COFD[2581] = 3.86406496E+00;
  COFD[2582] = -2.93554482E-01;
  COFD[2583] = 1.30261209E-02;
  COFD[2584] = -2.23541050E+01;
  COFD[2585] = 5.42819099E+00;
  COFD[2586] = -4.53154458E-01;
  COFD[2587] = 1.81718118E-02;
  COFD[2588] = -2.02073270E+01;
  COFD[2589] = 5.20876767E+00;
  COFD[2590] = -4.58879580E-01;
  COFD[2591] = 1.98237644E-02;
  COFD[2592] = -1.76883631E+01;
  COFD[2593] = 4.38487586E+00;
  COFD[2594] = -3.60203069E-01;
  COFD[2595] = 1.58810844E-02;
  COFD[2596] = -1.27433094E+01;
  COFD[2597] = 2.88402293E+00;
  COFD[2598] = -1.66388166E-01;
  COFD[2599] = 7.50834254E-03;
  COFD[2600] = -2.03295194E+01;
  COFD[2601] = 5.14674817E+00;
  COFD[2602] = -4.51657353E-01;
  COFD[2603] = 1.95439167E-02;
  COFD[2604] = -2.13778747E+01;
  COFD[2605] = 5.47055637E+00;
  COFD[2606] = -4.88260653E-01;
  COFD[2607] = 2.09131292E-02;
  COFD[2608] = -2.13778747E+01;
  COFD[2609] = 5.47055637E+00;
  COFD[2610] = -4.88260653E-01;
  COFD[2611] = 2.09131292E-02;
  COFD[2612] = -2.20751193E+01;
  COFD[2613] = 5.65330302E+00;
  COFD[2614] = -5.04845334E-01;
  COFD[2615] = 2.13439933E-02;
  COFD[2616] = -2.23173549E+01;
  COFD[2617] = 5.69237157E+00;
  COFD[2618] = -5.07995132E-01;
  COFD[2619] = 2.14028776E-02;
  COFD[2620] = -1.62105007E+01;
  COFD[2621] = 4.40841144E+00;
  COFD[2622] = -3.62971037E-01;
  COFD[2623] = 1.59889839E-02;
  COFD[2624] = -1.53665935E+01;
  COFD[2625] = 3.61939742E+00;
  COFD[2626] = -2.61762703E-01;
  COFD[2627] = 1.16411562E-02;
  COFD[2628] = -1.53806331E+01;
  COFD[2629] = 3.61939742E+00;
  COFD[2630] = -2.61762703E-01;
  COFD[2631] = 1.16411562E-02;
  COFD[2632] = -1.68174730E+01;
  COFD[2633] = 4.04449801E+00;
  COFD[2634] = -3.17589152E-01;
  COFD[2635] = 1.40981153E-02;
  COFD[2636] = -2.13279783E+01;
  COFD[2637] = 5.64044249E+00;
  COFD[2638] = -4.94776828E-01;
  COFD[2639] = 2.05601004E-02;
  COFD[2640] = -1.68219118E+01;
  COFD[2641] = 4.04449801E+00;
  COFD[2642] = -3.17589152E-01;
  COFD[2643] = 1.40981153E-02;
  COFD[2644] = -1.68127974E+01;
  COFD[2645] = 4.04449801E+00;
  COFD[2646] = -3.17589152E-01;
  COFD[2647] = 1.40981153E-02;
  COFD[2648] = -1.77192789E+01;
  COFD[2649] = 4.40172596E+00;
  COFD[2650] = -3.62177480E-01;
  COFD[2651] = 1.59576827E-02;
  COFD[2652] = -1.77192789E+01;
  COFD[2653] = 4.40172596E+00;
  COFD[2654] = -3.62177480E-01;
  COFD[2655] = 1.59576827E-02;
  COFD[2656] = -1.77363271E+01;
  COFD[2657] = 4.40172596E+00;
  COFD[2658] = -3.62177480E-01;
  COFD[2659] = 1.59576827E-02;
  COFD[2660] = -2.16982577E+01;
  COFD[2661] = 5.69261296E+00;
  COFD[2662] = -5.07823503E-01;
  COFD[2663] = 2.13871491E-02;
  COFD[2664] = -2.17037577E+01;
  COFD[2665] = 5.69261296E+00;
  COFD[2666] = -5.07823503E-01;
  COFD[2667] = 2.13871491E-02;
  COFD[2668] = -2.12623193E+01;
  COFD[2669] = 5.55557033E+00;
  COFD[2670] = -4.95039071E-01;
  COFD[2671] = 2.10346605E-02;
  COFD[2672] = -1.64025436E+01;
  COFD[2673] = 3.87164513E+00;
  COFD[2674] = -2.94538860E-01;
  COFD[2675] = 1.30689798E-02;
  COFD[2676] = -1.96567945E+01;
  COFD[2677] = 5.01045367E+00;
  COFD[2678] = -4.34933108E-01;
  COFD[2679] = 1.88557496E-02;
  COFD[2680] = -1.92123133E+01;
  COFD[2681] = 4.86010656E+00;
  COFD[2682] = -4.18107415E-01;
  COFD[2683] = 1.82383933E-02;
  COFD[2684] = -1.92188805E+01;
  COFD[2685] = 4.86010656E+00;
  COFD[2686] = -4.18107415E-01;
  COFD[2687] = 1.82383933E-02;
  COFD[2688] = -1.98982793E+01;
  COFD[2689] = 5.07066407E+00;
  COFD[2690] = -4.42559638E-01;
  COFD[2691] = 1.91803969E-02;
  COFD[2692] = -1.99037656E+01;
  COFD[2693] = 5.07066407E+00;
  COFD[2694] = -4.42559638E-01;
  COFD[2695] = 1.91803969E-02;
  COFD[2696] = -1.76496830E+01;
  COFD[2697] = 4.43761042E+00;
  COFD[2698] = -3.66314590E-01;
  COFD[2699] = 1.61149468E-02;
  COFD[2700] = -2.14493801E+01;
  COFD[2701] = 5.56935393E+00;
  COFD[2702] = -4.95277587E-01;
  COFD[2703] = 2.09806619E-02;
  COFD[2704] = -2.14523182E+01;
  COFD[2705] = 5.56935393E+00;
  COFD[2706] = -4.95277587E-01;
  COFD[2707] = 2.09806619E-02;
  COFD[2708] = -2.03264610E+01;
  COFD[2709] = 5.14674817E+00;
  COFD[2710] = -4.51657353E-01;
  COFD[2711] = 1.95439167E-02;
  COFD[2712] = -2.20741252E+01;
  COFD[2713] = 5.65330302E+00;
  COFD[2714] = -5.04845334E-01;
  COFD[2715] = 2.13439933E-02;
  COFD[2716] = -2.23166248E+01;
  COFD[2717] = 5.69237157E+00;
  COFD[2718] = -5.07995132E-01;
  COFD[2719] = 2.14028776E-02;
  COFD[2720] = -2.22589939E+01;
  COFD[2721] = 5.69469463E+00;
  COFD[2722] = -5.09164437E-01;
  COFD[2723] = 2.14896167E-02;
  COFD[2724] = -2.22999494E+01;
  COFD[2725] = 5.62615904E+00;
  COFD[2726] = -4.91244328E-01;
  COFD[2727] = 2.03370903E-02;
  COFD[2728] = -2.22940468E+01;
  COFD[2729] = 5.62615904E+00;
  COFD[2730] = -4.91244328E-01;
  COFD[2731] = 2.03370903E-02;
  COFD[2732] = -1.63747424E+01;
  COFD[2733] = 3.86406496E+00;
  COFD[2734] = -2.93554482E-01;
  COFD[2735] = 1.30261209E-02;
  COFD[2736] = -2.23858181E+01;
  COFD[2737] = 5.42819099E+00;
  COFD[2738] = -4.53154458E-01;
  COFD[2739] = 1.81718118E-02;
  COFD[2740] = -2.02301896E+01;
  COFD[2741] = 5.20876767E+00;
  COFD[2742] = -4.58879580E-01;
  COFD[2743] = 1.98237644E-02;
  COFD[2744] = -1.77065754E+01;
  COFD[2745] = 4.38487586E+00;
  COFD[2746] = -3.60203069E-01;
  COFD[2747] = 1.58810844E-02;
  COFD[2748] = -1.27475397E+01;
  COFD[2749] = 2.88402293E+00;
  COFD[2750] = -1.66388166E-01;
  COFD[2751] = 7.50834254E-03;
  COFD[2752] = -2.03553148E+01;
  COFD[2753] = 5.14674817E+00;
  COFD[2754] = -4.51657353E-01;
  COFD[2755] = 1.95439167E-02;
  COFD[2756] = -2.14054381E+01;
  COFD[2757] = 5.47055637E+00;
  COFD[2758] = -4.88260653E-01;
  COFD[2759] = 2.09131292E-02;
  COFD[2760] = -2.14054381E+01;
  COFD[2761] = 5.47055637E+00;
  COFD[2762] = -4.88260653E-01;
  COFD[2763] = 2.09131292E-02;
  COFD[2764] = -2.21043775E+01;
  COFD[2765] = 5.65330302E+00;
  COFD[2766] = -5.04845334E-01;
  COFD[2767] = 2.13439933E-02;
  COFD[2768] = -2.23473285E+01;
  COFD[2769] = 5.69237157E+00;
  COFD[2770] = -5.07995132E-01;
  COFD[2771] = 2.14028776E-02;
  COFD[2772] = -1.62127531E+01;
  COFD[2773] = 4.40841144E+00;
  COFD[2774] = -3.62971037E-01;
  COFD[2775] = 1.59889839E-02;
  COFD[2776] = -1.53847821E+01;
  COFD[2777] = 3.61939742E+00;
  COFD[2778] = -2.61762703E-01;
  COFD[2779] = 1.16411562E-02;
  COFD[2780] = -1.53993494E+01;
  COFD[2781] = 3.61939742E+00;
  COFD[2782] = -2.61762703E-01;
  COFD[2783] = 1.16411562E-02;
  COFD[2784] = -1.68415687E+01;
  COFD[2785] = 4.04449801E+00;
  COFD[2786] = -3.17589152E-01;
  COFD[2787] = 1.40981153E-02;
  COFD[2788] = -2.13471897E+01;
  COFD[2789] = 5.64044249E+00;
  COFD[2790] = -4.94776828E-01;
  COFD[2791] = 2.05601004E-02;
  COFD[2792] = -1.68462277E+01;
  COFD[2793] = 4.04449801E+00;
  COFD[2794] = -3.17589152E-01;
  COFD[2795] = 1.40981153E-02;
  COFD[2796] = -1.68366634E+01;
  COFD[2797] = 4.04449801E+00;
  COFD[2798] = -3.17589152E-01;
  COFD[2799] = 1.40981153E-02;
  COFD[2800] = -1.77363271E+01;
  COFD[2801] = 4.40172596E+00;
  COFD[2802] = -3.62177480E-01;
  COFD[2803] = 1.59576827E-02;
  COFD[2804] = -1.77363271E+01;
  COFD[2805] = 4.40172596E+00;
  COFD[2806] = -3.62177480E-01;
  COFD[2807] = 1.59576827E-02;
  COFD[2808] = -1.77539773E+01;
  COFD[2809] = 4.40172596E+00;
  COFD[2810] = -3.62177480E-01;
  COFD[2811] = 1.59576827E-02;
  COFD[2812] = -2.17213824E+01;
  COFD[2813] = 5.69261296E+00;
  COFD[2814] = -5.07823503E-01;
  COFD[2815] = 2.13871491E-02;
  COFD[2816] = -2.17271442E+01;
  COFD[2817] = 5.69261296E+00;
  COFD[2818] = -5.07823503E-01;
  COFD[2819] = 2.13871491E-02;
  COFD[2820] = -2.12859561E+01;
  COFD[2821] = 5.55557033E+00;
  COFD[2822] = -4.95039071E-01;
  COFD[2823] = 2.10346605E-02;
  COFD[2824] = -1.64253940E+01;
  COFD[2825] = 3.87164513E+00;
  COFD[2826] = -2.94538860E-01;
  COFD[2827] = 1.30689798E-02;
  COFD[2828] = -1.96828832E+01;
  COFD[2829] = 5.01045367E+00;
  COFD[2830] = -4.34933108E-01;
  COFD[2831] = 1.88557496E-02;
  COFD[2832] = -1.92345878E+01;
  COFD[2833] = 4.86010656E+00;
  COFD[2834] = -4.18107415E-01;
  COFD[2835] = 1.82383933E-02;
  COFD[2836] = -1.92414562E+01;
  COFD[2837] = 4.86010656E+00;
  COFD[2838] = -4.18107415E-01;
  COFD[2839] = 1.82383933E-02;
  COFD[2840] = -1.99214157E+01;
  COFD[2841] = 5.07066407E+00;
  COFD[2842] = -4.42559638E-01;
  COFD[2843] = 1.91803969E-02;
  COFD[2844] = -1.99271633E+01;
  COFD[2845] = 5.07066407E+00;
  COFD[2846] = -4.42559638E-01;
  COFD[2847] = 1.91803969E-02;
  COFD[2848] = -1.76753099E+01;
  COFD[2849] = 4.43761042E+00;
  COFD[2850] = -3.66314590E-01;
  COFD[2851] = 1.61149468E-02;
  COFD[2852] = -2.14751687E+01;
  COFD[2853] = 5.56935393E+00;
  COFD[2854] = -4.95277587E-01;
  COFD[2855] = 2.09806619E-02;
  COFD[2856] = -2.14782627E+01;
  COFD[2857] = 5.56935393E+00;
  COFD[2858] = -4.95277587E-01;
  COFD[2859] = 2.09806619E-02;
  COFD[2860] = -2.03520951E+01;
  COFD[2861] = 5.14674817E+00;
  COFD[2862] = -4.51657353E-01;
  COFD[2863] = 1.95439167E-02;
  COFD[2864] = -2.21033236E+01;
  COFD[2865] = 5.65330302E+00;
  COFD[2866] = -5.04845334E-01;
  COFD[2867] = 2.13439933E-02;
  COFD[2868] = -2.23465533E+01;
  COFD[2869] = 5.69237157E+00;
  COFD[2870] = -5.07995132E-01;
  COFD[2871] = 2.14028776E-02;
  COFD[2872] = -2.22895823E+01;
  COFD[2873] = 5.69469463E+00;
  COFD[2874] = -5.09164437E-01;
  COFD[2875] = 2.14896167E-02;
  COFD[2876] = -2.23304354E+01;
  COFD[2877] = 5.62615904E+00;
  COFD[2878] = -4.91244328E-01;
  COFD[2879] = 2.03370903E-02;
  COFD[2880] = -2.23245680E+01;
  COFD[2881] = 5.62615904E+00;
  COFD[2882] = -4.91244328E-01;
  COFD[2883] = 2.03370903E-02;
  COFD[2884] = -1.63975940E+01;
  COFD[2885] = 3.86406496E+00;
  COFD[2886] = -2.93554482E-01;
  COFD[2887] = 1.30261209E-02;
  COFD[2888] = -1.53745563E+01;
  COFD[2889] = 1.81926944E+00;
  COFD[2890] = 1.04524470E-01;
  COFD[2891] = -9.57238731E-03;
  COFD[2892] = -2.10669085E+01;
  COFD[2893] = 5.03492891E+00;
  COFD[2894] = -3.86111565E-01;
  COFD[2895] = 1.46052779E-02;
  COFD[2896] = -2.17155906E+01;
  COFD[2897] = 5.69435598E+00;
  COFD[2898] = -5.08783498E-01;
  COFD[2899] = 2.14590577E-02;
  COFD[2900] = -1.64585058E+01;
  COFD[2901] = 4.29628861E+00;
  COFD[2902] = -3.49256998E-01;
  COFD[2903] = 1.54295050E-02;
  COFD[2904] = -2.15981635E+01;
  COFD[2905] = 5.13764355E+00;
  COFD[2906] = -4.02929800E-01;
  COFD[2907] = 1.54783512E-02;
  COFD[2908] = -2.04535340E+01;
  COFD[2909] = 4.47828781E+00;
  COFD[2910] = -2.96932971E-01;
  COFD[2911] = 1.00475283E-02;
  COFD[2912] = -2.04535340E+01;
  COFD[2913] = 4.47828781E+00;
  COFD[2914] = -2.96932971E-01;
  COFD[2915] = 1.00475283E-02;
  COFD[2916] = -1.90172568E+01;
  COFD[2917] = 3.72149607E+00;
  COFD[2918] = -1.79511931E-01;
  COFD[2919] = 4.18922349E-03;
  COFD[2920] = -1.85852264E+01;
  COFD[2921] = 3.46378404E+00;
  COFD[2922] = -1.40474146E-01;
  COFD[2923] = 2.27022462E-03;
  COFD[2924] = -2.00273452E+01;
  COFD[2925] = 5.69255533E+00;
  COFD[2926] = -5.07549153E-01;
  COFD[2927] = 2.13642831E-02;
  COFD[2928] = -1.97979307E+01;
  COFD[2929] = 5.19127685E+00;
  COFD[2930] = -4.56847065E-01;
  COFD[2931] = 1.97451148E-02;
  COFD[2932] = -1.98174079E+01;
  COFD[2933] = 5.19127685E+00;
  COFD[2934] = -4.56847065E-01;
  COFD[2935] = 1.97451148E-02;
  COFD[2936] = -2.11620529E+01;
  COFD[2937] = 5.50365749E+00;
  COFD[2938] = -4.91628924E-01;
  COFD[2939] = 2.10219562E-02;
  COFD[2940] = -1.63811326E+01;
  COFD[2941] = 2.95527779E+00;
  COFD[2942] = -6.34245505E-02;
  COFD[2943] = -1.50573641E-03;
  COFD[2944] = -2.11690338E+01;
  COFD[2945] = 5.50365749E+00;
  COFD[2946] = -4.91628924E-01;
  COFD[2947] = 2.10219562E-02;
  COFD[2948] = -2.11547376E+01;
  COFD[2949] = 5.50365749E+00;
  COFD[2950] = -4.91628924E-01;
  COFD[2951] = 2.10219562E-02;
  COFD[2952] = -2.16982577E+01;
  COFD[2953] = 5.69261296E+00;
  COFD[2954] = -5.07823503E-01;
  COFD[2955] = 2.13871491E-02;
  COFD[2956] = -2.16982577E+01;
  COFD[2957] = 5.69261296E+00;
  COFD[2958] = -5.07823503E-01;
  COFD[2959] = 2.13871491E-02;
  COFD[2960] = -2.17213824E+01;
  COFD[2961] = 5.69261296E+00;
  COFD[2962] = -5.07823503E-01;
  COFD[2963] = 2.13871491E-02;
  COFD[2964] = -1.78230511E+01;
  COFD[2965] = 3.44376052E+00;
  COFD[2966] = -1.37431601E-01;
  COFD[2967] = 2.12055397E-03;
  COFD[2968] = -1.78315150E+01;
  COFD[2969] = 3.44376052E+00;
  COFD[2970] = -1.37431601E-01;
  COFD[2971] = 2.12055397E-03;
  COFD[2972] = -1.91798603E+01;
  COFD[2973] = 4.07826869E+00;
  COFD[2974] = -2.34017579E-01;
  COFD[2975] = 6.87899091E-03;
  COFD[2976] = -2.08690432E+01;
  COFD[2977] = 5.40204742E+00;
  COFD[2978] = -4.80178364E-01;
  COFD[2979] = 2.05934603E-02;
  COFD[2980] = -2.15789316E+01;
  COFD[2981] = 5.29592020E+00;
  COFD[2982] = -4.29306693E-01;
  COFD[2983] = 1.68631569E-02;
  COFD[2984] = -2.17962509E+01;
  COFD[2985] = 5.46882118E+00;
  COFD[2986] = -4.60523872E-01;
  COFD[2987] = 1.85779012E-02;
  COFD[2988] = -2.18061705E+01;
  COFD[2989] = 5.46882118E+00;
  COFD[2990] = -4.60523872E-01;
  COFD[2991] = 1.85779012E-02;
  COFD[2992] = -2.15536120E+01;
  COFD[2993] = 5.24975529E+00;
  COFD[2994] = -4.21290887E-01;
  COFD[2995] = 1.64321070E-02;
  COFD[2996] = -2.15620570E+01;
  COFD[2997] = 5.24975529E+00;
  COFD[2998] = -4.21290887E-01;
  COFD[2999] = 1.64321070E-02;
  COFD[3000] = -2.16283940E+01;
  COFD[3001] = 5.68709041E+00;
  COFD[3002] = -5.05429155E-01;
  COFD[3003] = 2.12138513E-02;
  COFD[3004] = -1.90741703E+01;
  COFD[3005] = 3.95410389E+00;
  COFD[3006] = -2.14821146E-01;
  COFD[3007] = 5.92501728E-03;
  COFD[3008] = -1.90789749E+01;
  COFD[3009] = 3.95410389E+00;
  COFD[3010] = -2.14821146E-01;
  COFD[3011] = 5.92501728E-03;
  COFD[3012] = -2.15931803E+01;
  COFD[3013] = 5.13764355E+00;
  COFD[3014] = -4.02929800E-01;
  COFD[3015] = 1.54783512E-02;
  COFD[3016] = -1.90154894E+01;
  COFD[3017] = 3.72149607E+00;
  COFD[3018] = -1.79511931E-01;
  COFD[3019] = 4.18922349E-03;
  COFD[3020] = -1.85839036E+01;
  COFD[3021] = 3.46378404E+00;
  COFD[3022] = -1.40474146E-01;
  COFD[3023] = 2.27022462E-03;
  COFD[3024] = -1.87146512E+01;
  COFD[3025] = 3.54436716E+00;
  COFD[3026] = -1.52735727E-01;
  COFD[3027] = 2.87479772E-03;
  COFD[3028] = -1.72083191E+01;
  COFD[3029] = 2.81535425E+00;
  COFD[3030] = -4.25833211E-02;
  COFD[3031] = -2.51298361E-03;
  COFD[3032] = -1.72027360E+01;
  COFD[3033] = 2.81535425E+00;
  COFD[3034] = -4.25833211E-02;
  COFD[3035] = -2.51298361E-03;
  COFD[3036] = -2.08389389E+01;
  COFD[3037] = 5.39456342E+00;
  COFD[3038] = -4.79318578E-01;
  COFD[3039] = 2.05606532E-02;
  COFD[3040] = -1.53888881E+01;
  COFD[3041] = 1.81926944E+00;
  COFD[3042] = 1.04524470E-01;
  COFD[3043] = -9.57238731E-03;
  COFD[3044] = -2.10752283E+01;
  COFD[3045] = 5.03492891E+00;
  COFD[3046] = -3.86111565E-01;
  COFD[3047] = 1.46052779E-02;
  COFD[3048] = -2.17216027E+01;
  COFD[3049] = 5.69435598E+00;
  COFD[3050] = -5.08783498E-01;
  COFD[3051] = 2.14590577E-02;
  COFD[3052] = -1.64595974E+01;
  COFD[3053] = 4.29628861E+00;
  COFD[3054] = -3.49256998E-01;
  COFD[3055] = 1.54295050E-02;
  COFD[3056] = -2.16081982E+01;
  COFD[3057] = 5.13764355E+00;
  COFD[3058] = -4.02929800E-01;
  COFD[3059] = 1.54783512E-02;
  COFD[3060] = -2.04647218E+01;
  COFD[3061] = 4.47828781E+00;
  COFD[3062] = -2.96932971E-01;
  COFD[3063] = 1.00475283E-02;
  COFD[3064] = -2.04647218E+01;
  COFD[3065] = 4.47828781E+00;
  COFD[3066] = -2.96932971E-01;
  COFD[3067] = 1.00475283E-02;
  COFD[3068] = -1.90296479E+01;
  COFD[3069] = 3.72149607E+00;
  COFD[3070] = -1.79511931E-01;
  COFD[3071] = 4.18922349E-03;
  COFD[3072] = -1.85981574E+01;
  COFD[3073] = 3.46378404E+00;
  COFD[3074] = -1.40474146E-01;
  COFD[3075] = 2.27022462E-03;
  COFD[3076] = -2.00279091E+01;
  COFD[3077] = 5.69255533E+00;
  COFD[3078] = -5.07549153E-01;
  COFD[3079] = 2.13642831E-02;
  COFD[3080] = -1.98039321E+01;
  COFD[3081] = 5.19127685E+00;
  COFD[3082] = -4.56847065E-01;
  COFD[3083] = 1.97451148E-02;
  COFD[3084] = -1.98236492E+01;
  COFD[3085] = 5.19127685E+00;
  COFD[3086] = -4.56847065E-01;
  COFD[3087] = 1.97451148E-02;
  COFD[3088] = -2.11710660E+01;
  COFD[3089] = 5.50365749E+00;
  COFD[3090] = -4.91628924E-01;
  COFD[3091] = 2.10219562E-02;
  COFD[3092] = -1.63876036E+01;
  COFD[3093] = 2.95527779E+00;
  COFD[3094] = -6.34245505E-02;
  COFD[3095] = -1.50573641E-03;
  COFD[3096] = -2.11781748E+01;
  COFD[3097] = 5.50365749E+00;
  COFD[3098] = -4.91628924E-01;
  COFD[3099] = 2.10219562E-02;
  COFD[3100] = -2.11636186E+01;
  COFD[3101] = 5.50365749E+00;
  COFD[3102] = -4.91628924E-01;
  COFD[3103] = 2.10219562E-02;
  COFD[3104] = -2.17037577E+01;
  COFD[3105] = 5.69261296E+00;
  COFD[3106] = -5.07823503E-01;
  COFD[3107] = 2.13871491E-02;
  COFD[3108] = -2.17037577E+01;
  COFD[3109] = 5.69261296E+00;
  COFD[3110] = -5.07823503E-01;
  COFD[3111] = 2.13871491E-02;
  COFD[3112] = -2.17271442E+01;
  COFD[3113] = 5.69261296E+00;
  COFD[3114] = -5.07823503E-01;
  COFD[3115] = 2.13871491E-02;
  COFD[3116] = -1.78315150E+01;
  COFD[3117] = 3.44376052E+00;
  COFD[3118] = -1.37431601E-01;
  COFD[3119] = 2.12055397E-03;
  COFD[3120] = -1.78401248E+01;
  COFD[3121] = 3.44376052E+00;
  COFD[3122] = -1.37431601E-01;
  COFD[3123] = 2.12055397E-03;
  COFD[3124] = -1.91886109E+01;
  COFD[3125] = 4.07826869E+00;
  COFD[3126] = -2.34017579E-01;
  COFD[3127] = 6.87899091E-03;
  COFD[3128] = -2.08773563E+01;
  COFD[3129] = 5.40204742E+00;
  COFD[3130] = -4.80178364E-01;
  COFD[3131] = 2.05934603E-02;
  COFD[3132] = -2.15891510E+01;
  COFD[3133] = 5.29592020E+00;
  COFD[3134] = -4.29306693E-01;
  COFD[3135] = 1.68631569E-02;
  COFD[3136] = -2.18042531E+01;
  COFD[3137] = 5.46882118E+00;
  COFD[3138] = -4.60523872E-01;
  COFD[3139] = 1.85779012E-02;
  COFD[3140] = -2.18143343E+01;
  COFD[3141] = 5.46882118E+00;
  COFD[3142] = -4.60523872E-01;
  COFD[3143] = 1.85779012E-02;
  COFD[3144] = -2.15620825E+01;
  COFD[3145] = 5.24975529E+00;
  COFD[3146] = -4.21290887E-01;
  COFD[3147] = 1.64321070E-02;
  COFD[3148] = -2.15706730E+01;
  COFD[3149] = 5.24975529E+00;
  COFD[3150] = -4.21290887E-01;
  COFD[3151] = 1.64321070E-02;
  COFD[3152] = -2.16383238E+01;
  COFD[3153] = 5.68709041E+00;
  COFD[3154] = -5.05429155E-01;
  COFD[3155] = 2.12138513E-02;
  COFD[3156] = -1.90842007E+01;
  COFD[3157] = 3.95410389E+00;
  COFD[3158] = -2.14821146E-01;
  COFD[3159] = 5.92501728E-03;
  COFD[3160] = -1.90891032E+01;
  COFD[3161] = 3.95410389E+00;
  COFD[3162] = -2.14821146E-01;
  COFD[3163] = 5.92501728E-03;
  COFD[3164] = -2.16031145E+01;
  COFD[3165] = 5.13764355E+00;
  COFD[3166] = -4.02929800E-01;
  COFD[3167] = 1.54783512E-02;
  COFD[3168] = -1.90278363E+01;
  COFD[3169] = 3.72149607E+00;
  COFD[3170] = -1.79511931E-01;
  COFD[3171] = 4.18922349E-03;
  COFD[3172] = -1.85968000E+01;
  COFD[3173] = 3.46378404E+00;
  COFD[3174] = -1.40474146E-01;
  COFD[3175] = 2.27022462E-03;
  COFD[3176] = -1.87280626E+01;
  COFD[3177] = 3.54436716E+00;
  COFD[3178] = -1.52735727E-01;
  COFD[3179] = 2.87479772E-03;
  COFD[3180] = -1.72216494E+01;
  COFD[3181] = 2.81535425E+00;
  COFD[3182] = -4.25833211E-02;
  COFD[3183] = -2.51298361E-03;
  COFD[3184] = -1.72160941E+01;
  COFD[3185] = 2.81535425E+00;
  COFD[3186] = -4.25833211E-02;
  COFD[3187] = -2.51298361E-03;
  COFD[3188] = -2.08472526E+01;
  COFD[3189] = 5.39456342E+00;
  COFD[3190] = -4.79318578E-01;
  COFD[3191] = 2.05606532E-02;
  COFD[3192] = -1.70318617E+01;
  COFD[3193] = 2.56660287E+00;
  COFD[3194] = -5.68591858E-03;
  COFD[3195] = -4.29178686E-03;
  COFD[3196] = -2.16470142E+01;
  COFD[3197] = 5.34265837E+00;
  COFD[3198] = -4.37551690E-01;
  COFD[3199] = 1.73102478E-02;
  COFD[3200] = -2.14591332E+01;
  COFD[3201] = 5.59915682E+00;
  COFD[3202] = -4.98717002E-01;
  COFD[3203] = 2.11131339E-02;
  COFD[3204] = -1.63084558E+01;
  COFD[3205] = 4.23041457E+00;
  COFD[3206] = -3.41506069E-01;
  COFD[3207] = 1.51277748E-02;
  COFD[3208] = -2.20530476E+01;
  COFD[3209] = 5.39090922E+00;
  COFD[3210] = -4.46575132E-01;
  COFD[3211] = 1.78143343E-02;
  COFD[3212] = -2.13747954E+01;
  COFD[3213] = 4.93111364E+00;
  COFD[3214] = -3.68722688E-01;
  COFD[3215] = 1.36923642E-02;
  COFD[3216] = -2.13747954E+01;
  COFD[3217] = 4.93111364E+00;
  COFD[3218] = -3.68722688E-01;
  COFD[3219] = 1.36923642E-02;
  COFD[3220] = -1.98228628E+01;
  COFD[3221] = 4.08893368E+00;
  COFD[3222] = -2.35668448E-01;
  COFD[3223] = 6.96126626E-03;
  COFD[3224] = -1.98437652E+01;
  COFD[3225] = 4.05800213E+00;
  COFD[3226] = -2.31751315E-01;
  COFD[3227] = 6.79738213E-03;
  COFD[3228] = -1.95934977E+01;
  COFD[3229] = 5.55710535E+00;
  COFD[3230] = -4.95001691E-01;
  COFD[3231] = 2.10232540E-02;
  COFD[3232] = -1.91626530E+01;
  COFD[3233] = 4.95262571E+00;
  COFD[3234] = -4.28180895E-01;
  COFD[3235] = 1.85935195E-02;
  COFD[3236] = -1.91825997E+01;
  COFD[3237] = 4.95262571E+00;
  COFD[3238] = -4.28180895E-01;
  COFD[3239] = 1.85935195E-02;
  COFD[3240] = -2.05681987E+01;
  COFD[3241] = 5.28793741E+00;
  COFD[3242] = -4.66860688E-01;
  COFD[3243] = 2.00751059E-02;
  COFD[3244] = -1.51566210E+01;
  COFD[3245] = 2.35540530E+00;
  COFD[3246] = 2.53680281E-02;
  COFD[3247] = -5.70416965E-03;
  COFD[3248] = -2.05754313E+01;
  COFD[3249] = 5.28793741E+00;
  COFD[3250] = -4.66860688E-01;
  COFD[3251] = 2.00751059E-02;
  COFD[3252] = -2.08558213E+01;
  COFD[3253] = 5.38711151E+00;
  COFD[3254] = -4.78457810E-01;
  COFD[3255] = 2.05275949E-02;
  COFD[3256] = -2.12623193E+01;
  COFD[3257] = 5.55557033E+00;
  COFD[3258] = -4.95039071E-01;
  COFD[3259] = 2.10346605E-02;
  COFD[3260] = -2.12623193E+01;
  COFD[3261] = 5.55557033E+00;
  COFD[3262] = -4.95039071E-01;
  COFD[3263] = 2.10346605E-02;
  COFD[3264] = -2.12859561E+01;
  COFD[3265] = 5.55557033E+00;
  COFD[3266] = -4.95039071E-01;
  COFD[3267] = 2.10346605E-02;
  COFD[3268] = -1.91798603E+01;
  COFD[3269] = 4.07826869E+00;
  COFD[3270] = -2.34017579E-01;
  COFD[3271] = 6.87899091E-03;
  COFD[3272] = -1.91886109E+01;
  COFD[3273] = 4.07826869E+00;
  COFD[3274] = -2.34017579E-01;
  COFD[3275] = 6.87899091E-03;
  COFD[3276] = -1.86015137E+01;
  COFD[3277] = 3.82972052E+00;
  COFD[3278] = -2.00952802E-01;
  COFD[3279] = 5.43555958E-03;
  COFD[3280] = -2.05730860E+01;
  COFD[3281] = 5.28508706E+00;
  COFD[3282] = -4.66758539E-01;
  COFD[3283] = 2.00819816E-02;
  COFD[3284] = -2.18139850E+01;
  COFD[3285] = 5.42278317E+00;
  COFD[3286] = -4.52198714E-01;
  COFD[3287] = 1.81197989E-02;
  COFD[3288] = -2.20142899E+01;
  COFD[3289] = 5.61844133E+00;
  COFD[3290] = -4.89300702E-01;
  COFD[3291] = 2.02138668E-02;
  COFD[3292] = -2.20245271E+01;
  COFD[3293] = 5.61844133E+00;
  COFD[3294] = -4.89300702E-01;
  COFD[3295] = 2.02138668E-02;
  COFD[3296] = -2.19022345E+01;
  COFD[3297] = 5.45765686E+00;
  COFD[3298] = -4.58497864E-01;
  COFD[3299] = 1.84663411E-02;
  COFD[3300] = -2.19109658E+01;
  COFD[3301] = 5.45765686E+00;
  COFD[3302] = -4.58497864E-01;
  COFD[3303] = 1.84663411E-02;
  COFD[3304] = -2.12382581E+01;
  COFD[3305] = 5.56395564E+00;
  COFD[3306] = -4.94651683E-01;
  COFD[3307] = 2.09564258E-02;
  COFD[3308] = -2.00088483E+01;
  COFD[3309] = 4.40851115E+00;
  COFD[3310] = -2.86110397E-01;
  COFD[3311] = 9.50609790E-03;
  COFD[3312] = -2.00138460E+01;
  COFD[3313] = 4.40851115E+00;
  COFD[3314] = -2.86110397E-01;
  COFD[3315] = 9.50609790E-03;
  COFD[3316] = -2.20478661E+01;
  COFD[3317] = 5.39090922E+00;
  COFD[3318] = -4.46575132E-01;
  COFD[3319] = 1.78143343E-02;
  COFD[3320] = -1.98210077E+01;
  COFD[3321] = 4.08893368E+00;
  COFD[3322] = -2.35668448E-01;
  COFD[3323] = 6.96126626E-03;
  COFD[3324] = -1.98423738E+01;
  COFD[3325] = 4.05800213E+00;
  COFD[3326] = -2.31751315E-01;
  COFD[3327] = 6.79738213E-03;
  COFD[3328] = -1.99273999E+01;
  COFD[3329] = 4.11801984E+00;
  COFD[3330] = -2.41066766E-01;
  COFD[3331] = 7.26222012E-03;
  COFD[3332] = -1.74744240E+01;
  COFD[3333] = 2.96255189E+00;
  COFD[3334] = -6.88473701E-02;
  COFD[3335] = -1.07539577E-03;
  COFD[3336] = -1.74537057E+01;
  COFD[3337] = 2.95541956E+00;
  COFD[3338] = -6.77897056E-02;
  COFD[3339] = -1.12612068E-03;
  COFD[3340] = -2.05445359E+01;
  COFD[3341] = 5.28028452E+00;
  COFD[3342] = -4.66472306E-01;
  COFD[3343] = 2.00837541E-02;
  COFD[3344] = -2.28776999E+01;
  COFD[3345] = 5.69138158E+00;
  COFD[3346] = -5.06633648E-01;
  COFD[3347] = 2.12931319E-02;
  COFD[3348] = -1.89936680E+01;
  COFD[3349] = 4.72753945E+00;
  COFD[3350] = -4.01493640E-01;
  COFD[3351] = 1.75397624E-02;
  COFD[3352] = -1.63702696E+01;
  COFD[3353] = 3.84846517E+00;
  COFD[3354] = -2.91538177E-01;
  COFD[3355] = 1.29387536E-02;
  COFD[3356] = -1.20052385E+01;
  COFD[3357] = 2.61184524E+00;
  COFD[3358] = -1.30879019E-01;
  COFD[3359] = 5.96386844E-03;
  COFD[3360] = -1.91514785E+01;
  COFD[3361] = 4.66259871E+00;
  COFD[3362] = -3.93595174E-01;
  COFD[3363] = 1.72187360E-02;
  COFD[3364] = -2.02366896E+01;
  COFD[3365] = 5.00680692E+00;
  COFD[3366] = -4.34505439E-01;
  COFD[3367] = 1.88390238E-02;
  COFD[3368] = -2.02366896E+01;
  COFD[3369] = 5.00680692E+00;
  COFD[3370] = -4.34505439E-01;
  COFD[3371] = 1.88390238E-02;
  COFD[3372] = -2.11756832E+01;
  COFD[3373] = 5.29627079E+00;
  COFD[3374] = -4.67442678E-01;
  COFD[3375] = 2.00794720E-02;
  COFD[3376] = -2.15659786E+01;
  COFD[3377] = 5.39680817E+00;
  COFD[3378] = -4.79577329E-01;
  COFD[3379] = 2.05705656E-02;
  COFD[3380] = -1.47597092E+01;
  COFD[3381] = 3.88067557E+00;
  COFD[3382] = -2.95711582E-01;
  COFD[3383] = 1.31200360E-02;
  COFD[3384] = -1.43454806E+01;
  COFD[3385] = 3.19216881E+00;
  COFD[3386] = -2.06254938E-01;
  COFD[3387] = 9.22957499E-03;
  COFD[3388] = -1.43647070E+01;
  COFD[3389] = 3.19216881E+00;
  COFD[3390] = -2.06254938E-01;
  COFD[3391] = 9.22957499E-03;
  COFD[3392] = -1.55613976E+01;
  COFD[3393] = 3.49518380E+00;
  COFD[3394] = -2.45369513E-01;
  COFD[3395] = 1.09169682E-02;
  COFD[3396] = -2.14468808E+01;
  COFD[3397] = 5.69385548E+00;
  COFD[3398] = -5.08602616E-01;
  COFD[3399] = 2.14463817E-02;
  COFD[3400] = -1.55682463E+01;
  COFD[3401] = 3.49518380E+00;
  COFD[3402] = -2.45369513E-01;
  COFD[3403] = 1.09169682E-02;
  COFD[3404] = -1.55542187E+01;
  COFD[3405] = 3.49518380E+00;
  COFD[3406] = -2.45369513E-01;
  COFD[3407] = 1.09169682E-02;
  COFD[3408] = -1.64025436E+01;
  COFD[3409] = 3.87164513E+00;
  COFD[3410] = -2.94538860E-01;
  COFD[3411] = 1.30689798E-02;
  COFD[3412] = -1.64025436E+01;
  COFD[3413] = 3.87164513E+00;
  COFD[3414] = -2.94538860E-01;
  COFD[3415] = 1.30689798E-02;
  COFD[3416] = -1.64253940E+01;
  COFD[3417] = 3.87164513E+00;
  COFD[3418] = -2.94538860E-01;
  COFD[3419] = 1.30689798E-02;
  COFD[3420] = -2.08690432E+01;
  COFD[3421] = 5.40204742E+00;
  COFD[3422] = -4.80178364E-01;
  COFD[3423] = 2.05934603E-02;
  COFD[3424] = -2.08773563E+01;
  COFD[3425] = 5.40204742E+00;
  COFD[3426] = -4.80178364E-01;
  COFD[3427] = 2.05934603E-02;
  COFD[3428] = -2.05730860E+01;
  COFD[3429] = 5.28508706E+00;
  COFD[3430] = -4.66758539E-01;
  COFD[3431] = 2.00819816E-02;
  COFD[3432] = -1.52720626E+01;
  COFD[3433] = 3.37961392E+00;
  COFD[3434] = -2.30304178E-01;
  COFD[3435] = 1.02608168E-02;
  COFD[3436] = -1.85447641E+01;
  COFD[3437] = 4.55184771E+00;
  COFD[3438] = -3.80130058E-01;
  COFD[3439] = 1.66723098E-02;
  COFD[3440] = -1.80547255E+01;
  COFD[3441] = 4.39110023E+00;
  COFD[3442] = -3.60927149E-01;
  COFD[3443] = 1.59089184E-02;
  COFD[3444] = -1.80644774E+01;
  COFD[3445] = 4.39110023E+00;
  COFD[3446] = -3.60927149E-01;
  COFD[3447] = 1.59089184E-02;
  COFD[3448] = -1.87107328E+01;
  COFD[3449] = 4.59363643E+00;
  COFD[3450] = -3.85240446E-01;
  COFD[3451] = 1.68810716E-02;
  COFD[3452] = -1.87190272E+01;
  COFD[3453] = 4.59363643E+00;
  COFD[3454] = -3.85240446E-01;
  COFD[3455] = 1.68810716E-02;
  COFD[3456] = -1.64958519E+01;
  COFD[3457] = 3.94517498E+00;
  COFD[3458] = -3.04327270E-01;
  COFD[3459] = 1.35053876E-02;
  COFD[3460] = -2.06216451E+01;
  COFD[3461] = 5.26012365E+00;
  COFD[3462] = -4.64415802E-01;
  COFD[3463] = 2.00176246E-02;
  COFD[3464] = -2.06263491E+01;
  COFD[3465] = 5.26012365E+00;
  COFD[3466] = -4.64415802E-01;
  COFD[3467] = 2.00176246E-02;
  COFD[3468] = -1.91465986E+01;
  COFD[3469] = 4.66259871E+00;
  COFD[3470] = -3.93595174E-01;
  COFD[3471] = 1.72187360E-02;
  COFD[3472] = -2.11739610E+01;
  COFD[3473] = 5.29627079E+00;
  COFD[3474] = -4.67442678E-01;
  COFD[3475] = 2.00794720E-02;
  COFD[3476] = -2.15646910E+01;
  COFD[3477] = 5.39680817E+00;
  COFD[3478] = -4.79577329E-01;
  COFD[3479] = 2.05705656E-02;
  COFD[3480] = -2.14349037E+01;
  COFD[3481] = 5.36396655E+00;
  COFD[3482] = -4.75631286E-01;
  COFD[3483] = 2.04117897E-02;
  COFD[3484] = -2.21101485E+01;
  COFD[3485] = 5.55857158E+00;
  COFD[3486] = -4.94508446E-01;
  COFD[3487] = 2.09732027E-02;
  COFD[3488] = -2.21059326E+01;
  COFD[3489] = 5.55876472E+00;
  COFD[3490] = -4.94499270E-01;
  COFD[3491] = 2.09713717E-02;
  COFD[3492] = -1.52518050E+01;
  COFD[3493] = 3.37524863E+00;
  COFD[3494] = -2.29771138E-01;
  COFD[3495] = 1.02391965E-02;
  COFD[3496] = -2.09413482E+01;
  COFD[3497] = 4.38745064E+00;
  COFD[3498] = -2.82842345E-01;
  COFD[3499] = 9.34276534E-03;
  COFD[3500] = -2.20202236E+01;
  COFD[3501] = 5.68165022E+00;
  COFD[3502] = -5.08040840E-01;
  COFD[3503] = 2.14639936E-02;
  COFD[3504] = -1.96317425E+01;
  COFD[3505] = 4.98944710E+00;
  COFD[3506] = -4.32451630E-01;
  COFD[3507] = 1.87578787E-02;
  COFD[3508] = -1.40330550E+01;
  COFD[3509] = 3.35503739E+00;
  COFD[3510] = -2.27359469E-01;
  COFD[3511] = 1.01440614E-02;
  COFD[3512] = -2.21901703E+01;
  COFD[3513] = 5.61881236E+00;
  COFD[3514] = -5.00953746E-01;
  COFD[3515] = 2.11978962E-02;
  COFD[3516] = -2.25669651E+01;
  COFD[3517] = 5.61865117E+00;
  COFD[3518] = -4.89351458E-01;
  COFD[3519] = 2.02170344E-02;
  COFD[3520] = -2.25669651E+01;
  COFD[3521] = 5.61865117E+00;
  COFD[3522] = -4.89351458E-01;
  COFD[3523] = 2.02170344E-02;
  COFD[3524] = -2.23512852E+01;
  COFD[3525] = 5.37620790E+00;
  COFD[3526] = -4.43667096E-01;
  COFD[3527] = 1.76474144E-02;
  COFD[3528] = -2.23522570E+01;
  COFD[3529] = 5.30065654E+00;
  COFD[3530] = -4.30166563E-01;
  COFD[3531] = 1.69104623E-02;
  COFD[3532] = -1.79759686E+01;
  COFD[3533] = 5.02355235E+00;
  COFD[3534] = -4.36606539E-01;
  COFD[3535] = 1.89276102E-02;
  COFD[3536] = -1.74837527E+01;
  COFD[3537] = 4.33650732E+00;
  COFD[3538] = -3.54275787E-01;
  COFD[3539] = 1.56386717E-02;
  COFD[3540] = -1.75059730E+01;
  COFD[3541] = 4.33650732E+00;
  COFD[3542] = -3.54275787E-01;
  COFD[3543] = 1.56386717E-02;
  COFD[3544] = -1.88562057E+01;
  COFD[3545] = 4.66413466E+00;
  COFD[3546] = -3.93781062E-01;
  COFD[3547] = 1.72262444E-02;
  COFD[3548] = -2.00192136E+01;
  COFD[3549] = 4.67238423E+00;
  COFD[3550] = -3.27066971E-01;
  COFD[3551] = 1.15576503E-02;
  COFD[3552] = -1.88647454E+01;
  COFD[3553] = 4.66413466E+00;
  COFD[3554] = -3.93781062E-01;
  COFD[3555] = 1.72262444E-02;
  COFD[3556] = -1.88472851E+01;
  COFD[3557] = 4.66413466E+00;
  COFD[3558] = -3.93781062E-01;
  COFD[3559] = 1.72262444E-02;
  COFD[3560] = -1.96567945E+01;
  COFD[3561] = 5.01045367E+00;
  COFD[3562] = -4.34933108E-01;
  COFD[3563] = 1.88557496E-02;
  COFD[3564] = -1.96567945E+01;
  COFD[3565] = 5.01045367E+00;
  COFD[3566] = -4.34933108E-01;
  COFD[3567] = 1.88557496E-02;
  COFD[3568] = -1.96828832E+01;
  COFD[3569] = 5.01045367E+00;
  COFD[3570] = -4.34933108E-01;
  COFD[3571] = 1.88557496E-02;
  COFD[3572] = -2.15789316E+01;
  COFD[3573] = 5.29592020E+00;
  COFD[3574] = -4.29306693E-01;
  COFD[3575] = 1.68631569E-02;
  COFD[3576] = -2.15891510E+01;
  COFD[3577] = 5.29592020E+00;
  COFD[3578] = -4.29306693E-01;
  COFD[3579] = 1.68631569E-02;
  COFD[3580] = -2.18139850E+01;
  COFD[3581] = 5.42278317E+00;
  COFD[3582] = -4.52198714E-01;
  COFD[3583] = 1.81197989E-02;
  COFD[3584] = -1.85447641E+01;
  COFD[3585] = 4.55184771E+00;
  COFD[3586] = -3.80130058E-01;
  COFD[3587] = 1.66723098E-02;
  COFD[3588] = -2.16707966E+01;
  COFD[3589] = 5.55320239E+00;
  COFD[3590] = -4.95016417E-01;
  COFD[3591] = 2.10454139E-02;
  COFD[3592] = -2.12711433E+01;
  COFD[3593] = 5.46011691E+00;
  COFD[3594] = -4.87036347E-01;
  COFD[3595] = 2.08650175E-02;
  COFD[3596] = -2.12829904E+01;
  COFD[3597] = 5.46011691E+00;
  COFD[3598] = -4.87036347E-01;
  COFD[3599] = 2.08650175E-02;
  COFD[3600] = -2.17363765E+01;
  COFD[3601] = 5.55861513E+00;
  COFD[3602] = -4.94504380E-01;
  COFD[3603] = 2.09726190E-02;
  COFD[3604] = -2.17465745E+01;
  COFD[3605] = 5.55861513E+00;
  COFD[3606] = -4.94504380E-01;
  COFD[3607] = 2.09726190E-02;
  COFD[3608] = -1.98201628E+01;
  COFD[3609] = 5.08249823E+00;
  COFD[3610] = -4.44028925E-01;
  COFD[3611] = 1.92416457E-02;
  COFD[3612] = -2.19996148E+01;
  COFD[3613] = 5.44592057E+00;
  COFD[3614] = -4.56359887E-01;
  COFD[3615] = 1.83482928E-02;
  COFD[3616] = -2.20056395E+01;
  COFD[3617] = 5.44592057E+00;
  COFD[3618] = -4.56359887E-01;
  COFD[3619] = 1.83482928E-02;
  COFD[3620] = -2.21839365E+01;
  COFD[3621] = 5.61881236E+00;
  COFD[3622] = -5.00953746E-01;
  COFD[3623] = 2.11978962E-02;
  COFD[3624] = -2.23489352E+01;
  COFD[3625] = 5.37620790E+00;
  COFD[3626] = -4.43667096E-01;
  COFD[3627] = 1.76474144E-02;
  COFD[3628] = -2.23504725E+01;
  COFD[3629] = 5.30065654E+00;
  COFD[3630] = -4.30166563E-01;
  COFD[3631] = 1.69104623E-02;
  COFD[3632] = -2.23614063E+01;
  COFD[3633] = 5.32669734E+00;
  COFD[3634] = -4.34781870E-01;
  COFD[3635] = 1.71614091E-02;
  COFD[3636] = -2.16359391E+01;
  COFD[3637] = 4.90273918E+00;
  COFD[3638] = -3.64019088E-01;
  COFD[3639] = 1.34469578E-02;
  COFD[3640] = -2.16284755E+01;
  COFD[3641] = 4.90137576E+00;
  COFD[3642] = -3.63794402E-01;
  COFD[3643] = 1.34352726E-02;
  COFD[3644] = -1.85176895E+01;
  COFD[3645] = 4.54499584E+00;
  COFD[3646] = -3.79297576E-01;
  COFD[3647] = 1.66385528E-02;
  COFD[3648] = -2.16777478E+01;
  COFD[3649] = 4.83556703E+00;
  COFD[3650] = -3.52989658E-01;
  COFD[3651] = 1.28754048E-02;
  COFD[3652] = -2.15473205E+01;
  COFD[3653] = 5.55006147E+00;
  COFD[3654] = -4.95086405E-01;
  COFD[3655] = 2.10681449E-02;
  COFD[3656] = -1.91621370E+01;
  COFD[3657] = 4.83086729E+00;
  COFD[3658] = -4.14410137E-01;
  COFD[3659] = 1.80814444E-02;
  COFD[3660] = -1.37136431E+01;
  COFD[3661] = 3.20349997E+00;
  COFD[3662] = -2.07715287E-01;
  COFD[3663] = 9.29248687E-03;
  COFD[3664] = -2.17862916E+01;
  COFD[3665] = 5.53130752E+00;
  COFD[3666] = -4.94179498E-01;
  COFD[3667] = 2.10910504E-02;
  COFD[3668] = -2.24925911E+01;
  COFD[3669] = 5.68755039E+00;
  COFD[3670] = -5.05543176E-01;
  COFD[3671] = 2.12210786E-02;
  COFD[3672] = -2.24925911E+01;
  COFD[3673] = 5.68755039E+00;
  COFD[3674] = -5.05543176E-01;
  COFD[3675] = 2.12210786E-02;
  COFD[3676] = -2.24978681E+01;
  COFD[3677] = 5.55193120E+00;
  COFD[3678] = -4.75304459E-01;
  COFD[3679] = 1.93851412E-02;
  COFD[3680] = -2.24813989E+01;
  COFD[3681] = 5.47470966E+00;
  COFD[3682] = -4.61584053E-01;
  COFD[3683] = 1.86360608E-02;
  COFD[3684] = -1.76220505E+01;
  COFD[3685] = 4.87139509E+00;
  COFD[3686] = -4.19530454E-01;
  COFD[3687] = 1.82985749E-02;
  COFD[3688] = -1.70182310E+01;
  COFD[3689] = 4.16343140E+00;
  COFD[3690] = -3.33016502E-01;
  COFD[3691] = 1.47680825E-02;
  COFD[3692] = -1.70369324E+01;
  COFD[3693] = 4.16343140E+00;
  COFD[3694] = -3.33016502E-01;
  COFD[3695] = 1.47680825E-02;
  COFD[3696] = -1.82753389E+01;
  COFD[3697] = 4.46974656E+00;
  COFD[3698] = -3.69978112E-01;
  COFD[3699] = 1.62523234E-02;
  COFD[3700] = -2.11726491E+01;
  COFD[3701] = 5.31392395E+00;
  COFD[3702] = -4.32538469E-01;
  COFD[3703] = 1.70400084E-02;
  COFD[3704] = -1.82819164E+01;
  COFD[3705] = 4.46974656E+00;
  COFD[3706] = -3.69978112E-01;
  COFD[3707] = 1.62523234E-02;
  COFD[3708] = -1.82684406E+01;
  COFD[3709] = 4.46974656E+00;
  COFD[3710] = -3.69978112E-01;
  COFD[3711] = 1.62523234E-02;
  COFD[3712] = -1.92123133E+01;
  COFD[3713] = 4.86010656E+00;
  COFD[3714] = -4.18107415E-01;
  COFD[3715] = 1.82383933E-02;
  COFD[3716] = -1.92123133E+01;
  COFD[3717] = 4.86010656E+00;
  COFD[3718] = -4.18107415E-01;
  COFD[3719] = 1.82383933E-02;
  COFD[3720] = -1.92345878E+01;
  COFD[3721] = 4.86010656E+00;
  COFD[3722] = -4.18107415E-01;
  COFD[3723] = 1.82383933E-02;
  COFD[3724] = -2.17962509E+01;
  COFD[3725] = 5.46882118E+00;
  COFD[3726] = -4.60523872E-01;
  COFD[3727] = 1.85779012E-02;
  COFD[3728] = -2.18042531E+01;
  COFD[3729] = 5.46882118E+00;
  COFD[3730] = -4.60523872E-01;
  COFD[3731] = 1.85779012E-02;
  COFD[3732] = -2.20142899E+01;
  COFD[3733] = 5.61844133E+00;
  COFD[3734] = -4.89300702E-01;
  COFD[3735] = 2.02138668E-02;
  COFD[3736] = -1.80547255E+01;
  COFD[3737] = 4.39110023E+00;
  COFD[3738] = -3.60927149E-01;
  COFD[3739] = 1.59089184E-02;
  COFD[3740] = -2.12711433E+01;
  COFD[3741] = 5.46011691E+00;
  COFD[3742] = -4.87036347E-01;
  COFD[3743] = 2.08650175E-02;
  COFD[3744] = -2.06951342E+01;
  COFD[3745] = 5.27694254E+00;
  COFD[3746] = -4.66140848E-01;
  COFD[3747] = 2.00736256E-02;
  COFD[3748] = -2.07045396E+01;
  COFD[3749] = 5.27694254E+00;
  COFD[3750] = -4.66140848E-01;
  COFD[3751] = 2.00736256E-02;
  COFD[3752] = -2.14164067E+01;
  COFD[3753] = 5.49187500E+00;
  COFD[3754] = -4.90425743E-01;
  COFD[3755] = 2.09827604E-02;
  COFD[3756] = -2.14243906E+01;
  COFD[3757] = 5.49187500E+00;
  COFD[3758] = -4.90425743E-01;
  COFD[3759] = 2.09827604E-02;
  COFD[3760] = -1.92626377E+01;
  COFD[3761] = 4.90440148E+00;
  COFD[3762] = -4.23188309E-01;
  COFD[3763] = 1.84305330E-02;
  COFD[3764] = -2.21402478E+01;
  COFD[3765] = 5.59674193E+00;
  COFD[3766] = -4.84372652E-01;
  COFD[3767] = 1.99129793E-02;
  COFD[3768] = -2.21447464E+01;
  COFD[3769] = 5.59674193E+00;
  COFD[3770] = -4.84372652E-01;
  COFD[3771] = 1.99129793E-02;
  COFD[3772] = -2.17816230E+01;
  COFD[3773] = 5.53130752E+00;
  COFD[3774] = -4.94179498E-01;
  COFD[3775] = 2.10910504E-02;
  COFD[3776] = -2.24962367E+01;
  COFD[3777] = 5.55193120E+00;
  COFD[3778] = -4.75304459E-01;
  COFD[3779] = 1.93851412E-02;
  COFD[3780] = -2.24801818E+01;
  COFD[3781] = 5.47470966E+00;
  COFD[3782] = -4.61584053E-01;
  COFD[3783] = 1.86360608E-02;
  COFD[3784] = -2.24904108E+01;
  COFD[3785] = 5.50302401E+00;
  COFD[3786] = -4.66510474E-01;
  COFD[3787] = 1.89018117E-02;
  COFD[3788] = -2.21662029E+01;
  COFD[3789] = 5.27265151E+00;
  COFD[3790] = -4.25148726E-01;
  COFD[3791] = 1.66361098E-02;
  COFD[3792] = -2.21608868E+01;
  COFD[3793] = 5.27265151E+00;
  COFD[3794] = -4.25148726E-01;
  COFD[3795] = 1.66361098E-02;
  COFD[3796] = -1.80318618E+01;
  COFD[3797] = 4.38584649E+00;
  COFD[3798] = -3.60315666E-01;
  COFD[3799] = 1.58853966E-02;
  COFD[3800] = -2.16939518E+01;
  COFD[3801] = 4.83556703E+00;
  COFD[3802] = -3.52989658E-01;
  COFD[3803] = 1.28754048E-02;
  COFD[3804] = -2.15570798E+01;
  COFD[3805] = 5.55006147E+00;
  COFD[3806] = -4.95086405E-01;
  COFD[3807] = 2.10681449E-02;
  COFD[3808] = -1.91692924E+01;
  COFD[3809] = 4.83086729E+00;
  COFD[3810] = -4.14410137E-01;
  COFD[3811] = 1.80814444E-02;
  COFD[3812] = -1.37149841E+01;
  COFD[3813] = 3.20349997E+00;
  COFD[3814] = -2.07715287E-01;
  COFD[3815] = 9.29248687E-03;
  COFD[3816] = -2.17979381E+01;
  COFD[3817] = 5.53130752E+00;
  COFD[3818] = -4.94179498E-01;
  COFD[3819] = 2.10910504E-02;
  COFD[3820] = -2.25054841E+01;
  COFD[3821] = 5.68755039E+00;
  COFD[3822] = -5.05543176E-01;
  COFD[3823] = 2.12210786E-02;
  COFD[3824] = -2.25054841E+01;
  COFD[3825] = 5.68755039E+00;
  COFD[3826] = -5.05543176E-01;
  COFD[3827] = 2.12210786E-02;
  COFD[3828] = -2.25120434E+01;
  COFD[3829] = 5.55193120E+00;
  COFD[3830] = -4.75304459E-01;
  COFD[3831] = 1.93851412E-02;
  COFD[3832] = -2.24961433E+01;
  COFD[3833] = 5.47470966E+00;
  COFD[3834] = -4.61584053E-01;
  COFD[3835] = 1.86360608E-02;
  COFD[3836] = -1.76227455E+01;
  COFD[3837] = 4.87139509E+00;
  COFD[3838] = -4.19530454E-01;
  COFD[3839] = 1.82985749E-02;
  COFD[3840] = -1.70253741E+01;
  COFD[3841] = 4.16343140E+00;
  COFD[3842] = -3.33016502E-01;
  COFD[3843] = 1.47680825E-02;
  COFD[3844] = -1.70443498E+01;
  COFD[3845] = 4.16343140E+00;
  COFD[3846] = -3.33016502E-01;
  COFD[3847] = 1.47680825E-02;
  COFD[3848] = -1.82858660E+01;
  COFD[3849] = 4.46974656E+00;
  COFD[3850] = -3.69978112E-01;
  COFD[3851] = 1.62523234E-02;
  COFD[3852] = -2.11803284E+01;
  COFD[3853] = 5.31392395E+00;
  COFD[3854] = -4.32538469E-01;
  COFD[3855] = 1.70400084E-02;
  COFD[3856] = -1.82925844E+01;
  COFD[3857] = 4.46974656E+00;
  COFD[3858] = -3.69978112E-01;
  COFD[3859] = 1.62523234E-02;
  COFD[3860] = -1.82788220E+01;
  COFD[3861] = 4.46974656E+00;
  COFD[3862] = -3.69978112E-01;
  COFD[3863] = 1.62523234E-02;
  COFD[3864] = -1.92188805E+01;
  COFD[3865] = 4.86010656E+00;
  COFD[3866] = -4.18107415E-01;
  COFD[3867] = 1.82383933E-02;
  COFD[3868] = -1.92188805E+01;
  COFD[3869] = 4.86010656E+00;
  COFD[3870] = -4.18107415E-01;
  COFD[3871] = 1.82383933E-02;
  COFD[3872] = -1.92414562E+01;
  COFD[3873] = 4.86010656E+00;
  COFD[3874] = -4.18107415E-01;
  COFD[3875] = 1.82383933E-02;
  COFD[3876] = -2.18061705E+01;
  COFD[3877] = 5.46882118E+00;
  COFD[3878] = -4.60523872E-01;
  COFD[3879] = 1.85779012E-02;
  COFD[3880] = -2.18143343E+01;
  COFD[3881] = 5.46882118E+00;
  COFD[3882] = -4.60523872E-01;
  COFD[3883] = 1.85779012E-02;
  COFD[3884] = -2.20245271E+01;
  COFD[3885] = 5.61844133E+00;
  COFD[3886] = -4.89300702E-01;
  COFD[3887] = 2.02138668E-02;
  COFD[3888] = -1.80644774E+01;
  COFD[3889] = 4.39110023E+00;
  COFD[3890] = -3.60927149E-01;
  COFD[3891] = 1.59089184E-02;
  COFD[3892] = -2.12829904E+01;
  COFD[3893] = 5.46011691E+00;
  COFD[3894] = -4.87036347E-01;
  COFD[3895] = 2.08650175E-02;
  COFD[3896] = -2.07045396E+01;
  COFD[3897] = 5.27694254E+00;
  COFD[3898] = -4.66140848E-01;
  COFD[3899] = 2.00736256E-02;
  COFD[3900] = -2.07141253E+01;
  COFD[3901] = 5.27694254E+00;
  COFD[3902] = -4.66140848E-01;
  COFD[3903] = 2.00736256E-02;
  COFD[3904] = -2.14263334E+01;
  COFD[3905] = 5.49187500E+00;
  COFD[3906] = -4.90425743E-01;
  COFD[3907] = 2.09827604E-02;
  COFD[3908] = -2.14344787E+01;
  COFD[3909] = 5.49187500E+00;
  COFD[3910] = -4.90425743E-01;
  COFD[3911] = 2.09827604E-02;
  COFD[3912] = -1.92741698E+01;
  COFD[3913] = 4.90440148E+00;
  COFD[3914] = -4.23188309E-01;
  COFD[3915] = 1.84305330E-02;
  COFD[3916] = -2.21518895E+01;
  COFD[3917] = 5.59674193E+00;
  COFD[3918] = -4.84372652E-01;
  COFD[3919] = 1.99129793E-02;
  COFD[3920] = -2.21564946E+01;
  COFD[3921] = 5.59674193E+00;
  COFD[3922] = -4.84372652E-01;
  COFD[3923] = 1.99129793E-02;
  COFD[3924] = -2.17931600E+01;
  COFD[3925] = 5.53130752E+00;
  COFD[3926] = -4.94179498E-01;
  COFD[3927] = 2.10910504E-02;
  COFD[3928] = -2.25103651E+01;
  COFD[3929] = 5.55193120E+00;
  COFD[3930] = -4.75304459E-01;
  COFD[3931] = 1.93851412E-02;
  COFD[3932] = -2.24948899E+01;
  COFD[3933] = 5.47470966E+00;
  COFD[3934] = -4.61584053E-01;
  COFD[3935] = 1.86360608E-02;
  COFD[3936] = -2.25056585E+01;
  COFD[3937] = 5.50302401E+00;
  COFD[3938] = -4.66510474E-01;
  COFD[3939] = 1.89018117E-02;
  COFD[3940] = -2.21813658E+01;
  COFD[3941] = 5.27265151E+00;
  COFD[3942] = -4.25148726E-01;
  COFD[3943] = 1.66361098E-02;
  COFD[3944] = -2.21760789E+01;
  COFD[3945] = 5.27265151E+00;
  COFD[3946] = -4.25148726E-01;
  COFD[3947] = 1.66361098E-02;
  COFD[3948] = -1.80416144E+01;
  COFD[3949] = 4.38584649E+00;
  COFD[3950] = -3.60315666E-01;
  COFD[3951] = 1.58853966E-02;
  COFD[3952] = -2.07726910E+01;
  COFD[3953] = 4.33115158E+00;
  COFD[3954] = -2.73597405E-01;
  COFD[3955] = 8.86609067E-03;
  COFD[3956] = -2.21205763E+01;
  COFD[3957] = 5.69323725E+00;
  COFD[3958] = -5.08380916E-01;
  COFD[3959] = 2.14308925E-02;
  COFD[3960] = -1.98438106E+01;
  COFD[3961] = 5.03924528E+00;
  COFD[3962] = -4.38609208E-01;
  COFD[3963] = 1.90135187E-02;
  COFD[3964] = -1.42398684E+01;
  COFD[3965] = 3.37676928E+00;
  COFD[3966] = -2.29956366E-01;
  COFD[3967] = 1.02466877E-02;
  COFD[3968] = -2.23222254E+01;
  COFD[3969] = 5.66009032E+00;
  COFD[3970] = -5.05604700E-01;
  COFD[3971] = 2.13722200E-02;
  COFD[3972] = -2.25515905E+01;
  COFD[3973] = 5.60262902E+00;
  COFD[3974] = -4.85703373E-01;
  COFD[3975] = 1.99941087E-02;
  COFD[3976] = -2.25515905E+01;
  COFD[3977] = 5.60262902E+00;
  COFD[3978] = -4.85703373E-01;
  COFD[3979] = 1.99941087E-02;
  COFD[3980] = -2.22756471E+01;
  COFD[3981] = 5.34099743E+00;
  COFD[3982] = -4.37253581E-01;
  COFD[3983] = 1.72939556E-02;
  COFD[3984] = -2.22505019E+01;
  COFD[3985] = 5.25947501E+00;
  COFD[3986] = -4.22909606E-01;
  COFD[3987] = 1.65170757E-02;
  COFD[3988] = -1.83055308E+01;
  COFD[3989] = 5.08177078E+00;
  COFD[3990] = -4.43938558E-01;
  COFD[3991] = 1.92378766E-02;
  COFD[3992] = -1.76887118E+01;
  COFD[3993] = 4.37623052E+00;
  COFD[3994] = -3.59174763E-01;
  COFD[3995] = 1.58404575E-02;
  COFD[3996] = -1.77081997E+01;
  COFD[3997] = 4.37623052E+00;
  COFD[3998] = -3.59174763E-01;
  COFD[3999] = 1.58404575E-02;
  COFD[4000] = -1.90176990E+01;
  COFD[4001] = 4.70564669E+00;
  COFD[4002] = -3.98805713E-01;
  COFD[4003] = 1.74292853E-02;
  COFD[4004] = -2.06643856E+01;
  COFD[4005] = 4.97931576E+00;
  COFD[4006] = -3.76842377E-01;
  COFD[4007] = 1.41198571E-02;
  COFD[4008] = -1.90246855E+01;
  COFD[4009] = 4.70564669E+00;
  COFD[4010] = -3.98805713E-01;
  COFD[4011] = 1.74292853E-02;
  COFD[4012] = -1.90103778E+01;
  COFD[4013] = 4.70564669E+00;
  COFD[4014] = -3.98805713E-01;
  COFD[4015] = 1.74292853E-02;
  COFD[4016] = -1.98982793E+01;
  COFD[4017] = 5.07066407E+00;
  COFD[4018] = -4.42559638E-01;
  COFD[4019] = 1.91803969E-02;
  COFD[4020] = -1.98982793E+01;
  COFD[4021] = 5.07066407E+00;
  COFD[4022] = -4.42559638E-01;
  COFD[4023] = 1.91803969E-02;
  COFD[4024] = -1.99214157E+01;
  COFD[4025] = 5.07066407E+00;
  COFD[4026] = -4.42559638E-01;
  COFD[4027] = 1.91803969E-02;
  COFD[4028] = -2.15536120E+01;
  COFD[4029] = 5.24975529E+00;
  COFD[4030] = -4.21290887E-01;
  COFD[4031] = 1.64321070E-02;
  COFD[4032] = -2.15620825E+01;
  COFD[4033] = 5.24975529E+00;
  COFD[4034] = -4.21290887E-01;
  COFD[4035] = 1.64321070E-02;
  COFD[4036] = -2.19022345E+01;
  COFD[4037] = 5.45765686E+00;
  COFD[4038] = -4.58497864E-01;
  COFD[4039] = 1.84663411E-02;
  COFD[4040] = -1.87107328E+01;
  COFD[4041] = 4.59363643E+00;
  COFD[4042] = -3.85240446E-01;
  COFD[4043] = 1.68810716E-02;
  COFD[4044] = -2.17363765E+01;
  COFD[4045] = 5.55861513E+00;
  COFD[4046] = -4.94504380E-01;
  COFD[4047] = 2.09726190E-02;
  COFD[4048] = -2.14164067E+01;
  COFD[4049] = 5.49187500E+00;
  COFD[4050] = -4.90425743E-01;
  COFD[4051] = 2.09827604E-02;
  COFD[4052] = -2.14263334E+01;
  COFD[4053] = 5.49187500E+00;
  COFD[4054] = -4.90425743E-01;
  COFD[4055] = 2.09827604E-02;
  COFD[4056] = -2.18724281E+01;
  COFD[4057] = 5.58887491E+00;
  COFD[4058] = -4.97531158E-01;
  COFD[4059] = 2.10674626E-02;
  COFD[4060] = -2.18808796E+01;
  COFD[4061] = 5.58887491E+00;
  COFD[4062] = -4.97531158E-01;
  COFD[4063] = 2.10674626E-02;
  COFD[4064] = -2.00032067E+01;
  COFD[4065] = 5.12752967E+00;
  COFD[4066] = -4.49396807E-01;
  COFD[4067] = 1.94553009E-02;
  COFD[4068] = -2.19606015E+01;
  COFD[4069] = 5.40500002E+00;
  COFD[4070] = -4.49077409E-01;
  COFD[4071] = 1.79507623E-02;
  COFD[4072] = -2.19654105E+01;
  COFD[4073] = 5.40500002E+00;
  COFD[4074] = -4.49077409E-01;
  COFD[4075] = 1.79507623E-02;
  COFD[4076] = -2.23172378E+01;
  COFD[4077] = 5.66009032E+00;
  COFD[4078] = -5.05604700E-01;
  COFD[4079] = 2.13722200E-02;
  COFD[4080] = -2.22738778E+01;
  COFD[4081] = 5.34099743E+00;
  COFD[4082] = -4.37253581E-01;
  COFD[4083] = 1.72939556E-02;
  COFD[4084] = -2.22491776E+01;
  COFD[4085] = 5.25947501E+00;
  COFD[4086] = -4.22909606E-01;
  COFD[4087] = 1.65170757E-02;
  COFD[4088] = -2.22624610E+01;
  COFD[4089] = 5.28821837E+00;
  COFD[4090] = -4.27914101E-01;
  COFD[4091] = 1.67866936E-02;
  COFD[4092] = -2.16261981E+01;
  COFD[4093] = 4.92271922E+00;
  COFD[4094] = -3.67322142E-01;
  COFD[4095] = 1.36190664E-02;
  COFD[4096] = -2.16210973E+01;
  COFD[4097] = 4.92271922E+00;
  COFD[4098] = -3.67322142E-01;
  COFD[4099] = 1.36190664E-02;
  COFD[4100] = -1.86824369E+01;
  COFD[4101] = 4.58611364E+00;
  COFD[4102] = -3.84322485E-01;
  COFD[4103] = 1.68437096E-02;
  COFD[4104] = -2.07869981E+01;
  COFD[4105] = 4.33115158E+00;
  COFD[4106] = -2.73597405E-01;
  COFD[4107] = 8.86609067E-03;
  COFD[4108] = -2.21288773E+01;
  COFD[4109] = 5.69323725E+00;
  COFD[4110] = -5.08380916E-01;
  COFD[4111] = 2.14308925E-02;
  COFD[4112] = -1.98498080E+01;
  COFD[4113] = 5.03924528E+00;
  COFD[4114] = -4.38609208E-01;
  COFD[4115] = 1.90135187E-02;
  COFD[4116] = -1.42409569E+01;
  COFD[4117] = 3.37676928E+00;
  COFD[4118] = -2.29956366E-01;
  COFD[4119] = 1.02466877E-02;
  COFD[4120] = -2.23322391E+01;
  COFD[4121] = 5.66009032E+00;
  COFD[4122] = -5.05604700E-01;
  COFD[4123] = 2.13722200E-02;
  COFD[4124] = -2.25627559E+01;
  COFD[4125] = 5.60262902E+00;
  COFD[4126] = -4.85703373E-01;
  COFD[4127] = 1.99941087E-02;
  COFD[4128] = -2.25627559E+01;
  COFD[4129] = 5.60262902E+00;
  COFD[4130] = -4.85703373E-01;
  COFD[4131] = 1.99941087E-02;
  COFD[4132] = -2.22880148E+01;
  COFD[4133] = 5.34099743E+00;
  COFD[4134] = -4.37253581E-01;
  COFD[4135] = 1.72939556E-02;
  COFD[4136] = -2.22634091E+01;
  COFD[4137] = 5.25947501E+00;
  COFD[4138] = -4.22909606E-01;
  COFD[4139] = 1.65170757E-02;
  COFD[4140] = -1.83060930E+01;
  COFD[4141] = 5.08177078E+00;
  COFD[4142] = -4.43938558E-01;
  COFD[4143] = 1.92378766E-02;
  COFD[4144] = -1.76946985E+01;
  COFD[4145] = 4.37623052E+00;
  COFD[4146] = -3.59174763E-01;
  COFD[4147] = 1.58404575E-02;
  COFD[4148] = -1.77144258E+01;
  COFD[4149] = 4.37623052E+00;
  COFD[4150] = -3.59174763E-01;
  COFD[4151] = 1.58404575E-02;
  COFD[4152] = -1.90266923E+01;
  COFD[4153] = 4.70564669E+00;
  COFD[4154] = -3.98805713E-01;
  COFD[4155] = 1.74292853E-02;
  COFD[4156] = -2.06708409E+01;
  COFD[4157] = 4.97931576E+00;
  COFD[4158] = -3.76842377E-01;
  COFD[4159] = 1.41198571E-02;
  COFD[4160] = -1.90338066E+01;
  COFD[4161] = 4.70564669E+00;
  COFD[4162] = -3.98805713E-01;
  COFD[4163] = 1.74292853E-02;
  COFD[4164] = -1.90192393E+01;
  COFD[4165] = 4.70564669E+00;
  COFD[4166] = -3.98805713E-01;
  COFD[4167] = 1.74292853E-02;
  COFD[4168] = -1.99037656E+01;
  COFD[4169] = 5.07066407E+00;
  COFD[4170] = -4.42559638E-01;
  COFD[4171] = 1.91803969E-02;
  COFD[4172] = -1.99037656E+01;
  COFD[4173] = 5.07066407E+00;
  COFD[4174] = -4.42559638E-01;
  COFD[4175] = 1.91803969E-02;
  COFD[4176] = -1.99271633E+01;
  COFD[4177] = 5.07066407E+00;
  COFD[4178] = -4.42559638E-01;
  COFD[4179] = 1.91803969E-02;
  COFD[4180] = -2.15620570E+01;
  COFD[4181] = 5.24975529E+00;
  COFD[4182] = -4.21290887E-01;
  COFD[4183] = 1.64321070E-02;
  COFD[4184] = -2.15706730E+01;
  COFD[4185] = 5.24975529E+00;
  COFD[4186] = -4.21290887E-01;
  COFD[4187] = 1.64321070E-02;
  COFD[4188] = -2.19109658E+01;
  COFD[4189] = 5.45765686E+00;
  COFD[4190] = -4.58497864E-01;
  COFD[4191] = 1.84663411E-02;
  COFD[4192] = -1.87190272E+01;
  COFD[4193] = 4.59363643E+00;
  COFD[4194] = -3.85240446E-01;
  COFD[4195] = 1.68810716E-02;
  COFD[4196] = -2.17465745E+01;
  COFD[4197] = 5.55861513E+00;
  COFD[4198] = -4.94504380E-01;
  COFD[4199] = 2.09726190E-02;
  COFD[4200] = -2.14243906E+01;
  COFD[4201] = 5.49187500E+00;
  COFD[4202] = -4.90425743E-01;
  COFD[4203] = 2.09827604E-02;
  COFD[4204] = -2.14344787E+01;
  COFD[4205] = 5.49187500E+00;
  COFD[4206] = -4.90425743E-01;
  COFD[4207] = 2.09827604E-02;
  COFD[4208] = -2.18808796E+01;
  COFD[4209] = 5.58887491E+00;
  COFD[4210] = -4.97531158E-01;
  COFD[4211] = 2.10674626E-02;
  COFD[4212] = -2.18894764E+01;
  COFD[4213] = 5.58887491E+00;
  COFD[4214] = -4.97531158E-01;
  COFD[4215] = 2.10674626E-02;
  COFD[4216] = -2.00131156E+01;
  COFD[4217] = 5.12752967E+00;
  COFD[4218] = -4.49396807E-01;
  COFD[4219] = 1.94553009E-02;
  COFD[4220] = -2.19706108E+01;
  COFD[4221] = 5.40500002E+00;
  COFD[4222] = -4.49077409E-01;
  COFD[4223] = 1.79507623E-02;
  COFD[4224] = -2.19755175E+01;
  COFD[4225] = 5.40500002E+00;
  COFD[4226] = -4.49077409E-01;
  COFD[4227] = 1.79507623E-02;
  COFD[4228] = -2.23271510E+01;
  COFD[4229] = 5.66009032E+00;
  COFD[4230] = -5.05604700E-01;
  COFD[4231] = 2.13722200E-02;
  COFD[4232] = -2.22862012E+01;
  COFD[4233] = 5.34099743E+00;
  COFD[4234] = -4.37253581E-01;
  COFD[4235] = 1.72939556E-02;
  COFD[4236] = -2.22620502E+01;
  COFD[4237] = 5.25947501E+00;
  COFD[4238] = -4.22909606E-01;
  COFD[4239] = 1.65170757E-02;
  COFD[4240] = -2.22758481E+01;
  COFD[4241] = 5.28821837E+00;
  COFD[4242] = -4.27914101E-01;
  COFD[4243] = 1.67866936E-02;
  COFD[4244] = -2.16395042E+01;
  COFD[4245] = 4.92271922E+00;
  COFD[4246] = -3.67322142E-01;
  COFD[4247] = 1.36190664E-02;
  COFD[4248] = -2.16344311E+01;
  COFD[4249] = 4.92271922E+00;
  COFD[4250] = -3.67322142E-01;
  COFD[4251] = 1.36190664E-02;
  COFD[4252] = -1.86907319E+01;
  COFD[4253] = 4.58611364E+00;
  COFD[4254] = -3.84322485E-01;
  COFD[4255] = 1.68437096E-02;
  COFD[4256] = -2.24920429E+01;
  COFD[4257] = 5.38330711E+00;
  COFD[4258] = -4.44993404E-01;
  COFD[4259] = 1.77214781E-02;
  COFD[4260] = -2.02540359E+01;
  COFD[4261] = 5.24940351E+00;
  COFD[4262] = -4.63385597E-01;
  COFD[4263] = 1.99879279E-02;
  COFD[4264] = -1.76359486E+01;
  COFD[4265] = 4.42235405E+00;
  COFD[4266] = -3.64582283E-01;
  COFD[4267] = 1.60504051E-02;
  COFD[4268] = -1.24284561E+01;
  COFD[4269] = 2.91029437E+00;
  COFD[4270] = -1.69730876E-01;
  COFD[4271] = 7.65007851E-03;
  COFD[4272] = -2.04947148E+01;
  COFD[4273] = 5.19650040E+00;
  COFD[4274] = -4.57450963E-01;
  COFD[4275] = 1.97683350E-02;
  COFD[4276] = -2.15502927E+01;
  COFD[4277] = 5.50469943E+00;
  COFD[4278] = -4.91737636E-01;
  COFD[4279] = 2.10256273E-02;
  COFD[4280] = -2.15502927E+01;
  COFD[4281] = 5.50469943E+00;
  COFD[4282] = -4.91737636E-01;
  COFD[4283] = 2.10256273E-02;
  COFD[4284] = -2.23052517E+01;
  COFD[4285] = 5.69443795E+00;
  COFD[4286] = -5.09197045E-01;
  COFD[4287] = 2.14937695E-02;
  COFD[4288] = -2.24745026E+01;
  COFD[4289] = 5.68907624E+00;
  COFD[4290] = -5.05936774E-01;
  COFD[4291] = 2.12463420E-02;
  COFD[4292] = -1.58348835E+01;
  COFD[4293] = 4.44355128E+00;
  COFD[4294] = -3.66995830E-01;
  COFD[4295] = 1.61406807E-02;
  COFD[4296] = -1.52781013E+01;
  COFD[4297] = 3.67230169E+00;
  COFD[4298] = -2.68717936E-01;
  COFD[4299] = 1.19476518E-02;
  COFD[4300] = -1.52998901E+01;
  COFD[4301] = 3.67230169E+00;
  COFD[4302] = -2.68717936E-01;
  COFD[4303] = 1.19476518E-02;
  COFD[4304] = -1.68992145E+01;
  COFD[4305] = 4.10789126E+00;
  COFD[4306] = -3.25818537E-01;
  COFD[4307] = 1.44557050E-02;
  COFD[4308] = -2.11054327E+01;
  COFD[4309] = 5.62361194E+00;
  COFD[4310] = -4.90650400E-01;
  COFD[4311] = 2.03003839E-02;
  COFD[4312] = -1.69074943E+01;
  COFD[4313] = 4.10789126E+00;
  COFD[4314] = -3.25818537E-01;
  COFD[4315] = 1.44557050E-02;
  COFD[4316] = -1.68905609E+01;
  COFD[4317] = 4.10789126E+00;
  COFD[4318] = -3.25818537E-01;
  COFD[4319] = 1.44557050E-02;
  COFD[4320] = -1.76496830E+01;
  COFD[4321] = 4.43761042E+00;
  COFD[4322] = -3.66314590E-01;
  COFD[4323] = 1.61149468E-02;
  COFD[4324] = -1.76496830E+01;
  COFD[4325] = 4.43761042E+00;
  COFD[4326] = -3.66314590E-01;
  COFD[4327] = 1.61149468E-02;
  COFD[4328] = -1.76753099E+01;
  COFD[4329] = 4.43761042E+00;
  COFD[4330] = -3.66314590E-01;
  COFD[4331] = 1.61149468E-02;
  COFD[4332] = -2.16283940E+01;
  COFD[4333] = 5.68709041E+00;
  COFD[4334] = -5.05429155E-01;
  COFD[4335] = 2.12138513E-02;
  COFD[4336] = -2.16383238E+01;
  COFD[4337] = 5.68709041E+00;
  COFD[4338] = -5.05429155E-01;
  COFD[4339] = 2.12138513E-02;
  COFD[4340] = -2.12382581E+01;
  COFD[4341] = 5.56395564E+00;
  COFD[4342] = -4.94651683E-01;
  COFD[4343] = 2.09564258E-02;
  COFD[4344] = -1.64958519E+01;
  COFD[4345] = 3.94517498E+00;
  COFD[4346] = -3.04327270E-01;
  COFD[4347] = 1.35053876E-02;
  COFD[4348] = -1.98201628E+01;
  COFD[4349] = 5.08249823E+00;
  COFD[4350] = -4.44028925E-01;
  COFD[4351] = 1.92416457E-02;
  COFD[4352] = -1.92626377E+01;
  COFD[4353] = 4.90440148E+00;
  COFD[4354] = -4.23188309E-01;
  COFD[4355] = 1.84305330E-02;
  COFD[4356] = -1.92741698E+01;
  COFD[4357] = 4.90440148E+00;
  COFD[4358] = -4.23188309E-01;
  COFD[4359] = 1.84305330E-02;
  COFD[4360] = -2.00032067E+01;
  COFD[4361] = 5.12752967E+00;
  COFD[4362] = -4.49396807E-01;
  COFD[4363] = 1.94553009E-02;
  COFD[4364] = -2.00131156E+01;
  COFD[4365] = 5.12752967E+00;
  COFD[4366] = -4.49396807E-01;
  COFD[4367] = 1.94553009E-02;
  COFD[4368] = -1.76249511E+01;
  COFD[4369] = 4.47104756E+00;
  COFD[4370] = -3.70105639E-01;
  COFD[4371] = 1.62560892E-02;
  COFD[4372] = -2.15876095E+01;
  COFD[4373] = 5.62474656E+00;
  COFD[4374] = -5.01628872E-01;
  COFD[4375] = 2.12235017E-02;
  COFD[4376] = -2.15934265E+01;
  COFD[4377] = 5.62474656E+00;
  COFD[4378] = -5.01628872E-01;
  COFD[4379] = 2.12235017E-02;
  COFD[4380] = -2.04886935E+01;
  COFD[4381] = 5.19650040E+00;
  COFD[4382] = -4.57450963E-01;
  COFD[4383] = 1.97683350E-02;
  COFD[4384] = -2.23030058E+01;
  COFD[4385] = 5.69443795E+00;
  COFD[4386] = -5.09197045E-01;
  COFD[4387] = 2.14937695E-02;
  COFD[4388] = -2.24728016E+01;
  COFD[4389] = 5.68907624E+00;
  COFD[4390] = -5.05936774E-01;
  COFD[4391] = 2.12463420E-02;
  COFD[4392] = -2.24229459E+01;
  COFD[4393] = 5.69228412E+00;
  COFD[4394] = -5.07223097E-01;
  COFD[4395] = 2.13381721E-02;
  COFD[4396] = -2.24326973E+01;
  COFD[4397] = 5.60934726E+00;
  COFD[4398] = -4.87173109E-01;
  COFD[4399] = 2.00825302E-02;
  COFD[4400] = -2.24265183E+01;
  COFD[4401] = 5.60934726E+00;
  COFD[4402] = -4.87173109E-01;
  COFD[4403] = 2.00825302E-02;
  COFD[4404] = -1.64535409E+01;
  COFD[4405] = 3.93210872E+00;
  COFD[4406] = -3.02565908E-01;
  COFD[4407] = 1.34259512E-02;
  COFD[4408] = -1.67929329E+01;
  COFD[4409] = 2.37403742E+00;
  COFD[4410] = 2.27831735E-02;
  COFD[4411] = -5.65998246E-03;
  COFD[4412] = -2.17016847E+01;
  COFD[4413] = 5.28764175E+00;
  COFD[4414] = -4.27810070E-01;
  COFD[4415] = 1.67809866E-02;
  COFD[4416] = -2.14447475E+01;
  COFD[4417] = 5.55893881E+00;
  COFD[4418] = -4.94493221E-01;
  COFD[4419] = 2.09699115E-02;
  COFD[4420] = -1.61742677E+01;
  COFD[4421] = 4.14977976E+00;
  COFD[4422] = -3.31246316E-01;
  COFD[4423] = 1.46912151E-02;
  COFD[4424] = -2.21473397E+01;
  COFD[4425] = 5.35014259E+00;
  COFD[4426] = -4.38890577E-01;
  COFD[4427] = 1.73833153E-02;
  COFD[4428] = -2.13850876E+01;
  COFD[4429] = 4.85021590E+00;
  COFD[4430] = -3.55384572E-01;
  COFD[4431] = 1.29992338E-02;
  COFD[4432] = -2.13850876E+01;
  COFD[4433] = 4.85021590E+00;
  COFD[4434] = -3.55384572E-01;
  COFD[4435] = 1.29992338E-02;
  COFD[4436] = -2.01021317E+01;
  COFD[4437] = 4.14878039E+00;
  COFD[4438] = -2.44951700E-01;
  COFD[4439] = 7.42419188E-03;
  COFD[4440] = -1.98542956E+01;
  COFD[4441] = 3.96995758E+00;
  COFD[4442] = -2.17256365E-01;
  COFD[4443] = 6.04546397E-03;
  COFD[4444] = -1.97836160E+01;
  COFD[4445] = 5.57919683E+00;
  COFD[4446] = -4.96414281E-01;
  COFD[4447] = 2.10244573E-02;
  COFD[4448] = -1.94388557E+01;
  COFD[4449] = 5.00201576E+00;
  COFD[4450] = -4.33936868E-01;
  COFD[4451] = 1.88164818E-02;
  COFD[4452] = -1.94607954E+01;
  COFD[4453] = 5.00201576E+00;
  COFD[4454] = -4.33936868E-01;
  COFD[4455] = 1.88164818E-02;
  COFD[4456] = -2.08541961E+01;
  COFD[4457] = 5.33208815E+00;
  COFD[4458] = -4.71670417E-01;
  COFD[4459] = 2.02463769E-02;
  COFD[4460] = -1.75302200E+01;
  COFD[4461] = 3.42123632E+00;
  COFD[4462] = -1.34010328E-01;
  COFD[4463] = 1.95240829E-03;
  COFD[4464] = -2.08625661E+01;
  COFD[4465] = 5.33208815E+00;
  COFD[4466] = -4.71670417E-01;
  COFD[4467] = 2.02463769E-02;
  COFD[4468] = -2.08454498E+01;
  COFD[4469] = 5.33208815E+00;
  COFD[4470] = -4.71670417E-01;
  COFD[4471] = 2.02463769E-02;
  COFD[4472] = -2.14493801E+01;
  COFD[4473] = 5.56935393E+00;
  COFD[4474] = -4.95277587E-01;
  COFD[4475] = 2.09806619E-02;
  COFD[4476] = -2.14493801E+01;
  COFD[4477] = 5.56935393E+00;
  COFD[4478] = -4.95277587E-01;
  COFD[4479] = 2.09806619E-02;
  COFD[4480] = -2.14751687E+01;
  COFD[4481] = 5.56935393E+00;
  COFD[4482] = -4.95277587E-01;
  COFD[4483] = 2.09806619E-02;
  COFD[4484] = -1.90741703E+01;
  COFD[4485] = 3.95410389E+00;
  COFD[4486] = -2.14821146E-01;
  COFD[4487] = 5.92501728E-03;
  COFD[4488] = -1.90842007E+01;
  COFD[4489] = 3.95410389E+00;
  COFD[4490] = -2.14821146E-01;
  COFD[4491] = 5.92501728E-03;
  COFD[4492] = -2.00088483E+01;
  COFD[4493] = 4.40851115E+00;
  COFD[4494] = -2.86110397E-01;
  COFD[4495] = 9.50609790E-03;
  COFD[4496] = -2.06216451E+01;
  COFD[4497] = 5.26012365E+00;
  COFD[4498] = -4.64415802E-01;
  COFD[4499] = 2.00176246E-02;
  COFD[4500] = -2.19996148E+01;
  COFD[4501] = 5.44592057E+00;
  COFD[4502] = -4.56359887E-01;
  COFD[4503] = 1.83482928E-02;
  COFD[4504] = -2.21402478E+01;
  COFD[4505] = 5.59674193E+00;
  COFD[4506] = -4.84372652E-01;
  COFD[4507] = 1.99129793E-02;
  COFD[4508] = -2.21518895E+01;
  COFD[4509] = 5.59674193E+00;
  COFD[4510] = -4.84372652E-01;
  COFD[4511] = 1.99129793E-02;
  COFD[4512] = -2.19606015E+01;
  COFD[4513] = 5.40500002E+00;
  COFD[4514] = -4.49077409E-01;
  COFD[4515] = 1.79507623E-02;
  COFD[4516] = -2.19706108E+01;
  COFD[4517] = 5.40500002E+00;
  COFD[4518] = -4.49077409E-01;
  COFD[4519] = 1.79507623E-02;
  COFD[4520] = -2.15876095E+01;
  COFD[4521] = 5.62474656E+00;
  COFD[4522] = -5.01628872E-01;
  COFD[4523] = 2.12235017E-02;
  COFD[4524] = -2.00100262E+01;
  COFD[4525] = 4.32504891E+00;
  COFD[4526] = -2.72579104E-01;
  COFD[4527] = 8.81311641E-03;
  COFD[4528] = -2.00159151E+01;
  COFD[4529] = 4.32504891E+00;
  COFD[4530] = -2.72579104E-01;
  COFD[4531] = 8.81311641E-03;
  COFD[4532] = -2.21412448E+01;
  COFD[4533] = 5.35014259E+00;
  COFD[4534] = -4.38890577E-01;
  COFD[4535] = 1.73833153E-02;
  COFD[4536] = -2.00998501E+01;
  COFD[4537] = 4.14878039E+00;
  COFD[4538] = -2.44951700E-01;
  COFD[4539] = 7.42419188E-03;
  COFD[4540] = -1.98525660E+01;
  COFD[4541] = 3.96995758E+00;
  COFD[4542] = -2.17256365E-01;
  COFD[4543] = 6.04546397E-03;
  COFD[4544] = -1.99360009E+01;
  COFD[4545] = 4.02583921E+00;
  COFD[4546] = -2.25897078E-01;
  COFD[4547] = 6.47435893E-03;
  COFD[4548] = -1.84718675E+01;
  COFD[4549] = 3.31173660E+00;
  COFD[4550] = -1.17180900E-01;
  COFD[4551] = 1.11911441E-03;
  COFD[4552] = -1.84668802E+01;
  COFD[4553] = 3.31173660E+00;
  COFD[4554] = -1.17180900E-01;
  COFD[4555] = 1.11911441E-03;
  COFD[4556] = -2.05997971E+01;
  COFD[4557] = 5.25583910E+00;
  COFD[4558] = -4.63993174E-01;
  COFD[4559] = 2.00048157E-02;
  COFD[4560] = -1.68022203E+01;
  COFD[4561] = 2.37403742E+00;
  COFD[4562] = 2.27831735E-02;
  COFD[4563] = -5.65998246E-03;
  COFD[4564] = -2.17063932E+01;
  COFD[4565] = 5.28764175E+00;
  COFD[4566] = -4.27810070E-01;
  COFD[4567] = 1.67809866E-02;
  COFD[4568] = -2.14479922E+01;
  COFD[4569] = 5.55893881E+00;
  COFD[4570] = -4.94493221E-01;
  COFD[4571] = 2.09699115E-02;
  COFD[4572] = -1.61748038E+01;
  COFD[4573] = 4.14977976E+00;
  COFD[4574] = -3.31246316E-01;
  COFD[4575] = 1.46912151E-02;
  COFD[4576] = -2.21532317E+01;
  COFD[4577] = 5.35014259E+00;
  COFD[4578] = -4.38890577E-01;
  COFD[4579] = 1.73833153E-02;
  COFD[4580] = -2.13918265E+01;
  COFD[4581] = 4.85021590E+00;
  COFD[4582] = -3.55384572E-01;
  COFD[4583] = 1.29992338E-02;
  COFD[4584] = -2.13918265E+01;
  COFD[4585] = 4.85021590E+00;
  COFD[4586] = -3.55384572E-01;
  COFD[4587] = 1.29992338E-02;
  COFD[4588] = -2.01098025E+01;
  COFD[4589] = 4.14878039E+00;
  COFD[4590] = -2.44951700E-01;
  COFD[4591] = 7.42419188E-03;
  COFD[4592] = -1.98624014E+01;
  COFD[4593] = 3.96995758E+00;
  COFD[4594] = -2.17256365E-01;
  COFD[4595] = 6.04546397E-03;
  COFD[4596] = -1.97838903E+01;
  COFD[4597] = 5.57919683E+00;
  COFD[4598] = -4.96414281E-01;
  COFD[4599] = 2.10244573E-02;
  COFD[4600] = -1.94420940E+01;
  COFD[4601] = 5.00201576E+00;
  COFD[4602] = -4.33936868E-01;
  COFD[4603] = 1.88164818E-02;
  COFD[4604] = -1.94641794E+01;
  COFD[4605] = 5.00201576E+00;
  COFD[4606] = -4.33936868E-01;
  COFD[4607] = 1.88164818E-02;
  COFD[4608] = -2.08593726E+01;
  COFD[4609] = 5.33208815E+00;
  COFD[4610] = -4.71670417E-01;
  COFD[4611] = 2.02463769E-02;
  COFD[4612] = -1.75337449E+01;
  COFD[4613] = 3.42123632E+00;
  COFD[4614] = -1.34010328E-01;
  COFD[4615] = 1.95240829E-03;
  COFD[4616] = -2.08678305E+01;
  COFD[4617] = 5.33208815E+00;
  COFD[4618] = -4.71670417E-01;
  COFD[4619] = 2.02463769E-02;
  COFD[4620] = -2.08505361E+01;
  COFD[4621] = 5.33208815E+00;
  COFD[4622] = -4.71670417E-01;
  COFD[4623] = 2.02463769E-02;
  COFD[4624] = -2.14523182E+01;
  COFD[4625] = 5.56935393E+00;
  COFD[4626] = -4.95277587E-01;
  COFD[4627] = 2.09806619E-02;
  COFD[4628] = -2.14523182E+01;
  COFD[4629] = 5.56935393E+00;
  COFD[4630] = -4.95277587E-01;
  COFD[4631] = 2.09806619E-02;
  COFD[4632] = -2.14782627E+01;
  COFD[4633] = 5.56935393E+00;
  COFD[4634] = -4.95277587E-01;
  COFD[4635] = 2.09806619E-02;
  COFD[4636] = -1.90789749E+01;
  COFD[4637] = 3.95410389E+00;
  COFD[4638] = -2.14821146E-01;
  COFD[4639] = 5.92501728E-03;
  COFD[4640] = -1.90891032E+01;
  COFD[4641] = 3.95410389E+00;
  COFD[4642] = -2.14821146E-01;
  COFD[4643] = 5.92501728E-03;
  COFD[4644] = -2.00138460E+01;
  COFD[4645] = 4.40851115E+00;
  COFD[4646] = -2.86110397E-01;
  COFD[4647] = 9.50609790E-03;
  COFD[4648] = -2.06263491E+01;
  COFD[4649] = 5.26012365E+00;
  COFD[4650] = -4.64415802E-01;
  COFD[4651] = 2.00176246E-02;
  COFD[4652] = -2.20056395E+01;
  COFD[4653] = 5.44592057E+00;
  COFD[4654] = -4.56359887E-01;
  COFD[4655] = 1.83482928E-02;
  COFD[4656] = -2.21447464E+01;
  COFD[4657] = 5.59674193E+00;
  COFD[4658] = -4.84372652E-01;
  COFD[4659] = 1.99129793E-02;
  COFD[4660] = -2.21564946E+01;
  COFD[4661] = 5.59674193E+00;
  COFD[4662] = -4.84372652E-01;
  COFD[4663] = 1.99129793E-02;
  COFD[4664] = -2.19654105E+01;
  COFD[4665] = 5.40500002E+00;
  COFD[4666] = -4.49077409E-01;
  COFD[4667] = 1.79507623E-02;
  COFD[4668] = -2.19755175E+01;
  COFD[4669] = 5.40500002E+00;
  COFD[4670] = -4.49077409E-01;
  COFD[4671] = 1.79507623E-02;
  COFD[4672] = -2.15934265E+01;
  COFD[4673] = 5.62474656E+00;
  COFD[4674] = -5.01628872E-01;
  COFD[4675] = 2.12235017E-02;
  COFD[4676] = -2.00159151E+01;
  COFD[4677] = 4.32504891E+00;
  COFD[4678] = -2.72579104E-01;
  COFD[4679] = 8.81311641E-03;
  COFD[4680] = -2.00218742E+01;
  COFD[4681] = 4.32504891E+00;
  COFD[4682] = -2.72579104E-01;
  COFD[4683] = 8.81311641E-03;
  COFD[4684] = -2.21470650E+01;
  COFD[4685] = 5.35014259E+00;
  COFD[4686] = -4.38890577E-01;
  COFD[4687] = 1.73833153E-02;
  COFD[4688] = -2.01074856E+01;
  COFD[4689] = 4.14878039E+00;
  COFD[4690] = -2.44951700E-01;
  COFD[4691] = 7.42419188E-03;
  COFD[4692] = -1.98606435E+01;
  COFD[4693] = 3.96995758E+00;
  COFD[4694] = -2.17256365E-01;
  COFD[4695] = 6.04546397E-03;
  COFD[4696] = -1.99445030E+01;
  COFD[4697] = 4.02583921E+00;
  COFD[4698] = -2.25897078E-01;
  COFD[4699] = 6.47435893E-03;
  COFD[4700] = -1.84803022E+01;
  COFD[4701] = 3.31173660E+00;
  COFD[4702] = -1.17180900E-01;
  COFD[4703] = 1.11911441E-03;
  COFD[4704] = -1.84753380E+01;
  COFD[4705] = 3.31173660E+00;
  COFD[4706] = -1.17180900E-01;
  COFD[4707] = 1.11911441E-03;
  COFD[4708] = -2.06045016E+01;
  COFD[4709] = 5.25583910E+00;
  COFD[4710] = -4.63993174E-01;
  COFD[4711] = 2.00048157E-02;
  COFD[4712] = -2.07433811E+01;
  COFD[4713] = 4.18296248E+00;
  COFD[4714] = -2.50265559E-01;
  COFD[4715] = 7.68960245E-03;
  COFD[4716] = -2.23893079E+01;
  COFD[4717] = 5.68590868E+00;
  COFD[4718] = -5.05139526E-01;
  COFD[4719] = 2.11955596E-02;
  COFD[4720] = -2.02962143E+01;
  COFD[4721] = 5.12359638E+00;
  COFD[4722] = -4.48937013E-01;
  COFD[4723] = 1.94374301E-02;
  COFD[4724] = -1.45855854E+01;
  COFD[4725] = 3.43473113E+00;
  COFD[4726] = -2.37339370E-01;
  COFD[4727] = 1.05604455E-02;
  COFD[4728] = -2.26829664E+01;
  COFD[4729] = 5.69249677E+00;
  COFD[4730] = -5.08089098E-01;
  COFD[4731] = 2.14101429E-02;
  COFD[4732] = -2.27814918E+01;
  COFD[4733] = 5.57284636E+00;
  COFD[4734] = -4.79130811E-01;
  COFD[4735] = 1.95974238E-02;
  COFD[4736] = -2.27814918E+01;
  COFD[4737] = 5.57284636E+00;
  COFD[4738] = -4.79130811E-01;
  COFD[4739] = 1.95974238E-02;
  COFD[4740] = -2.24272707E+01;
  COFD[4741] = 5.27173739E+00;
  COFD[4742] = -4.24993108E-01;
  COFD[4743] = 1.66278277E-02;
  COFD[4744] = -2.23097042E+01;
  COFD[4745] = 5.15021335E+00;
  COFD[4746] = -4.04967594E-01;
  COFD[4747] = 1.55836845E-02;
  COFD[4748] = -1.87258592E+01;
  COFD[4749] = 5.15558102E+00;
  COFD[4750] = -4.52695157E-01;
  COFD[4751] = 1.95845411E-02;
  COFD[4752] = -1.80775656E+01;
  COFD[4753] = 4.42754431E+00;
  COFD[4754] = -3.65168891E-01;
  COFD[4755] = 1.60721247E-02;
  COFD[4756] = -1.80993612E+01;
  COFD[4757] = 4.42754431E+00;
  COFD[4758] = -3.65168891E-01;
  COFD[4759] = 1.60721247E-02;
  COFD[4760] = -1.94932184E+01;
  COFD[4761] = 4.78691752E+00;
  COFD[4762] = -4.08931679E-01;
  COFD[4763] = 1.78522598E-02;
  COFD[4764] = -2.07484632E+01;
  COFD[4765] = 4.88534159E+00;
  COFD[4766] = -3.61152228E-01;
  COFD[4767] = 1.32980658E-02;
  COFD[4768] = -1.95015021E+01;
  COFD[4769] = 4.78691752E+00;
  COFD[4770] = -4.08931679E-01;
  COFD[4771] = 1.78522598E-02;
  COFD[4772] = -1.94845606E+01;
  COFD[4773] = 4.78691752E+00;
  COFD[4774] = -4.08931679E-01;
  COFD[4775] = 1.78522598E-02;
  COFD[4776] = -2.03264610E+01;
  COFD[4777] = 5.14674817E+00;
  COFD[4778] = -4.51657353E-01;
  COFD[4779] = 1.95439167E-02;
  COFD[4780] = -2.03264610E+01;
  COFD[4781] = 5.14674817E+00;
  COFD[4782] = -4.51657353E-01;
  COFD[4783] = 1.95439167E-02;
  COFD[4784] = -2.03520951E+01;
  COFD[4785] = 5.14674817E+00;
  COFD[4786] = -4.51657353E-01;
  COFD[4787] = 1.95439167E-02;
  COFD[4788] = -2.15931803E+01;
  COFD[4789] = 5.13764355E+00;
  COFD[4790] = -4.02929800E-01;
  COFD[4791] = 1.54783512E-02;
  COFD[4792] = -2.16031145E+01;
  COFD[4793] = 5.13764355E+00;
  COFD[4794] = -4.02929800E-01;
  COFD[4795] = 1.54783512E-02;
  COFD[4796] = -2.20478661E+01;
  COFD[4797] = 5.39090922E+00;
  COFD[4798] = -4.46575132E-01;
  COFD[4799] = 1.78143343E-02;
  COFD[4800] = -1.91465986E+01;
  COFD[4801] = 4.66259871E+00;
  COFD[4802] = -3.93595174E-01;
  COFD[4803] = 1.72187360E-02;
  COFD[4804] = -2.21839365E+01;
  COFD[4805] = 5.61881236E+00;
  COFD[4806] = -5.00953746E-01;
  COFD[4807] = 2.11978962E-02;
  COFD[4808] = -2.17816230E+01;
  COFD[4809] = 5.53130752E+00;
  COFD[4810] = -4.94179498E-01;
  COFD[4811] = 2.10910504E-02;
  COFD[4812] = -2.17931600E+01;
  COFD[4813] = 5.53130752E+00;
  COFD[4814] = -4.94179498E-01;
  COFD[4815] = 2.10910504E-02;
  COFD[4816] = -2.23172378E+01;
  COFD[4817] = 5.66009032E+00;
  COFD[4818] = -5.05604700E-01;
  COFD[4819] = 2.13722200E-02;
  COFD[4820] = -2.23271510E+01;
  COFD[4821] = 5.66009032E+00;
  COFD[4822] = -5.05604700E-01;
  COFD[4823] = 2.13722200E-02;
  COFD[4824] = -2.04886935E+01;
  COFD[4825] = 5.19650040E+00;
  COFD[4826] = -4.57450963E-01;
  COFD[4827] = 1.97683350E-02;
  COFD[4828] = -2.21412448E+01;
  COFD[4829] = 5.35014259E+00;
  COFD[4830] = -4.38890577E-01;
  COFD[4831] = 1.73833153E-02;
  COFD[4832] = -2.21470650E+01;
  COFD[4833] = 5.35014259E+00;
  COFD[4834] = -4.38890577E-01;
  COFD[4835] = 1.73833153E-02;
  COFD[4836] = -2.26769418E+01;
  COFD[4837] = 5.69249677E+00;
  COFD[4838] = -5.08089098E-01;
  COFD[4839] = 2.14101429E-02;
  COFD[4840] = -2.24250232E+01;
  COFD[4841] = 5.27173739E+00;
  COFD[4842] = -4.24993108E-01;
  COFD[4843] = 1.66278277E-02;
  COFD[4844] = -2.23080020E+01;
  COFD[4845] = 5.15021335E+00;
  COFD[4846] = -4.04967594E-01;
  COFD[4847] = 1.55836845E-02;
  COFD[4848] = -2.23660247E+01;
  COFD[4849] = 5.19438622E+00;
  COFD[4850] = -4.12172112E-01;
  COFD[4851] = 1.59571201E-02;
  COFD[4852] = -2.17014427E+01;
  COFD[4853] = 4.81780589E+00;
  COFD[4854] = -3.50110556E-01;
  COFD[4855] = 1.27273027E-02;
  COFD[4856] = -2.16970465E+01;
  COFD[4857] = 4.81780589E+00;
  COFD[4858] = -3.50110556E-01;
  COFD[4859] = 1.27273027E-02;
  COFD[4860] = -1.91198356E+01;
  COFD[4861] = 4.65550267E+00;
  COFD[4862] = -3.92738922E-01;
  COFD[4863] = 1.71842694E-02;
  COFD[4864] = -1.66581658E+01;
  COFD[4865] = 2.10188310E+00;
  COFD[4866] = 6.29285630E-02;
  COFD[4867] = -7.58433417E-03;
  COFD[4868] = -2.19165807E+01;
  COFD[4869] = 5.17721278E+00;
  COFD[4870] = -4.09361247E-01;
  COFD[4871] = 1.58111824E-02;
  COFD[4872] = -2.20507423E+01;
  COFD[4873] = 5.63089326E+00;
  COFD[4874] = -5.02322236E-01;
  COFD[4875] = 2.12495172E-02;
  COFD[4876] = -1.67637013E+01;
  COFD[4877] = 4.23438112E+00;
  COFD[4878] = -3.41960482E-01;
  COFD[4879] = 1.51448513E-02;
  COFD[4880] = -2.24328992E+01;
  COFD[4881] = 5.27173739E+00;
  COFD[4882] = -4.24993108E-01;
  COFD[4883] = 1.66278277E-02;
  COFD[4884] = -2.15161670E+01;
  COFD[4885] = 4.69860566E+00;
  COFD[4886] = -3.31165149E-01;
  COFD[4887] = 1.17637934E-02;
  COFD[4888] = -2.15161670E+01;
  COFD[4889] = 4.69860566E+00;
  COFD[4890] = -3.31165149E-01;
  COFD[4891] = 1.17637934E-02;
  COFD[4892] = -2.01838148E+01;
  COFD[4893] = 3.96877257E+00;
  COFD[4894] = -2.17074262E-01;
  COFD[4895] = 6.03645472E-03;
  COFD[4896] = -1.98195667E+01;
  COFD[4897] = 3.73909583E+00;
  COFD[4898] = -1.82169813E-01;
  COFD[4899] = 4.31948941E-03;
  COFD[4900] = -2.04321497E+01;
  COFD[4901] = 5.66158593E+00;
  COFD[4902] = -5.05773626E-01;
  COFD[4903] = 2.13785785E-02;
  COFD[4904] = -2.01475986E+01;
  COFD[4905] = 5.10503848E+00;
  COFD[4906] = -4.46750415E-01;
  COFD[4907] = 1.93516000E-02;
  COFD[4908] = -2.01727639E+01;
  COFD[4909] = 5.10503848E+00;
  COFD[4910] = -4.46750415E-01;
  COFD[4911] = 1.93516000E-02;
  COFD[4912] = -2.15727968E+01;
  COFD[4913] = 5.43079567E+00;
  COFD[4914] = -4.83552836E-01;
  COFD[4915] = 2.07260684E-02;
  COFD[4916] = -1.59875944E+01;
  COFD[4917] = 2.47370894E+00;
  COFD[4918] = 8.07041879E-03;
  COFD[4919] = -4.95386032E-03;
  COFD[4920] = -2.15832819E+01;
  COFD[4921] = 5.43079567E+00;
  COFD[4922] = -4.83552836E-01;
  COFD[4923] = 2.07260684E-02;
  COFD[4924] = -2.15618870E+01;
  COFD[4925] = 5.43079567E+00;
  COFD[4926] = -4.83552836E-01;
  COFD[4927] = 2.07260684E-02;
  COFD[4928] = -2.20741252E+01;
  COFD[4929] = 5.65330302E+00;
  COFD[4930] = -5.04845334E-01;
  COFD[4931] = 2.13439933E-02;
  COFD[4932] = -2.20741252E+01;
  COFD[4933] = 5.65330302E+00;
  COFD[4934] = -5.04845334E-01;
  COFD[4935] = 2.13439933E-02;
  COFD[4936] = -2.21033236E+01;
  COFD[4937] = 5.65330302E+00;
  COFD[4938] = -5.04845334E-01;
  COFD[4939] = 2.13439933E-02;
  COFD[4940] = -1.90154894E+01;
  COFD[4941] = 3.72149607E+00;
  COFD[4942] = -1.79511931E-01;
  COFD[4943] = 4.18922349E-03;
  COFD[4944] = -1.90278363E+01;
  COFD[4945] = 3.72149607E+00;
  COFD[4946] = -1.79511931E-01;
  COFD[4947] = 4.18922349E-03;
  COFD[4948] = -1.98210077E+01;
  COFD[4949] = 4.08893368E+00;
  COFD[4950] = -2.35668448E-01;
  COFD[4951] = 6.96126626E-03;
  COFD[4952] = -2.11739610E+01;
  COFD[4953] = 5.29627079E+00;
  COFD[4954] = -4.67442678E-01;
  COFD[4955] = 2.00794720E-02;
  COFD[4956] = -2.23489352E+01;
  COFD[4957] = 5.37620790E+00;
  COFD[4958] = -4.43667096E-01;
  COFD[4959] = 1.76474144E-02;
  COFD[4960] = -2.24962367E+01;
  COFD[4961] = 5.55193120E+00;
  COFD[4962] = -4.75304459E-01;
  COFD[4963] = 1.93851412E-02;
  COFD[4964] = -2.25103651E+01;
  COFD[4965] = 5.55193120E+00;
  COFD[4966] = -4.75304459E-01;
  COFD[4967] = 1.93851412E-02;
  COFD[4968] = -2.22738778E+01;
  COFD[4969] = 5.34099743E+00;
  COFD[4970] = -4.37253581E-01;
  COFD[4971] = 1.72939556E-02;
  COFD[4972] = -2.22862012E+01;
  COFD[4973] = 5.34099743E+00;
  COFD[4974] = -4.37253581E-01;
  COFD[4975] = 1.72939556E-02;
  COFD[4976] = -2.23030058E+01;
  COFD[4977] = 5.69443795E+00;
  COFD[4978] = -5.09197045E-01;
  COFD[4979] = 2.14937695E-02;
  COFD[4980] = -2.00998501E+01;
  COFD[4981] = 4.14878039E+00;
  COFD[4982] = -2.44951700E-01;
  COFD[4983] = 7.42419188E-03;
  COFD[4984] = -2.01074856E+01;
  COFD[4985] = 4.14878039E+00;
  COFD[4986] = -2.44951700E-01;
  COFD[4987] = 7.42419188E-03;
  COFD[4988] = -2.24250232E+01;
  COFD[4989] = 5.27173739E+00;
  COFD[4990] = -4.24993108E-01;
  COFD[4991] = 1.66278277E-02;
  COFD[4992] = -2.01805783E+01;
  COFD[4993] = 3.96877257E+00;
  COFD[4994] = -2.17074262E-01;
  COFD[4995] = 6.03645472E-03;
  COFD[4996] = -1.98170535E+01;
  COFD[4997] = 3.73909583E+00;
  COFD[4998] = -1.82169813E-01;
  COFD[4999] = 4.31948941E-03;
  COFD[5000] = -1.99876013E+01;
  COFD[5001] = 3.82498414E+00;
  COFD[5002] = -1.95150268E-01;
  COFD[5003] = 4.95640374E-03;
  COFD[5004] = -1.80942695E+01;
  COFD[5005] = 2.91109153E+00;
  COFD[5006] = -5.68349076E-02;
  COFD[5007] = -1.82442613E-03;
  COFD[5008] = -1.80845142E+01;
  COFD[5009] = 2.90814696E+00;
  COFD[5010] = -5.63962193E-02;
  COFD[5011] = -1.84563394E-03;
  COFD[5012] = -2.11559761E+01;
  COFD[5013] = 5.29321023E+00;
  COFD[5014] = -4.67199772E-01;
  COFD[5015] = 2.00753335E-02;
  COFD[5016] = -1.62080390E+01;
  COFD[5017] = 1.83871754E+00;
  COFD[5018] = 1.01665592E-01;
  COFD[5019] = -9.43632713E-03;
  COFD[5020] = -2.17780247E+01;
  COFD[5021] = 5.04538353E+00;
  COFD[5022] = -3.87823400E-01;
  COFD[5023] = 1.46940044E-02;
  COFD[5024] = -2.23535367E+01;
  COFD[5025] = 5.69488668E+00;
  COFD[5026] = -5.09023967E-01;
  COFD[5027] = 2.14766424E-02;
  COFD[5028] = -1.70286858E+01;
  COFD[5029] = 4.29307212E+00;
  COFD[5030] = -3.48883870E-01;
  COFD[5031] = 1.54152521E-02;
  COFD[5032] = -2.23163269E+01;
  COFD[5033] = 5.15021335E+00;
  COFD[5034] = -4.04967594E-01;
  COFD[5035] = 1.55836845E-02;
  COFD[5036] = -2.12157721E+01;
  COFD[5037] = 4.49622526E+00;
  COFD[5038] = -2.99709315E-01;
  COFD[5039] = 1.01863435E-02;
  COFD[5040] = -2.12157721E+01;
  COFD[5041] = 4.49622526E+00;
  COFD[5042] = -2.99709315E-01;
  COFD[5043] = 1.01863435E-02;
  COFD[5044] = -1.98205608E+01;
  COFD[5045] = 3.73909583E+00;
  COFD[5046] = -1.82169813E-01;
  COFD[5047] = 4.31948941E-03;
  COFD[5048] = -1.93874884E+01;
  COFD[5049] = 3.47969939E+00;
  COFD[5050] = -1.43018049E-01;
  COFD[5051] = 2.39998168E-03;
  COFD[5052] = -2.06647010E+01;
  COFD[5053] = 5.69261801E+00;
  COFD[5054] = -5.07767233E-01;
  COFD[5055] = 2.13823707E-02;
  COFD[5056] = -2.04884923E+01;
  COFD[5057] = 5.18525677E+00;
  COFD[5058] = -4.56162395E-01;
  COFD[5059] = 1.97193601E-02;
  COFD[5060] = -2.05143592E+01;
  COFD[5061] = 5.18525677E+00;
  COFD[5062] = -4.56162395E-01;
  COFD[5063] = 1.97193601E-02;
  COFD[5064] = -2.18914998E+01;
  COFD[5065] = 5.49891346E+00;
  COFD[5066] = -4.91131042E-01;
  COFD[5067] = 2.10049926E-02;
  COFD[5068] = -1.70125393E+01;
  COFD[5069] = 2.91843695E+00;
  COFD[5070] = -5.89884416E-02;
  COFD[5071] = -1.68173262E-03;
  COFD[5072] = -2.19024976E+01;
  COFD[5073] = 5.49891346E+00;
  COFD[5074] = -4.91131042E-01;
  COFD[5075] = 2.10049926E-02;
  COFD[5076] = -2.18836213E+01;
  COFD[5077] = 5.49999263E+00;
  COFD[5078] = -4.91244709E-01;
  COFD[5079] = 2.10088865E-02;
  COFD[5080] = -2.23166248E+01;
  COFD[5081] = 5.69237157E+00;
  COFD[5082] = -5.07995132E-01;
  COFD[5083] = 2.14028776E-02;
  COFD[5084] = -2.23166248E+01;
  COFD[5085] = 5.69237157E+00;
  COFD[5086] = -5.07995132E-01;
  COFD[5087] = 2.14028776E-02;
  COFD[5088] = -2.23465533E+01;
  COFD[5089] = 5.69237157E+00;
  COFD[5090] = -5.07995132E-01;
  COFD[5091] = 2.14028776E-02;
  COFD[5092] = -1.85839036E+01;
  COFD[5093] = 3.46378404E+00;
  COFD[5094] = -1.40474146E-01;
  COFD[5095] = 2.27022462E-03;
  COFD[5096] = -1.85968000E+01;
  COFD[5097] = 3.46378404E+00;
  COFD[5098] = -1.40474146E-01;
  COFD[5099] = 2.27022462E-03;
  COFD[5100] = -1.98423738E+01;
  COFD[5101] = 4.05800213E+00;
  COFD[5102] = -2.31751315E-01;
  COFD[5103] = 6.79738213E-03;
  COFD[5104] = -2.15646910E+01;
  COFD[5105] = 5.39680817E+00;
  COFD[5106] = -4.79577329E-01;
  COFD[5107] = 2.05705656E-02;
  COFD[5108] = -2.23504725E+01;
  COFD[5109] = 5.30065654E+00;
  COFD[5110] = -4.30166563E-01;
  COFD[5111] = 1.69104623E-02;
  COFD[5112] = -2.24801818E+01;
  COFD[5113] = 5.47470966E+00;
  COFD[5114] = -4.61584053E-01;
  COFD[5115] = 1.86360608E-02;
  COFD[5116] = -2.24948899E+01;
  COFD[5117] = 5.47470966E+00;
  COFD[5118] = -4.61584053E-01;
  COFD[5119] = 1.86360608E-02;
  COFD[5120] = -2.22491776E+01;
  COFD[5121] = 5.25947501E+00;
  COFD[5122] = -4.22909606E-01;
  COFD[5123] = 1.65170757E-02;
  COFD[5124] = -2.22620502E+01;
  COFD[5125] = 5.25947501E+00;
  COFD[5126] = -4.22909606E-01;
  COFD[5127] = 1.65170757E-02;
  COFD[5128] = -2.24728016E+01;
  COFD[5129] = 5.68907624E+00;
  COFD[5130] = -5.05936774E-01;
  COFD[5131] = 2.12463420E-02;
  COFD[5132] = -1.98525660E+01;
  COFD[5133] = 3.96995758E+00;
  COFD[5134] = -2.17256365E-01;
  COFD[5135] = 6.04546397E-03;
  COFD[5136] = -1.98606435E+01;
  COFD[5137] = 3.96995758E+00;
  COFD[5138] = -2.17256365E-01;
  COFD[5139] = 6.04546397E-03;
  COFD[5140] = -2.23080020E+01;
  COFD[5141] = 5.15021335E+00;
  COFD[5142] = -4.04967594E-01;
  COFD[5143] = 1.55836845E-02;
  COFD[5144] = -1.98170535E+01;
  COFD[5145] = 3.73909583E+00;
  COFD[5146] = -1.82169813E-01;
  COFD[5147] = 4.31948941E-03;
  COFD[5148] = -1.93847459E+01;
  COFD[5149] = 3.47969939E+00;
  COFD[5150] = -1.43018049E-01;
  COFD[5151] = 2.39998168E-03;
  COFD[5152] = -1.95507788E+01;
  COFD[5153] = 3.56166089E+00;
  COFD[5154] = -1.55467108E-01;
  COFD[5155] = 3.01301978E-03;
  COFD[5156] = -1.79662813E+01;
  COFD[5157] = 2.80443246E+00;
  COFD[5158] = -4.16236607E-02;
  COFD[5159] = -2.53531363E-03;
  COFD[5160] = -1.79623552E+01;
  COFD[5161] = 2.80412614E+00;
  COFD[5162] = -4.15831299E-02;
  COFD[5163] = -2.53708557E-03;
  COFD[5164] = -2.15356381E+01;
  COFD[5165] = 5.38903449E+00;
  COFD[5166] = -4.78680194E-01;
  COFD[5167] = 2.05361478E-02;
  COFD[5168] = -1.63843388E+01;
  COFD[5169] = 1.91607379E+00;
  COFD[5170] = 9.02572596E-02;
  COFD[5171] = -8.89131446E-03;
  COFD[5172] = -2.18146912E+01;
  COFD[5173] = 5.08498386E+00;
  COFD[5174] = -3.94332839E-01;
  COFD[5175] = 1.50323135E-02;
  COFD[5176] = -2.22672958E+01;
  COFD[5177] = 5.68432710E+00;
  COFD[5178] = -5.08339155E-01;
  COFD[5179] = 2.14750328E-02;
  COFD[5180] = -1.69170116E+01;
  COFD[5181] = 4.27491595E+00;
  COFD[5182] = -3.46769444E-01;
  COFD[5183] = 1.53340556E-02;
  COFD[5184] = -2.23747801E+01;
  COFD[5185] = 5.19438622E+00;
  COFD[5186] = -4.12172112E-01;
  COFD[5187] = 1.59571201E-02;
  COFD[5188] = -2.13391665E+01;
  COFD[5189] = 4.56548085E+00;
  COFD[5190] = -3.10439119E-01;
  COFD[5191] = 1.07232827E-02;
  COFD[5192] = -2.13391665E+01;
  COFD[5193] = 4.56548085E+00;
  COFD[5194] = -3.10439119E-01;
  COFD[5195] = 1.07232827E-02;
  COFD[5196] = -1.99913814E+01;
  COFD[5197] = 3.82498414E+00;
  COFD[5198] = -1.95150268E-01;
  COFD[5199] = 4.95640374E-03;
  COFD[5200] = -1.95537554E+01;
  COFD[5201] = 3.56166089E+00;
  COFD[5202] = -1.55467108E-01;
  COFD[5203] = 3.01301978E-03;
  COFD[5204] = -2.05841384E+01;
  COFD[5205] = 5.69454982E+00;
  COFD[5206] = -5.08864150E-01;
  COFD[5207] = 2.14648697E-02;
  COFD[5208] = -2.03636660E+01;
  COFD[5209] = 5.15948257E+00;
  COFD[5210] = -4.53158628E-01;
  COFD[5211] = 1.96029316E-02;
  COFD[5212] = -2.03901704E+01;
  COFD[5213] = 5.15948257E+00;
  COFD[5214] = -4.53158628E-01;
  COFD[5215] = 1.96029316E-02;
  COFD[5216] = -2.18037694E+01;
  COFD[5217] = 5.48356010E+00;
  COFD[5218] = -4.89669525E-01;
  COFD[5219] = 2.09631481E-02;
  COFD[5220] = -1.71308777E+01;
  COFD[5221] = 2.99815774E+00;
  COFD[5222] = -7.09653692E-02;
  COFD[5223] = -1.09836431E-03;
  COFD[5224] = -2.18152516E+01;
  COFD[5225] = 5.48356010E+00;
  COFD[5226] = -4.89669525E-01;
  COFD[5227] = 2.09631481E-02;
  COFD[5228] = -2.17946894E+01;
  COFD[5229] = 5.48430987E+00;
  COFD[5230] = -4.89732736E-01;
  COFD[5231] = 2.09644889E-02;
  COFD[5232] = -2.22589939E+01;
  COFD[5233] = 5.69469463E+00;
  COFD[5234] = -5.09164437E-01;
  COFD[5235] = 2.14896167E-02;
  COFD[5236] = -2.22589939E+01;
  COFD[5237] = 5.69469463E+00;
  COFD[5238] = -5.09164437E-01;
  COFD[5239] = 2.14896167E-02;
  COFD[5240] = -2.22895823E+01;
  COFD[5241] = 5.69469463E+00;
  COFD[5242] = -5.09164437E-01;
  COFD[5243] = 2.14896167E-02;
  COFD[5244] = -1.87146512E+01;
  COFD[5245] = 3.54436716E+00;
  COFD[5246] = -1.52735727E-01;
  COFD[5247] = 2.87479772E-03;
  COFD[5248] = -1.87280626E+01;
  COFD[5249] = 3.54436716E+00;
  COFD[5250] = -1.52735727E-01;
  COFD[5251] = 2.87479772E-03;
  COFD[5252] = -1.99273999E+01;
  COFD[5253] = 4.11801984E+00;
  COFD[5254] = -2.41066766E-01;
  COFD[5255] = 7.26222012E-03;
  COFD[5256] = -2.14349037E+01;
  COFD[5257] = 5.36396655E+00;
  COFD[5258] = -4.75631286E-01;
  COFD[5259] = 2.04117897E-02;
  COFD[5260] = -2.23614063E+01;
  COFD[5261] = 5.32669734E+00;
  COFD[5262] = -4.34781870E-01;
  COFD[5263] = 1.71614091E-02;
  COFD[5264] = -2.24904108E+01;
  COFD[5265] = 5.50302401E+00;
  COFD[5266] = -4.66510474E-01;
  COFD[5267] = 1.89018117E-02;
  COFD[5268] = -2.25056585E+01;
  COFD[5269] = 5.50302401E+00;
  COFD[5270] = -4.66510474E-01;
  COFD[5271] = 1.89018117E-02;
  COFD[5272] = -2.22624610E+01;
  COFD[5273] = 5.28821837E+00;
  COFD[5274] = -4.27914101E-01;
  COFD[5275] = 1.67866936E-02;
  COFD[5276] = -2.22758481E+01;
  COFD[5277] = 5.28821837E+00;
  COFD[5278] = -4.27914101E-01;
  COFD[5279] = 1.67866936E-02;
  COFD[5280] = -2.24229459E+01;
  COFD[5281] = 5.69228412E+00;
  COFD[5282] = -5.07223097E-01;
  COFD[5283] = 2.13381721E-02;
  COFD[5284] = -1.99360009E+01;
  COFD[5285] = 4.02583921E+00;
  COFD[5286] = -2.25897078E-01;
  COFD[5287] = 6.47435893E-03;
  COFD[5288] = -1.99445030E+01;
  COFD[5289] = 4.02583921E+00;
  COFD[5290] = -2.25897078E-01;
  COFD[5291] = 6.47435893E-03;
  COFD[5292] = -2.23660247E+01;
  COFD[5293] = 5.19438622E+00;
  COFD[5294] = -4.12172112E-01;
  COFD[5295] = 1.59571201E-02;
  COFD[5296] = -1.99876013E+01;
  COFD[5297] = 3.82498414E+00;
  COFD[5298] = -1.95150268E-01;
  COFD[5299] = 4.95640374E-03;
  COFD[5300] = -1.95507788E+01;
  COFD[5301] = 3.56166089E+00;
  COFD[5302] = -1.55467108E-01;
  COFD[5303] = 3.01301978E-03;
  COFD[5304] = -1.97328537E+01;
  COFD[5305] = 3.64934029E+00;
  COFD[5306] = -1.68722615E-01;
  COFD[5307] = 3.66377463E-03;
  COFD[5308] = -1.81437187E+01;
  COFD[5309] = 2.88877789E+00;
  COFD[5310] = -5.41773042E-02;
  COFD[5311] = -1.92881515E-03;
  COFD[5312] = -1.81398575E+01;
  COFD[5313] = 2.88846620E+00;
  COFD[5314] = -5.41360405E-02;
  COFD[5315] = -1.93061981E-03;
  COFD[5316] = -2.13995868E+01;
  COFD[5317] = 5.35352784E+00;
  COFD[5318] = -4.74347837E-01;
  COFD[5319] = 2.03588081E-02;
  COFD[5320] = -1.43253468E+01;
  COFD[5321] = 9.71501322E-01;
  COFD[5322] = 2.28347261E-01;
  COFD[5323] = -1.54668718E-02;
  COFD[5324] = -2.11044544E+01;
  COFD[5325] = 4.68831946E+00;
  COFD[5326] = -3.29557184E-01;
  COFD[5327] = 1.16828987E-02;
  COFD[5328] = -2.23513141E+01;
  COFD[5329] = 5.60983713E+00;
  COFD[5330] = -4.87290178E-01;
  COFD[5331] = 2.00898110E-02;
  COFD[5332] = -1.77631828E+01;
  COFD[5333] = 4.56490155E+00;
  COFD[5334] = -3.81720940E-01;
  COFD[5335] = 1.67371139E-02;
  COFD[5336] = -2.17101296E+01;
  COFD[5337] = 4.81780589E+00;
  COFD[5338] = -3.50110556E-01;
  COFD[5339] = 1.27273027E-02;
  COFD[5340] = -2.02802996E+01;
  COFD[5341] = 4.02278006E+00;
  COFD[5342] = -2.25422702E-01;
  COFD[5343] = 6.45074291E-03;
  COFD[5344] = -2.02802996E+01;
  COFD[5345] = 4.02278006E+00;
  COFD[5346] = -2.25422702E-01;
  COFD[5347] = 6.45074291E-03;
  COFD[5348] = -1.80980053E+01;
  COFD[5349] = 2.91109153E+00;
  COFD[5350] = -5.68349076E-02;
  COFD[5351] = -1.82442613E-03;
  COFD[5352] = -1.79692197E+01;
  COFD[5353] = 2.80443246E+00;
  COFD[5354] = -4.16236607E-02;
  COFD[5355] = -2.53531363E-03;
  COFD[5356] = -2.06235536E+01;
  COFD[5357] = 5.62294739E+00;
  COFD[5358] = -4.90494097E-01;
  COFD[5359] = 2.02906896E-02;
  COFD[5360] = -2.09877624E+01;
  COFD[5361] = 5.35648475E+00;
  COFD[5362] = -4.74711461E-01;
  COFD[5363] = 2.03738220E-02;
  COFD[5364] = -2.10141677E+01;
  COFD[5365] = 5.35648475E+00;
  COFD[5366] = -4.74711461E-01;
  COFD[5367] = 2.03738220E-02;
  COFD[5368] = -2.22289423E+01;
  COFD[5369] = 5.58963154E+00;
  COFD[5370] = -4.97619507E-01;
  COFD[5371] = 2.10709149E-02;
  COFD[5372] = -1.40691464E+01;
  COFD[5373] = 1.58343247E+00;
  COFD[5374] = 1.35669474E-01;
  COFD[5375] = -1.08901989E-02;
  COFD[5376] = -2.22403480E+01;
  COFD[5377] = 5.58963154E+00;
  COFD[5378] = -4.97619507E-01;
  COFD[5379] = 2.10709149E-02;
  COFD[5380] = -2.24207370E+01;
  COFD[5381] = 5.65610774E+00;
  COFD[5382] = -5.05160267E-01;
  COFD[5383] = 2.13557545E-02;
  COFD[5384] = -2.22999494E+01;
  COFD[5385] = 5.62615904E+00;
  COFD[5386] = -4.91244328E-01;
  COFD[5387] = 2.03370903E-02;
  COFD[5388] = -2.22999494E+01;
  COFD[5389] = 5.62615904E+00;
  COFD[5390] = -4.91244328E-01;
  COFD[5391] = 2.03370903E-02;
  COFD[5392] = -2.23304354E+01;
  COFD[5393] = 5.62615904E+00;
  COFD[5394] = -4.91244328E-01;
  COFD[5395] = 2.03370903E-02;
  COFD[5396] = -1.72083191E+01;
  COFD[5397] = 2.81535425E+00;
  COFD[5398] = -4.25833211E-02;
  COFD[5399] = -2.51298361E-03;
  COFD[5400] = -1.72216494E+01;
  COFD[5401] = 2.81535425E+00;
  COFD[5402] = -4.25833211E-02;
  COFD[5403] = -2.51298361E-03;
  COFD[5404] = -1.74744240E+01;
  COFD[5405] = 2.96255189E+00;
  COFD[5406] = -6.88473701E-02;
  COFD[5407] = -1.07539577E-03;
  COFD[5408] = -2.21101485E+01;
  COFD[5409] = 5.55857158E+00;
  COFD[5410] = -4.94508446E-01;
  COFD[5411] = 2.09732027E-02;
  COFD[5412] = -2.16359391E+01;
  COFD[5413] = 4.90273918E+00;
  COFD[5414] = -3.64019088E-01;
  COFD[5415] = 1.34469578E-02;
  COFD[5416] = -2.21662029E+01;
  COFD[5417] = 5.27265151E+00;
  COFD[5418] = -4.25148726E-01;
  COFD[5419] = 1.66361098E-02;
  COFD[5420] = -2.21813658E+01;
  COFD[5421] = 5.27265151E+00;
  COFD[5422] = -4.25148726E-01;
  COFD[5423] = 1.66361098E-02;
  COFD[5424] = -2.16261981E+01;
  COFD[5425] = 4.92271922E+00;
  COFD[5426] = -3.67322142E-01;
  COFD[5427] = 1.36190664E-02;
  COFD[5428] = -2.16395042E+01;
  COFD[5429] = 4.92271922E+00;
  COFD[5430] = -3.67322142E-01;
  COFD[5431] = 1.36190664E-02;
  COFD[5432] = -2.24326973E+01;
  COFD[5433] = 5.60934726E+00;
  COFD[5434] = -4.87173109E-01;
  COFD[5435] = 2.00825302E-02;
  COFD[5436] = -1.84718675E+01;
  COFD[5437] = 3.31173660E+00;
  COFD[5438] = -1.17180900E-01;
  COFD[5439] = 1.11911441E-03;
  COFD[5440] = -1.84803022E+01;
  COFD[5441] = 3.31173660E+00;
  COFD[5442] = -1.17180900E-01;
  COFD[5443] = 1.11911441E-03;
  COFD[5444] = -2.17014427E+01;
  COFD[5445] = 4.81780589E+00;
  COFD[5446] = -3.50110556E-01;
  COFD[5447] = 1.27273027E-02;
  COFD[5448] = -1.80942695E+01;
  COFD[5449] = 2.91109153E+00;
  COFD[5450] = -5.68349076E-02;
  COFD[5451] = -1.82442613E-03;
  COFD[5452] = -1.79662813E+01;
  COFD[5453] = 2.80443246E+00;
  COFD[5454] = -4.16236607E-02;
  COFD[5455] = -2.53531363E-03;
  COFD[5456] = -1.81437187E+01;
  COFD[5457] = 2.88877789E+00;
  COFD[5458] = -5.41773042E-02;
  COFD[5459] = -1.92881515E-03;
  COFD[5460] = -1.56912208E+01;
  COFD[5461] = 1.76929488E+00;
  COFD[5462] = 1.08616958E-01;
  COFD[5463] = -9.63557043E-03;
  COFD[5464] = -1.56790788E+01;
  COFD[5465] = 1.76525600E+00;
  COFD[5466] = 1.09191416E-01;
  COFD[5467] = -9.66205843E-03;
  COFD[5468] = -2.20909621E+01;
  COFD[5469] = 5.55699080E+00;
  COFD[5470] = -4.94678243E-01;
  COFD[5471] = 2.09962787E-02;
  COFD[5472] = -1.43233091E+01;
  COFD[5473] = 9.71501322E-01;
  COFD[5474] = 2.28347261E-01;
  COFD[5475] = -1.54668718E-02;
  COFD[5476] = -2.10991106E+01;
  COFD[5477] = 4.68831946E+00;
  COFD[5478] = -3.29557184E-01;
  COFD[5479] = 1.16828987E-02;
  COFD[5480] = -2.23454823E+01;
  COFD[5481] = 5.60943735E+00;
  COFD[5482] = -4.87194619E-01;
  COFD[5483] = 2.00838675E-02;
  COFD[5484] = -1.77602273E+01;
  COFD[5485] = 4.56633722E+00;
  COFD[5486] = -3.81897627E-01;
  COFD[5487] = 1.67443941E-02;
  COFD[5488] = -2.17057568E+01;
  COFD[5489] = 4.81780589E+00;
  COFD[5490] = -3.50110556E-01;
  COFD[5491] = 1.27273027E-02;
  COFD[5492] = -2.02763272E+01;
  COFD[5493] = 4.02278006E+00;
  COFD[5494] = -2.25422702E-01;
  COFD[5495] = 6.45074291E-03;
  COFD[5496] = -2.02763272E+01;
  COFD[5497] = 4.02278006E+00;
  COFD[5498] = -2.25422702E-01;
  COFD[5499] = 6.45074291E-03;
  COFD[5500] = -1.80882652E+01;
  COFD[5501] = 2.90814696E+00;
  COFD[5502] = -5.63962193E-02;
  COFD[5503] = -1.84563394E-03;
  COFD[5504] = -1.79653066E+01;
  COFD[5505] = 2.80412614E+00;
  COFD[5506] = -4.15831299E-02;
  COFD[5507] = -2.53708557E-03;
  COFD[5508] = -2.06156359E+01;
  COFD[5509] = 5.62294739E+00;
  COFD[5510] = -4.90494097E-01;
  COFD[5511] = 2.02906896E-02;
  COFD[5512] = -2.09811042E+01;
  COFD[5513] = 5.35648475E+00;
  COFD[5514] = -4.74711461E-01;
  COFD[5515] = 2.03738220E-02;
  COFD[5516] = -2.10075435E+01;
  COFD[5517] = 5.35648475E+00;
  COFD[5518] = -4.74711461E-01;
  COFD[5519] = 2.03738220E-02;
  COFD[5520] = -2.22233693E+01;
  COFD[5521] = 5.58963154E+00;
  COFD[5522] = -4.97619507E-01;
  COFD[5523] = 2.10709149E-02;
  COFD[5524] = -1.40437576E+01;
  COFD[5525] = 1.57446474E+00;
  COFD[5526] = 1.37000821E-01;
  COFD[5527] = -1.09532629E-02;
  COFD[5528] = -2.22348012E+01;
  COFD[5529] = 5.58963154E+00;
  COFD[5530] = -4.97619507E-01;
  COFD[5531] = 2.10709149E-02;
  COFD[5532] = -2.24183026E+01;
  COFD[5533] = 5.65712639E+00;
  COFD[5534] = -5.05274259E-01;
  COFD[5535] = 2.13599929E-02;
  COFD[5536] = -2.22940468E+01;
  COFD[5537] = 5.62615904E+00;
  COFD[5538] = -4.91244328E-01;
  COFD[5539] = 2.03370903E-02;
  COFD[5540] = -2.22940468E+01;
  COFD[5541] = 5.62615904E+00;
  COFD[5542] = -4.91244328E-01;
  COFD[5543] = 2.03370903E-02;
  COFD[5544] = -2.23245680E+01;
  COFD[5545] = 5.62615904E+00;
  COFD[5546] = -4.91244328E-01;
  COFD[5547] = 2.03370903E-02;
  COFD[5548] = -1.72027360E+01;
  COFD[5549] = 2.81535425E+00;
  COFD[5550] = -4.25833211E-02;
  COFD[5551] = -2.51298361E-03;
  COFD[5552] = -1.72160941E+01;
  COFD[5553] = 2.81535425E+00;
  COFD[5554] = -4.25833211E-02;
  COFD[5555] = -2.51298361E-03;
  COFD[5556] = -1.74537057E+01;
  COFD[5557] = 2.95541956E+00;
  COFD[5558] = -6.77897056E-02;
  COFD[5559] = -1.12612068E-03;
  COFD[5560] = -2.21059326E+01;
  COFD[5561] = 5.55876472E+00;
  COFD[5562] = -4.94499270E-01;
  COFD[5563] = 2.09713717E-02;
  COFD[5564] = -2.16284755E+01;
  COFD[5565] = 4.90137576E+00;
  COFD[5566] = -3.63794402E-01;
  COFD[5567] = 1.34352726E-02;
  COFD[5568] = -2.21608868E+01;
  COFD[5569] = 5.27265151E+00;
  COFD[5570] = -4.25148726E-01;
  COFD[5571] = 1.66361098E-02;
  COFD[5572] = -2.21760789E+01;
  COFD[5573] = 5.27265151E+00;
  COFD[5574] = -4.25148726E-01;
  COFD[5575] = 1.66361098E-02;
  COFD[5576] = -2.16210973E+01;
  COFD[5577] = 4.92271922E+00;
  COFD[5578] = -3.67322142E-01;
  COFD[5579] = 1.36190664E-02;
  COFD[5580] = -2.16344311E+01;
  COFD[5581] = 4.92271922E+00;
  COFD[5582] = -3.67322142E-01;
  COFD[5583] = 1.36190664E-02;
  COFD[5584] = -2.24265183E+01;
  COFD[5585] = 5.60934726E+00;
  COFD[5586] = -4.87173109E-01;
  COFD[5587] = 2.00825302E-02;
  COFD[5588] = -1.84668802E+01;
  COFD[5589] = 3.31173660E+00;
  COFD[5590] = -1.17180900E-01;
  COFD[5591] = 1.11911441E-03;
  COFD[5592] = -1.84753380E+01;
  COFD[5593] = 3.31173660E+00;
  COFD[5594] = -1.17180900E-01;
  COFD[5595] = 1.11911441E-03;
  COFD[5596] = -2.16970465E+01;
  COFD[5597] = 4.81780589E+00;
  COFD[5598] = -3.50110556E-01;
  COFD[5599] = 1.27273027E-02;
  COFD[5600] = -1.80845142E+01;
  COFD[5601] = 2.90814696E+00;
  COFD[5602] = -5.63962193E-02;
  COFD[5603] = -1.84563394E-03;
  COFD[5604] = -1.79623552E+01;
  COFD[5605] = 2.80412614E+00;
  COFD[5606] = -4.15831299E-02;
  COFD[5607] = -2.53708557E-03;
  COFD[5608] = -1.81398575E+01;
  COFD[5609] = 2.88846620E+00;
  COFD[5610] = -5.41360405E-02;
  COFD[5611] = -1.93061981E-03;
  COFD[5612] = -1.56790788E+01;
  COFD[5613] = 1.76525600E+00;
  COFD[5614] = 1.09191416E-01;
  COFD[5615] = -9.66205843E-03;
  COFD[5616] = -1.56668530E+01;
  COFD[5617] = 1.76117581E+00;
  COFD[5618] = 1.09772217E-01;
  COFD[5619] = -9.68885216E-03;
  COFD[5620] = -2.20865477E+01;
  COFD[5621] = 5.55713409E+00;
  COFD[5622] = -4.94664436E-01;
  COFD[5623] = 2.09943227E-02;
  COFD[5624] = -2.28682313E+01;
  COFD[5625] = 5.69189836E+00;
  COFD[5626] = -5.06933519E-01;
  COFD[5627] = 2.13157429E-02;
  COFD[5628] = -1.89643038E+01;
  COFD[5629] = 4.71971336E+00;
  COFD[5630] = -4.00532200E-01;
  COFD[5631] = 1.75002259E-02;
  COFD[5632] = -1.63433143E+01;
  COFD[5633] = 3.84128639E+00;
  COFD[5634] = -2.90612980E-01;
  COFD[5635] = 1.28987807E-02;
  COFD[5636] = -1.19789474E+01;
  COFD[5637] = 2.60483862E+00;
  COFD[5638] = -1.29915699E-01;
  COFD[5639] = 5.91970664E-03;
  COFD[5640] = -1.91247158E+01;
  COFD[5641] = 4.65550267E+00;
  COFD[5642] = -3.92738922E-01;
  COFD[5643] = 1.71842694E-02;
  COFD[5644] = -2.02103746E+01;
  COFD[5645] = 4.99994553E+00;
  COFD[5646] = -4.33691748E-01;
  COFD[5647] = 1.88067893E-02;
  COFD[5648] = -2.02103746E+01;
  COFD[5649] = 4.99994553E+00;
  COFD[5650] = -4.33691748E-01;
  COFD[5651] = 1.88067893E-02;
  COFD[5652] = -2.11576985E+01;
  COFD[5653] = 5.29321023E+00;
  COFD[5654] = -4.67199772E-01;
  COFD[5655] = 2.00753335E-02;
  COFD[5656] = -2.15369258E+01;
  COFD[5657] = 5.38903449E+00;
  COFD[5658] = -4.78680194E-01;
  COFD[5659] = 2.05361478E-02;
  COFD[5660] = -1.47294273E+01;
  COFD[5661] = 3.87307263E+00;
  COFD[5662] = -2.94724304E-01;
  COFD[5663] = 1.30770565E-02;
  COFD[5664] = -1.43226682E+01;
  COFD[5665] = 3.18712931E+00;
  COFD[5666] = -2.05618739E-01;
  COFD[5667] = 9.20280853E-03;
  COFD[5668] = -1.43418956E+01;
  COFD[5669] = 3.18712931E+00;
  COFD[5670] = -2.05618739E-01;
  COFD[5671] = 9.20280853E-03;
  COFD[5672] = -1.55312775E+01;
  COFD[5673] = 3.48668120E+00;
  COFD[5674] = -2.44246396E-01;
  COFD[5675] = 1.08673594E-02;
  COFD[5676] = -2.14057861E+01;
  COFD[5677] = 5.68934332E+00;
  COFD[5678] = -5.08839059E-01;
  COFD[5679] = 2.14906650E-02;
  COFD[5680] = -1.55381268E+01;
  COFD[5681] = 3.48668120E+00;
  COFD[5682] = -2.44246396E-01;
  COFD[5683] = 1.08673594E-02;
  COFD[5684] = -1.55240981E+01;
  COFD[5685] = 3.48668120E+00;
  COFD[5686] = -2.44246396E-01;
  COFD[5687] = 1.08673594E-02;
  COFD[5688] = -1.63747424E+01;
  COFD[5689] = 3.86406496E+00;
  COFD[5690] = -2.93554482E-01;
  COFD[5691] = 1.30261209E-02;
  COFD[5692] = -1.63747424E+01;
  COFD[5693] = 3.86406496E+00;
  COFD[5694] = -2.93554482E-01;
  COFD[5695] = 1.30261209E-02;
  COFD[5696] = -1.63975940E+01;
  COFD[5697] = 3.86406496E+00;
  COFD[5698] = -2.93554482E-01;
  COFD[5699] = 1.30261209E-02;
  COFD[5700] = -2.08389389E+01;
  COFD[5701] = 5.39456342E+00;
  COFD[5702] = -4.79318578E-01;
  COFD[5703] = 2.05606532E-02;
  COFD[5704] = -2.08472526E+01;
  COFD[5705] = 5.39456342E+00;
  COFD[5706] = -4.79318578E-01;
  COFD[5707] = 2.05606532E-02;
  COFD[5708] = -2.05445359E+01;
  COFD[5709] = 5.28028452E+00;
  COFD[5710] = -4.66472306E-01;
  COFD[5711] = 2.00837541E-02;
  COFD[5712] = -1.52518050E+01;
  COFD[5713] = 3.37524863E+00;
  COFD[5714] = -2.29771138E-01;
  COFD[5715] = 1.02391965E-02;
  COFD[5716] = -1.85176895E+01;
  COFD[5717] = 4.54499584E+00;
  COFD[5718] = -3.79297576E-01;
  COFD[5719] = 1.66385528E-02;
  COFD[5720] = -1.80318618E+01;
  COFD[5721] = 4.38584649E+00;
  COFD[5722] = -3.60315666E-01;
  COFD[5723] = 1.58853966E-02;
  COFD[5724] = -1.80416144E+01;
  COFD[5725] = 4.38584649E+00;
  COFD[5726] = -3.60315666E-01;
  COFD[5727] = 1.58853966E-02;
  COFD[5728] = -1.86824369E+01;
  COFD[5729] = 4.58611364E+00;
  COFD[5730] = -3.84322485E-01;
  COFD[5731] = 1.68437096E-02;
  COFD[5732] = -1.86907319E+01;
  COFD[5733] = 4.58611364E+00;
  COFD[5734] = -3.84322485E-01;
  COFD[5735] = 1.68437096E-02;
  COFD[5736] = -1.64535409E+01;
  COFD[5737] = 3.93210872E+00;
  COFD[5738] = -3.02565908E-01;
  COFD[5739] = 1.34259512E-02;
  COFD[5740] = -2.05997971E+01;
  COFD[5741] = 5.25583910E+00;
  COFD[5742] = -4.63993174E-01;
  COFD[5743] = 2.00048157E-02;
  COFD[5744] = -2.06045016E+01;
  COFD[5745] = 5.25583910E+00;
  COFD[5746] = -4.63993174E-01;
  COFD[5747] = 2.00048157E-02;
  COFD[5748] = -1.91198356E+01;
  COFD[5749] = 4.65550267E+00;
  COFD[5750] = -3.92738922E-01;
  COFD[5751] = 1.71842694E-02;
  COFD[5752] = -2.11559761E+01;
  COFD[5753] = 5.29321023E+00;
  COFD[5754] = -4.67199772E-01;
  COFD[5755] = 2.00753335E-02;
  COFD[5756] = -2.15356381E+01;
  COFD[5757] = 5.38903449E+00;
  COFD[5758] = -4.78680194E-01;
  COFD[5759] = 2.05361478E-02;
  COFD[5760] = -2.13995868E+01;
  COFD[5761] = 5.35352784E+00;
  COFD[5762] = -4.74347837E-01;
  COFD[5763] = 2.03588081E-02;
  COFD[5764] = -2.20909621E+01;
  COFD[5765] = 5.55699080E+00;
  COFD[5766] = -4.94678243E-01;
  COFD[5767] = 2.09962787E-02;
  COFD[5768] = -2.20865477E+01;
  COFD[5769] = 5.55713409E+00;
  COFD[5770] = -4.94664436E-01;
  COFD[5771] = 2.09943227E-02;
  COFD[5772] = -1.52318551E+01;
  COFD[5773] = 3.37103061E+00;
  COFD[5774] = -2.29259306E-01;
  COFD[5775] = 1.02185910E-02;
}

// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetKTDIF(int* KTDIF)
{
  KTDIF[0] = 3;
  KTDIF[1] = 9;
}

// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
egtransetCOFTD(amrex::Real* COFTD)
{
  COFTD[0] = -2.16594906E-02;
  COFTD[1] = 9.93890632E-04;
  COFTD[2] = -5.70059482E-07;
  COFTD[3] = 1.05815924E-10;
  COFTD[4] = 2.06584086E-01;
  COFTD[5] = 5.69611150E-04;
  COFTD[6] = -3.66367354E-07;
  COFTD[7] = 7.31984759E-11;
  COFTD[8] = 3.12677180E-01;
  COFTD[9] = 2.68882277E-04;
  COFTD[10] = -1.89211260E-07;
  COFTD[11] = 4.05868339E-11;
  COFTD[12] = 0.00000000E+00;
  COFTD[13] = 0.00000000E+00;
  COFTD[14] = 0.00000000E+00;
  COFTD[15] = 0.00000000E+00;
  COFTD[16] = 2.28833013E-01;
  COFTD[17] = 5.76833582E-04;
  COFTD[18] = -3.73284543E-07;
  COFTD[19] = 7.49022483E-11;
  COFTD[20] = 1.62769085E-01;
  COFTD[21] = 7.09281101E-04;
  COFTD[22] = -4.43569656E-07;
  COFTD[23] = 8.69436684E-11;
  COFTD[24] = 1.62769085E-01;
  COFTD[25] = 7.09281101E-04;
  COFTD[26] = -4.43569656E-07;
  COFTD[27] = 8.69436684E-11;
  COFTD[28] = 9.85234119E-02;
  COFTD[29] = 8.23844915E-04;
  COFTD[30] = -4.99823529E-07;
  COFTD[31] = 9.60608657E-11;
  COFTD[32] = 8.24868653E-02;
  COFTD[33] = 8.53373127E-04;
  COFTD[34] = -5.13868748E-07;
  COFTD[35] = 9.82926056E-11;
  COFTD[36] = -1.32409831E-01;
  COFTD[37] = -1.19111293E-04;
  COFTD[38] = 8.35028510E-08;
  COFTD[39] = -1.78512092E-11;
  COFTD[40] = 3.91616123E-01;
  COFTD[41] = 8.91635077E-05;
  COFTD[42] = -7.05316659E-08;
  COFTD[43] = 1.72764159E-11;
  COFTD[44] = 3.97599719E-01;
  COFTD[45] = 9.05258581E-05;
  COFTD[46] = -7.16093360E-08;
  COFTD[47] = 1.75403863E-11;
  COFTD[48] = 4.03924904E-01;
  COFTD[49] = 2.02144220E-04;
  COFTD[50] = -1.48957826E-07;
  COFTD[51] = 3.34401658E-11;
  COFTD[52] = -2.14110760E-02;
  COFTD[53] = 8.18502690E-04;
  COFTD[54] = -4.68425838E-07;
  COFTD[55] = 8.68336588E-11;
  COFTD[56] = 4.05395170E-01;
  COFTD[57] = 2.02880014E-04;
  COFTD[58] = -1.49500025E-07;
  COFTD[59] = 3.35618863E-11;
  COFTD[60] = 4.02367496E-01;
  COFTD[61] = 2.01364815E-04;
  COFTD[62] = -1.48383491E-07;
  COFTD[63] = 3.33112310E-11;
  COFTD[64] = 2.98498112E-01;
  COFTD[65] = 2.65222694E-04;
  COFTD[66] = -1.86126011E-07;
  COFTD[67] = 3.98267107E-11;
  COFTD[68] = 2.98498112E-01;
  COFTD[69] = 2.65222694E-04;
  COFTD[70] = -1.86126011E-07;
  COFTD[71] = 3.98267107E-11;
  COFTD[72] = 3.04421820E-01;
  COFTD[73] = 2.70486050E-04;
  COFTD[74] = -1.89819690E-07;
  COFTD[75] = 4.06170735E-11;
  COFTD[76] = 7.41048883E-02;
  COFTD[77] = 7.76897141E-04;
  COFTD[78] = -4.67616058E-07;
  COFTD[79] = 8.94211116E-11;
  COFTD[80] = 7.44529950E-02;
  COFTD[81] = 7.80546604E-04;
  COFTD[82] = -4.69812678E-07;
  COFTD[83] = 8.98411660E-11;
  COFTD[84] = 9.22379042E-02;
  COFTD[85] = 7.60059861E-04;
  COFTD[86] = -4.61382833E-07;
  COFTD[87] = 8.87044310E-11;
  COFTD[88] = 4.08944367E-01;
  COFTD[89] = 1.66138494E-04;
  COFTD[90] = -1.24667483E-07;
  COFTD[91] = 2.85598016E-11;
  COFTD[92] = 2.50691938E-01;
  COFTD[93] = 5.42356801E-04;
  COFTD[94] = -3.54787701E-07;
  COFTD[95] = 7.17459544E-11;
  COFTD[96] = 2.68312738E-01;
  COFTD[97] = 4.48330334E-04;
  COFTD[98] = -2.98990735E-07;
  COFTD[99] = 6.13386431E-11;
  COFTD[100] = 2.69874762E-01;
  COFTD[101] = 4.50940359E-04;
  COFTD[102] = -3.00731356E-07;
  COFTD[103] = 6.16957355E-11;
  COFTD[104] = 2.31695472E-01;
  COFTD[105] = 5.30538101E-04;
  COFTD[106] = -3.45646445E-07;
  COFTD[107] = 6.96915610E-11;
  COFTD[108] = 2.32780597E-01;
  COFTD[109] = 5.33022830E-04;
  COFTD[110] = -3.47265250E-07;
  COFTD[111] = 7.00179553E-11;
  COFTD[112] = 3.53423875E-01;
  COFTD[113] = 3.37578411E-04;
  COFTD[114] = -2.35479821E-07;
  COFTD[115] = 5.01185402E-11;
  COFTD[116] = 1.09931097E-01;
  COFTD[117] = 7.65917347E-04;
  COFTD[118] = -4.68103348E-07;
  COFTD[119] = 9.03872205E-11;
  COFTD[120] = 1.10178847E-01;
  COFTD[121] = 7.67643480E-04;
  COFTD[122] = -4.69158304E-07;
  COFTD[123] = 9.05909244E-11;
  COFTD[124] = 2.28294286E-01;
  COFTD[125] = 5.75475581E-04;
  COFTD[126] = -3.72405744E-07;
  COFTD[127] = 7.47259110E-11;
  COFTD[128] = 9.84569076E-02;
  COFTD[129] = 8.23288811E-04;
  COFTD[130] = -4.99486143E-07;
  COFTD[131] = 9.59960236E-11;
  COFTD[132] = 8.24469313E-02;
  COFTD[133] = 8.52959987E-04;
  COFTD[134] = -5.13619971E-07;
  COFTD[135] = 9.82450197E-11;
  COFTD[136] = 8.84643849E-02;
  COFTD[137] = 8.51536887E-04;
  COFTD[138] = -5.14004183E-07;
  COFTD[139] = 9.84685637E-11;
  COFTD[140] = 1.91144303E-02;
  COFTD[141] = 9.37946625E-04;
  COFTD[142] = -5.48620788E-07;
  COFTD[143] = 1.03062459E-10;
  COFTD[144] = 1.88269645E-02;
  COFTD[145] = 9.38628019E-04;
  COFTD[146] = -5.48943451E-07;
  COFTD[147] = 1.03114320E-10;
  COFTD[148] = 4.09809568E-01;
  COFTD[149] = 1.64146070E-04;
  COFTD[150] = -1.23325783E-07;
  COFTD[151] = 2.82931938E-11;
  COFTD[152] = -2.55895771E-01;
  COFTD[153] = 1.01706703E-03;
  COFTD[154] = -4.67645201E-07;
  COFTD[155] = 7.54371544E-11;
  COFTD[156] = -9.96188132E-02;
  COFTD[157] = 1.01452043E-03;
  COFTD[158] = -5.56149421E-07;
  COFTD[159] = 1.00446976E-10;
  COFTD[160] = 5.61721993E-02;
  COFTD[161] = 8.12212191E-04;
  COFTD[162] = -4.84370482E-07;
  COFTD[163] = 9.20896250E-11;
  COFTD[164] = 1.32409831E-01;
  COFTD[165] = 1.19111293E-04;
  COFTD[166] = -8.35028510E-08;
  COFTD[167] = 1.78512092E-11;
  COFTD[168] = -9.10849224E-02;
  COFTD[169] = 1.03209749E-03;
  COFTD[170] = -5.69645281E-07;
  COFTD[171] = 1.03308114E-10;
  COFTD[172] = -1.51574986E-01;
  COFTD[173] = 1.07260646E-03;
  COFTD[174] = -5.68442179E-07;
  COFTD[175] = 1.00579960E-10;
  COFTD[176] = -1.51574986E-01;
  COFTD[177] = 1.07260646E-03;
  COFTD[178] = -5.68442179E-07;
  COFTD[179] = 1.00579960E-10;
  COFTD[180] = -1.98360267E-01;
  COFTD[181] = 1.08127926E-03;
  COFTD[182] = -5.49425566E-07;
  COFTD[183] = 9.47128541E-11;
  COFTD[184] = -2.08572965E-01;
  COFTD[185] = 1.08079706E-03;
  COFTD[186] = -5.43074828E-07;
  COFTD[187] = 9.29582733E-11;
  COFTD[188] = 0.00000000E+00;
  COFTD[189] = 0.00000000E+00;
  COFTD[190] = 0.00000000E+00;
  COFTD[191] = 0.00000000E+00;
  COFTD[192] = 1.90953744E-01;
  COFTD[193] = 6.12446329E-04;
  COFTD[194] = -3.90052373E-07;
  COFTD[195] = 7.73994968E-11;
  COFTD[196] = 1.92390604E-01;
  COFTD[197] = 6.17054772E-04;
  COFTD[198] = -3.92987379E-07;
  COFTD[199] = 7.79819008E-11;
  COFTD[200] = 1.29569173E-01;
  COFTD[201] = 7.70190083E-04;
  COFTD[202] = -4.74072313E-07;
  COFTD[203] = 9.19600775E-11;
  COFTD[204] = -2.08021803E-01;
  COFTD[205] = 9.72066242E-04;
  COFTD[206] = -4.75227445E-07;
  COFTD[207] = 7.99195234E-11;
  COFTD[208] = 1.29804130E-01;
  COFTD[209] = 7.71586726E-04;
  COFTD[210] = -4.74931984E-07;
  COFTD[211] = 9.21268354E-11;
  COFTD[212] = 1.29319864E-01;
  COFTD[213] = 7.68708134E-04;
  COFTD[214] = -4.73160135E-07;
  COFTD[215] = 9.17831340E-11;
  COFTD[216] = 5.09550260E-02;
  COFTD[217] = 8.02985163E-04;
  COFTD[218] = -4.77858084E-07;
  COFTD[219] = 9.07320518E-11;
  COFTD[220] = 5.09550260E-02;
  COFTD[221] = 8.02985163E-04;
  COFTD[222] = -4.77858084E-07;
  COFTD[223] = 9.07320518E-11;
  COFTD[224] = 5.14507898E-02;
  COFTD[225] = 8.10797759E-04;
  COFTD[226] = -4.82507376E-07;
  COFTD[227] = 9.16148238E-11;
  COFTD[228] = -1.99614660E-01;
  COFTD[229] = 1.03007377E-03;
  COFTD[230] = -5.17081159E-07;
  COFTD[231] = 8.84538307E-11;
  COFTD[232] = -2.00081312E-01;
  COFTD[233] = 1.03248184E-03;
  COFTD[234] = -5.18289971E-07;
  COFTD[235] = 8.86606147E-11;
  COFTD[236] = -1.73975217E-01;
  COFTD[237] = 1.04384505E-03;
  COFTD[238] = -5.40077040E-07;
  COFTD[239] = 9.41587137E-11;
  COFTD[240] = 1.50892863E-01;
  COFTD[241] = 7.27589589E-04;
  COFTD[242] = -4.52538384E-07;
  COFTD[243] = 8.83816508E-11;
  COFTD[244] = -7.15286421E-02;
  COFTD[245] = 1.01983048E-03;
  COFTD[246] = -5.69444246E-07;
  COFTD[247] = 1.03997937E-10;
  COFTD[248] = -3.46376795E-02;
  COFTD[249] = 9.57928232E-04;
  COFTD[250] = -5.45367870E-07;
  COFTD[251] = 1.00777464E-10;
  COFTD[252] = -3.47379202E-02;
  COFTD[253] = 9.60700457E-04;
  COFTD[254] = -5.46946154E-07;
  COFTD[255] = 1.01069112E-10;
  COFTD[256] = -7.71649643E-02;
  COFTD[257] = 1.00164675E-03;
  COFTD[258] = -5.56887364E-07;
  COFTD[259] = 1.01440470E-10;
  COFTD[260] = -7.73448196E-02;
  COFTD[261] = 1.00398138E-03;
  COFTD[262] = -5.58185352E-07;
  COFTD[263] = 1.01676906E-10;
  COFTD[264] = 4.56936451E-02;
  COFTD[265] = 8.95822289E-04;
  COFTD[266] = -5.30583685E-07;
  COFTD[267] = 1.00446875E-10;
  COFTD[268] = -1.84164960E-01;
  COFTD[269] = 1.06060731E-03;
  COFTD[270] = -5.44771649E-07;
  COFTD[271] = 9.45481539E-11;
  COFTD[272] = -1.84372017E-01;
  COFTD[273] = 1.06179976E-03;
  COFTD[274] = -5.45384139E-07;
  COFTD[275] = 9.46544550E-11;
  COFTD[276] = -9.09778309E-02;
  COFTD[277] = 1.03088402E-03;
  COFTD[278] = -5.68975530E-07;
  COFTD[279] = 1.03186652E-10;
  COFTD[280] = -1.98293342E-01;
  COFTD[281] = 1.08091444E-03;
  COFTD[282] = -5.49240195E-07;
  COFTD[283] = 9.46808988E-11;
  COFTD[284] = -2.08522489E-01;
  COFTD[285] = 1.08053550E-03;
  COFTD[286] = -5.42943401E-07;
  COFTD[287] = 9.29357770E-11;
  COFTD[288] = -2.06188260E-01;
  COFTD[289] = 1.08605002E-03;
  COFTD[290] = -5.47764422E-07;
  COFTD[291] = 9.39844176E-11;
  COFTD[292] = -2.32403846E-01;
  COFTD[293] = 1.06112814E-03;
  COFTD[294] = -5.15054884E-07;
  COFTD[295] = 8.62097602E-11;
  COFTD[296] = -2.32446190E-01;
  COFTD[297] = 1.06132147E-03;
  COFTD[298] = -5.15148727E-07;
  COFTD[299] = 8.62254676E-11;
  COFTD[300] = 1.52354011E-01;
  COFTD[301] = 7.25352736E-04;
  COFTD[302] = -4.51450107E-07;
  COFTD[303] = 8.82080871E-11;
}

// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
GET_CRITPARAMS(
  amrex::Real* Tci, amrex::Real* ai, amrex::Real* bi, amrex::Real* acentric_i)
{

  amrex::Real EPS[38];
  amrex::Real SIG[38];
  amrex::Real wt[38];
  amrex::Real avogadro = 6.02214199e23;
  amrex::Real boltzmann = 1.3806503e-16; // we work in CGS
  amrex::Real Rcst = 83.144598;          // in bar [CGS] !

  egtransetEPS(EPS);
  egtransetSIG(SIG);
  get_mw(wt);

  // species 0: POSF10325
  Tci[0] = 1.316 * EPS[0];
  ai[0] = (5.55 * avogadro * avogadro * EPS[0] * boltzmann *
           pow(1e-8 * SIG[0], 3.0)) /
          (wt[0] * wt[0]);
  bi[0] = 0.855 * avogadro * pow(1e-8 * SIG[0], 3.0) / (wt[0]);
  acentric_i[0] = 0.0;

  // species 1: C2H4
  // Imported from NIST
  Tci[1] = 282.340000;
  ai[1] = 1e6 * 0.42748 * Rcst * Rcst * Tci[1] * Tci[1] /
          (28.054000 * 28.054000 * 50.410000);
  bi[1] = 0.08664 * Rcst * Tci[1] / (28.054000 * 50.410000);
  acentric_i[1] = 0.087000;

  // species 2: CH4
  // Imported from NIST
  Tci[2] = 190.560000;
  ai[2] = 1e6 * 0.42748 * Rcst * Rcst * Tci[2] * Tci[2] /
          (16.043030 * 16.043030 * 45.990000);
  bi[2] = 0.08664 * Rcst * Tci[2] / (16.043030 * 45.990000);
  acentric_i[2] = 0.011000;

  // species 3: H2
  // Imported from NIST
  Tci[3] = 33.145000;
  ai[3] = 1e6 * 0.42748 * Rcst * Rcst * Tci[3] * Tci[3] /
          (2.015880 * 2.015880 * 12.964000);
  bi[3] = 0.08664 * Rcst * Tci[3] / (2.015880 * 12.964000);
  acentric_i[3] = -0.219000;

  // species 4: C3H6
  Tci[4] = 1.316 * EPS[4];
  ai[4] = (5.55 * avogadro * avogadro * EPS[4] * boltzmann *
           pow(1e-8 * SIG[4], 3.0)) /
          (wt[4] * wt[4]);
  bi[4] = 0.855 * avogadro * pow(1e-8 * SIG[4], 3.0) / (wt[4]);
  acentric_i[4] = 0.0;

  // species 5: C4H81
  Tci[5] = 1.316 * EPS[5];
  ai[5] = (5.55 * avogadro * avogadro * EPS[5] * boltzmann *
           pow(1e-8 * SIG[5], 3.0)) /
          (wt[5] * wt[5]);
  bi[5] = 0.855 * avogadro * pow(1e-8 * SIG[5], 3.0) / (wt[5]);
  acentric_i[5] = 0.0;

  // species 6: iC4H8
  Tci[6] = 1.316 * EPS[6];
  ai[6] = (5.55 * avogadro * avogadro * EPS[6] * boltzmann *
           pow(1e-8 * SIG[6], 3.0)) /
          (wt[6] * wt[6]);
  bi[6] = 0.855 * avogadro * pow(1e-8 * SIG[6], 3.0) / (wt[6]);
  acentric_i[6] = 0.0;

  // species 7: C6H6
  Tci[7] = 1.316 * EPS[7];
  ai[7] = (5.55 * avogadro * avogadro * EPS[7] * boltzmann *
           pow(1e-8 * SIG[7], 3.0)) /
          (wt[7] * wt[7]);
  bi[7] = 0.855 * avogadro * pow(1e-8 * SIG[7], 3.0) / (wt[7]);
  acentric_i[7] = 0.0;

  // species 8: C6H5CH3
  Tci[8] = 1.316 * EPS[8];
  ai[8] = (5.55 * avogadro * avogadro * EPS[8] * boltzmann *
           pow(1e-8 * SIG[8], 3.0)) /
          (wt[8] * wt[8]);
  bi[8] = 0.855 * avogadro * pow(1e-8 * SIG[8], 3.0) / (wt[8]);
  acentric_i[8] = 0.0;

  // species 9: H
  Tci[9] = 1.316 * EPS[9];
  ai[9] = (5.55 * avogadro * avogadro * EPS[9] * boltzmann *
           pow(1e-8 * SIG[9], 3.0)) /
          (wt[9] * wt[9]);
  bi[9] = 0.855 * avogadro * pow(1e-8 * SIG[9], 3.0) / (wt[9]);
  acentric_i[9] = 0.0;

  // species 10: O
  Tci[10] = 1.316 * EPS[10];
  ai[10] = (5.55 * avogadro * avogadro * EPS[10] * boltzmann *
            pow(1e-8 * SIG[10], 3.0)) /
           (wt[10] * wt[10]);
  bi[10] = 0.855 * avogadro * pow(1e-8 * SIG[10], 3.0) / (wt[10]);
  acentric_i[10] = 0.0;

  // species 11: OH
  Tci[11] = 1.316 * EPS[11];
  ai[11] = (5.55 * avogadro * avogadro * EPS[11] * boltzmann *
            pow(1e-8 * SIG[11], 3.0)) /
           (wt[11] * wt[11]);
  bi[11] = 0.855 * avogadro * pow(1e-8 * SIG[11], 3.0) / (wt[11]);
  acentric_i[11] = 0.0;

  // species 12: HO2
  Tci[12] = 1.316 * EPS[12];
  ai[12] = (5.55 * avogadro * avogadro * EPS[12] * boltzmann *
            pow(1e-8 * SIG[12], 3.0)) /
           (wt[12] * wt[12]);
  bi[12] = 0.855 * avogadro * pow(1e-8 * SIG[12], 3.0) / (wt[12]);
  acentric_i[12] = 0.0;

  // species 13: H2O
  // Imported from NIST
  Tci[13] = 647.096000;
  ai[13] = 1e6 * 0.42748 * Rcst * Rcst * Tci[13] * Tci[13] /
           (18.015340 * 18.015340 * 220.640000);
  bi[13] = 0.08664 * Rcst * Tci[13] / (18.015340 * 220.640000);
  acentric_i[13] = 0.344300;

  // species 14: H2O2
  Tci[14] = 1.316 * EPS[14];
  ai[14] = (5.55 * avogadro * avogadro * EPS[14] * boltzmann *
            pow(1e-8 * SIG[14], 3.0)) /
           (wt[14] * wt[14]);
  bi[14] = 0.855 * avogadro * pow(1e-8 * SIG[14], 3.0) / (wt[14]);
  acentric_i[14] = 0.0;

  // species 15: O2
  // Imported from NIST
  Tci[15] = 154.581000;
  ai[15] = 1e6 * 0.42748 * Rcst * Rcst * Tci[15] * Tci[15] /
           (31.998800 * 31.998800 * 50.430466);
  bi[15] = 0.08664 * Rcst * Tci[15] / (31.998800 * 50.430466);
  acentric_i[15] = 0.022200;

  // species 16: CH2
  Tci[16] = 1.316 * EPS[16];
  ai[16] = (5.55 * avogadro * avogadro * EPS[16] * boltzmann *
            pow(1e-8 * SIG[16], 3.0)) /
           (wt[16] * wt[16]);
  bi[16] = 0.855 * avogadro * pow(1e-8 * SIG[16], 3.0) / (wt[16]);
  acentric_i[16] = 0.0;

  // species 17: CH2*
  Tci[17] = 1.316 * EPS[17];
  ai[17] = (5.55 * avogadro * avogadro * EPS[17] * boltzmann *
            pow(1e-8 * SIG[17], 3.0)) /
           (wt[17] * wt[17]);
  bi[17] = 0.855 * avogadro * pow(1e-8 * SIG[17], 3.0) / (wt[17]);
  acentric_i[17] = 0.0;

  // species 18: CH3
  Tci[18] = 1.316 * EPS[18];
  ai[18] = (5.55 * avogadro * avogadro * EPS[18] * boltzmann *
            pow(1e-8 * SIG[18], 3.0)) /
           (wt[18] * wt[18]);
  bi[18] = 0.855 * avogadro * pow(1e-8 * SIG[18], 3.0) / (wt[18]);
  acentric_i[18] = 0.0;

  // species 19: HCO
  Tci[19] = 1.316 * EPS[19];
  ai[19] = (5.55 * avogadro * avogadro * EPS[19] * boltzmann *
            pow(1e-8 * SIG[19], 3.0)) /
           (wt[19] * wt[19]);
  bi[19] = 0.855 * avogadro * pow(1e-8 * SIG[19], 3.0) / (wt[19]);
  acentric_i[19] = 0.0;

  // species 20: CH2O
  Tci[20] = 1.316 * EPS[20];
  ai[20] = (5.55 * avogadro * avogadro * EPS[20] * boltzmann *
            pow(1e-8 * SIG[20], 3.0)) /
           (wt[20] * wt[20]);
  bi[20] = 0.855 * avogadro * pow(1e-8 * SIG[20], 3.0) / (wt[20]);
  acentric_i[20] = 0.0;

  // species 21: CH3O
  Tci[21] = 1.316 * EPS[21];
  ai[21] = (5.55 * avogadro * avogadro * EPS[21] * boltzmann *
            pow(1e-8 * SIG[21], 3.0)) /
           (wt[21] * wt[21]);
  bi[21] = 0.855 * avogadro * pow(1e-8 * SIG[21], 3.0) / (wt[21]);
  acentric_i[21] = 0.0;

  // species 22: CO
  // Imported from NIST
  Tci[22] = 132.850000;
  ai[22] = 1e6 * 0.42748 * Rcst * Rcst * Tci[22] * Tci[22] /
           (28.010000 * 28.010000 * 34.940000);
  bi[22] = 0.08664 * Rcst * Tci[22] / (28.010000 * 34.940000);
  acentric_i[22] = 0.045000;

  // species 23: CO2
  // Imported from NIST
  Tci[23] = 304.120000;
  ai[23] = 1e6 * 0.42748 * Rcst * Rcst * Tci[23] * Tci[23] /
           (44.009950 * 44.009950 * 73.740000);
  bi[23] = 0.08664 * Rcst * Tci[23] / (44.009950 * 73.740000);
  acentric_i[23] = 0.225000;

  // species 24: C2H2
  // Imported from NIST
  Tci[24] = 308.300000;
  ai[24] = 1e6 * 0.42748 * Rcst * Rcst * Tci[24] * Tci[24] /
           (26.038000 * 26.038000 * 61.140000);
  bi[24] = 0.08664 * Rcst * Tci[24] / (26.038000 * 61.140000);
  acentric_i[24] = 0.189000;

  // species 25: C2H3
  Tci[25] = 1.316 * EPS[25];
  ai[25] = (5.55 * avogadro * avogadro * EPS[25] * boltzmann *
            pow(1e-8 * SIG[25], 3.0)) /
           (wt[25] * wt[25]);
  bi[25] = 0.855 * avogadro * pow(1e-8 * SIG[25], 3.0) / (wt[25]);
  acentric_i[25] = 0.0;

  // species 26: C2H5
  Tci[26] = 1.316 * EPS[26];
  ai[26] = (5.55 * avogadro * avogadro * EPS[26] * boltzmann *
            pow(1e-8 * SIG[26], 3.0)) /
           (wt[26] * wt[26]);
  bi[26] = 0.855 * avogadro * pow(1e-8 * SIG[26], 3.0) / (wt[26]);
  acentric_i[26] = 0.0;

  // species 27: C2H6
  // Imported from NIST
  Tci[27] = 305.320000;
  ai[27] = 1e6 * 0.42748 * Rcst * Rcst * Tci[27] * Tci[27] /
           (30.070120 * 30.070120 * 48.720000);
  bi[27] = 0.08664 * Rcst * Tci[27] / (30.070120 * 48.720000);
  acentric_i[27] = 0.099000;

  // species 28: HCCO
  Tci[28] = 1.316 * EPS[28];
  ai[28] = (5.55 * avogadro * avogadro * EPS[28] * boltzmann *
            pow(1e-8 * SIG[28], 3.0)) /
           (wt[28] * wt[28]);
  bi[28] = 0.855 * avogadro * pow(1e-8 * SIG[28], 3.0) / (wt[28]);
  acentric_i[28] = 0.0;

  // species 29: CH2CO
  Tci[29] = 1.316 * EPS[29];
  ai[29] = (5.55 * avogadro * avogadro * EPS[29] * boltzmann *
            pow(1e-8 * SIG[29], 3.0)) /
           (wt[29] * wt[29]);
  bi[29] = 0.855 * avogadro * pow(1e-8 * SIG[29], 3.0) / (wt[29]);
  acentric_i[29] = 0.0;

  // species 30: CH2CHO
  Tci[30] = 1.316 * EPS[30];
  ai[30] = (5.55 * avogadro * avogadro * EPS[30] * boltzmann *
            pow(1e-8 * SIG[30], 3.0)) /
           (wt[30] * wt[30]);
  bi[30] = 0.855 * avogadro * pow(1e-8 * SIG[30], 3.0) / (wt[30]);
  acentric_i[30] = 0.0;

  // species 31: aC3H5
  Tci[31] = 1.316 * EPS[31];
  ai[31] = (5.55 * avogadro * avogadro * EPS[31] * boltzmann *
            pow(1e-8 * SIG[31], 3.0)) /
           (wt[31] * wt[31]);
  bi[31] = 0.855 * avogadro * pow(1e-8 * SIG[31], 3.0) / (wt[31]);
  acentric_i[31] = 0.0;

  // species 32: C6H5
  Tci[32] = 1.316 * EPS[32];
  ai[32] = (5.55 * avogadro * avogadro * EPS[32] * boltzmann *
            pow(1e-8 * SIG[32], 3.0)) /
           (wt[32] * wt[32]);
  bi[32] = 0.855 * avogadro * pow(1e-8 * SIG[32], 3.0) / (wt[32]);
  acentric_i[32] = 0.0;

  // species 33: C6H5CH2
  Tci[33] = 1.316 * EPS[33];
  ai[33] = (5.55 * avogadro * avogadro * EPS[33] * boltzmann *
            pow(1e-8 * SIG[33], 3.0)) /
           (wt[33] * wt[33]);
  bi[33] = 0.855 * avogadro * pow(1e-8 * SIG[33], 3.0) / (wt[33]);
  acentric_i[33] = 0.0;

  // species 34: C6H4O2
  Tci[34] = 1.316 * EPS[34];
  ai[34] = (5.55 * avogadro * avogadro * EPS[34] * boltzmann *
            pow(1e-8 * SIG[34], 3.0)) /
           (wt[34] * wt[34]);
  bi[34] = 0.855 * avogadro * pow(1e-8 * SIG[34], 3.0) / (wt[34]);
  acentric_i[34] = 0.0;

  // species 35: C6H5CO
  Tci[35] = 1.316 * EPS[35];
  ai[35] = (5.55 * avogadro * avogadro * EPS[35] * boltzmann *
            pow(1e-8 * SIG[35], 3.0)) /
           (wt[35] * wt[35]);
  bi[35] = 0.855 * avogadro * pow(1e-8 * SIG[35], 3.0) / (wt[35]);
  acentric_i[35] = 0.0;

  // species 36: C6H5CHO
  Tci[36] = 1.316 * EPS[36];
  ai[36] = (5.55 * avogadro * avogadro * EPS[36] * boltzmann *
            pow(1e-8 * SIG[36], 3.0)) /
           (wt[36] * wt[36]);
  bi[36] = 0.855 * avogadro * pow(1e-8 * SIG[36], 3.0) / (wt[36]);
  acentric_i[36] = 0.0;

  // species 37: N2
  // Imported from NIST
  Tci[37] = 126.192000;
  ai[37] = 1e6 * 0.42748 * Rcst * Rcst * Tci[37] * Tci[37] /
           (28.013400 * 28.013400 * 33.958000);
  bi[37] = 0.08664 * Rcst * Tci[37] / (28.013400 * 33.958000);
  acentric_i[37] = 0.037200;

  return;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/)
{
  amrex::Abort(
    "sgjsolve_simplified not implemented, choose a different solver ");
}

#endif

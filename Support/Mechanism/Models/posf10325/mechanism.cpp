#include "mechanism.H"
const int rmap[185] = {
  15,  17,  40,  41,  42,  48,  59,  65,  77,  93,  99,  105, 113, 121, 132,
  137, 142, 146, 164, 178, 28,  10,  11,  12,  13,  14,  37,  38,  0,   1,
  2,   3,   4,   5,   6,   7,   8,   9,   16,  18,  19,  20,  21,  22,  23,
  24,  25,  26,  27,  29,  30,  31,  32,  33,  34,  35,  36,  39,  43,  44,
  45,  46,  47,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  60,  61,
  62,  63,  64,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  78,
  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  94,
  95,  96,  97,  98,  100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111,
  112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
  129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 147,
  148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
  163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179,
  180, 181, 182, 183, 184};

// Returns 0-based map of reaction order
void
GET_RMAP(int* _rmap)
{
  for (int j = 0; j < 185; ++j) {
    _rmap[j] = rmap[j];
  }
}

// Returns a count of species in a reaction, and their indices
// and stoichiometric coefficients. (Eq 50)
void
CKINU(int* i, int* nspec, int* ki, int* nu)
{
  const int ns[185] = {
    8, 11, 10, 11, 11, 11, 4, 4, 4, 3, 2, 2, 3, 3, 2, 3, 4, 2, 3, 4, 3, 3, 4, 4,
    4, 4,  4,  4,  3,  4,  4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, 4,
    3, 4,  4,  4,  4,  5,  4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4,
    4, 4,  4,  4,  4,  2,  3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 4, 4,
    4, 4,  3,  3,  4,  4,  4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4, 4,
    4, 3,  4,  4,  4,  4,  4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 5, 3, 4, 4, 4, 4, 3, 4,
    5, 4,  3,  4,  4,  5,  4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 5,
    3, 3,  4,  4,  4,  4,  4, 4, 4, 3, 3, 4, 4, 4, 4, 4, 5};
  const int kiv[2035] = {
    0,  1,  4,  8,  7,  18, 9,  6,  0,  0,  0,  9,  0,  1,  4,  8,  7,  18, 2,
    9,  3,  6,  18, 0,  1,  4,  8,  7,  18, 2,  9,  6,  0,  11, 0,  1,  4,  8,
    7,  18, 2,  9,  13, 6,  15, 0,  1,  4,  8,  7,  18, 2,  9,  12, 6,  12, 0,
    1,  4,  8,  7,  18, 2,  9,  14, 6,  9,  15, 10, 11, 0,  0,  0,  0,  0,  0,
    0,  3,  10, 9,  11, 0,  0,  0,  0,  0,  0,  0,  3,  11, 9,  13, 0,  0,  0,
    0,  0,  0,  0,  11, 13, 10, 0,  0,  0,  0,  0,  0,  0,  0,  9,  3,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  9,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,
    11, 13, 0,  0,  0,  0,  0,  0,  0,  0,  9,  10, 11, 0,  0,  0,  0,  0,  0,
    0,  0,  10, 15, 0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  15, 12, 0,  0,  0,
    0,  0,  0,  0,  0,  3,  15, 9,  12, 0,  0,  0,  0,  0,  0,  0,  11, 14, 0,
    0,  0,  0,  0,  0,  0,  0,  0,  9,  12, 11, 0,  0,  0,  0,  0,  0,  0,  0,
    12, 10, 15, 11, 0,  0,  0,  0,  0,  0,  0,  12, 14, 15, 0,  0,  0,  0,  0,
    0,  0,  0,  12, 14, 15, 0,  0,  0,  0,  0,  0,  0,  0,  12, 11, 13, 15, 0,
    0,  0,  0,  0,  0,  0,  12, 11, 13, 15, 0,  0,  0,  0,  0,  0,  0,  12, 11,
    13, 15, 0,  0,  0,  0,  0,  0,  0,  9,  14, 3,  12, 0,  0,  0,  0,  0,  0,
    0,  9,  14, 13, 11, 0,  0,  0,  0,  0,  0,  0,  14, 11, 13, 12, 0,  0,  0,
    0,  0,  0,  0,  22, 10, 23, 0,  0,  0,  0,  0,  0,  0,  0,  22, 11, 23, 9,
    0,  0,  0,  0,  0,  0,  0,  22, 11, 23, 9,  0,  0,  0,  0,  0,  0,  0,  22,
    15, 23, 10, 0,  0,  0,  0,  0,  0,  0,  22, 12, 23, 11, 0,  0,  0,  0,  0,
    0,  0,  9,  19, 22, 3,  0,  0,  0,  0,  0,  0,  0,  19, 10, 22, 11, 0,  0,
    0,  0,  0,  0,  0,  19, 10, 23, 9,  0,  0,  0,  0,  0,  0,  0,  19, 11, 22,
    13, 0,  0,  0,  0,  0,  0,  0,  19, 22, 9,  0,  0,  0,  0,  0,  0,  0,  0,
    19, 22, 9,  0,  0,  0,  0,  0,  0,  0,  0,  19, 15, 22, 12, 0,  0,  0,  0,
    0,  0,  0,  22, 3,  20, 0,  0,  0,  0,  0,  0,  0,  0,  9,  19, 20, 0,  0,
    0,  0,  0,  0,  0,  0,  16, 9,  18, 0,  0,  0,  0,  0,  0,  0,  0,  16, 10,
    9,  19, 0,  0,  0,  0,  0,  0,  0,  16, 11, 20, 9,  0,  0,  0,  0,  0,  0,
    0,  16, 3,  18, 9,  0,  0,  0,  0,  0,  0,  0,  16, 15, 19, 11, 0,  0,  0,
    0,  0,  0,  0,  16, 15, 23, 9,  0,  0,  0,  0,  0,  0,  0,  16, 22, 29, 0,
    0,  0,  0,  0,  0,  0,  0,  17, 37, 16, 37, 0,  0,  0,  0,  0,  0,  0,  17,
    10, 22, 3,  0,  0,  0,  0,  0,  0,  0,  17, 11, 20, 9,  0,  0,  0,  0,  0,
    0,  0,  17, 3,  18, 9,  0,  0,  0,  0,  0,  0,  0,  17, 15, 22, 9,  11, 0,
    0,  0,  0,  0,  0,  17, 15, 22, 13, 0,  0,  0,  0,  0,  0,  0,  17, 13, 16,
    13, 0,  0,  0,  0,  0,  0,  0,  17, 22, 16, 22, 0,  0,  0,  0,  0,  0,  0,
    17, 23, 16, 23, 0,  0,  0,  0,  0,  0,  0,  17, 23, 20, 22, 0,  0,  0,  0,
    0,  0,  0,  20, 9,  21, 0,  0,  0,  0,  0,  0,  0,  0,  20, 9,  3,  19, 0,
    0,  0,  0,  0,  0,  0,  20, 10, 19, 11, 0,  0,  0,  0,  0,  0,  0,  20, 11,
    13, 19, 0,  0,  0,  0,  0,  0,  0,  20, 15, 19, 12, 0,  0,  0,  0,  0,  0,
    0,  20, 12, 14, 19, 0,  0,  0,  0,  0,  0,  0,  18, 9,  2,  0,  0,  0,  0,
    0,  0,  0,  0,  18, 10, 20, 9,  0,  0,  0,  0,  0,  0,  0,  18, 11, 16, 13,
    0,  0,  0,  0,  0,  0,  0,  18, 11, 17, 13, 0,  0,  0,  0,  0,  0,  0,  18,
    15, 21, 10, 0,  0,  0,  0,  0,  0,  0,  18, 15, 20, 11, 0,  0,  0,  0,  0,
    0,  0,  18, 12, 2,  15, 0,  0,  0,  0,  0,  0,  0,  18, 12, 21, 11, 0,  0,
    0,  0,  0,  0,  0,  18, 14, 2,  12, 0,  0,  0,  0,  0,  0,  0,  18, 19, 2,
    22, 0,  0,  0,  0,  0,  0,  0,  20, 18, 2,  19, 0,  0,  0,  0,  0,  0,  0,
    16, 18, 1,  9,  0,  0,  0,  0,  0,  0,  0,  18, 27, 0,  0,  0,  0,  0,  0,
    0,  0,  0,  18, 26, 9,  0,  0,  0,  0,  0,  0,  0,  0,  18, 28, 1,  22, 0,
    0,  0,  0,  0,  0,  0,  21, 9,  20, 3,  0,  0,  0,  0,  0,  0,  0,  21, 9,
    18, 11, 0,  0,  0,  0,  0,  0,  0,  21, 9,  17, 13, 0,  0,  0,  0,  0,  0,
    0,  21, 11, 20, 13, 0,  0,  0,  0,  0,  0,  0,  21, 15, 20, 12, 0,  0,  0,
    0,  0,  0,  0,  2,  9,  18, 3,  0,  0,  0,  0,  0,  0,  0,  2,  10, 18, 11,
    0,  0,  0,  0,  0,  0,  0,  2,  11, 18, 13, 0,  0,  0,  0,  0,  0,  0,  17,
    2,  18, 0,  0,  0,  0,  0,  0,  0,  0,  9,  28, 17, 22, 0,  0,  0,  0,  0,
    0,  0,  28, 10, 22, 9,  0,  0,  0,  0,  0,  0,  0,  28, 15, 22, 11, 0,  0,
    0,  0,  0,  0,  0,  16, 28, 25, 22, 0,  0,  0,  0,  0,  0,  0,  25, 24, 9,
    0,  0,  0,  0,  0,  0,  0,  0,  24, 10, 16, 22, 0,  0,  0,  0,  0,  0,  0,
    24, 10, 9,  28, 0,  0,  0,  0,  0,  0,  0,  24, 11, 29, 9,  0,  0,  0,  0,
    0,  0,  0,  24, 19, 25, 22, 0,  0,  0,  0,  0,  0,  0,  24, 18, 31, 0,  0,
    0,  0,  0,  0,  0,  0,  29, 9,  30, 0,  0,  0,  0,  0,  0,  0,  0,  29, 9,
    3,  28, 0,  0,  0,  0,  0,  0,  0,  29, 9,  18, 22, 0,  0,  0,  0,  0,  0,
    0,  29, 10, 28, 11, 0,  0,  0,  0,  0,  0,  0,  29, 10, 16, 23, 0,  0,  0,
    0,  0,  0,  0,  29, 11, 13, 28, 0,  0,  0,  0,  0,  0,  0,  25, 9,  1,  0,
    0,  0,  0,  0,  0,  0,  0,  25, 9,  24, 3,  0,  0,  0,  0,  0,  0,  0,  25,
    10, 29, 9,  0,  0,  0,  0,  0,  0,  0,  25, 10, 18, 22, 0,  0,  0,  0,  0,
    0,  0,  25, 11, 24, 13, 0,  0,  0,  0,  0,  0,  0,  25, 15, 24, 12, 0,  0,
    0,  0,  0,  0,  0,  25, 15, 30, 10, 0,  0,  0,  0,  0,  0,  0,  25, 15, 20,
    19, 0,  0,  0,  0,  0,  0,  0,  25, 18, 4,  0,  0,  0,  0,  0,  0,  0,  0,
    25, 18, 9,  31, 0,  0,  0,  0,  0,  0,  0,  30, 18, 22, 0,  0,  0,  0,  0,
    0,  0,  0,  30, 9,  18, 19, 0,  0,  0,  0,  0,  0,  0,  30, 9,  29, 3,  0,
    0,  0,  0,  0,  0,  0,  30, 10, 29, 11, 0,  0,  0,  0,  0,  0,  0,  30, 11,
    29, 13, 0,  0,  0,  0,  0,  0,  0,  30, 15, 29, 12, 0,  0,  0,  0,  0,  0,
    0,  1,  9,  26, 0,  0,  0,  0,  0,  0,  0,  0,  1,  9,  25, 3,  0,  0,  0,
    0,  0,  0,  0,  1,  10, 25, 11, 0,  0,  0,  0,  0,  0,  0,  1,  10, 18, 19,
    0,  0,  0,  0,  0,  0,  0,  1,  10, 16, 20, 0,  0,  0,  0,  0,  0,  0,  1,
    11, 25, 13, 0,  0,  0,  0,  0,  0,  0,  1,  19, 26, 22, 0,  0,  0,  0,  0,
    0,  0,  1,  16, 9,  31, 0,  0,  0,  0,  0,  0,  0,  1,  17, 9,  31, 0,  0,
    0,  0,  0,  0,  0,  1,  18, 25, 2,  0,  0,  0,  0,  0,  0,  0,  1,  15, 25,
    12, 0,  0,  0,  0,  0,  0,  0,  26, 9,  27, 0,  0,  0,  0,  0,  0,  0,  0,
    26, 9,  1,  3,  0,  0,  0,  0,  0,  0,  0,  26, 10, 20, 18, 0,  0,  0,  0,
    0,  0,  0,  26, 15, 1,  12, 0,  0,  0,  0,  0,  0,  0,  26, 12, 20, 18, 11,
    0,  0,  0,  0,  0,  0,  25, 26, 5,  0,  0,  0,  0,  0,  0,  0,  0,  27, 9,
    26, 3,  0,  0,  0,  0,  0,  0,  0,  27, 10, 26, 11, 0,  0,  0,  0,  0,  0,
    0,  27, 11, 26, 13, 0,  0,  0,  0,  0,  0,  0,  27, 18, 26, 2,  0,  0,  0,
    0,  0,  0,  0,  9,  31, 4,  0,  0,  0,  0,  0,  0,  0,  0,  12, 31, 4,  15,
    0,  0,  0,  0,  0,  0,  0,  12, 31, 25, 20, 11, 0,  0,  0,  0,  0,  0,  19,
    31, 4,  22, 0,  0,  0,  0,  0,  0,  0,  18, 31, 5,  0,  0,  0,  0,  0,  0,
    0,  0,  4,  9,  1,  18, 0,  0,  0,  0,  0,  0,  0,  4,  9,  3,  31, 0,  0,
    0,  0,  0,  0,  0,  4,  10, 29, 18, 9,  0,  0,  0,  0,  0,  0,  4,  10, 26,
    19, 0,  0,  0,  0,  0,  0,  0,  4,  10, 11, 31, 0,  0,  0,  0,  0,  0,  0,
    4,  11, 13, 31, 0,  0,  0,  0,  0,  0,  0,  4,  18, 2,  31, 0,  0,  0,  0,
    0,  0,  0,  5,  9,  1,  26, 0,  0,  0,  0,  0,  0,  0,  5,  9,  4,  18, 0,
    0,  0,  0,  0,  0,  0,  9,  6,  4,  18, 0,  0,  0,  0,  0,  0,  0,  10, 6,
    29, 18, 0,  0,  0,  0,  0,  0,  0,  32, 18, 8,  0,  0,  0,  0,  0,  0,  0,
    0,  8,  15, 33, 12, 0,  0,  0,  0,  0,  0,  0,  8,  11, 33, 13, 0,  0,  0,
    0,  0,  0,  0,  8,  9,  33, 3,  0,  0,  0,  0,  0,  0,  0,  8,  9,  7,  18,
    0,  0,  0,  0,  0,  0,  0,  8,  18, 33, 2,  0,  0,  0,  0,  0,  0,  0,  33,
    9,  8,  0,  0,  0,  0,  0,  0,  0,  0,  33, 9,  32, 18, 0,  0,  0,  0,  0,
    0,  0,  33, 10, 36, 9,  0,  0,  0,  0,  0,  0,  0,  33, 12, 36, 9,  11, 0,
    0,  0,  0,  0,  0,  32, 19, 36, 0,  0,  0,  0,  0,  0,  0,  0,  36, 35, 9,
    0,  0,  0,  0,  0,  0,  0,  0,  36, 15, 35, 12, 0,  0,  0,  0,  0,  0,  0,
    36, 11, 35, 13, 0,  0,  0,  0,  0,  0,  0,  36, 9,  35, 3,  0,  0,  0,  0,
    0,  0,  0,  36, 9,  7,  19, 0,  0,  0,  0,  0,  0,  0,  36, 10, 35, 11, 0,
    0,  0,  0,  0,  0,  0,  36, 18, 35, 2,  0,  0,  0,  0,  0,  0,  0,  35, 14,
    36, 12, 0,  0,  0,  0,  0,  0,  0,  35, 32, 22, 0,  0,  0,  0,  0,  0,  0,
    0,  32, 9,  7,  0,  0,  0,  0,  0,  0,  0,  0,  7,  11, 32, 13, 0,  0,  0,
    0,  0,  0,  0,  32, 3,  7,  9,  0,  0,  0,  0,  0,  0,  0,  32, 15, 34, 9,
    0,  0,  0,  0,  0,  0,  0,  32, 12, 7,  15, 0,  0,  0,  0,  0,  0,  0,  32,
    2,  7,  18, 0,  0,  0,  0,  0,  0,  0,  34, 10, 24, 29, 22, 0,  0,  0,  0,
    0,  0};
  const int nuv[2035] = {
    -1, 2,  0, 0, 0, 1, 1, 0, 0, 0, 0, -1, -1, 2, 0, 0, 0, 0, 0, 0, 1, 0,
    -1, -1, 2, 0, 0, 0, 0, 1, 0, 0, 0, -1, -1, 2, 0, 0, 0, 0, 0, 0, 1, 0,
    -1, -1, 2, 0, 0, 0, 0, 0, 0, 1, 0, -1, -1, 2, 0, 0, 0, 0, 0, 0, 1, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -2, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, -2, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 2, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -2, 1,  0, 0, 0, 0, 0, 0, 0, 0, 0,
    -2, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 2, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 2, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 2, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, 1,  1, 0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, 1, 1, 2, 0, 0, 0, 0, 0, 0};
  if (*i < 1) {
    // Return max num species per reaction
    *nspec = 11;
  } else {
    if (*i > 185) {
      *nspec = -1;
    } else {
      *nspec = ns[*i - 1];
      for (int j = 0; j < *nspec; ++j) {
        ki[j] = kiv[(*i - 1) * 11 + j] + 1;
        nu[j] = nuv[(*i - 1) * 11 + j];
      }
    }
  }
}

// Returns the progress rates of each reactions
// Given P, T, and mole fractions
void
CKKFKR(
  amrex::Real* P,
  amrex::Real* T,
  amrex::Real* x,
  amrex::Real* q_f,
  amrex::Real* q_r)
{
  int id;            // loop counter
  amrex::Real c[38]; // temporary storage
  amrex::Real PORT =
    1e6 * (*P) /
    (8.31446261815324e+07 * (*T)); // 1e6 * P/RT so c goes to SI units

  // Compute conversion, see Eq 10
  for (id = 0; id < 38; ++id) {
    c[id] = x[id] * PORT;
  }

  // convert to chemkin units
  progressRateFR(q_f, q_r, c, *T);

  // convert to chemkin units
  for (id = 0; id < 185; ++id) {
    q_f[id] *= 1.0e-6;
    q_r[id] *= 1.0e-6;
  }
}

// compute the progress rate for each reaction
// USES progressRate : todo switch to GPU
void
progressRateFR(
  amrex::Real* q_f, amrex::Real* q_r, amrex::Real* sc, amrex::Real T)
{
  const amrex::Real tc[5] = {
    log(T), T, T * T, T * T * T, T * T * T * T}; // temperature cache
  amrex::Real invT = 1.0 / tc[1];
  // compute the Gibbs free energy
  amrex::Real g_RT[38];
  gibbs(g_RT, tc);

  amrex::Real sc_qss[1];
  amrex::Real kf_qss[0], qf_qss[0], qr_qss[0];
  comp_qfqr(q_f, q_r, sc, sc_qss, tc, invT);

  return;
}

// save atomic weights into array
void
atomicWeight(amrex::Real* awt)
{
  awt[0] = 15.999000; // O
  awt[1] = 1.008000;  // H
  awt[2] = 12.011000; // C
  awt[3] = 14.007000; // N
  awt[4] = 39.950000; // Ar
}

// get atomic weight for all elements
void
CKAWT(amrex::Real* awt)
{
  atomicWeight(awt);
}

// Returns the elemental composition
// of the speciesi (mdim is num of elements)
void
CKNCF(int* ncf)
{
  int id; // loop counter
  int kd = 5;
  // Zero ncf
  for (id = 0; id < kd * 38; ++id) {
    ncf[id] = 0;
  }

  // POSF10325
  ncf[0 * kd + 2] = 11; // C
  ncf[0 * kd + 1] = 22; // H

  // C2H4
  ncf[1 * kd + 2] = 2; // C
  ncf[1 * kd + 1] = 4; // H

  // CH4
  ncf[2 * kd + 2] = 1; // C
  ncf[2 * kd + 1] = 4; // H

  // H2
  ncf[3 * kd + 1] = 2; // H

  // C3H6
  ncf[4 * kd + 2] = 3; // C
  ncf[4 * kd + 1] = 6; // H

  // C4H81
  ncf[5 * kd + 2] = 4; // C
  ncf[5 * kd + 1] = 8; // H

  // iC4H8
  ncf[6 * kd + 2] = 4; // C
  ncf[6 * kd + 1] = 8; // H

  // C6H6
  ncf[7 * kd + 2] = 6; // C
  ncf[7 * kd + 1] = 6; // H

  // C6H5CH3
  ncf[8 * kd + 2] = 7; // C
  ncf[8 * kd + 1] = 8; // H

  // H
  ncf[9 * kd + 1] = 1; // H

  // O
  ncf[10 * kd + 0] = 1; // O

  // OH
  ncf[11 * kd + 1] = 1; // H
  ncf[11 * kd + 0] = 1; // O

  // HO2
  ncf[12 * kd + 1] = 1; // H
  ncf[12 * kd + 0] = 2; // O

  // H2O
  ncf[13 * kd + 1] = 2; // H
  ncf[13 * kd + 0] = 1; // O

  // H2O2
  ncf[14 * kd + 1] = 2; // H
  ncf[14 * kd + 0] = 2; // O

  // O2
  ncf[15 * kd + 0] = 2; // O

  // CH2
  ncf[16 * kd + 2] = 1; // C
  ncf[16 * kd + 1] = 2; // H

  // CH2*
  ncf[17 * kd + 2] = 1; // C
  ncf[17 * kd + 1] = 2; // H

  // CH3
  ncf[18 * kd + 2] = 1; // C
  ncf[18 * kd + 1] = 3; // H

  // HCO
  ncf[19 * kd + 2] = 1; // C
  ncf[19 * kd + 1] = 1; // H
  ncf[19 * kd + 0] = 1; // O

  // CH2O
  ncf[20 * kd + 2] = 1; // C
  ncf[20 * kd + 1] = 2; // H
  ncf[20 * kd + 0] = 1; // O

  // CH3O
  ncf[21 * kd + 2] = 1; // C
  ncf[21 * kd + 1] = 3; // H
  ncf[21 * kd + 0] = 1; // O

  // CO
  ncf[22 * kd + 2] = 1; // C
  ncf[22 * kd + 0] = 1; // O

  // CO2
  ncf[23 * kd + 2] = 1; // C
  ncf[23 * kd + 0] = 2; // O

  // C2H2
  ncf[24 * kd + 2] = 2; // C
  ncf[24 * kd + 1] = 2; // H

  // C2H3
  ncf[25 * kd + 2] = 2; // C
  ncf[25 * kd + 1] = 3; // H

  // C2H5
  ncf[26 * kd + 2] = 2; // C
  ncf[26 * kd + 1] = 5; // H

  // C2H6
  ncf[27 * kd + 2] = 2; // C
  ncf[27 * kd + 1] = 6; // H

  // HCCO
  ncf[28 * kd + 2] = 2; // C
  ncf[28 * kd + 1] = 1; // H
  ncf[28 * kd + 0] = 1; // O

  // CH2CO
  ncf[29 * kd + 2] = 2; // C
  ncf[29 * kd + 1] = 2; // H
  ncf[29 * kd + 0] = 1; // O

  // CH2CHO
  ncf[30 * kd + 2] = 2; // C
  ncf[30 * kd + 1] = 3; // H
  ncf[30 * kd + 0] = 1; // O

  // aC3H5
  ncf[31 * kd + 2] = 3; // C
  ncf[31 * kd + 1] = 5; // H

  // C6H5
  ncf[32 * kd + 2] = 6; // C
  ncf[32 * kd + 1] = 5; // H

  // C6H5CH2
  ncf[33 * kd + 2] = 7; // C
  ncf[33 * kd + 1] = 7; // H

  // C6H4O2
  ncf[34 * kd + 2] = 6; // C
  ncf[34 * kd + 1] = 4; // H
  ncf[34 * kd + 0] = 2; // O

  // C6H5CO
  ncf[35 * kd + 2] = 7; // C
  ncf[35 * kd + 1] = 5; // H
  ncf[35 * kd + 0] = 1; // O

  // C6H5CHO
  ncf[36 * kd + 2] = 7; // C
  ncf[36 * kd + 1] = 6; // H
  ncf[36 * kd + 0] = 1; // O

  // N2
  ncf[37 * kd + 3] = 2; // N
}

// Returns the vector of strings of element names
void
CKSYME_STR(amrex::Vector<std::string>& ename)
{
  ename.resize(5);
  ename[0] = "O";
  ename[1] = "H";
  ename[2] = "C";
  ename[3] = "N";
  ename[4] = "Ar";
}

// Returns the vector of strings of species names
void
CKSYMS_STR(amrex::Vector<std::string>& kname)
{
  kname.resize(38);
  kname[0] = "POSF10325";
  kname[1] = "C2H4";
  kname[2] = "CH4";
  kname[3] = "H2";
  kname[4] = "C3H6";
  kname[5] = "C4H81";
  kname[6] = "iC4H8";
  kname[7] = "C6H6";
  kname[8] = "C6H5CH3";
  kname[9] = "H";
  kname[10] = "O";
  kname[11] = "OH";
  kname[12] = "HO2";
  kname[13] = "H2O";
  kname[14] = "H2O2";
  kname[15] = "O2";
  kname[16] = "CH2";
  kname[17] = "CH2*";
  kname[18] = "CH3";
  kname[19] = "HCO";
  kname[20] = "CH2O";
  kname[21] = "CH3O";
  kname[22] = "CO";
  kname[23] = "CO2";
  kname[24] = "C2H2";
  kname[25] = "C2H3";
  kname[26] = "C2H5";
  kname[27] = "C2H6";
  kname[28] = "HCCO";
  kname[29] = "CH2CO";
  kname[30] = "CH2CHO";
  kname[31] = "aC3H5";
  kname[32] = "C6H5";
  kname[33] = "C6H5CH2";
  kname[34] = "C6H4O2";
  kname[35] = "C6H5CO";
  kname[36] = "C6H5CHO";
  kname[37] = "N2";
}

// compute the sparsity pattern of the chemistry Jacobian
void
SPARSITY_INFO(int* nJdata, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 1521> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 38> conc = {0.0};
  for (int n = 0; n < 38; n++) {
    conc[n] = 1.0 / 38.000000;
  }
  aJacobian(&Jac[0], &conc[0], 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 39; k++) {
    for (int l = 0; l < 39; l++) {
      if (Jac[39 * k + l] != 0.0) {
        nJdata_tmp = nJdata_tmp + 1;
      }
    }
  }

  *nJdata = NCELLS * nJdata_tmp;
}

// compute the sparsity pattern of the system Jacobian
void
SPARSITY_INFO_SYST(int* nJdata, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 1521> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 38> conc = {0.0};
  for (int n = 0; n < 38; n++) {
    conc[n] = 1.0 / 38.000000;
  }
  aJacobian(&Jac[0], &conc[0], 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 39; k++) {
    for (int l = 0; l < 39; l++) {
      if (k == l) {
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[39 * k + l] != 0.0) {
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
  }

  *nJdata = NCELLS * nJdata_tmp;
}

// compute the sparsity pattern of the simplified (for preconditioning) system
// Jacobian
void
SPARSITY_INFO_SYST_SIMPLIFIED(int* nJdata, const int* consP)
{
  amrex::GpuArray<amrex::Real, 1521> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 38> conc = {0.0};
  for (int n = 0; n < 38; n++) {
    conc[n] = 1.0 / 38.000000;
  }
  aJacobian_precond(&Jac[0], &conc[0], 1500.0, *consP);

  int nJdata_tmp = 0;
  for (int k = 0; k < 39; k++) {
    for (int l = 0; l < 39; l++) {
      if (k == l) {
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[39 * k + l] != 0.0) {
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
  }

  nJdata[0] = nJdata_tmp;
}

// compute the sparsity pattern of the chemistry Jacobian in CSC format -- base
// 0
void
SPARSITY_PREPROC_CSC(int* rowVals, int* colPtrs, const int* consP, int NCELLS)
{
  amrex::GpuArray<amrex::Real, 1521> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 38> conc = {0.0};
  for (int n = 0; n < 38; n++) {
    conc[n] = 1.0 / 38.000000;
  }
  aJacobian(&Jac[0], &conc[0], 1500.0, *consP);

  colPtrs[0] = 0;
  int nJdata_tmp = 0;
  for (int nc = 0; nc < NCELLS; nc++) {
    int offset_row = nc * 39;
    int offset_col = nc * 39;
    for (int k = 0; k < 39; k++) {
      for (int l = 0; l < 39; l++) {
        if (Jac[39 * k + l] != 0.0) {
          rowVals[nJdata_tmp] = l + offset_row;
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
      colPtrs[offset_col + (k + 1)] = nJdata_tmp;
    }
  }
}

// compute the sparsity pattern of the chemistry Jacobian in CSR format -- base
// 0
void
SPARSITY_PREPROC_CSR(
  int* colVals, int* rowPtrs, const int* consP, int NCELLS, int base)
{
  amrex::GpuArray<amrex::Real, 1521> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 38> conc = {0.0};
  for (int n = 0; n < 38; n++) {
    conc[n] = 1.0 / 38.000000;
  }
  aJacobian(&Jac[0], &conc[0], 1500.0, *consP);

  if (base == 1) {
    rowPtrs[0] = 1;
    int nJdata_tmp = 1;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 39;
      for (int l = 0; l < 39; l++) {
        for (int k = 0; k < 39; k++) {
          if (Jac[39 * k + l] != 0.0) {
            colVals[nJdata_tmp - 1] = k + 1 + offset;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
        rowPtrs[offset + (l + 1)] = nJdata_tmp;
      }
    }
  } else {
    rowPtrs[0] = 0;
    int nJdata_tmp = 0;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 39;
      for (int l = 0; l < 39; l++) {
        for (int k = 0; k < 39; k++) {
          if (Jac[39 * k + l] != 0.0) {
            colVals[nJdata_tmp] = k + offset;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
        rowPtrs[offset + (l + 1)] = nJdata_tmp;
      }
    }
  }
}

// compute the sparsity pattern of the system Jacobian
// CSR format BASE is user choice
void
SPARSITY_PREPROC_SYST_CSR(
  int* colVals, int* rowPtr, const int* consP, int NCELLS, int base)
{
  amrex::GpuArray<amrex::Real, 1521> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 38> conc = {0.0};
  for (int n = 0; n < 38; n++) {
    conc[n] = 1.0 / 38.000000;
  }
  aJacobian(&Jac[0], &conc[0], 1500.0, *consP);

  if (base == 1) {
    rowPtr[0] = 1;
    int nJdata_tmp = 1;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 39;
      for (int l = 0; l < 39; l++) {
        for (int k = 0; k < 39; k++) {
          if (k == l) {
            colVals[nJdata_tmp - 1] = l + 1 + offset;
            nJdata_tmp = nJdata_tmp + 1;
          } else {
            if (Jac[39 * k + l] != 0.0) {
              colVals[nJdata_tmp - 1] = k + 1 + offset;
              nJdata_tmp = nJdata_tmp + 1;
            }
          }
        }
        rowPtr[offset + (l + 1)] = nJdata_tmp;
      }
    }
  } else {
    rowPtr[0] = 0;
    int nJdata_tmp = 0;
    for (int nc = 0; nc < NCELLS; nc++) {
      int offset = nc * 39;
      for (int l = 0; l < 39; l++) {
        for (int k = 0; k < 39; k++) {
          if (k == l) {
            colVals[nJdata_tmp] = l + offset;
            nJdata_tmp = nJdata_tmp + 1;
          } else {
            if (Jac[39 * k + l] != 0.0) {
              colVals[nJdata_tmp] = k + offset;
              nJdata_tmp = nJdata_tmp + 1;
            }
          }
        }
        rowPtr[offset + (l + 1)] = nJdata_tmp;
      }
    }
  }
}

// compute the sparsity pattern of the simplified (for precond) system Jacobian
// on CPU BASE 0
void
SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(
  int* rowVals, int* colPtrs, int* indx, const int* consP)
{
  amrex::GpuArray<amrex::Real, 1521> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 38> conc = {0.0};
  for (int n = 0; n < 38; n++) {
    conc[n] = 1.0 / 38.000000;
  }
  aJacobian_precond(&Jac[0], &conc[0], 1500.0, *consP);

  colPtrs[0] = 0;
  int nJdata_tmp = 0;
  for (int k = 0; k < 39; k++) {
    for (int l = 0; l < 39; l++) {
      if (k == l) {
        rowVals[nJdata_tmp] = l;
        indx[nJdata_tmp] = 39 * k + l;
        nJdata_tmp = nJdata_tmp + 1;
      } else {
        if (Jac[39 * k + l] != 0.0) {
          rowVals[nJdata_tmp] = l;
          indx[nJdata_tmp] = 39 * k + l;
          nJdata_tmp = nJdata_tmp + 1;
        }
      }
    }
    colPtrs[k + 1] = nJdata_tmp;
  }
}

// compute the sparsity pattern of the simplified (for precond) system Jacobian
// CSR format BASE is under choice
void
SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(
  int* colVals, int* rowPtr, const int* consP, int base)
{
  amrex::GpuArray<amrex::Real, 1521> Jac = {0.0};
  amrex::GpuArray<amrex::Real, 38> conc = {0.0};
  for (int n = 0; n < 38; n++) {
    conc[n] = 1.0 / 38.000000;
  }
  aJacobian_precond(&Jac[0], &conc[0], 1500.0, *consP);

  if (base == 1) {
    rowPtr[0] = 1;
    int nJdata_tmp = 1;
    for (int l = 0; l < 39; l++) {
      for (int k = 0; k < 39; k++) {
        if (k == l) {
          colVals[nJdata_tmp - 1] = l + 1;
          nJdata_tmp = nJdata_tmp + 1;
        } else {
          if (Jac[39 * k + l] != 0.0) {
            colVals[nJdata_tmp - 1] = k + 1;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
      }
      rowPtr[l + 1] = nJdata_tmp;
    }
  } else {
    rowPtr[0] = 0;
    int nJdata_tmp = 0;
    for (int l = 0; l < 39; l++) {
      for (int k = 0; k < 39; k++) {
        if (k == l) {
          colVals[nJdata_tmp] = l;
          nJdata_tmp = nJdata_tmp + 1;
        } else {
          if (Jac[39 * k + l] != 0.0) {
            colVals[nJdata_tmp] = k;
            nJdata_tmp = nJdata_tmp + 1;
          }
        }
      }
      rowPtr[l + 1] = nJdata_tmp;
    }
  }
}
